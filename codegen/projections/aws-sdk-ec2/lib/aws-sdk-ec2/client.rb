# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require_relative 'middleware/request_id'

module AWS::Ec2
  # An API client for AmazonEC2
  # See {#initialize} for a full list of supported configuration options
  # <fullname>Amazon Elastic Compute Cloud</fullname>
  #          <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the Amazon Web Services Cloud.
  #           Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications
  #           faster. Amazon Virtual Private Cloud (Amazon VPC) enables you to provision a logically isolated section of the
  #           Amazon Web Services Cloud where you can launch Amazon Web Services resources in a virtual network that you've defined. Amazon Elastic Block Store
  #           (Amazon EBS) provides block level storage volumes for use with EC2 instances. EBS volumes are highly available
  #           and reliable storage volumes that can be attached to any running instance and used like a hard drive.</p>
  #          <p>To learn more, see the following resources:</p>
  #          <ul>
  #             <li>
  #                <p>Amazon EC2: <a href="http://aws.amazon.com/ec2">AmazonEC2 product page</a>, <a href="http://aws.amazon.com/documentation/ec2">Amazon EC2 documentation</a>
  #                </p>
  #             </li>
  #             <li>
  #                <p>Amazon EBS: <a href="http://aws.amazon.com/ebs">Amazon EBS product page</a>, <a href="http://aws.amazon.com/documentation/ebs">Amazon EBS documentation</a>
  #                </p>
  #             </li>
  #             <li>
  #                <p>Amazon VPC: <a href="http://aws.amazon.com/vpc">Amazon VPC product page</a>, <a href="http://aws.amazon.com/documentation/vpc">Amazon VPC documentation</a>
  #                </p>
  #             </li>
  #             <li>
  #                <p>Amazon Web Services VPN: <a href="http://aws.amazon.com/vpn">Amazon Web Services VPN product page</a>, <a href="http://aws.amazon.com/documentation/vpn">Amazon Web Services VPN documentation</a>
  #                </p>
  #             </li>
  #          </ul>
  #
  class Client
    include Hearth::ClientStubs

    @middleware = Hearth::MiddlewareBuilder.new

    def self.middleware
      @middleware
    end

    # @overload initialize(options)
    # @param [Hash] options
    # @option options [Boolean] :disable_host_prefix (false)
    #   When `true`, does not perform host prefix injection using @endpoint's hostPrefix property.
    #
    # @option options [string] :endpoint
    #   Endpoint of the service
    #
    # @option options [bool] :http_wire_trace (false)
    #   Enable debug wire trace on http requests.
    #
    # @option options [symbol] :log_level (:info)
    #   Default log level to use
    #
    # @option options [Logger] :logger (stdout)
    #   Logger to use for output
    #
    # @option options [MiddlewareBuilder] :middleware
    #   Additional Middleware to be applied for every operation
    #
    # @option options [Bool] :stub_responses (false)
    #   Enable response stubbing. See documentation for {#stub_responses}
    #
    # @option options [Boolean] :validate_input (true)
    #   When `true`, request parameters are validated using the modeled shapes.
    #
    def initialize(options = {})
      @disable_host_prefix = options.fetch(:disable_host_prefix, false)
      @endpoint = options[:endpoint]
      @http_wire_trace = options.fetch(:http_wire_trace, false)
      @log_level = options.fetch(:log_level, :info)
      @logger = options.fetch(:logger, Logger.new($stdout, level: @log_level))
      @middleware = Hearth::MiddlewareBuilder.new(options[:middleware])
      @stub_responses = options.fetch(:stub_responses, false)
      @stubs = Hearth::Stubbing::Stubs.new
      @validate_input = options.fetch(:validate_input, true)

    end

    # <p>Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
    #
    # @param [Hash] params
    #   See {Types::AcceptReservedInstancesExchangeQuoteInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :reserved_instance_ids
    #   <p>The IDs of the Convertible Reserved Instances to exchange for another Convertible
    #               Reserved Instance of the same or higher value.</p>
    #
    # @option params [Array<TargetConfigurationRequest>] :target_configurations
    #   <p>The configuration of the target Convertible Reserved Instance to exchange for your
    #               current Convertible Reserved Instances.</p>
    #
    # @return [Types::AcceptReservedInstancesExchangeQuoteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.accept_reserved_instances_exchange_quote(
    #     dry_run: false,
    #     reserved_instance_ids: [
    #       'member'
    #     ], # required
    #     target_configurations: [
    #       {
    #         instance_count: 1,
    #         offering_id: 'OfferingId' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AcceptReservedInstancesExchangeQuoteOutput
    #   resp.data.exchange_id #=> String
    #
    def accept_reserved_instances_exchange_quote(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AcceptReservedInstancesExchangeQuoteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AcceptReservedInstancesExchangeQuoteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AcceptReservedInstancesExchangeQuote
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AcceptReservedInstancesExchangeQuote
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AcceptReservedInstancesExchangeQuote,
        params_class: Params::AcceptReservedInstancesExchangeQuoteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :accept_reserved_instances_exchange_quote
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Accepts a request to associate subnets with a transit gateway multicast domain.</p>
    #
    # @param [Hash] params
    #   See {Types::AcceptTransitGatewayMulticastDomainAssociationsInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the transit gateway attachment.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>The IDs of the subnets to associate with the transit gateway multicast domain.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AcceptTransitGatewayMulticastDomainAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.accept_transit_gateway_multicast_domain_associations(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AcceptTransitGatewayMulticastDomainAssociationsOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    #
    def accept_transit_gateway_multicast_domain_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AcceptTransitGatewayMulticastDomainAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AcceptTransitGatewayMulticastDomainAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AcceptTransitGatewayMulticastDomainAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AcceptTransitGatewayMulticastDomainAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AcceptTransitGatewayMulticastDomainAssociations,
        params_class: Params::AcceptTransitGatewayMulticastDomainAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :accept_transit_gateway_multicast_domain_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Accepts a transit gateway peering attachment request. The peering attachment must be
    #             in the <code>pendingAcceptance</code> state.</p>
    #
    # @param [Hash] params
    #   See {Types::AcceptTransitGatewayPeeringAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the transit gateway attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AcceptTransitGatewayPeeringAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.accept_transit_gateway_peering_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AcceptTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    #
    def accept_transit_gateway_peering_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AcceptTransitGatewayPeeringAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AcceptTransitGatewayPeeringAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AcceptTransitGatewayPeeringAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AcceptTransitGatewayPeeringAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AcceptTransitGatewayPeeringAttachment,
        params_class: Params::AcceptTransitGatewayPeeringAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :accept_transit_gateway_peering_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Accepts a request to attach a VPC to a transit gateway.</p>
    #          <p>The VPC attachment must be in the <code>pendingAcceptance</code> state.
    #          Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests.
    #          Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
    #
    # @param [Hash] params
    #   See {Types::AcceptTransitGatewayVpcAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AcceptTransitGatewayVpcAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.accept_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AcceptTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    #
    def accept_transit_gateway_vpc_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AcceptTransitGatewayVpcAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AcceptTransitGatewayVpcAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AcceptTransitGatewayVpcAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AcceptTransitGatewayVpcAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AcceptTransitGatewayVpcAttachment,
        params_class: Params::AcceptTransitGatewayVpcAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :accept_transit_gateway_vpc_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Accepts one or more interface VPC endpoint connection requests to your VPC endpoint
    #             service.</p>
    #
    # @param [Hash] params
    #   See {Types::AcceptVpcEndpointConnectionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the VPC endpoint service.</p>
    #
    # @option params [Array<String>] :vpc_endpoint_ids
    #   <p>The IDs of one or more interface VPC endpoints.</p>
    #
    # @return [Types::AcceptVpcEndpointConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.accept_vpc_endpoint_connections(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     vpc_endpoint_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AcceptVpcEndpointConnectionsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def accept_vpc_endpoint_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AcceptVpcEndpointConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AcceptVpcEndpointConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AcceptVpcEndpointConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AcceptVpcEndpointConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AcceptVpcEndpointConnections,
        params_class: Params::AcceptVpcEndpointConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :accept_vpc_endpoint_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must
    #       be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC.
    #       Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC
    #       peering connection requests.</p>
    #   	      <p>For an inter-Region VPC peering connection request, you must accept the VPC peering
    #       connection in the Region of the accepter VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::AcceptVpcPeeringConnectionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_peering_connection_id
    #   <p>The ID of the VPC peering connection. You must specify this parameter in the
    #   			request.</p>
    #
    # @return [Types::AcceptVpcPeeringConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.accept_vpc_peering_connection(
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AcceptVpcPeeringConnectionOutput
    #   resp.data.vpc_peering_connection #=> Types::VpcPeeringConnection
    #   resp.data.vpc_peering_connection.accepter_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set #=> Array<Ipv6CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0] #=> Types::Ipv6CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set #=> Array<CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0] #=> Types::CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0].cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.owner_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options #=> Types::VpcPeeringConnectionOptionsDescription
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.vpc_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.region #=> String
    #   resp.data.vpc_peering_connection.expiration_time #=> Time
    #   resp.data.vpc_peering_connection.requester_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.status #=> Types::VpcPeeringConnectionStateReason
    #   resp.data.vpc_peering_connection.status.code #=> String, one of ["initiating-request", "pending-acceptance", "active", "deleted", "rejected", "failed", "expired", "provisioning", "deleting"]
    #   resp.data.vpc_peering_connection.status.message #=> String
    #   resp.data.vpc_peering_connection.tags #=> Array<Tag>
    #   resp.data.vpc_peering_connection.tags[0] #=> Types::Tag
    #   resp.data.vpc_peering_connection.tags[0].key #=> String
    #   resp.data.vpc_peering_connection.tags[0].value #=> String
    #   resp.data.vpc_peering_connection.vpc_peering_connection_id #=> String
    #
    def accept_vpc_peering_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AcceptVpcPeeringConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AcceptVpcPeeringConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AcceptVpcPeeringConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AcceptVpcPeeringConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AcceptVpcPeeringConnection,
        params_class: Params::AcceptVpcPeeringConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :accept_vpc_peering_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Advertises an IPv4 or IPv6 address range that is provisioned for use with your Amazon Web Services resources through
    #          bring your own IP addresses (BYOIP).</p>
    #          <p>You can perform this operation at most once every 10 seconds, even if you specify different
    #          address ranges each time.</p>
    #          <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise
    #           it from Amazon Web Services. To minimize down time, you can configure your Amazon Web Services resources to use an address from a
    #          BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current
    #          location and start advertising it through Amazon Web Services.</p>
    #          <p>It can take a few minutes before traffic to the specified addresses starts routing to Amazon Web Services
    #          because of BGP propagation delays.</p>
    #          <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AdvertiseByoipCidrInput}.
    #
    # @option params [String] :cidr
    #   <p>The address range, in CIDR notation. This must be the exact range that you provisioned.
    #            You can't advertise only a portion of the provisioned range.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AdvertiseByoipCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.advertise_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AdvertiseByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #
    def advertise_byoip_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AdvertiseByoipCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AdvertiseByoipCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AdvertiseByoipCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AdvertiseByoipCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AdvertiseByoipCidr,
        params_class: Params::AdvertiseByoipCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :advertise_byoip_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Allocates an Elastic IP address to your Amazon Web Services account. After you allocate the Elastic IP address you can associate
    #          it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address
    #          pool and can be allocated to a different Amazon Web Services account.</p>
    #          <p>You can allocate an Elastic IP address from an address pool owned by Amazon Web Services or from an address pool created
    #        from a public IPv4 address range that you have brought to Amazon Web Services for use with your Amazon Web Services resources using bring your own
    #          IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an
    #        Elastic IP address that you released after it is allocated to another Amazon Web Services account. You cannot recover an Elastic IP
    #          address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p>
    #          <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate
    #          5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You can allocate a carrier IP address which is a public IP address from a telecommunication carrier, to a network interface which resides in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
    #
    # @param [Hash] params
    #   See {Types::AllocateAddressInput}.
    #
    # @option params [String] :domain
    #   <p>Indicates whether the Elastic IP address is for use with instances in a VPC or instances in EC2-Classic.</p>
    #            <p>Default: If the Region supports EC2-Classic, the default is <code>standard</code>. Otherwise, the default
    #            is <code>vpc</code>.</p>
    #
    # @option params [String] :address
    #   <p>[EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.</p>
    #
    # @option params [String] :public_ipv4_pool
    #   <p>The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
    #          To specify a specific address from the address pool, use the <code>Address</code> parameter instead.</p>
    #
    # @option params [String] :network_border_group
    #   <p> A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services
    #         advertises IP addresses. Use this parameter to limit the IP address to this location. IP
    #         addresses cannot move between network border groups.</p>
    #            <p>Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">DescribeAvailabilityZones</a> to view the network border groups.</p>
    #
    #            <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 Classic,
    #         you receive an <code>InvalidParameterCombination</code> error.</p>
    #
    # @option params [String] :customer_owned_ipv4_pool
    #   <p>The ID of a customer-owned address pool. Use this parameter to let Amazon EC2
    #           select an address from the address pool. Alternatively, specify a specific
    #           address from the address pool.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the Elastic IP address.</p>
    #
    # @return [Types::AllocateAddressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.allocate_address(
    #     domain: 'vpc', # accepts ["vpc", "standard"]
    #     address: 'Address',
    #     public_ipv4_pool: 'PublicIpv4Pool',
    #     network_border_group: 'NetworkBorderGroup',
    #     customer_owned_ipv4_pool: 'CustomerOwnedIpv4Pool',
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AllocateAddressOutput
    #   resp.data.public_ip #=> String
    #   resp.data.allocation_id #=> String
    #   resp.data.public_ipv4_pool #=> String
    #   resp.data.network_border_group #=> String
    #   resp.data.domain #=> String, one of ["vpc", "standard"]
    #   resp.data.customer_owned_ip #=> String
    #   resp.data.customer_owned_ipv4_pool #=> String
    #   resp.data.carrier_ip #=> String
    #
    def allocate_address(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AllocateAddressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AllocateAddressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AllocateAddress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AllocateAddress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AllocateAddress,
        params_class: Params::AllocateAddressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :allocate_address
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Allocates a Dedicated Host to your account. At a minimum, specify the supported instance
    #         	type or instance family, the Availability Zone in which to allocate the host, and the number of
    #         	hosts to allocate.</p>
    #
    # @param [Hash] params
    #   See {Types::AllocateHostsInput}.
    #
    # @option params [String] :auto_placement
    #   <p>Indicates whether the host accepts any untargeted instance launches that
    #       		match its instance type configuration, or if it only accepts Host tenancy
    #       		instance launches that specify its unique host ID. For more information,
    #       		see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding">
    #           	Understanding auto-placement and affinity</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    #           <p>Default: <code>on</code>
    #            </p>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to allocate the Dedicated Host.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [String] :instance_type
    #   <p>Specifies the instance type to be supported by the Dedicated Hosts. If you
    #   		specify an instance type, the Dedicated Hosts support instances of the
    #   		specified instance type only.</p>
    #       	
    #       	    <p>If you want the Dedicated Hosts to support multiple instance types in a specific
    #       		instance family, omit this parameter and specify <b>InstanceFamily</b>
    #       		instead. You cannot specify <b>InstanceType</b> and
    #       		<b>InstanceFamily</b> in the same request.</p>
    #
    # @option params [String] :instance_family
    #   <p>Specifies the instance family to be supported by the Dedicated Hosts. If you specify
    #   			an instance family, the Dedicated Hosts support multiple instance types within that
    #   			instance family.</p>
    #   		
    #   		       <p>If you want the Dedicated Hosts to support a specific instance type only, omit this
    #   			parameter and specify <b>InstanceType</b>
    #   			instead. You cannot specify <b>InstanceFamily</b> and
    #   			<b>InstanceType</b> in the same request.</p>
    #
    # @option params [Integer] :quantity
    #   <p>The number of Dedicated Hosts to allocate to your account with these parameters.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the Dedicated Host during creation.</p>
    #
    # @option params [String] :host_recovery
    #   <p>Indicates whether to enable or disable host recovery for the Dedicated Host.
    #   			Host recovery is disabled by default. For more information, see
    #   			<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html">
    #   			Host recovery</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #   		       <p>Default: <code>off</code>
    #            </p>
    #
    # @return [Types::AllocateHostsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.allocate_hosts(
    #     auto_placement: 'on', # accepts ["on", "off"]
    #     availability_zone: 'AvailabilityZone', # required
    #     client_token: 'ClientToken',
    #     instance_type: 'InstanceType',
    #     instance_family: 'InstanceFamily',
    #     quantity: 1, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     host_recovery: 'on' # accepts ["on", "off"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AllocateHostsOutput
    #   resp.data.host_ids #=> Array<String>
    #   resp.data.host_ids[0] #=> String
    #
    def allocate_hosts(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AllocateHostsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AllocateHostsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AllocateHosts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AllocateHosts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AllocateHosts,
        params_class: Params::AllocateHostsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :allocate_hosts
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Allocate a CIDR from an IPAM pool. In IPAM, an allocation is a CIDR assignment from an IPAM pool to another resource or IPAM pool. For more information, see <a href="/vpc/latest/ipam/allocate-cidrs-ipam.html">Allocate CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::AllocateIpamPoolCidrInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool from which you would like to allocate a CIDR.</p>
    #
    # @option params [String] :cidr
    #   <p>The CIDR you would like to allocate from the IPAM pool. Note the following:</p>
    #            <ul>
    #               <li>
    #                  <p>If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.</p>
    #               </li>
    #               <li>
    #                  <p>If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.</p>
    #               </li>
    #            </ul>
    #            <p>Possible values: Any available IPv4 or IPv6 CIDR.</p>
    #
    # @option params [Integer] :netmask_length
    #   <p>The netmask length of the CIDR you would like to allocate from the IPAM pool. Note the following:</p>
    #            <ul>
    #               <li>
    #                  <p>If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.</p>
    #               </li>
    #               <li>
    #                  <p>If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.</p>
    #               </li>
    #            </ul>
    #            <p>Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are 0 - 128.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [String] :description
    #   <p>A description for the allocation.</p>
    #
    # @option params [Boolean] :preview_next_cidr
    #   <p>A preview of the next available CIDR in a pool.</p>
    #
    # @option params [Array<String>] :disallowed_cidrs
    #   <p>Exclude a particular CIDR range from being returned by the pool.</p>
    #
    # @return [Types::AllocateIpamPoolCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.allocate_ipam_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr',
    #     netmask_length: 1,
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     preview_next_cidr: false,
    #     disallowed_cidrs: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AllocateIpamPoolCidrOutput
    #   resp.data.ipam_pool_allocation #=> Types::IpamPoolAllocation
    #   resp.data.ipam_pool_allocation.cidr #=> String
    #   resp.data.ipam_pool_allocation.ipam_pool_allocation_id #=> String
    #   resp.data.ipam_pool_allocation.description #=> String
    #   resp.data.ipam_pool_allocation.resource_id #=> String
    #   resp.data.ipam_pool_allocation.resource_type #=> String, one of ["ipam-pool", "vpc", "ec2-public-ipv4-pool", "custom"]
    #   resp.data.ipam_pool_allocation.resource_region #=> String
    #   resp.data.ipam_pool_allocation.resource_owner #=> String
    #
    def allocate_ipam_pool_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AllocateIpamPoolCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AllocateIpamPoolCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AllocateIpamPoolCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AllocateIpamPoolCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AllocateIpamPoolCidr,
        params_class: Params::AllocateIpamPoolCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :allocate_ipam_pool_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing
    # 			security groups with the specified security groups.</p>
    #
    # @param [Hash] params
    #   See {Types::ApplySecurityGroupsToClientVpnTargetNetworkInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC in which the associated target network is located.</p>
    #
    # @option params [Array<String>] :security_group_ids
    #   <p>The IDs of the security groups to apply to the associated target network. Up to 5 security groups can
    #   			be applied to an associated target network.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.apply_security_groups_to_client_vpn_target_network(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     vpc_id: 'VpcId', # required
    #     security_group_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput
    #   resp.data.security_group_ids #=> Array<String>
    #   resp.data.security_group_ids[0] #=> String
    #
    def apply_security_groups_to_client_vpn_target_network(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ApplySecurityGroupsToClientVpnTargetNetworkInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ApplySecurityGroupsToClientVpnTargetNetworkInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ApplySecurityGroupsToClientVpnTargetNetwork
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ApplySecurityGroupsToClientVpnTargetNetwork
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ApplySecurityGroupsToClientVpnTargetNetwork,
        params_class: Params::ApplySecurityGroupsToClientVpnTargetNetworkOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :apply_security_groups_to_client_vpn_target_network
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Assigns one or more IPv6 addresses to the specified network interface. You can
    #             specify one or more specific IPv6 addresses, or you can specify the number of IPv6
    #             addresses to be automatically assigned from within the subnet's IPv6 CIDR block range.
    #             You can assign as many IPv6 addresses to a network interface as you can assign private
    #             IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a>
    #             in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #         <p>You must specify either the IPv6 addresses or the IPv6 address count in the request. </p>
    #         <p>You can optionally use Prefix Delegation on the network interface. You must specify
    #             either the IPV6 Prefix Delegation prefixes, or the IPv6 Prefix Delegation count. For
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
    #                 Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssignIpv6AddressesInput}.
    #
    # @option params [Integer] :ipv6_address_count
    #   <p>The number of additional IPv6 addresses to assign to the network interface.
    #       		The specified number of IPv6 addresses are assigned in addition to the
    #       		existing IPv6 addresses that are already assigned to the network interface.
    #       		Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You
    #       		can't use this option if specifying specific IPv6 addresses.</p>
    #
    # @option params [Array<String>] :ipv6_addresses
    #   <p>One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.</p>
    #
    # @option params [Integer] :ipv6_prefix_count
    #   <p>The number of IPv6 prefixes that Amazon Web Services automatically assigns to the
    #               network interface. You cannot use this option if you use the <code>Ipv6Prefixes</code>
    #               option.</p>
    #
    # @option params [Array<String>] :ipv6_prefixes
    #   <p>One or more IPv6 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv6PrefixCount</code> option.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @return [Types::AssignIpv6AddressesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.assign_ipv6_addresses(
    #     ipv6_address_count: 1,
    #     ipv6_addresses: [
    #       'member'
    #     ],
    #     ipv6_prefix_count: 1,
    #     ipv6_prefixes: [
    #       'member'
    #     ],
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssignIpv6AddressesOutput
    #   resp.data.assigned_ipv6_addresses #=> Array<String>
    #   resp.data.assigned_ipv6_addresses[0] #=> String
    #   resp.data.assigned_ipv6_prefixes #=> Array<String>
    #   resp.data.assigned_ipv6_prefixes[0] #=> String
    #   resp.data.network_interface_id #=> String
    #
    def assign_ipv6_addresses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssignIpv6AddressesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssignIpv6AddressesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssignIpv6Addresses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssignIpv6Addresses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssignIpv6Addresses,
        params_class: Params::AssignIpv6AddressesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :assign_ipv6_addresses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Assigns one or more secondary private IP addresses to the specified network interface.</p>
    #         <p>You can specify one or more specific secondary IP addresses, or you can specify the number
    #             of secondary IP addresses to be automatically assigned within the subnet's CIDR block range.
    #             The number of secondary IP addresses that you can assign to an instance varies by instance type.
    #             For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about
    #             Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #         <p>When you move a secondary private IP address to another network interface, any Elastic IP address
    #             that is associated with the IP address is also moved.</p>
    #         <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network
    #             interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance
    #             metadata to confirm that the remapping is complete.</p>
    #         <p>You must specify either the IP addresses or the IP address count in the request.</p>
    #         <p>You can optionally use Prefix Delegation on the network interface. You must specify
    #             either the IPv4 Prefix Delegation prefixes, or the IPv4 Prefix Delegation count. For
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
    #                 Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssignPrivateIpAddressesInput}.
    #
    # @option params [Boolean] :allow_reassignment
    #   <p>Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @option params [Array<String>] :private_ip_addresses
    #   <p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p>
    #           <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
    #
    # @option params [Integer] :secondary_private_ip_address_count
    #   <p>The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.</p>
    #
    # @option params [Array<String>] :ipv4_prefixes
    #   <p>One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv4PrefixCount</code> option.</p>
    #
    # @option params [Integer] :ipv4_prefix_count
    #   <p>The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv4 Prefixes</code> option.</p>
    #
    # @return [Types::AssignPrivateIpAddressesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.assign_private_ip_addresses(
    #     allow_reassignment: false,
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     private_ip_addresses: [
    #       'member'
    #     ],
    #     secondary_private_ip_address_count: 1,
    #     ipv4_prefixes: [
    #       'member'
    #     ],
    #     ipv4_prefix_count: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssignPrivateIpAddressesOutput
    #   resp.data.network_interface_id #=> String
    #   resp.data.assigned_private_ip_addresses #=> Array<AssignedPrivateIpAddress>
    #   resp.data.assigned_private_ip_addresses[0] #=> Types::AssignedPrivateIpAddress
    #   resp.data.assigned_private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.assigned_ipv4_prefixes #=> Array<Ipv4PrefixSpecification>
    #   resp.data.assigned_ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecification
    #   resp.data.assigned_ipv4_prefixes[0].ipv4_prefix #=> String
    #
    def assign_private_ip_addresses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssignPrivateIpAddressesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssignPrivateIpAddressesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssignPrivateIpAddresses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssignPrivateIpAddresses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssignPrivateIpAddresses,
        params_class: Params::AssignPrivateIpAddressesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :assign_private_ip_addresses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates an Elastic IP address, or carrier IP address (for instances that are in
    #       subnets in Wavelength Zones) with an instance or a network interface. Before you can use an
    #       Elastic IP address, you must allocate it to your account.</p>
    #          <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC.
    # 			For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already
    #       associated with a different instance, it is disassociated from that instance and associated
    #       with the specified instance. If you associate an Elastic IP address with an instance that has
    #       an existing Elastic IP address, the existing address is disassociated from the instance, but
    #       remains allocated to your account.</p>
    #          <p>[VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic
    #       IP address is associated with the primary IP address. If the Elastic IP address is already
    #       associated with a different instance or a network interface, you get an error unless you allow
    #       reassociation. You cannot associate an Elastic IP address with an instance or network
    #       interface that has an existing Elastic IP address.</p>
    #          <p>[Subnets in Wavelength Zones] You can associate an IP address from the telecommunication
    #       carrier to the instance or network interface. </p>
    #          <p>You cannot associate an Elastic IP address with an interface in a different network border group.</p>
    #          <important>
    #             <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2
    #         doesn't return an error, and you may be charged for each time the Elastic IP address is
    #         remapped to the same instance. For more information, see the <i>Elastic IP
    #           Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2
    #           Pricing</a>.</p>
    #          </important>
    #
    # @param [Hash] params
    #   See {Types::AssociateAddressInput}.
    #
    # @option params [String] :allocation_id
    #   <p>[EC2-VPC] The allocation ID. This is required for EC2-VPC.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance. The instance must have exactly one attached network interface.
    #         For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both.
    #         For EC2-Classic, you must specify an instance ID and the instance must be in the running
    #         state.</p>
    #
    # @option params [String] :public_ip
    #   <p>[EC2-Classic] The Elastic IP address to associate with the instance. This is required for
    #         EC2-Classic.</p>
    #
    # @option params [Boolean] :allow_reassociation
    #   <p>[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p>
    #      	     <p>For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. </p>
    #
    # @option params [String] :private_ip_address
    #   <p>[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.</p>
    #
    # @return [Types::AssociateAddressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_address(
    #     allocation_id: 'AllocationId',
    #     instance_id: 'InstanceId',
    #     public_ip: 'PublicIp',
    #     allow_reassociation: false,
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId',
    #     private_ip_address: 'PrivateIpAddress'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateAddressOutput
    #   resp.data.association_id #=> String
    #
    def associate_address(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateAddressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateAddressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateAddress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateAddress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateAddress,
        params_class: Params::AssociateAddressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_address
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p>
    # 	        <p>If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change the VPC that's associated with it.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateClientVpnTargetNetworkInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet to associate with the Client VPN endpoint.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AssociateClientVpnTargetNetworkOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_client_vpn_target_network(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     subnet_id: 'SubnetId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateClientVpnTargetNetworkOutput
    #   resp.data.association_id #=> String
    #   resp.data.status #=> Types::AssociationStatus
    #   resp.data.status.code #=> String, one of ["associating", "associated", "association-failed", "disassociating", "disassociated"]
    #   resp.data.status.message #=> String
    #
    def associate_client_vpn_target_network(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateClientVpnTargetNetworkInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateClientVpnTargetNetworkInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateClientVpnTargetNetwork
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateClientVpnTargetNetwork
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateClientVpnTargetNetwork,
        params_class: Params::AssociateClientVpnTargetNetworkOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_client_vpn_target_network
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p>
    #          <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a>
    #           in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateDhcpOptionsInput}.
    #
    # @option params [String] :dhcp_options_id
    #   <p>The ID of the DHCP options set, or <code>default</code> to associate
    #           no DHCP options with the VPC.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AssociateDhcpOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_dhcp_options(
    #     dhcp_options_id: 'DhcpOptionsId', # required
    #     vpc_id: 'VpcId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateDhcpOptionsOutput
    #
    def associate_dhcp_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateDhcpOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateDhcpOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateDhcpOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateDhcpOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateDhcpOptions,
        params_class: Params::AssociateDhcpOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_dhcp_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates an Identity and Access Management (IAM) role with an Certificate Manager (ACM) certificate.
    # 			This enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave. For more
    # 			information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html">Certificate Manager for Nitro Enclaves</a> in the <i>Amazon Web Services Nitro Enclaves
    # 					User Guide</i>.</p>
    # 		
    # 		       <p>When the IAM role is associated with the ACM certificate, the certificate, certificate chain, and encrypted
    # 			private key are placed in an Amazon S3 bucket that only the associated IAM role can access. The private key of the certificate
    # 			is encrypted with an Amazon Web Services managed key that has an attached attestation-based key policy.</p>
    # 		
    # 		       <p>To enable the IAM role to access the Amazon S3 object, you must grant it permission to call <code>s3:GetObject</code>
    # 			on the Amazon S3 bucket returned by the command. To enable the IAM role to access the KMS key,
    # 			you must grant it permission to call <code>kms:Decrypt</code> on the KMS key returned by the command.
    # 			For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html#add-policy">
    # 				Grant the role permission to access the certificate and encryption key</a> in the
    # 			<i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateEnclaveCertificateIamRoleInput}.
    #
    # @option params [String] :certificate_arn
    #   <p>The ARN of the ACM certificate with which to associate the IAM role.</p>
    #
    # @option params [String] :role_arn
    #   <p>The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM
    #   			certificate.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AssociateEnclaveCertificateIamRoleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_enclave_certificate_iam_role(
    #     certificate_arn: 'CertificateArn',
    #     role_arn: 'RoleArn',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateEnclaveCertificateIamRoleOutput
    #   resp.data.certificate_s3_bucket_name #=> String
    #   resp.data.certificate_s3_object_key #=> String
    #   resp.data.encryption_kms_key_id #=> String
    #
    def associate_enclave_certificate_iam_role(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateEnclaveCertificateIamRoleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateEnclaveCertificateIamRoleInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateEnclaveCertificateIamRole
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateEnclaveCertificateIamRole
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateEnclaveCertificateIamRole,
        params_class: Params::AssociateEnclaveCertificateIamRoleOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_enclave_certificate_iam_role
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates an IAM instance profile with a running or stopped instance. You cannot
    #             associate more than one IAM instance profile with an instance.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateIamInstanceProfileInput}.
    #
    # @option params [IamInstanceProfileSpecification] :iam_instance_profile
    #   <p>The IAM instance profile.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @return [Types::AssociateIamInstanceProfileOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_iam_instance_profile(
    #     iam_instance_profile: {
    #       arn: 'Arn',
    #       name: 'Name'
    #     }, # required
    #     instance_id: 'InstanceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateIamInstanceProfileOutput
    #   resp.data.iam_instance_profile_association #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_association.association_id #=> String
    #   resp.data.iam_instance_profile_association.instance_id #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_association.iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_association.timestamp #=> Time
    #
    def associate_iam_instance_profile(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateIamInstanceProfileInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateIamInstanceProfileInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateIamInstanceProfile
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateIamInstanceProfile
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateIamInstanceProfile,
        params_class: Params::AssociateIamInstanceProfileOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_iam_instance_profile
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates one or more targets with an event window. Only one type of target (instance IDs,
    #          Dedicated Host IDs, or tags) can be specified with an event window.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateInstanceEventWindowInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_event_window_id
    #   <p>The ID of the event window.</p>
    #
    # @option params [InstanceEventWindowAssociationRequest] :association_target
    #   <p>One or more targets associated with the specified event window.</p>
    #
    # @return [Types::AssociateInstanceEventWindowOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_instance_event_window(
    #     dry_run: false,
    #     instance_event_window_id: 'InstanceEventWindowId', # required
    #     association_target: {
    #       instance_ids: [
    #         'member'
    #       ],
    #       instance_tags: [
    #         {
    #           key: 'Key',
    #           value: 'Value'
    #         }
    #       ],
    #       dedicated_host_ids: [
    #         'member'
    #       ]
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    #
    def associate_instance_event_window(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateInstanceEventWindowInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateInstanceEventWindowInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateInstanceEventWindow
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateInstanceEventWindow
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateInstanceEventWindow,
        params_class: Params::AssociateInstanceEventWindowOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_instance_event_window
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates a subnet in your VPC or an internet gateway or virtual private gateway
    #             attached to your VPC with a route table in your VPC. This association causes traffic
    #             from the subnet or gateway to be routed according to the routes in the route table. The
    #             action returns an association ID, which you need in order to disassociate the route
    #             table later. A route table can be associated with multiple subnets.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    #                 <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateRouteTableInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet.</p>
    #
    # @option params [String] :gateway_id
    #   <p>The ID of the internet gateway or virtual private gateway.</p>
    #
    # @return [Types::AssociateRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_route_table(
    #     dry_run: false,
    #     route_table_id: 'RouteTableId', # required
    #     subnet_id: 'SubnetId',
    #     gateway_id: 'GatewayId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateRouteTableOutput
    #   resp.data.association_id #=> String
    #   resp.data.association_state #=> Types::RouteTableAssociationState
    #   resp.data.association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.association_state.status_message #=> String
    #
    def associate_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateRouteTable,
        params_class: Params::AssociateRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR
    #             block with your subnet. An IPv6 CIDR block must have a prefix length of /64.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateSubnetCidrBlockInput}.
    #
    # @option params [String] :ipv6_cidr_block
    #   <p>The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
    #               length.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of your subnet.</p>
    #
    # @return [Types::AssociateSubnetCidrBlockOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_subnet_cidr_block(
    #     ipv6_cidr_block: 'Ipv6CidrBlock', # required
    #     subnet_id: 'SubnetId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateSubnetCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet_id #=> String
    #
    def associate_subnet_cidr_block(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateSubnetCidrBlockInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateSubnetCidrBlockInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateSubnetCidrBlock
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateSubnetCidrBlock
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateSubnetCidrBlock,
        params_class: Params::AssociateSubnetCidrBlockOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_subnet_cidr_block
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.</p>
    #         <p>The transit gateway attachment must be in the available state before you can add a resource. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a>
    #             to see the state of the attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateTransitGatewayMulticastDomainInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the transit gateway attachment to associate with the transit gateway multicast domain.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>The IDs of the subnets to associate with the transit gateway multicast domain.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AssociateTransitGatewayMulticastDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_transit_gateway_multicast_domain(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateTransitGatewayMulticastDomainOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    #
    def associate_transit_gateway_multicast_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateTransitGatewayMulticastDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateTransitGatewayMulticastDomainInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateTransitGatewayMulticastDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateTransitGatewayMulticastDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateTransitGatewayMulticastDomain,
        params_class: Params::AssociateTransitGatewayMulticastDomainOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_transit_gateway_multicast_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates the specified attachment with the specified transit gateway route table. You can
    #         associate only one route table with an attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateTransitGatewayRouteTableInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AssociateTransitGatewayRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_transit_gateway_route_table(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateTransitGatewayRouteTableOutput
    #   resp.data.association #=> Types::TransitGatewayAssociation
    #   resp.data.association.transit_gateway_route_table_id #=> String
    #   resp.data.association.transit_gateway_attachment_id #=> String
    #   resp.data.association.resource_id #=> String
    #   resp.data.association.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #
    def associate_transit_gateway_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateTransitGatewayRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateTransitGatewayRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateTransitGatewayRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateTransitGatewayRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateTransitGatewayRouteTable,
        params_class: Params::AssociateTransitGatewayRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_transit_gateway_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <note>
    #             <p>This API action is currently in <b>limited preview only</b>.
    #                 If you are interested in using this feature, contact your account manager.</p>
    #         </note>
    #
    #         <p>Associates a branch network interface with a trunk network interface.</p>
    #         <p>Before you create the association, run the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">create-network-interface</a> command and set
    #             <code>--interface-type</code> to <code>trunk</code>. You must also create a network interface for each branch network interface that you want to associate with the trunk network interface.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateTrunkInterfaceInput}.
    #
    # @option params [String] :branch_interface_id
    #   <p>The ID of the branch network interface.</p>
    #
    # @option params [String] :trunk_interface_id
    #   <p>The ID of the trunk network interface.</p>
    #
    # @option params [Integer] :vlan_id
    #   <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    #
    # @option params [Integer] :gre_key
    #   <p>The application key. This applies to the GRE protocol.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure
    #                   Idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AssociateTrunkInterfaceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_trunk_interface(
    #     branch_interface_id: 'BranchInterfaceId', # required
    #     trunk_interface_id: 'TrunkInterfaceId', # required
    #     vlan_id: 1,
    #     gre_key: 1,
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateTrunkInterfaceOutput
    #   resp.data.interface_association #=> Types::TrunkInterfaceAssociation
    #   resp.data.interface_association.association_id #=> String
    #   resp.data.interface_association.branch_interface_id #=> String
    #   resp.data.interface_association.trunk_interface_id #=> String
    #   resp.data.interface_association.interface_protocol #=> String, one of ["VLAN", "GRE"]
    #   resp.data.interface_association.vlan_id #=> Integer
    #   resp.data.interface_association.gre_key #=> Integer
    #   resp.data.interface_association.tags #=> Array<Tag>
    #   resp.data.interface_association.tags[0] #=> Types::Tag
    #   resp.data.interface_association.tags[0].key #=> String
    #   resp.data.interface_association.tags[0].value #=> String
    #   resp.data.client_token #=> String
    #
    def associate_trunk_interface(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateTrunkInterfaceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateTrunkInterfaceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateTrunkInterface
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateTrunkInterface
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateTrunkInterface,
        params_class: Params::AssociateTrunkInterfaceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_trunk_interface
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block,
    #             an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that
    #             you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>). The IPv6 CIDR block size is fixed
    #             at /56.</p>
    #         <p>You must specify one of the following in the request: an IPv4 CIDR block, an IPv6
    #             pool, or an Amazon-provided IPv6 CIDR block.</p>
    #         <p>For more information about associating CIDR blocks with your VPC and applicable
    #             restrictions, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing">VPC and subnet sizing</a> in the
    #                 <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AssociateVpcCidrBlockInput}.
    #
    # @option params [Boolean] :amazon_provided_ipv6_cidr_block
    #   <p>Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.</p>
    #
    # @option params [String] :cidr_block
    #   <p>An IPv4 CIDR block to associate with the VPC.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [String] :ipv6_cidr_block_network_border_group
    #   <p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter
    #         to limit the CIDR block to this location.</p>
    #            <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p>
    #            <p> You can have one IPv6 CIDR block association per network border group.</p>
    #
    # @option params [String] :ipv6_pool
    #   <p>The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.</p>
    #
    # @option params [String] :ipv6_cidr_block
    #   <p>An IPv6 CIDR block from the IPv6 address pool. You must also specify <code>Ipv6Pool</code> in the request.</p>
    #           <p>To let Amazon choose the IPv6 CIDR block for you, omit this parameter.</p>
    #
    # @option params [String] :ipv4_ipam_pool_id
    #   <p>Associate a CIDR allocated from an IPv4 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [Integer] :ipv4_netmask_length
    #   <p>The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #         </p>
    #
    # @option params [String] :ipv6_ipam_pool_id
    #   <p>Associates a CIDR allocated from an IPv6 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [Integer] :ipv6_netmask_length
    #   <p>The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
    #
    # @return [Types::AssociateVpcCidrBlockOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_vpc_cidr_block(
    #     amazon_provided_ipv6_cidr_block: false,
    #     cidr_block: 'CidrBlock',
    #     vpc_id: 'VpcId', # required
    #     ipv6_cidr_block_network_border_group: 'Ipv6CidrBlockNetworkBorderGroup',
    #     ipv6_pool: 'Ipv6Pool',
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     ipv4_ipam_pool_id: 'Ipv4IpamPoolId',
    #     ipv4_netmask_length: 1,
    #     ipv6_ipam_pool_id: 'Ipv6IpamPoolId',
    #     ipv6_netmask_length: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateVpcCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.ipv6_cidr_block_association.network_border_group #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_pool #=> String
    #   resp.data.cidr_block_association #=> Types::VpcCidrBlockAssociation
    #   resp.data.cidr_block_association.association_id #=> String
    #   resp.data.cidr_block_association.cidr_block #=> String
    #   resp.data.cidr_block_association.cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc_id #=> String
    #
    def associate_vpc_cidr_block(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateVpcCidrBlockInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateVpcCidrBlockInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateVpcCidrBlock
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AssociateVpcCidrBlock
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AssociateVpcCidrBlock,
        params_class: Params::AssociateVpcCidrBlockOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :associate_vpc_cidr_block
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's
    # 			security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You
    # 			can only link an instance that's in the <code>running</code> state. An instance is
    # 			automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when
    # 			you restart it.</p>
    # 		       <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p>
    # 		       <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachClassicLinkVpcInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :groups
    #   <p>The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of a ClassicLink-enabled VPC.</p>
    #
    # @return [Types::AttachClassicLinkVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_classic_link_vpc(
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ], # required
    #     instance_id: 'InstanceId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachClassicLinkVpcOutput
    #   resp.data.return #=> Boolean
    #
    def attach_classic_link_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachClassicLinkVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachClassicLinkVpcInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachClassicLinkVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AttachClassicLinkVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AttachClassicLinkVpc,
        params_class: Params::AttachClassicLinkVpcOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :attach_classic_link_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and
    # 			the VPC. For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachInternetGatewayInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :internet_gateway_id
    #   <p>The ID of the internet gateway.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::AttachInternetGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_internet_gateway(
    #     dry_run: false,
    #     internet_gateway_id: 'InternetGatewayId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachInternetGatewayOutput
    #
    def attach_internet_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachInternetGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachInternetGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachInternetGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AttachInternetGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AttachInternetGateway,
        params_class: Params::AttachInternetGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :attach_internet_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches a network interface to an instance.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachNetworkInterfaceInput}.
    #
    # @option params [Integer] :device_index
    #   <p>The index of the device for the network interface attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @option params [Integer] :network_card_index
    #   <p>The index of the network card. Some instance types support multiple network cards.
    #               The primary network interface must be assigned to network card index 0.
    #               The default is network card index 0.</p>
    #
    # @return [Types::AttachNetworkInterfaceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_network_interface(
    #     device_index: 1, # required
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     network_card_index: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachNetworkInterfaceOutput
    #   resp.data.attachment_id #=> String
    #   resp.data.network_card_index #=> Integer
    #
    def attach_network_interface(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachNetworkInterfaceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachNetworkInterfaceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachNetworkInterface
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AttachNetworkInterface
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AttachNetworkInterface,
        params_class: Params::AttachNetworkInterfaceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :attach_network_interface
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance
    #       with the specified device name.</p>
    #          <p>Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For
    #       more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>After you attach an EBS volume, you must make it available. For more information, see
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Make an EBS volume available for use</a>.</p>
    #          <p>If a volume has an Amazon Web Services Marketplace product code:</p>
    #          <ul>
    #             <li>
    #                <p>The volume can be attached only to a stopped instance.</p>
    #             </li>
    #             <li>
    #                <p>Amazon Web Services Marketplace product codes are copied from the volume to the instance.</p>
    #             </li>
    #             <li>
    #                <p>You must be subscribed to the product.</p>
    #             </li>
    #             <li>
    #                <p>The instance type and operating system of the instance must support the product. For
    #           example, you can't detach a volume from a Windows instance and attach it to a Linux
    #           instance.</p>
    #             </li>
    #          </ul>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attach an Amazon EBS volume to an instance</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachVolumeInput}.
    #
    # @option params [String] :device
    #   <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the EBS volume. The volume and instance must be within the same Availability
    #         Zone.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AttachVolumeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_volume(
    #     device: 'Device', # required
    #     instance_id: 'InstanceId', # required
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachVolumeOutput
    #   resp.data.attach_time #=> Time
    #   resp.data.device #=> String
    #   resp.data.instance_id #=> String
    #   resp.data.state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.volume_id #=> String
    #   resp.data.delete_on_termination #=> Boolean
    #
    def attach_volume(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachVolumeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachVolumeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachVolume
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AttachVolume
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AttachVolume,
        params_class: Params::AttachVolumeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :attach_volume
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private
    #             gateway to one VPC at a time.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::AttachVpnGatewayInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [String] :vpn_gateway_id
    #   <p>The ID of the virtual private gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AttachVpnGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.attach_vpn_gateway(
    #     vpc_id: 'VpcId', # required
    #     vpn_gateway_id: 'VpnGatewayId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AttachVpnGatewayOutput
    #   resp.data.vpc_attachment #=> Types::VpcAttachment
    #   resp.data.vpc_attachment.state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.vpc_attachment.vpc_id #=> String
    #
    def attach_vpn_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AttachVpnGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AttachVpnGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AttachVpnGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AttachVpnGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AttachVpnGateway,
        params_class: Params::AttachVpnGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :attach_vpn_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as
    # 			firewall rules that grant access to networks. You must configure ingress authorization rules to
    # 			enable clients to access resources in Amazon Web Services or on-premises networks.</p>
    #
    # @param [Hash] params
    #   See {Types::AuthorizeClientVpnIngressInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [String] :target_network_cidr
    #   <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    #
    # @option params [String] :access_group_id
    #   <p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>
    #
    # @option params [Boolean] :authorize_all_groups
    #   <p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all
    #               clients who successfully establish a VPN connection access to the network. Must be set
    #               to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>
    #
    # @option params [String] :description
    #   <p>A brief description of the authorization rule.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::AuthorizeClientVpnIngressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.authorize_client_vpn_ingress(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     target_network_cidr: 'TargetNetworkCidr', # required
    #     access_group_id: 'AccessGroupId',
    #     authorize_all_groups: false,
    #     description: 'Description',
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AuthorizeClientVpnIngressOutput
    #   resp.data.status #=> Types::ClientVpnAuthorizationRuleStatus
    #   resp.data.status.code #=> String, one of ["authorizing", "active", "failed", "revoking"]
    #   resp.data.status.message #=> String
    #
    def authorize_client_vpn_ingress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AuthorizeClientVpnIngressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AuthorizeClientVpnIngressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AuthorizeClientVpnIngress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AuthorizeClientVpnIngress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AuthorizeClientVpnIngress,
        params_class: Params::AuthorizeClientVpnIngressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :authorize_client_vpn_ingress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>[VPC only] Adds the specified outbound (egress) rules to a security group for use with a VPC.</p>
    #          <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address
    #       ranges, or to the instances that are associated with the specified source security groups.</p>
    #          <p>You specify a protocol for each rule (for example, TCP).
    #        For the TCP and UDP protocols, you must also specify the destination port or port range.
    #        For the ICMP protocol, you must also specify the ICMP type and code.
    #        You can use -1 for the type or code to mean all types or all codes.</p>
    #          <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p>
    #          <p>For information about VPC security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AuthorizeSecurityGroupEgressInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group.</p>
    #
    # @option params [Array<IpPermission>] :ip_permissions
    #   <p>The sets of IP permissions. You can't specify a destination security group and a CIDR IP
    #               address range in the same set of permissions.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags applied to the security group rule.</p>
    #
    # @option params [String] :cidr_ip
    #   <p>Not supported. Use a set of IP permissions to specify the CIDR.</p>
    #
    # @option params [Integer] :from_port
    #   <p>Not supported. Use a set of IP permissions to specify the port.</p>
    #
    # @option params [String] :ip_protocol
    #   <p>Not supported. Use a set of IP permissions to specify the protocol name or
    #               number.</p>
    #
    # @option params [Integer] :to_port
    #   <p>Not supported. Use a set of IP permissions to specify the port.</p>
    #
    # @option params [String] :source_security_group_name
    #   <p>Not supported. Use a set of IP permissions to specify a
    #               destination security group.</p>
    #
    # @option params [String] :source_security_group_owner_id
    #   <p>Not supported. Use a set of IP permissions to specify a
    #               destination security group.</p>
    #
    # @return [Types::AuthorizeSecurityGroupEgressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.authorize_security_group_egress(
    #     dry_run: false,
    #     group_id: 'GroupId', # required
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     ip_protocol: 'IpProtocol',
    #     to_port: 1,
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AuthorizeSecurityGroupEgressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.security_group_rules #=> Array<SecurityGroupRule>
    #   resp.data.security_group_rules[0] #=> Types::SecurityGroupRule
    #   resp.data.security_group_rules[0].security_group_rule_id #=> String
    #   resp.data.security_group_rules[0].group_id #=> String
    #   resp.data.security_group_rules[0].group_owner_id #=> String
    #   resp.data.security_group_rules[0].is_egress #=> Boolean
    #   resp.data.security_group_rules[0].ip_protocol #=> String
    #   resp.data.security_group_rules[0].from_port #=> Integer
    #   resp.data.security_group_rules[0].to_port #=> Integer
    #   resp.data.security_group_rules[0].cidr_ipv4 #=> String
    #   resp.data.security_group_rules[0].cidr_ipv6 #=> String
    #   resp.data.security_group_rules[0].prefix_list_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info #=> Types::ReferencedSecurityGroup
    #   resp.data.security_group_rules[0].referenced_group_info.group_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.peering_status #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.user_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_peering_connection_id #=> String
    #   resp.data.security_group_rules[0].description #=> String
    #   resp.data.security_group_rules[0].tags #=> Array<Tag>
    #   resp.data.security_group_rules[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_rules[0].tags[0].key #=> String
    #   resp.data.security_group_rules[0].tags[0].value #=> String
    #
    def authorize_security_group_egress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AuthorizeSecurityGroupEgressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AuthorizeSecurityGroupEgressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AuthorizeSecurityGroupEgress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AuthorizeSecurityGroupEgress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AuthorizeSecurityGroupEgress,
        params_class: Params::AuthorizeSecurityGroupEgressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :authorize_security_group_egress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds the specified inbound (ingress) rules to a security group.</p>
    #          <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR
    #        address range, or from the instances that are associated with the specified destination security
    #        groups.</p>
    #          <p>You specify a protocol for each rule (for example, TCP).
    #        For TCP and UDP, you must also specify the destination port or port range.
    #        For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code.
    #        You can use -1 to mean all types or all codes.</p>
    #          <p>Rule changes are propagated to instances within the security group as quickly as possible.
    #          However, a small delay might occur.</p>
    #          <p>For more information about VPC security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::AuthorizeSecurityGroupIngressInput}.
    #
    # @option params [String] :cidr_ip
    #   <p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source
    #         security group. To specify an IPv6 address range, use a set of IP permissions.</p>
    #            <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    #
    # @option params [Integer] :from_port
    #   <p>The start of port range for the TCP and UDP protocols, or an ICMP type number.
    #   			For the ICMP type number, use <code>-1</code> to specify all types. If you
    #   			specify all ICMP types, you must specify all codes.</p>
    #            <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group. You must specify either the security group ID or the
    #   			security group name in the request. For security groups in a nondefault VPC, you must
    #   			specify the security group ID.</p>
    #
    # @option params [String] :group_name
    #   <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
    #   			security group ID or the security group name in the request.</p>
    #
    # @option params [Array<IpPermission>] :ip_permissions
    #   <p>The sets of IP permissions.</p>
    #
    # @option params [String] :ip_protocol
    #   <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number
    #         (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p>
    #            <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a
    #            protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports
    #            is allowed, regardless of any ports you specify.</p>
    #            <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    #
    # @option params [String] :source_security_group_name
    #   <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter
    #            in combination with the following parameters: the CIDR IP address range, the start of the port range,
    #            the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access.
    #            To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For
    #            EC2-VPC, the source security group must be in the same VPC.</p>
    #
    # @option params [String] :source_security_group_owner_id
    #   <p>[nondefault VPC] The Amazon Web Services account ID for the source security group, if the source security group is
    #            in a different account. You can't specify this parameter in combination with the following parameters:
    #            the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range.
    #            Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol
    #            and port range, use a set of IP permissions instead.</p>
    #
    # @option params [Integer] :to_port
    #   <p>The end of port range for the TCP and UDP protocols, or an ICMP code number.
    #   			For the ICMP code number, use <code>-1</code> to specify all codes. If you
    #   			specify all ICMP types, you must specify all codes.</p>
    #            <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>[VPC Only] The tags applied to the security group rule.</p>
    #
    # @return [Types::AuthorizeSecurityGroupIngressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.authorize_security_group_ingress(
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     ip_protocol: 'IpProtocol',
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId',
    #     to_port: 1,
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AuthorizeSecurityGroupIngressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.security_group_rules #=> Array<SecurityGroupRule>
    #   resp.data.security_group_rules[0] #=> Types::SecurityGroupRule
    #   resp.data.security_group_rules[0].security_group_rule_id #=> String
    #   resp.data.security_group_rules[0].group_id #=> String
    #   resp.data.security_group_rules[0].group_owner_id #=> String
    #   resp.data.security_group_rules[0].is_egress #=> Boolean
    #   resp.data.security_group_rules[0].ip_protocol #=> String
    #   resp.data.security_group_rules[0].from_port #=> Integer
    #   resp.data.security_group_rules[0].to_port #=> Integer
    #   resp.data.security_group_rules[0].cidr_ipv4 #=> String
    #   resp.data.security_group_rules[0].cidr_ipv6 #=> String
    #   resp.data.security_group_rules[0].prefix_list_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info #=> Types::ReferencedSecurityGroup
    #   resp.data.security_group_rules[0].referenced_group_info.group_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.peering_status #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.user_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_peering_connection_id #=> String
    #   resp.data.security_group_rules[0].description #=> String
    #   resp.data.security_group_rules[0].tags #=> Array<Tag>
    #   resp.data.security_group_rules[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_rules[0].tags[0].key #=> String
    #   resp.data.security_group_rules[0].tags[0].value #=> String
    #
    def authorize_security_group_ingress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AuthorizeSecurityGroupIngressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AuthorizeSecurityGroupIngressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AuthorizeSecurityGroupIngress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::AuthorizeSecurityGroupIngress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::AuthorizeSecurityGroupIngress,
        params_class: Params::AuthorizeSecurityGroupIngressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :authorize_security_group_ingress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Bundles an Amazon instance store-backed Windows instance.</p>
    #          <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p>
    #          <note>
    #             <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p>
    # 			      </note>
    #
    # @param [Hash] params
    #   See {Types::BundleInstanceInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance to bundle.</p>
    #            <p>Type: String</p>
    #            <p>Default: None</p>
    #            <p>Required: Yes</p>
    #
    # @option params [Storage] :storage
    #   <p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::BundleInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.bundle_instance(
    #     instance_id: 'InstanceId', # required
    #     storage: {
    #       s3: {
    #         aws_access_key_id: 'AWSAccessKeyId',
    #         bucket: 'Bucket',
    #         prefix: 'Prefix',
    #         upload_policy: 'UploadPolicy',
    #         upload_policy_signature: 'UploadPolicySignature'
    #       }
    #     }, # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::BundleInstanceOutput
    #   resp.data.bundle_task #=> Types::BundleTask
    #   resp.data.bundle_task.bundle_id #=> String
    #   resp.data.bundle_task.bundle_task_error #=> Types::BundleTaskError
    #   resp.data.bundle_task.bundle_task_error.code #=> String
    #   resp.data.bundle_task.bundle_task_error.message #=> String
    #   resp.data.bundle_task.instance_id #=> String
    #   resp.data.bundle_task.progress #=> String
    #   resp.data.bundle_task.start_time #=> Time
    #   resp.data.bundle_task.state #=> String, one of ["pending", "waiting-for-shutdown", "bundling", "storing", "cancelling", "complete", "failed"]
    #   resp.data.bundle_task.storage #=> Types::Storage
    #   resp.data.bundle_task.storage.s3 #=> Types::S3Storage
    #   resp.data.bundle_task.storage.s3.aws_access_key_id #=> String
    #   resp.data.bundle_task.storage.s3.bucket #=> String
    #   resp.data.bundle_task.storage.s3.prefix #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy_signature #=> String
    #   resp.data.bundle_task.update_time #=> Time
    #
    def bundle_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::BundleInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::BundleInstanceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::BundleInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::BundleInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::BundleInstance,
        params_class: Params::BundleInstanceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :bundle_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelBundleTaskInput}.
    #
    # @option params [String] :bundle_id
    #   <p>The ID of the bundle task.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CancelBundleTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_bundle_task(
    #     bundle_id: 'BundleId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelBundleTaskOutput
    #   resp.data.bundle_task #=> Types::BundleTask
    #   resp.data.bundle_task.bundle_id #=> String
    #   resp.data.bundle_task.bundle_task_error #=> Types::BundleTaskError
    #   resp.data.bundle_task.bundle_task_error.code #=> String
    #   resp.data.bundle_task.bundle_task_error.message #=> String
    #   resp.data.bundle_task.instance_id #=> String
    #   resp.data.bundle_task.progress #=> String
    #   resp.data.bundle_task.start_time #=> Time
    #   resp.data.bundle_task.state #=> String, one of ["pending", "waiting-for-shutdown", "bundling", "storing", "cancelling", "complete", "failed"]
    #   resp.data.bundle_task.storage #=> Types::Storage
    #   resp.data.bundle_task.storage.s3 #=> Types::S3Storage
    #   resp.data.bundle_task.storage.s3.aws_access_key_id #=> String
    #   resp.data.bundle_task.storage.s3.bucket #=> String
    #   resp.data.bundle_task.storage.s3.prefix #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy_signature #=> String
    #   resp.data.bundle_task.update_time #=> Time
    #
    def cancel_bundle_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelBundleTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelBundleTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelBundleTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelBundleTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelBundleTask,
        params_class: Params::CancelBundleTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_bundle_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to
    # 			<code>cancelled</code>.</p>
    # 		       <p>Instances running in the reserved capacity continue running until you stop them. Stopped
    # 			instances that target the Capacity Reservation can no longer launch. Modify these instances to either
    # 			target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation
    # 			that has matching attributes and sufficient capacity.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelCapacityReservationInput}.
    #
    # @option params [String] :capacity_reservation_id
    #   <p>The ID of the Capacity Reservation to be cancelled.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CancelCapacityReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_capacity_reservation(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelCapacityReservationOutput
    #   resp.data.return #=> Boolean
    #
    def cancel_capacity_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelCapacityReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelCapacityReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelCapacityReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelCapacityReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelCapacityReservation,
        params_class: Params::CancelCapacityReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_capacity_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels one or more Capacity Reservation Fleets. When you cancel a Capacity Reservation
    # 			Fleet, the following happens:</p>
    # 		       <ul>
    #             <li>
    # 				           <p>The Capacity Reservation Fleet's status changes to <code>cancelled</code>.</p>
    # 			         </li>
    #             <li>
    # 				           <p>The individual Capacity Reservations in the Fleet are cancelled. Instances running
    # 					in the Capacity Reservations at the time of cancelling the Fleet continue to run in
    # 					shared capacity.</p>
    # 			         </li>
    #             <li>
    # 				           <p>The Fleet stops creating new Capacity Reservations.</p>
    # 			         </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::CancelCapacityReservationFleetsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :capacity_reservation_fleet_ids
    #   <p>The IDs of the Capacity Reservation Fleets to cancel.</p>
    #
    # @return [Types::CancelCapacityReservationFleetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_capacity_reservation_fleets(
    #     dry_run: false,
    #     capacity_reservation_fleet_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelCapacityReservationFleetsOutput
    #   resp.data.successful_fleet_cancellations #=> Array<CapacityReservationFleetCancellationState>
    #   resp.data.successful_fleet_cancellations[0] #=> Types::CapacityReservationFleetCancellationState
    #   resp.data.successful_fleet_cancellations[0].current_fleet_state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.successful_fleet_cancellations[0].previous_fleet_state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.successful_fleet_cancellations[0].capacity_reservation_fleet_id #=> String
    #   resp.data.failed_fleet_cancellations #=> Array<FailedCapacityReservationFleetCancellationResult>
    #   resp.data.failed_fleet_cancellations[0] #=> Types::FailedCapacityReservationFleetCancellationResult
    #   resp.data.failed_fleet_cancellations[0].capacity_reservation_fleet_id #=> String
    #   resp.data.failed_fleet_cancellations[0].cancel_capacity_reservation_fleet_error #=> Types::CancelCapacityReservationFleetError
    #   resp.data.failed_fleet_cancellations[0].cancel_capacity_reservation_fleet_error.code #=> String
    #   resp.data.failed_fleet_cancellations[0].cancel_capacity_reservation_fleet_error.message #=> String
    #
    def cancel_capacity_reservation_fleets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelCapacityReservationFleetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelCapacityReservationFleetsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelCapacityReservationFleets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelCapacityReservationFleets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelCapacityReservationFleets,
        params_class: Params::CancelCapacityReservationFleetsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_capacity_reservation_fleets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all
    #    artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is
    #    in the process of transferring the final disk image, the command fails and returns an exception.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon
    #     EC2 CLI</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelConversionTaskInput}.
    #
    # @option params [String] :conversion_task_id
    #   <p>The ID of the conversion task.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :reason_message
    #   <p>The reason for canceling the conversion task.</p>
    #
    # @return [Types::CancelConversionTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_conversion_task(
    #     conversion_task_id: 'ConversionTaskId', # required
    #     dry_run: false,
    #     reason_message: 'ReasonMessage'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelConversionTaskOutput
    #
    def cancel_conversion_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelConversionTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelConversionTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelConversionTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelConversionTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelConversionTask,
        params_class: Params::CancelConversionTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_conversion_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created
    #    Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the
    #    command fails and returns an error.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelExportTaskInput}.
    #
    # @option params [String] :export_task_id
    #   <p>The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.</p>
    #
    # @return [Types::CancelExportTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_export_task(
    #     export_task_id: 'ExportTaskId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelExportTaskOutput
    #
    def cancel_export_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelExportTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelExportTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelExportTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelExportTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelExportTask,
        params_class: Params::CancelExportTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_export_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels an in-process import virtual machine or import snapshot task.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelImportTaskInput}.
    #
    # @option params [String] :cancel_reason
    #   <p>The reason for canceling the task.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :import_task_id
    #   <p>The ID of the import image or import snapshot task to be canceled.</p>
    #
    # @return [Types::CancelImportTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_import_task(
    #     cancel_reason: 'CancelReason',
    #     dry_run: false,
    #     import_task_id: 'ImportTaskId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelImportTaskOutput
    #   resp.data.import_task_id #=> String
    #   resp.data.previous_state #=> String
    #   resp.data.state #=> String
    #
    def cancel_import_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelImportTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelImportTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelImportTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelImportTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelImportTask,
        params_class: Params::CancelImportTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_import_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p>
    #          <p>For more information, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    #         in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelReservedInstancesListingInput}.
    #
    # @option params [String] :reserved_instances_listing_id
    #   <p>The ID of the Reserved Instance listing.</p>
    #
    # @return [Types::CancelReservedInstancesListingOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_reserved_instances_listing(
    #     reserved_instances_listing_id: 'ReservedInstancesListingId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelReservedInstancesListingOutput
    #   resp.data.reserved_instances_listings #=> Array<ReservedInstancesListing>
    #   resp.data.reserved_instances_listings[0] #=> Types::ReservedInstancesListing
    #   resp.data.reserved_instances_listings[0].client_token #=> String
    #   resp.data.reserved_instances_listings[0].create_date #=> Time
    #   resp.data.reserved_instances_listings[0].instance_counts #=> Array<InstanceCount>
    #   resp.data.reserved_instances_listings[0].instance_counts[0] #=> Types::InstanceCount
    #   resp.data.reserved_instances_listings[0].instance_counts[0].instance_count #=> Integer
    #   resp.data.reserved_instances_listings[0].instance_counts[0].state #=> String, one of ["available", "sold", "cancelled", "pending"]
    #   resp.data.reserved_instances_listings[0].price_schedules #=> Array<PriceSchedule>
    #   resp.data.reserved_instances_listings[0].price_schedules[0] #=> Types::PriceSchedule
    #   resp.data.reserved_instances_listings[0].price_schedules[0].active #=> Boolean
    #   resp.data.reserved_instances_listings[0].price_schedules[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_listings[0].price_schedules[0].price #=> Float
    #   resp.data.reserved_instances_listings[0].price_schedules[0].term #=> Integer
    #   resp.data.reserved_instances_listings[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_listings[0].reserved_instances_listing_id #=> String
    #   resp.data.reserved_instances_listings[0].status #=> String, one of ["active", "pending", "cancelled", "closed"]
    #   resp.data.reserved_instances_listings[0].status_message #=> String
    #   resp.data.reserved_instances_listings[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances_listings[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances_listings[0].tags[0].key #=> String
    #   resp.data.reserved_instances_listings[0].tags[0].value #=> String
    #   resp.data.reserved_instances_listings[0].update_date #=> Time
    #
    def cancel_reserved_instances_listing(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelReservedInstancesListingInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelReservedInstancesListingInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelReservedInstancesListing
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelReservedInstancesListing
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelReservedInstancesListing,
        params_class: Params::CancelReservedInstancesListingOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_reserved_instances_listing
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels the specified Spot Fleet requests.</p>
    #         <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances.
    #             You must specify whether the Spot Fleet should also terminate its Spot Instances. If you
    #             terminate the instances, the Spot Fleet request enters the
    #                 <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters
    #             the <code>cancelled_running</code> state and the instances continue to run until they
    #             are interrupted or you terminate them manually.</p>
    #
    # @param [Hash] params
    #   See {Types::CancelSpotFleetRequestsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :spot_fleet_request_ids
    #   <p>The IDs of the Spot Fleet requests.</p>
    #
    # @option params [Boolean] :terminate_instances
    #   <p>Indicates whether to terminate instances for a Spot Fleet request if it is canceled
    #               successfully.</p>
    #
    # @return [Types::CancelSpotFleetRequestsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_spot_fleet_requests(
    #     dry_run: false,
    #     spot_fleet_request_ids: [
    #       'member'
    #     ], # required
    #     terminate_instances: false # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelSpotFleetRequestsOutput
    #   resp.data.successful_fleet_requests #=> Array<CancelSpotFleetRequestsSuccessItem>
    #   resp.data.successful_fleet_requests[0] #=> Types::CancelSpotFleetRequestsSuccessItem
    #   resp.data.successful_fleet_requests[0].current_spot_fleet_request_state #=> String, one of ["submitted", "active", "cancelled", "failed", "cancelled_running", "cancelled_terminating", "modifying"]
    #   resp.data.successful_fleet_requests[0].previous_spot_fleet_request_state #=> String, one of ["submitted", "active", "cancelled", "failed", "cancelled_running", "cancelled_terminating", "modifying"]
    #   resp.data.successful_fleet_requests[0].spot_fleet_request_id #=> String
    #   resp.data.unsuccessful_fleet_requests #=> Array<CancelSpotFleetRequestsErrorItem>
    #   resp.data.unsuccessful_fleet_requests[0] #=> Types::CancelSpotFleetRequestsErrorItem
    #   resp.data.unsuccessful_fleet_requests[0].error #=> Types::CancelSpotFleetRequestsError
    #   resp.data.unsuccessful_fleet_requests[0].error.code #=> String, one of ["fleetRequestIdDoesNotExist", "fleetRequestIdMalformed", "fleetRequestNotInCancellableState", "unexpectedError"]
    #   resp.data.unsuccessful_fleet_requests[0].error.message #=> String
    #   resp.data.unsuccessful_fleet_requests[0].spot_fleet_request_id #=> String
    #
    def cancel_spot_fleet_requests(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelSpotFleetRequestsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelSpotFleetRequestsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelSpotFleetRequests
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelSpotFleetRequests
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelSpotFleetRequests,
        params_class: Params::CancelSpotFleetRequestsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_spot_fleet_requests
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels one or more Spot Instance requests.</p>
    #         <important>
    #             <p>Canceling a Spot Instance request does not terminate running Spot Instances
    #                 associated with the request.</p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::CancelSpotInstanceRequestsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :spot_instance_request_ids
    #   <p>One or more Spot Instance request IDs.</p>
    #
    # @return [Types::CancelSpotInstanceRequestsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_spot_instance_requests(
    #     dry_run: false,
    #     spot_instance_request_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelSpotInstanceRequestsOutput
    #   resp.data.cancelled_spot_instance_requests #=> Array<CancelledSpotInstanceRequest>
    #   resp.data.cancelled_spot_instance_requests[0] #=> Types::CancelledSpotInstanceRequest
    #   resp.data.cancelled_spot_instance_requests[0].spot_instance_request_id #=> String
    #   resp.data.cancelled_spot_instance_requests[0].state #=> String, one of ["active", "open", "closed", "cancelled", "completed"]
    #
    def cancel_spot_instance_requests(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelSpotInstanceRequestsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelSpotInstanceRequestsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelSpotInstanceRequests
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CancelSpotInstanceRequests
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CancelSpotInstanceRequests,
        params_class: Params::CancelSpotInstanceRequestsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :cancel_spot_instance_requests
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Determines whether a product code is associated with an instance. This action can only
    #             be used by the owner of the product code. It is useful when a product code owner must
    #             verify whether another user's instance is eligible for support.</p>
    #
    # @param [Hash] params
    #   See {Types::ConfirmProductInstanceInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :product_code
    #   <p>The product code. This must be a product code that you own.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ConfirmProductInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.confirm_product_instance(
    #     instance_id: 'InstanceId', # required
    #     product_code: 'ProductCode', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ConfirmProductInstanceOutput
    #   resp.data.owner_id #=> String
    #   resp.data.return #=> Boolean
    #
    def confirm_product_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ConfirmProductInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ConfirmProductInstanceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ConfirmProductInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ConfirmProductInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ConfirmProductInstance,
        params_class: Params::ConfirmProductInstanceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :confirm_product_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Copies the specified Amazon FPGA Image (AFI) to the current Region.</p>
    #
    # @param [Hash] params
    #   See {Types::CopyFpgaImageInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :source_fpga_image_id
    #   <p>The ID of the source AFI.</p>
    #
    # @option params [String] :description
    #   <p>The description for the new AFI.</p>
    #
    # @option params [String] :name
    #   <p>The name for the new AFI. The default is the name of the source AFI.</p>
    #
    # @option params [String] :source_region
    #   <p>The Region that contains the source AFI.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    #            For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    #
    # @return [Types::CopyFpgaImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.copy_fpga_image(
    #     dry_run: false,
    #     source_fpga_image_id: 'SourceFpgaImageId', # required
    #     description: 'Description',
    #     name: 'Name',
    #     source_region: 'SourceRegion', # required
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CopyFpgaImageOutput
    #   resp.data.fpga_image_id #=> String
    #
    def copy_fpga_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CopyFpgaImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CopyFpgaImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CopyFpgaImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CopyFpgaImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CopyFpgaImage,
        params_class: Params::CopyFpgaImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :copy_fpga_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Initiates the copy of an AMI. You can copy an AMI from one Region to another, or from a
    #       Region to an Outpost. You can't copy an AMI from an Outpost to a Region, from one Outpost
    #       to another, or within the same Outpost. To copy an AMI to another partition, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p>
    #      	
    #      	   <p>To copy an AMI from one Region to another, specify the source Region using the
    #      		<b>SourceRegion</b> parameter, and specify the
    #      		destination Region using its endpoint. Copies of encrypted backing snapshots for
    #      		the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted,
    #      		unless you set <code>Encrypted</code> during the copy operation. You cannot
    #      		create an unencrypted copy of an encrypted backing snapshot.</p>
    #    	
    #    	     <p>To copy an AMI from a Region to an Outpost, specify the source Region using the
    #    		<b>SourceRegion</b> parameter, and specify the
    #    		ARN of the destination Outpost using <b>DestinationOutpostArn</b>.
    #    		Backing snapshots copied to an Outpost are encrypted by default using the default
    #    		encryption key for the Region, or a different key that you specify in the request using
    #    		<b>KmsKeyId</b>. Outposts do not support unencrypted
    #    		snapshots. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
    #    			Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    #          <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying an AMI</a>
    #         in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CopyImageInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure
    #          idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>
    #          in the <i>Amazon EC2 API Reference</i>.</p>
    #
    # @option params [String] :description
    #   <p>A description for the new AMI in the destination Region.</p>
    #
    # @option params [Boolean] :encrypted
    #   <p>Specifies whether the destination snapshots of the copied image should be encrypted.
    #          You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted
    #          copy of an encrypted snapshot. The default KMS key for Amazon EBS is used unless you specify a non-default
    #          Key Management Service (KMS) KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :kms_key_id
    #   <p>The identifier of the symmetric Key Management Service (KMS) KMS key to use when creating
    #      		encrypted volumes. If this parameter is not specified, your Amazon Web Services managed KMS key for Amazon EBS is used.
    #      		If you specify a KMS key, you must also set the encrypted state to <code>true</code>.</p>
    #      	     <p>You can specify a KMS key using any of the following:</p>
    #      	     <ul>
    #               <li>
    #      			         <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #      		       </li>
    #               <li>
    #      	           <p>Key alias. For example, alias/ExampleAlias.</p>
    #      	        </li>
    #               <li>
    #      	           <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #      		       </li>
    #               <li>
    #      		          <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
    #      		       </li>
    #            </ul>
    #      	     <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an identifier that is not valid,
    #         the action can appear to complete, but eventually fails.</p>
    #      	     <p>The specified KMS key must exist in the destination Region.</p>
    #      	     <p>Amazon EBS does not support asymmetric KMS keys.</p>
    #
    # @option params [String] :name
    #   <p>The name of the new AMI in the destination Region.</p>
    #
    # @option params [String] :source_image_id
    #   <p>The ID of the AMI to copy.</p>
    #
    # @option params [String] :source_region
    #   <p>The name of the Region that contains the AMI to copy.</p>
    #
    # @option params [String] :destination_outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI. Only
    #     		specify this parameter when copying an AMI from an Amazon Web Services Region to an Outpost.
    #     		The AMI must be in the Region of the destination Outpost. You cannot copy an
    #     		AMI from an Outpost to a Region, from one Outpost to another, or within the same
    #     		Outpost.</p>
    #     	
    #     	      <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#copy-amis">
    #     		Copying AMIs from an Amazon Web Services Region to an Outpost</a> in the
    #     		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CopyImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.copy_image(
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     encrypted: false,
    #     kms_key_id: 'KmsKeyId',
    #     name: 'Name', # required
    #     source_image_id: 'SourceImageId', # required
    #     source_region: 'SourceRegion', # required
    #     destination_outpost_arn: 'DestinationOutpostArn',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CopyImageOutput
    #   resp.data.image_id #=> String
    #
    def copy_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CopyImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CopyImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CopyImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CopyImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CopyImage,
        params_class: Params::CopyImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :copy_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy a
    #       snapshot within the same Region, from one Region to another, or from a Region to an Outpost.
    #       You can't copy a snapshot from an Outpost to a Region, from one Outpost to another, or within
    #       the same Outpost.</p>
    #          <p>You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).</p>
    #
    #   	
    #          <p>When copying snapshots to a Region, copies of encrypted EBS snapshots remain encrypted.
    #     	Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the
    #     	snapshot copy operation. By default, encrypted snapshot copies use the default Key Management Service (KMS)
    #     	KMS key; however, you can specify a different KMS key. To copy an encrypted
    #     	snapshot that has been shared from another account, you must have permissions for the KMS key
    #     	used to encrypt the snapshot.</p>
    #   	
    #   	      <p>Snapshots copied to an Outpost are encrypted by default using the default
    #   		encryption key for the Region, or a different key that you specify in the request using
    #   		<b>KmsKeyId</b>. Outposts do not support unencrypted
    #   		snapshots. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
    #   			Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not
    #       be used for any purpose.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copy an Amazon EBS snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CopySnapshotInput}.
    #
    # @option params [String] :description
    #   <p>A description for the EBS snapshot.</p>
    #
    # @option params [String] :destination_outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost to which to copy the snapshot. Only
    #   		specify this parameter when copying a snapshot from an Amazon Web Services Region to an Outpost.
    #   		The snapshot must be in the Region for the destination Outpost. You cannot copy a
    #   		snapshot from an Outpost to a Region, from one Outpost to another, or within the same
    #   		Outpost.</p>
    #     	      <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#copy-snapshots">
    #     		Copy snapshots from an Amazon Web Services Region to an Outpost</a> in the
    #     		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :destination_region
    #   <p>The destination Region to use in the <code>PresignedUrl</code> parameter of a snapshot
    #         copy operation. This parameter is only valid for specifying the destination Region in a
    #           <code>PresignedUrl</code> parameter, where it is required.</p>
    #
    #            <p>The snapshot copy is sent to the regional endpoint that you sent the HTTP
    #       	request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With the CLI, this is
    #         specified using the <code>--region</code> parameter or the default Region in your Amazon Web Services
    #         configuration file.</p>
    #
    # @option params [Boolean] :encrypted
    #   <p>To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled,
    #         enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots
    #         are encrypted, even if you omit this parameter and encryption by default is not enabled. You
    #         cannot set this parameter to false. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :kms_key_id
    #   <p>The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption.
    #         If this parameter is not specified, your KMS key for Amazon EBS is used. If <code>KmsKeyId</code> is
    #         specified, the encrypted state must be <code>true</code>.</p>
    #            <p>You can specify the KMS key using any of the following:</p>
    #            <ul>
    #               <li>
    #                  <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #               </li>
    #               <li>
    #                  <p>Key alias. For example, alias/ExampleAlias.</p>
    #               </li>
    #               <li>
    #                  <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #               </li>
    #               <li>
    #                  <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
    #               </li>
    #            </ul>
    #            <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,
    #         the action can appear to complete, but eventually fails.</p>
    #
    # @option params [String] :presigned_url
    #   <p>When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a
    #         pre-signed URL. This parameter is optional for unencrypted snapshots. For more information,
    #         see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html">Query
    #           requests</a>.</p>
    #            <p>The <code>PresignedUrl</code> should use the snapshot source endpoint, the
    #           <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>,
    #           <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The
    #           <code>PresignedUrl</code> must be signed using Amazon Web Services Signature Version 4. Because EBS
    #         snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic
    #         that is described in <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query
    #           Parameters (Amazon Web Services Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An
    #         invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail
    #         asynchronously, and the snapshot will move to an <code>error</code> state.</p>
    #
    # @option params [String] :source_region
    #   <p>The ID of the Region that contains the snapshot to be copied.</p>
    #
    # @option params [String] :source_snapshot_id
    #   <p>The ID of the EBS snapshot to copy.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the new snapshot.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CopySnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.copy_snapshot(
    #     description: 'Description',
    #     destination_outpost_arn: 'DestinationOutpostArn',
    #     destination_region: 'DestinationRegion',
    #     encrypted: false,
    #     kms_key_id: 'KmsKeyId',
    #     presigned_url: 'PresignedUrl',
    #     source_region: 'SourceRegion', # required
    #     source_snapshot_id: 'SourceSnapshotId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CopySnapshotOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def copy_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CopySnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CopySnapshotInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CopySnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CopySnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CopySnapshot,
        params_class: Params::CopySnapshotOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :copy_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new Capacity Reservation with the specified attributes.</p>
    # 		       <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This
    # 			gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage.
    # 			By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it.
    # 			For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # 		
    # 		       <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to
    # 			fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try
    # 			again at a later time, try in a different Availability Zone, or request a smaller
    # 			capacity reservation. If your application is flexible across instance types and sizes,
    # 			try to create a Capacity Reservation with different instance attributes.</p>
    # 		
    # 		       <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance
    # 			limit for the selected instance type. If your request fails due to limit constraints,
    # 			increase your On-Demand Instance limit for the required instance type and try again. For
    # 			more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service
    # 				Quotas</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateCapacityReservationInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure Idempotency</a>.</p>
    #
    # @option params [String] :instance_type
    #   <p>The instance type for which to reserve capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [String] :instance_platform
    #   <p>The type of operating system for which to reserve capacity.</p>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to create the Capacity Reservation.</p>
    #
    # @option params [String] :availability_zone_id
    #   <p>The ID of the Availability Zone in which to create the Capacity Reservation.</p>
    #
    # @option params [String] :tenancy
    #   <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p>
    #   		       <ul>
    #               <li>
    #                  <p>
    #                     <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :instance_count
    #   <p>The number of instances for which to reserve capacity.</p>
    #   	  	     <p>Valid range: 1 - 1000</p>
    #
    # @option params [Boolean] :ebs_optimized
    #   <p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
    #   			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
    #   			optimal I/O performance. This optimization isn't available with all instance types.
    #   			Additional usage charges apply when using an EBS- optimized instance.</p>
    #
    # @option params [Boolean] :ephemeral_storage
    #   <p>Indicates whether the Capacity Reservation supports instances with temporary, block-level
    #   			storage.</p>
    #
    # @option params [Time] :end_date
    #   <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
    #   			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
    #   				<code>expired</code> when it reaches its end date and time.</p>	
    #   		       <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is
    #   				<code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is
    #   				<code>unlimited</code>.</p>
    #   		
    #   		       <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify
    #   			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
    #
    # @option params [String] :end_date_type
    #   <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
    #   			types:</p>
    #   		       <ul>
    #               <li>
    #                  <p>
    #                     <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not
    #   					provide an <code>EndDate</code> if the <code>EndDateType</code> is
    #   						<code>unlimited</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must
    #   					provide an <code>EndDate</code> value if the <code>EndDateType</code> value is
    #   						<code>limited</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :instance_match_criteria
    #   <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options
    #   			include:</p>
    #   		       <ul>
    #               <li>
    #                  <p>
    #                     <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform,
    #   				and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying
    #   				any additional parameters.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes
    #   					(instance type, platform, and Availability Zone), and explicitly target the
    #   					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p>
    #               </li>
    #            </ul>
    #   		       <p>Default: <code>open</code>
    #            </p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the Capacity Reservation during launch.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.</p>
    #
    # @option params [String] :placement_group_arn
    #   <p>The Amazon Resource Name (ARN) of the cluster placement group in which
    #   			to create the Capacity Reservation. For more information, see
    #   			<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html">
    #   				Capacity Reservations for cluster placement groups</a> in the
    #   			<i>Amazon EC2 User Guide</i>.</p>
    #
    # @return [Types::CreateCapacityReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_capacity_reservation(
    #     client_token: 'ClientToken',
    #     instance_type: 'InstanceType', # required
    #     instance_platform: 'Linux/UNIX', # required - accepts ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise"]
    #     availability_zone: 'AvailabilityZone',
    #     availability_zone_id: 'AvailabilityZoneId',
    #     tenancy: 'default', # accepts ["default", "dedicated"]
    #     instance_count: 1, # required
    #     ebs_optimized: false,
    #     ephemeral_storage: false,
    #     end_date: Time.now,
    #     end_date_type: 'unlimited', # accepts ["unlimited", "limited"]
    #     instance_match_criteria: 'open', # accepts ["open", "targeted"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     outpost_arn: 'OutpostArn',
    #     placement_group_arn: 'PlacementGroupArn'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCapacityReservationOutput
    #   resp.data.capacity_reservation #=> Types::CapacityReservation
    #   resp.data.capacity_reservation.capacity_reservation_id #=> String
    #   resp.data.capacity_reservation.owner_id #=> String
    #   resp.data.capacity_reservation.capacity_reservation_arn #=> String
    #   resp.data.capacity_reservation.availability_zone_id #=> String
    #   resp.data.capacity_reservation.instance_type #=> String
    #   resp.data.capacity_reservation.instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise"]
    #   resp.data.capacity_reservation.availability_zone #=> String
    #   resp.data.capacity_reservation.tenancy #=> String, one of ["default", "dedicated"]
    #   resp.data.capacity_reservation.total_instance_count #=> Integer
    #   resp.data.capacity_reservation.available_instance_count #=> Integer
    #   resp.data.capacity_reservation.ebs_optimized #=> Boolean
    #   resp.data.capacity_reservation.ephemeral_storage #=> Boolean
    #   resp.data.capacity_reservation.state #=> String, one of ["active", "expired", "cancelled", "pending", "failed"]
    #   resp.data.capacity_reservation.start_date #=> Time
    #   resp.data.capacity_reservation.end_date #=> Time
    #   resp.data.capacity_reservation.end_date_type #=> String, one of ["unlimited", "limited"]
    #   resp.data.capacity_reservation.instance_match_criteria #=> String, one of ["open", "targeted"]
    #   resp.data.capacity_reservation.create_date #=> Time
    #   resp.data.capacity_reservation.tags #=> Array<Tag>
    #   resp.data.capacity_reservation.tags[0] #=> Types::Tag
    #   resp.data.capacity_reservation.tags[0].key #=> String
    #   resp.data.capacity_reservation.tags[0].value #=> String
    #   resp.data.capacity_reservation.outpost_arn #=> String
    #   resp.data.capacity_reservation.capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservation.placement_group_arn #=> String
    #
    def create_capacity_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCapacityReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCapacityReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCapacityReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateCapacityReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateCapacityReservation,
        params_class: Params::CreateCapacityReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_capacity_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Capacity Reservation Fleet. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-cr-fleets.html#create-crfleet">Create a Capacity
    # 			Reservation Fleet</a> in the Amazon EC2 User Guide.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateCapacityReservationFleetInput}.
    #
    # @option params [String] :allocation_strategy
    #   <p>The strategy used by the Capacity Reservation Fleet to determine which of the
    #   			specified instance types to use. Currently, only the <code>prioritized</code>
    #   			allocation strategy is supported. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy">
    #   				Allocation strategy</a> in the Amazon EC2 User Guide.</p>
    #   		       <p>Valid values: <code>prioritized</code>
    #            </p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure Idempotency</a>.</p>
    #
    # @option params [Array<ReservationFleetInstanceSpecification>] :instance_type_specifications
    #   <p>Information about the instance types for which to reserve the capacity.</p>
    #
    # @option params [String] :tenancy
    #   <p>Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations
    #   			in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of
    #   			the following tenancy settings:</p>
    #   		       <ul>
    #               <li>
    #   				           <p>
    #   					             <code>default</code> - The Capacity Reservation Fleet is created on hardware
    #   					that is shared with other Amazon Web Services accounts.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #   					             <code>dedicated</code> - The Capacity Reservations are created on single-tenant
    #   					hardware that is dedicated to a single Amazon Web Services account.</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [Integer] :total_target_capacity
    #   <p>The total number of capacity units to be reserved by the Capacity Reservation Fleet. This
    #   			value, together with the instance type weights that you assign to each instance type used by
    #   			the Fleet determine the number of instances for which the Fleet reserves capacity. Both values
    #   			are based on units that make sense for your workload. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">
    #   				Total target capacity</a> in the Amazon EC2 User Guide.</p>
    #
    # @option params [Time] :end_date
    #   <p>The date and time at which the Capacity Reservation Fleet expires. When the Capacity
    #   			Reservation Fleet expires, its state changes to <code>expired</code> and all of the Capacity
    #   			Reservations in the Fleet expire.</p>	
    #   		       <p>The Capacity Reservation Fleet expires within an hour after the specified time. For example,
    #   			if you specify <code>5/31/2019</code>, <code>13:30:55</code>, the Capacity Reservation Fleet
    #   			is guaranteed to expire between <code>13:30:55</code> and <code>14:30:55</code> on
    #   			<code>5/31/2019</code>.
    #   		</p>
    #
    # @option params [String] :instance_match_criteria
    #   <p>Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All
    #   			Capacity Reservations in the Fleet inherit this instance matching criteria.</p>
    #   		       <p>Currently, Capacity Reservation Fleets support <code>open</code> instance matching criteria
    #   			only. This means that instances that have matching attributes (instance type, platform, and
    #   			Availability Zone) run in the Capacity Reservations automatically. Instances do not need to
    #   			explicitly target a Capacity Reservation Fleet to use its reserved capacity.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned
    #   			to the Capacity Reservations in the Fleet.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateCapacityReservationFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_capacity_reservation_fleet(
    #     allocation_strategy: 'AllocationStrategy',
    #     client_token: 'ClientToken',
    #     instance_type_specifications: [
    #       {
    #         instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #         instance_platform: 'Linux/UNIX', # accepts ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise"]
    #         weight: 1.0,
    #         availability_zone: 'AvailabilityZone',
    #         availability_zone_id: 'AvailabilityZoneId',
    #         ebs_optimized: false,
    #         priority: 1
    #       }
    #     ], # required
    #     tenancy: 'default', # accepts ["default"]
    #     total_target_capacity: 1, # required
    #     end_date: Time.now,
    #     instance_match_criteria: 'open', # accepts ["open"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCapacityReservationFleetOutput
    #   resp.data.capacity_reservation_fleet_id #=> String
    #   resp.data.state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.total_target_capacity #=> Integer
    #   resp.data.total_fulfilled_capacity #=> Float
    #   resp.data.instance_match_criteria #=> String, one of ["open"]
    #   resp.data.allocation_strategy #=> String
    #   resp.data.create_time #=> Time
    #   resp.data.end_date #=> Time
    #   resp.data.tenancy #=> String, one of ["default"]
    #   resp.data.fleet_capacity_reservations #=> Array<FleetCapacityReservation>
    #   resp.data.fleet_capacity_reservations[0] #=> Types::FleetCapacityReservation
    #   resp.data.fleet_capacity_reservations[0].capacity_reservation_id #=> String
    #   resp.data.fleet_capacity_reservations[0].availability_zone_id #=> String
    #   resp.data.fleet_capacity_reservations[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.fleet_capacity_reservations[0].instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise"]
    #   resp.data.fleet_capacity_reservations[0].availability_zone #=> String
    #   resp.data.fleet_capacity_reservations[0].total_instance_count #=> Integer
    #   resp.data.fleet_capacity_reservations[0].fulfilled_capacity #=> Float
    #   resp.data.fleet_capacity_reservations[0].ebs_optimized #=> Boolean
    #   resp.data.fleet_capacity_reservations[0].create_date #=> Time
    #   resp.data.fleet_capacity_reservations[0].weight #=> Float
    #   resp.data.fleet_capacity_reservations[0].priority #=> Integer
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def create_capacity_reservation_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCapacityReservationFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCapacityReservationFleetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCapacityReservationFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateCapacityReservationFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateCapacityReservationFleet,
        params_class: Params::CreateCapacityReservationFleetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_capacity_reservation_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a carrier gateway.   For more information about carrier gateways, see <a href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#wavelength-carrier-gateway">Carrier gateways</a> in the <i>Amazon Web Services Wavelength Developer Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateCarrierGatewayInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC to associate with the carrier gateway.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to associate with the carrier gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure
    #                   idempotency</a>.</p>
    #
    # @return [Types::CreateCarrierGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_carrier_gateway(
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCarrierGatewayOutput
    #   resp.data.carrier_gateway #=> Types::CarrierGateway
    #   resp.data.carrier_gateway.carrier_gateway_id #=> String
    #   resp.data.carrier_gateway.vpc_id #=> String
    #   resp.data.carrier_gateway.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.carrier_gateway.owner_id #=> String
    #   resp.data.carrier_gateway.tags #=> Array<Tag>
    #   resp.data.carrier_gateway.tags[0] #=> Types::Tag
    #   resp.data.carrier_gateway.tags[0].key #=> String
    #   resp.data.carrier_gateway.tags[0].value #=> String
    #
    def create_carrier_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCarrierGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCarrierGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCarrierGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateCarrierGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateCarrierGateway,
        params_class: Params::CreateCarrierGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_carrier_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to
    # 			enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions
    # 			are terminated.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateClientVpnEndpointInput}.
    #
    # @option params [String] :client_cidr_block
    #   <p>The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.</p>
    #
    # @option params [String] :server_certificate_arn
    #   <p>The ARN of the server certificate. For more information, see
    #   			the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">Certificate Manager User Guide</a>.</p>
    #
    # @option params [Array<ClientVpnAuthenticationRequest>] :authentication_options
    #   <p>Information about the authentication method to be used to authenticate clients.</p>
    #
    # @option params [ConnectionLogOptions] :connection_log_options
    #   <p>Information about the client connection logging options.</p>
    #   		       <p>If you enable client connection logging, data about client connections is sent to a
    #   			Cloudwatch Logs log stream. The following information is logged:</p>
    #   		       <ul>
    #               <li>
    #                  <p>Client connection requests</p>
    #               </li>
    #               <li>
    #                  <p>Client connection results (successful and unsuccessful)</p>
    #               </li>
    #               <li>
    #                  <p>Reasons for unsuccessful client connection requests</p>
    #               </li>
    #               <li>
    #                  <p>Client connection termination time</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :dns_servers
    #   <p>Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can
    #   			have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.</p>
    #
    # @option params [String] :transport_protocol
    #   <p>The transport protocol to be used by the VPN session.</p>
    #   		       <p>Default value: <code>udp</code>
    #            </p>
    #
    # @option params [Integer] :vpn_port
    #   <p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
    #   	        <p>Valid Values: <code>443</code> | <code>1194</code>
    #            </p>
    #   	        <p>Default Value: <code>443</code>
    #            </p>
    #
    # @option params [String] :description
    #   <p>A brief description of the Client VPN endpoint.</p>
    #
    # @option params [Boolean] :split_tunnel
    #   <p>Indicates whether split-tunnel is enabled on the Client VPN endpoint.</p>
    #   		       <p>By default, split-tunnel on a VPN endpoint is disabled.</p>
    #   		       <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel Client VPN endpoint</a> in the
    #   			<i>Client VPN Administrator Guide</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the Client VPN endpoint during creation.</p>
    #
    # @option params [Array<String>] :security_group_ids
    #   <p>The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.</p>
    #
    # @option params [String] :self_service_portal
    #   <p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>
    #           <p>Default Value: <code>enabled</code>
    #            </p>
    #
    # @option params [ClientConnectOptions] :client_connect_options
    #   <p>The options for managing connection authorization for new client connections.</p>
    #
    # @return [Types::CreateClientVpnEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_client_vpn_endpoint(
    #     client_cidr_block: 'ClientCidrBlock', # required
    #     server_certificate_arn: 'ServerCertificateArn', # required
    #     authentication_options: [
    #       {
    #         type: 'certificate-authentication', # accepts ["certificate-authentication", "directory-service-authentication", "federated-authentication"]
    #         active_directory: {
    #           directory_id: 'DirectoryId'
    #         },
    #         mutual_authentication: {
    #           client_root_certificate_chain_arn: 'ClientRootCertificateChainArn'
    #         },
    #         federated_authentication: {
    #           saml_provider_arn: 'SAMLProviderArn',
    #           self_service_saml_provider_arn: 'SelfServiceSAMLProviderArn'
    #         }
    #       }
    #     ], # required
    #     connection_log_options: {
    #       enabled: false,
    #       cloudwatch_log_group: 'CloudwatchLogGroup',
    #       cloudwatch_log_stream: 'CloudwatchLogStream'
    #     }, # required
    #     dns_servers: [
    #       'member'
    #     ],
    #     transport_protocol: 'tcp', # accepts ["tcp", "udp"]
    #     vpn_port: 1,
    #     description: 'Description',
    #     split_tunnel: false,
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_ids: [
    #       'member'
    #     ],
    #     vpc_id: 'VpcId',
    #     self_service_portal: 'enabled', # accepts ["enabled", "disabled"]
    #     client_connect_options: {
    #       enabled: false,
    #       lambda_function_arn: 'LambdaFunctionArn'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateClientVpnEndpointOutput
    #   resp.data.client_vpn_endpoint_id #=> String
    #   resp.data.status #=> Types::ClientVpnEndpointStatus
    #   resp.data.status.code #=> String, one of ["pending-associate", "available", "deleting", "deleted"]
    #   resp.data.status.message #=> String
    #   resp.data.dns_name #=> String
    #
    def create_client_vpn_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateClientVpnEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateClientVpnEndpointInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateClientVpnEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateClientVpnEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateClientVpnEndpoint,
        params_class: Params::CreateClientVpnEndpointOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_client_vpn_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the
    # 			available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateClientVpnRouteInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint to which to add the route.</p>
    #
    # @option params [String] :destination_cidr_block
    #   <p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p>
    #   		       <ul>
    #               <li>
    #                  <p>To add a route for Internet access, enter <code>0.0.0.0/0</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p>
    #               </li>
    #               <li>
    #                  <p>To add a route for an on-premises network, enter the Amazon Web Services Site-to-Site VPN connection's IPv4 CIDR range</p>
    #               </li>
    #               <li>
    #                  <p>To add a route for the local network, enter the client CIDR range</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :target_vpc_subnet_id
    #   <p>The ID of the subnet through which you want to route traffic. The specified subnet must be
    #   			an existing target network of the Client VPN endpoint.</p>
    #   	        <p>Alternatively, if you're adding a route for the local network, specify <code>local</code>.</p>
    #
    # @option params [String] :description
    #   <p>A brief description of the route.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateClientVpnRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_client_vpn_route(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     target_vpc_subnet_id: 'TargetVpcSubnetId', # required
    #     description: 'Description',
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateClientVpnRouteOutput
    #   resp.data.status #=> Types::ClientVpnRouteStatus
    #   resp.data.status.code #=> String, one of ["creating", "active", "failed", "deleting"]
    #   resp.data.status.message #=> String
    #
    def create_client_vpn_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateClientVpnRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateClientVpnRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateClientVpnRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateClientVpnRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateClientVpnRoute,
        params_class: Params::CreateClientVpnRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_client_vpn_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provides information to Amazon Web Services about your VPN customer gateway device. The
    #             customer gateway is the appliance at your end of the VPN connection. (The device on the
    #                 Amazon Web Services side of the VPN connection is the virtual private gateway.) You
    #             must provide the internet-routable IP address of the customer gateway's external
    #             interface. The IP address must be static and can be behind a device performing network
    #             address translation (NAT).</p>
    #         <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's
    #             BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your
    #             network. If you don't have an ASN already, you can use a private ASN (in the 64512 -
    #             65534 range).</p>
    #         <note>
    #             <p>Amazon EC2 supports all 4-byte ASN numbers in the range of 1 - 2147483647, with
    #                 the exception of the following:</p>
    #             <ul>
    #                <li>
    #                     <p>7224 - reserved in the <code>us-east-1</code> Region</p>
    #                 </li>
    #                <li>
    #                     <p>9059 - reserved in the <code>eu-west-1</code> Region</p>
    #                 </li>
    #                <li>
    #                     <p>17943 - reserved in the <code>ap-southeast-1</code> Region</p>
    #                 </li>
    #                <li>
    #                     <p>10124 - reserved in the <code>ap-northeast-1</code> Region</p>
    #                 </li>
    #             </ul>
    #         </note>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #         <important>
    #             <p>To create more than one customer gateway with the same VPN type, IP address, and
    #                 BGP ASN, specify a unique device name for each customer gateway. Identical requests
    #                 return information about the existing customer gateway and do not create new
    #                 customer gateways.</p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::CreateCustomerGatewayInput}.
    #
    # @option params [Integer] :bgp_asn
    #   <p>For devices that support BGP, the customer gateway's BGP ASN.</p>
    #           <p>Default: 65000</p>
    #
    # @option params [String] :public_ip
    #   <p>The Internet-routable IP address for the customer gateway's outside interface. The
    #               address must be static.</p>
    #
    # @option params [String] :certificate_arn
    #   <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    #
    # @option params [String] :type
    #   <p>The type of VPN connection that this customer gateway supports
    #               (<code>ipsec.1</code>).</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the customer gateway.</p>
    #
    # @option params [String] :device_name
    #   <p>A name for the customer gateway device.</p>
    #           <p>Length Constraints: Up to 255 characters.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateCustomerGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_customer_gateway(
    #     bgp_asn: 1, # required
    #     public_ip: 'PublicIp',
    #     certificate_arn: 'CertificateArn',
    #     type: 'ipsec.1', # required - accepts ["ipsec.1"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     device_name: 'DeviceName',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateCustomerGatewayOutput
    #   resp.data.customer_gateway #=> Types::CustomerGateway
    #   resp.data.customer_gateway.bgp_asn #=> String
    #   resp.data.customer_gateway.customer_gateway_id #=> String
    #   resp.data.customer_gateway.ip_address #=> String
    #   resp.data.customer_gateway.certificate_arn #=> String
    #   resp.data.customer_gateway.state #=> String
    #   resp.data.customer_gateway.type #=> String
    #   resp.data.customer_gateway.device_name #=> String
    #   resp.data.customer_gateway.tags #=> Array<Tag>
    #   resp.data.customer_gateway.tags[0] #=> Types::Tag
    #   resp.data.customer_gateway.tags[0].key #=> String
    #   resp.data.customer_gateway.tags[0].value #=> String
    #
    def create_customer_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateCustomerGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateCustomerGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateCustomerGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateCustomerGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateCustomerGateway,
        params_class: Params::CreateCustomerGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_customer_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the
    #             specified Availability Zone in your default VPC. You can have only one default subnet
    #             per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Creating a default
    #                 subnet</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDefaultSubnetInput}.
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to create the default subnet.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :ipv6_native
    #   <p>Indicates whether to create an IPv6 only subnet. If you already have a default subnet
    #               for this Availability Zone, you must delete it before you can create an IPv6 only subnet.</p>
    #
    # @return [Types::CreateDefaultSubnetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_default_subnet(
    #     availability_zone: 'AvailabilityZone', # required
    #     dry_run: false,
    #     ipv6_native: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDefaultSubnetOutput
    #   resp.data.subnet #=> Types::Subnet
    #   resp.data.subnet.availability_zone #=> String
    #   resp.data.subnet.availability_zone_id #=> String
    #   resp.data.subnet.available_ip_address_count #=> Integer
    #   resp.data.subnet.cidr_block #=> String
    #   resp.data.subnet.default_for_az #=> Boolean
    #   resp.data.subnet.enable_lni_at_device_index #=> Integer
    #   resp.data.subnet.map_public_ip_on_launch #=> Boolean
    #   resp.data.subnet.map_customer_owned_ip_on_launch #=> Boolean
    #   resp.data.subnet.customer_owned_ipv4_pool #=> String
    #   resp.data.subnet.state #=> String, one of ["pending", "available"]
    #   resp.data.subnet.subnet_id #=> String
    #   resp.data.subnet.vpc_id #=> String
    #   resp.data.subnet.owner_id #=> String
    #   resp.data.subnet.assign_ipv6_address_on_creation #=> Boolean
    #   resp.data.subnet.ipv6_cidr_block_association_set #=> Array<SubnetIpv6CidrBlockAssociation>
    #   resp.data.subnet.ipv6_cidr_block_association_set[0] #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet.tags #=> Array<Tag>
    #   resp.data.subnet.tags[0] #=> Types::Tag
    #   resp.data.subnet.tags[0].key #=> String
    #   resp.data.subnet.tags[0].value #=> String
    #   resp.data.subnet.subnet_arn #=> String
    #   resp.data.subnet.outpost_arn #=> String
    #   resp.data.subnet.enable_dns64 #=> Boolean
    #   resp.data.subnet.ipv6_native #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch #=> Types::PrivateDnsNameOptionsOnLaunch
    #   resp.data.subnet.private_dns_name_options_on_launch.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_aaaa_record #=> Boolean
    #
    def create_default_subnet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDefaultSubnetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDefaultSubnetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDefaultSubnet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateDefaultSubnet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateDefaultSubnet,
        params_class: Params::CreateDefaultSubnetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_default_subnet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet
    # 			in each Availability Zone. For more information about the components of a default VPC,
    # 			see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default VPC and
    # 			default subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. You cannot
    # 			specify the components of the default VPC yourself.</p>
    # 		       <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have
    # 			more than one default VPC per Region.</p>
    # 		       <p>If your account supports EC2-Classic, you cannot use this action to create a default VPC
    # 			in a Region that supports EC2-Classic. If you want a default VPC in a Region that
    # 			supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is
    # 			that possible?" in the <a href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs
    # 			FAQ</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDefaultVpcInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateDefaultVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_default_vpc(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDefaultVpcOutput
    #   resp.data.vpc #=> Types::Vpc
    #   resp.data.vpc.cidr_block #=> String
    #   resp.data.vpc.dhcp_options_id #=> String
    #   resp.data.vpc.state #=> String, one of ["pending", "available"]
    #   resp.data.vpc.vpc_id #=> String
    #   resp.data.vpc.owner_id #=> String
    #   resp.data.vpc.instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.vpc.ipv6_cidr_block_association_set #=> Array<VpcIpv6CidrBlockAssociation>
    #   resp.data.vpc.ipv6_cidr_block_association_set[0] #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].network_border_group #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_pool #=> String
    #   resp.data.vpc.cidr_block_association_set #=> Array<VpcCidrBlockAssociation>
    #   resp.data.vpc.cidr_block_association_set[0] #=> Types::VpcCidrBlockAssociation
    #   resp.data.vpc.cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.is_default #=> Boolean
    #   resp.data.vpc.tags #=> Array<Tag>
    #   resp.data.vpc.tags[0] #=> Types::Tag
    #   resp.data.vpc.tags[0].key #=> String
    #   resp.data.vpc.tags[0].value #=> String
    #
    def create_default_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDefaultVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDefaultVpcInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDefaultVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateDefaultVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateDefaultVpc,
        params_class: Params::CreateDefaultVpcOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_default_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a set of DHCP options for your VPC. After creating the set, you must
    # 				associate it with the VPC, causing all existing and new instances that you launch in
    # 				the VPC to use this set of DHCP options. The following are the individual DHCP
    # 				options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>domain-name-servers</code> - The IP addresses of up to four domain name
    #                     servers, or AmazonProvidedDNS. The default DHCP option set specifies
    #                     AmazonProvidedDNS. If specifying more than one domain name server, specify the
    #                     IP addresses in a single parameter, separated by commas. To have your instance
    #                     receive a custom DNS hostname as specified in <code>domain-name</code>, you must
    #                     set <code>domain-name-servers</code> to a custom DNS server.</p>
    #            </li>
    #             <li>
    #                <p>
    #                   <code>domain-name</code> - If you're using AmazonProvidedDNS in
    #                    <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using
    #                    AmazonProvidedDNS in another Region, specify
    #                    <code>region.compute.internal</code> (for example,
    #                    <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain
    #                    name (for example, <code>ExampleCompany.com</code>). This value is used to complete
    #                    unqualified DNS hostnames. <b>Important</b>: Some
    #                    Linux operating systems accept multiple domain names separated by spaces.
    #                    However, Windows and other Linux operating systems treat the value as a single
    #                    domain, which results in unexpected behavior. If your DHCP options set is
    #                    associated with a VPC that has instances with multiple operating systems,
    #                    specify only one domain name.</p>
    #            </li>
    #             <li>
    #                <p>
    #                   <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP)
    #                    servers.</p>
    #            </li>
    #             <li>
    #                <p>
    #                   <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name
    #                    servers.</p>
    #            </li>
    #             <li>
    #                <p>
    #                   <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that
    #                    you specify 2 (broadcast and multicast are not currently supported). For more information
    #                    about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p>
    #            </li>
    #          </ul>
    #
    #          <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS
    # 			server that we provide (AmazonProvidedDNS). If you create a set of options, and if your
    # 			VPC has an internet gateway, make sure to set the <code>domain-name-servers</code>
    # 			option either to <code>AmazonProvidedDNS</code> or to a domain name server of your
    # 			choice. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the
    # 			<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateDhcpOptionsInput}.
    #
    # @option params [Array<NewDhcpConfiguration>] :dhcp_configurations
    #   <p>A DHCP configuration option.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the DHCP option.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateDhcpOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_dhcp_options(
    #     dhcp_configurations: [
    #       {
    #         key: 'Key',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ], # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateDhcpOptionsOutput
    #   resp.data.dhcp_options #=> Types::DhcpOptions
    #   resp.data.dhcp_options.dhcp_configurations #=> Array<DhcpConfiguration>
    #   resp.data.dhcp_options.dhcp_configurations[0] #=> Types::DhcpConfiguration
    #   resp.data.dhcp_options.dhcp_configurations[0].key #=> String
    #   resp.data.dhcp_options.dhcp_configurations[0].values #=> Array<AttributeValue>
    #   resp.data.dhcp_options.dhcp_configurations[0].values[0] #=> Types::AttributeValue
    #   resp.data.dhcp_options.dhcp_configurations[0].values[0].value #=> String
    #   resp.data.dhcp_options.dhcp_options_id #=> String
    #   resp.data.dhcp_options.owner_id #=> String
    #   resp.data.dhcp_options.tags #=> Array<Tag>
    #   resp.data.dhcp_options.tags[0] #=> Types::Tag
    #   resp.data.dhcp_options.tags[0].key #=> String
    #   resp.data.dhcp_options.tags[0].value #=> String
    #
    def create_dhcp_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateDhcpOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateDhcpOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateDhcpOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateDhcpOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateDhcpOptions,
        params_class: Params::CreateDhcpOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_dhcp_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only
    # 			internet gateway is used to enable outbound communication over IPv6 from instances in
    # 			your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6
    # 			connection with your instance.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateEgressOnlyInternetGatewayInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #   			request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure
    #   				idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC for which to create the egress-only internet gateway.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the egress-only internet gateway.</p>
    #
    # @return [Types::CreateEgressOnlyInternetGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_egress_only_internet_gateway(
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateEgressOnlyInternetGatewayOutput
    #   resp.data.client_token #=> String
    #   resp.data.egress_only_internet_gateway #=> Types::EgressOnlyInternetGateway
    #   resp.data.egress_only_internet_gateway.attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.egress_only_internet_gateway.attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.egress_only_internet_gateway.attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.egress_only_internet_gateway.attachments[0].vpc_id #=> String
    #   resp.data.egress_only_internet_gateway.egress_only_internet_gateway_id #=> String
    #   resp.data.egress_only_internet_gateway.tags #=> Array<Tag>
    #   resp.data.egress_only_internet_gateway.tags[0] #=> Types::Tag
    #   resp.data.egress_only_internet_gateway.tags[0].key #=> String
    #   resp.data.egress_only_internet_gateway.tags[0].value #=> String
    #
    def create_egress_only_internet_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateEgressOnlyInternetGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateEgressOnlyInternetGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateEgressOnlyInternetGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateEgressOnlyInternetGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateEgressOnlyInternetGateway,
        params_class: Params::CreateEgressOnlyInternetGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_egress_only_internet_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Launches an EC2 Fleet.</p>
    #          <p>You can create a single EC2 Fleet that includes multiple launch specifications that vary by
    #          instance type, AMI, Availability Zone, or subnet.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching an EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateFleetInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #            request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #               Idempotency</a>.</p>
    #
    # @option params [SpotOptionsRequest] :spot_options
    #   <p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>
    #
    # @option params [OnDemandOptionsRequest] :on_demand_options
    #   <p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>
    #
    # @option params [String] :excess_capacity_termination_policy
    #   <p>Indicates whether running instances should be terminated if the total target capacity of
    #            the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>
    #
    # @option params [Array<FleetLaunchTemplateConfigRequest>] :launch_template_configs
    #   <p>The configuration for the EC2 Fleet.</p>
    #
    # @option params [TargetCapacitySpecificationRequest] :target_capacity_specification
    #   <p>The number of units to request.</p>
    #
    # @option params [Boolean] :terminate_instances_with_expiration
    #   <p>Indicates whether running instances should be terminated when the EC2 Fleet expires.</p>
    #
    # @option params [String] :type
    #   <p>The fleet type. The default value is <code>maintain</code>.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>maintain</code> - The EC2 Fleet places an asynchronous request for your desired
    #                  capacity, and continues to maintain your desired Spot capacity by replenishing
    #                  interrupted Spot Instances.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>request</code> - The EC2 Fleet places an asynchronous one-time request for your
    #                  desired capacity, but does submit Spot requests in alternative capacity pools if Spot
    #                  capacity is unavailable, and does not maintain Spot capacity if Spot Instances are
    #                  interrupted.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instant</code> - The EC2 Fleet places a synchronous one-time request for your
    #                  desired capacity, and returns errors for any instances that could not be
    #                  launched.</p>
    #               </li>
    #            </ul>
    #            <p>For more information, see <a href="https://docs.aws.amazon.com/https:/docs.aws.amazon.com/ec2-fleet-request-type.html">EC2 Fleet
    #               request types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [Time] :valid_from
    #   <p>The start date and time of the request, in UTC format (for example,
    #               <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    #            The default is to start fulfilling the request immediately.</p>
    #
    # @option params [Time] :valid_until
    #   <p>The end date and time of the request, in UTC format (for example,
    #               <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    #            At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.</p>
    #
    # @option params [Boolean] :replace_unhealthy_instances
    #   <p>Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for
    #            fleets of type <code>maintain</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks">EC2 Fleet
    #               health checks</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The key-value pair for tagging the EC2 Fleet request on creation. For more information, see
    #            <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging your resources</a>.</p>
    #            <p>If the fleet type is <code>instant</code>, specify a resource type of <code>fleet</code>
    #            to tag the fleet or <code>instance</code> to tag the instances at launch.</p>
    #            <p>If the fleet type is <code>maintain</code> or <code>request</code>, specify a resource
    #            type of <code>fleet</code> to tag the fleet. You cannot specify a resource type of
    #               <code>instance</code>. To tag instances at launch, specify the tags in a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch template</a>.</p>
    #
    # @option params [String] :context
    #   <p>Reserved.</p>
    #
    # @return [Types::CreateFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_fleet(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     spot_options: {
    #       allocation_strategy: 'lowest-price', # accepts ["lowest-price", "diversified", "capacity-optimized", "capacity-optimized-prioritized"]
    #       maintenance_strategies: {
    #         capacity_rebalance: {
    #           replacement_strategy: 'launch', # accepts ["launch", "launch-before-terminate"]
    #           termination_delay: 1
    #         }
    #       },
    #       instance_interruption_behavior: 'hibernate', # accepts ["hibernate", "stop", "terminate"]
    #       instance_pools_to_use_count: 1,
    #       single_instance_type: false,
    #       single_availability_zone: false,
    #       min_target_capacity: 1,
    #       max_total_price: 'MaxTotalPrice'
    #     },
    #     on_demand_options: {
    #       allocation_strategy: 'lowest-price', # accepts ["lowest-price", "prioritized"]
    #       capacity_reservation_options: {
    #         usage_strategy: 'use-capacity-reservations-first' # accepts ["use-capacity-reservations-first"]
    #       },
    #       single_instance_type: false,
    #       single_availability_zone: false,
    #       min_target_capacity: 1,
    #       max_total_price: 'MaxTotalPrice'
    #     },
    #     excess_capacity_termination_policy: 'no-termination', # accepts ["no-termination", "termination"]
    #     launch_template_configs: [
    #       {
    #         launch_template_specification: {
    #           launch_template_id: 'LaunchTemplateId',
    #           launch_template_name: 'LaunchTemplateName',
    #           version: 'Version'
    #         },
    #         overrides: [
    #           {
    #             instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #             max_price: 'MaxPrice',
    #             subnet_id: 'SubnetId',
    #             availability_zone: 'AvailabilityZone',
    #             weighted_capacity: 1.0,
    #             priority: 1.0,
    #             placement: {
    #               availability_zone: 'AvailabilityZone',
    #               affinity: 'Affinity',
    #               group_name: 'GroupName',
    #               partition_number: 1,
    #               host_id: 'HostId',
    #               tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #               spread_domain: 'SpreadDomain',
    #               host_resource_group_arn: 'HostResourceGroupArn'
    #             },
    #             instance_requirements: {
    #               v_cpu_count: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               memory_mi_b: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               cpu_manufacturers: [
    #                 'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #               ],
    #               memory_gi_b_per_v_cpu: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               excluded_instance_types: [
    #                 'member'
    #               ],
    #               instance_generations: [
    #                 'current' # accepts ["current", "previous"]
    #               ],
    #               spot_max_price_percentage_over_lowest_price: 1,
    #               on_demand_max_price_percentage_over_lowest_price: 1,
    #               bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #               burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #               require_hibernate_support: false,
    #               network_interface_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               local_storage: 'included', # accepts ["included", "required", "excluded"]
    #               local_storage_types: [
    #                 'hdd' # accepts ["hdd", "ssd"]
    #               ],
    #               total_local_storage_gb: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               baseline_ebs_bandwidth_mbps: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_types: [
    #                 'gpu' # accepts ["gpu", "fpga", "inference"]
    #               ],
    #               accelerator_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_manufacturers: [
    #                 'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #               ],
    #               accelerator_names: [
    #                 'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #               ],
    #               accelerator_total_memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               }
    #             }
    #           }
    #         ]
    #       }
    #     ], # required
    #     target_capacity_specification: {
    #       total_target_capacity: 1, # required
    #       on_demand_target_capacity: 1,
    #       spot_target_capacity: 1,
    #       default_target_capacity_type: 'spot', # accepts ["spot", "on-demand"]
    #       target_capacity_unit_type: 'vcpu' # accepts ["vcpu", "memory-mib", "units"]
    #     }, # required
    #     terminate_instances_with_expiration: false,
    #     type: 'request', # accepts ["request", "maintain", "instant"]
    #     valid_from: Time.now,
    #     valid_until: Time.now,
    #     replace_unhealthy_instances: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     context: 'Context'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateFleetOutput
    #   resp.data.fleet_id #=> String
    #   resp.data.errors #=> Array<CreateFleetError>
    #   resp.data.errors[0] #=> Types::CreateFleetError
    #   resp.data.errors[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification.launch_template_id #=> String
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification.launch_template_name #=> String
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification.version #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides #=> Types::FleetLaunchTemplateOverrides
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.max_price #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.subnet_id #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.availability_zone #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.weighted_capacity #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.priority #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.placement #=> Types::PlacementResponse
    #   resp.data.errors[0].launch_template_and_overrides.overrides.placement.group_name #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.errors[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.errors[0].error_code #=> String
    #   resp.data.errors[0].error_message #=> String
    #   resp.data.instances #=> Array<CreateFleetInstance>
    #   resp.data.instances[0] #=> Types::CreateFleetInstance
    #   resp.data.instances[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.instances[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.instances[0].instance_ids #=> Array<String>
    #   resp.data.instances[0].instance_ids[0] #=> String
    #   resp.data.instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.instances[0].platform #=> String, one of ["Windows"]
    #
    def create_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateFleetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateFleet,
        params_class: Params::CreateFleetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface,
    #             subnet, or VPC. </p>
    #
    #         <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events
    #             consisting of fields that describe the traffic flow. For more information, see
    #             <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow log records</a>
    #             in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    #         <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network
    #             interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all
    #             of the monitored network interfaces are published to a single log file object that is stored in the specified
    #             bucket.</p>
    #
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateFlowLogsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure
    #                   idempotency</a>.</p>
    #
    # @option params [String] :deliver_logs_permission_arn
    #   <p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group
    #               in your account.</p>
    #           <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify
    #               <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    #
    # @option params [String] :log_group_name
    #   <p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p>
    #           <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify
    #               <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    #
    # @option params [Array<String>] :resource_ids
    #   <p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p>
    #           <p>Constraints: Maximum of 1000 resources</p>
    #
    # @option params [String] :resource_type
    #   <p>The type of resource for which to create the flow log. For example, if you specified a VPC ID for
    #               the <code>ResourceId</code> property, specify <code>VPC</code> for this property.</p>
    #
    # @option params [String] :traffic_type
    #   <p>The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.</p>
    #
    # @option params [String] :log_destination_type
    #   <p>The type of destination to which the flow log data is to be published. Flow log data can be
    #               published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To
    #               publish flow log data to Amazon S3, specify <code>s3</code>.</p>
    #           <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify
    #               <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    #           <p>Default: <code>cloud-watch-logs</code>
    #            </p>
    #
    # @option params [String] :log_destination
    #   <p>The destination to which the flow log data is to be published. Flow log data can be published
    #               to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified
    #               for <code>LogDestinationType</code>.</p>
    #           <p>If <code>LogDestinationType</code> is not specified or <code>cloud-watch-logs</code>,
    #               specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish
    #               to a log group called <code>my-logs</code>, specify
    #               <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>. Alternatively,
    #               use <code>LogGroupName</code> instead.</p>
    #           <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a
    #               subfolder in the bucket. To specify a subfolder in the bucket, use the following  ARN format:
    #               <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a
    #               bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You
    #               cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p>
    #
    # @option params [String] :log_format
    #   <p>The fields to include in the flow log record, in the order in which they should
    #               appear. For a list of available fields, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow log records</a>. If you
    #               omit this parameter, the flow log is created using the default format. If you specify this parameter,
    #               you must specify at least one field.</p>
    #           <p>Specify the fields using the <code>${field-id}</code> format, separated by spaces. For
    #               the CLI, surround this parameter value with single quotes on Linux or
    #               double quotes on Windows.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the flow logs.</p>
    #
    # @option params [Integer] :max_aggregation_interval
    #   <p>The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).</p>
    #           <p>When a network interface is attached to a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
    #                   instance</a>, the aggregation interval is always 60 seconds or less, regardless
    #               of the value that you specify.</p>
    #           <p>Default: 600</p>
    #
    # @option params [DestinationOptionsRequest] :destination_options
    #   <p>The destination options.</p>
    #
    # @return [Types::CreateFlowLogsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_flow_logs(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     deliver_logs_permission_arn: 'DeliverLogsPermissionArn',
    #     log_group_name: 'LogGroupName',
    #     resource_ids: [
    #       'member'
    #     ], # required
    #     resource_type: 'VPC', # required - accepts ["VPC", "Subnet", "NetworkInterface"]
    #     traffic_type: 'ACCEPT', # required - accepts ["ACCEPT", "REJECT", "ALL"]
    #     log_destination_type: 'cloud-watch-logs', # accepts ["cloud-watch-logs", "s3"]
    #     log_destination: 'LogDestination',
    #     log_format: 'LogFormat',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     max_aggregation_interval: 1,
    #     destination_options: {
    #       file_format: 'plain-text', # accepts ["plain-text", "parquet"]
    #       hive_compatible_partitions: false,
    #       per_hour_partition: false
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateFlowLogsOutput
    #   resp.data.client_token #=> String
    #   resp.data.flow_log_ids #=> Array<String>
    #   resp.data.flow_log_ids[0] #=> String
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def create_flow_logs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateFlowLogsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateFlowLogsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateFlowLogs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateFlowLogs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateFlowLogs,
        params_class: Params::CreateFlowLogsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_flow_logs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p>
    #          <p>The create operation is asynchronous. To verify that the AFI is ready for use,
    #          check the output logs.</p>
    #          <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA.
    #          You can securely deploy an AFI on multiple FPGA-accelerated instances.
    #          For more information, see the <a href="https://github.com/aws/aws-fpga/">Amazon Web Services FPGA Hardware Development Kit</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateFpgaImageInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [StorageLocation] :input_storage_location
    #   <p>The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.</p>
    #
    # @option params [StorageLocation] :logs_storage_location
    #   <p>The location in Amazon S3 for the output logs.</p>
    #
    # @option params [String] :description
    #   <p>A description for the AFI.</p>
    #
    # @option params [String] :name
    #   <p>A name for the AFI.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    #            For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the FPGA image during creation.</p>
    #
    # @return [Types::CreateFpgaImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_fpga_image(
    #     dry_run: false,
    #     input_storage_location: {
    #       bucket: 'Bucket',
    #       key: 'Key'
    #     }, # required
    #     description: 'Description',
    #     name: 'Name',
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateFpgaImageOutput
    #   resp.data.fpga_image_id #=> String
    #   resp.data.fpga_image_global_id #=> String
    #
    def create_fpga_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateFpgaImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateFpgaImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateFpgaImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateFpgaImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateFpgaImage,
        params_class: Params::CreateFpgaImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_fpga_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance
    #      	that is either running or stopped.</p>
    #
    #
    #
    #    	
    #    	     <p>If you customized your instance with instance store volumes or Amazon EBS volumes in addition to the root device volume, the
    #      	new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI,
    #      	the instance automatically launches with those additional volumes.</p>
    #    	     <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a>
    # 				in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateImageInput}.
    #
    # @option params [Array<BlockDeviceMapping>] :block_device_mappings
    #   <p>The block device mappings. This parameter cannot be used to modify the encryption
    #      		status of existing volumes or snapshots. To create an AMI with encrypted snapshots,
    #      		use the <a>CopyImage</a> action.</p>
    #
    # @option params [String] :description
    #   <p>A description for the new image.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :name
    #   <p>A name for the new image.</p>
    #            <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    #
    # @option params [Boolean] :no_reboot
    #   <p>By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image.
    #          If the <code>No Reboot</code> option is set, Amazon EC2 doesn't shut down the instance before creating
    #          the image. Without a reboot, the AMI will be crash consistent (all the volumes are snapshotted
    #          at the same time), but not application consistent (all the operating system buffers are not flushed
    #          to disk before the snapshots are created).</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the AMI and snapshots on creation. You can tag the AMI, the
    #         snapshots, or both.</p>
    #            <ul>
    #               <li>
    #                  <p>To tag the AMI, the value for <code>ResourceType</code> must be
    #             <code>image</code>.</p>
    #               </li>
    #               <li>
    #         	        <p>To tag the snapshots that are created of the root volume and of other Amazon EBS volumes that
    #             are attached to the instance, the value for <code>ResourceType</code> must be
    #               <code>snapshot</code>. The same tag is applied to all of the snapshots that are
    #             created.</p>
    #               </li>
    #            </ul>
    #            <p>If you specify other values for <code>ResourceType</code>, the request fails.</p>
    #            <p>To tag an AMI or snapshot after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>. </p>
    #
    # @return [Types::CreateImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_image(
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         virtual_name: 'VirtualName',
    #         ebs: {
    #           delete_on_termination: false,
    #           iops: 1,
    #           snapshot_id: 'SnapshotId',
    #           volume_size: 1,
    #           volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #           kms_key_id: 'KmsKeyId',
    #           throughput: 1,
    #           outpost_arn: 'OutpostArn',
    #           encrypted: false
    #         },
    #         no_device: 'NoDevice'
    #       }
    #     ],
    #     description: 'Description',
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     name: 'Name', # required
    #     no_reboot: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateImageOutput
    #   resp.data.image_id #=> String
    #
    def create_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateImage,
        params_class: Params::CreateImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an event window in which scheduled events for the associated Amazon EC2 instances can
    #          run.</p>
    #          <p>You can define either a set of time ranges or a cron expression when creating the event
    #          window, but not both. All event window times are in UTC.</p>
    #          <p>You can create up to 200 event windows per Amazon Web Services Region.</p>
    #          <p>When you create the event window, targets (instance IDs, Dedicated Host IDs, or tags)
    #          are not yet associated with it. To ensure that the event window can be used, you must
    #          associate one or more targets with it by using the <a>AssociateInstanceEventWindow</a> API.</p>
    #
    #          <important>
    #             <p>Event windows are applicable only for scheduled events that stop, reboot, or
    #             terminate instances.</p>
    #             <p>Event windows are <i>not</i> applicable for:</p>
    #             <ul>
    #                <li>
    #                   <p>Expedited scheduled events and network maintenance events. </p>
    #                </li>
    #                <li>
    #                            <p>Unscheduled maintenance such as AutoRecovery and unplanned reboots.</p>
    #                </li>
    #             </ul>
    #          </important>
    #
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInstanceEventWindowInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :name
    #   <p>The name of the event window.</p>
    #
    # @option params [Array<InstanceEventWindowTimeRangeRequest>] :time_ranges
    #   <p>The time range for the event window. If you specify a time range, you can't specify a cron
    #            expression.</p>
    #
    # @option params [String] :cron_expression
    #   <p>The cron expression for the event window, for example, <code>* 0-4,20-23 * * 1,5</code>. If
    #            you specify a cron expression, you can't specify a time range.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Only hour and day of the week values are supported.</p>
    #               </li>
    #               <li>
    #                  <p>For day of the week values, you can specify either integers <code>0</code> through
    #                     <code>6</code>, or alternative single values <code>SUN</code> through
    #                     <code>SAT</code>.</p>
    #               </li>
    #               <li>
    #                  <p>The minute, month, and year must be specified by <code>*</code>.</p>
    #               </li>
    #               <li>
    #                  <p>The hour value must be one or a multiple range, for example, <code>0-4</code> or
    #               <code>0-4,20-23</code>.</p>
    #               </li>
    #               <li>
    #                  <p>Each hour range must be >= 2 hours, for example, <code>0-2</code> or
    #               <code>20-23</code>.</p>
    #               </li>
    #               <li>
    #                  <p>The event window must be >= 4 hours. The combined total time ranges in the event
    #                  window must be >= 4 hours.</p>
    #               </li>
    #            </ul>
    #            <p>For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron</a> on the <i>Wikipedia
    #               website</i>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the event window.</p>
    #
    # @return [Types::CreateInstanceEventWindowOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_instance_event_window(
    #     dry_run: false,
    #     name: 'Name',
    #     time_ranges: [
    #       {
    #         start_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         start_hour: 1,
    #         end_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         end_hour: 1
    #       }
    #     ],
    #     cron_expression: 'CronExpression',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    #
    def create_instance_event_window(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInstanceEventWindowInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInstanceEventWindowInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInstanceEventWindow
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateInstanceEventWindow
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateInstanceEventWindow,
        params_class: Params::CreateInstanceEventWindowOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_instance_event_window
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Exports a running or stopped instance to an Amazon S3 bucket.</p>
    #          <p>For information about the supported operating systems, image formats, and known limitations
    #    for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an instance as a VM Using VM Import/Export</a>
    #    in the <i>VM Import/Export User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInstanceExportTaskInput}.
    #
    # @option params [String] :description
    #   <p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>
    #
    # @option params [ExportToS3TaskSpecification] :export_to_s3_task
    #   <p>The format and location for an export instance task.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :target_environment
    #   <p>The target virtualization environment.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the export instance task during creation.</p>
    #
    # @return [Types::CreateInstanceExportTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_instance_export_task(
    #     description: 'Description',
    #     export_to_s3_task: {
    #       container_format: 'ova', # accepts ["ova"]
    #       disk_image_format: 'VMDK', # accepts ["VMDK", "RAW", "VHD"]
    #       s3_bucket: 'S3Bucket',
    #       s3_prefix: 'S3Prefix'
    #     }, # required
    #     instance_id: 'InstanceId', # required
    #     target_environment: 'citrix', # required - accepts ["citrix", "vmware", "microsoft"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInstanceExportTaskOutput
    #   resp.data.export_task #=> Types::ExportTask
    #   resp.data.export_task.description #=> String
    #   resp.data.export_task.export_task_id #=> String
    #   resp.data.export_task.export_to_s3_task #=> Types::ExportToS3Task
    #   resp.data.export_task.export_to_s3_task.container_format #=> String, one of ["ova"]
    #   resp.data.export_task.export_to_s3_task.disk_image_format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.export_task.export_to_s3_task.s3_bucket #=> String
    #   resp.data.export_task.export_to_s3_task.s3_key #=> String
    #   resp.data.export_task.instance_export_details #=> Types::InstanceExportDetails
    #   resp.data.export_task.instance_export_details.instance_id #=> String
    #   resp.data.export_task.instance_export_details.target_environment #=> String, one of ["citrix", "vmware", "microsoft"]
    #   resp.data.export_task.state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.export_task.status_message #=> String
    #   resp.data.export_task.tags #=> Array<Tag>
    #   resp.data.export_task.tags[0] #=> Types::Tag
    #   resp.data.export_task.tags[0].key #=> String
    #   resp.data.export_task.tags[0].value #=> String
    #
    def create_instance_export_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInstanceExportTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInstanceExportTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInstanceExportTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateInstanceExportTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateInstanceExportTask,
        params_class: Params::CreateInstanceExportTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_instance_export_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an internet gateway for use with a VPC. After creating the internet gateway,
    # 			you attach it to a VPC using <a>AttachInternetGateway</a>.</p>
    #          <p>For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateInternetGatewayInput}.
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the internet gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateInternetGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_internet_gateway(
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateInternetGatewayOutput
    #   resp.data.internet_gateway #=> Types::InternetGateway
    #   resp.data.internet_gateway.attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.internet_gateway.attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.internet_gateway.attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.internet_gateway.attachments[0].vpc_id #=> String
    #   resp.data.internet_gateway.internet_gateway_id #=> String
    #   resp.data.internet_gateway.owner_id #=> String
    #   resp.data.internet_gateway.tags #=> Array<Tag>
    #   resp.data.internet_gateway.tags[0] #=> Types::Tag
    #   resp.data.internet_gateway.tags[0].key #=> String
    #   resp.data.internet_gateway.tags[0].value #=> String
    #
    def create_internet_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateInternetGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateInternetGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateInternetGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateInternetGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateInternetGateway,
        params_class: Params::CreateInternetGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_internet_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Create an IPAM. Amazon VCP IP Address Manager (IPAM) is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::CreateIpamInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :description
    #   <p>A description for the IPAM.</p>
    #
    # @option params [Array<AddIpamOperatingRegion>] :operating_regions
    #   <p>The operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
    #            discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    #            <p>For more information about operating Regions, see <a href="/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #         </p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @return [Types::CreateIpamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_ipam(
    #     dry_run: false,
    #     description: 'Description',
    #     operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateIpamOutput
    #   resp.data.ipam #=> Types::Ipam
    #   resp.data.ipam.owner_id #=> String
    #   resp.data.ipam.ipam_id #=> String
    #   resp.data.ipam.ipam_arn #=> String
    #   resp.data.ipam.ipam_region #=> String
    #   resp.data.ipam.public_default_scope_id #=> String
    #   resp.data.ipam.private_default_scope_id #=> String
    #   resp.data.ipam.scope_count #=> Integer
    #   resp.data.ipam.description #=> String
    #   resp.data.ipam.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam.operating_regions[0].region_name #=> String
    #   resp.data.ipam.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam.tags #=> Array<Tag>
    #   resp.data.ipam.tags[0] #=> Types::Tag
    #   resp.data.ipam.tags[0].key #=> String
    #   resp.data.ipam.tags[0].value #=> String
    #
    def create_ipam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateIpamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateIpamInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateIpam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateIpam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateIpam,
        params_class: Params::CreateIpamOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_ipam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/create-top-ipam.html">Create a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::CreateIpamPoolInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_scope_id
    #   <p>The ID of the scope in which you would like to create the IPAM pool.</p>
    #
    # @option params [String] :locale
    #   <p>In IPAM, the locale is the Amazon Web Services Region where you want to make an IPAM pool available for allocations. Only resources in the same Region as the locale of the pool can get IP address allocations from the pool. You can only allocate a CIDR for a VPC, for example, from an IPAM pool that shares a locale with the VPC’s Region. Note that once you choose a Locale for a pool, you cannot modify it. If you do not choose a locale, resources in Regions others than the IPAM's home region cannot use CIDRs from this pool.</p>
    #            <p>Possible values: Any Amazon Web Services Region, such as us-east-1.</p>
    #
    # @option params [String] :source_ipam_pool_id
    #   <p>The ID of the source IPAM pool. Use this option to create a pool within an existing pool. Note that the CIDR you provision for the pool within the source pool must be available in the source pool's CIDR range.</p>
    #
    # @option params [String] :description
    #   <p>A description for the IPAM pool.</p>
    #
    # @option params [String] :address_family
    #   <p>The IP protocol assigned to this IPAM pool. You must choose either IPv4 or IPv6 protocol for a pool.</p>
    #
    # @option params [Boolean] :auto_import
    #   <p>If selected, IPAM will continuously look for resources within the CIDR range of this pool
    #            and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for
    #            these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import
    #            a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently
    #            marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM
    #            discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.
    #         </p>
    #            <p>A locale must be set on the pool for this feature to work.</p>
    #
    # @option params [Boolean] :publicly_advertisable
    #   <p>Determines if the pool is publicly advertisable. This option is not available for pools with AddressFamily set to <code>ipv4</code>.</p>
    #
    # @option params [Integer] :allocation_min_netmask_length
    #   <p>The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. The minimum netmask length must be
    #            less than the maximum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.</p>
    #
    # @option params [Integer] :allocation_max_netmask_length
    #   <p>The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. The maximum netmask length must be
    #            greater than the minimum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.</p>
    #
    # @option params [Integer] :allocation_default_netmask_length
    #   <p>The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here,
    #            new allocations will default to 10.0.0.0/16.</p>
    #
    # @option params [Array<RequestIpamResourceTag>] :allocation_resource_tags
    #   <p>Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [String] :aws_service
    #   <p>Limits which service in Amazon Web Services that the pool can be used in. "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.</p>
    #
    # @return [Types::CreateIpamPoolOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_ipam_pool(
    #     dry_run: false,
    #     ipam_scope_id: 'IpamScopeId', # required
    #     locale: 'Locale',
    #     source_ipam_pool_id: 'SourceIpamPoolId',
    #     description: 'Description',
    #     address_family: 'ipv4', # accepts ["ipv4", "ipv6"]
    #     auto_import: false,
    #     publicly_advertisable: false,
    #     allocation_min_netmask_length: 1,
    #     allocation_max_netmask_length: 1,
    #     allocation_default_netmask_length: 1,
    #     allocation_resource_tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     aws_service: 'ec2' # accepts ["ec2"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateIpamPoolOutput
    #   resp.data.ipam_pool #=> Types::IpamPool
    #   resp.data.ipam_pool.owner_id #=> String
    #   resp.data.ipam_pool.ipam_pool_id #=> String
    #   resp.data.ipam_pool.source_ipam_pool_id #=> String
    #   resp.data.ipam_pool.ipam_pool_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pool.ipam_arn #=> String
    #   resp.data.ipam_pool.ipam_region #=> String
    #   resp.data.ipam_pool.locale #=> String
    #   resp.data.ipam_pool.pool_depth #=> Integer
    #   resp.data.ipam_pool.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_pool.state_message #=> String
    #   resp.data.ipam_pool.description #=> String
    #   resp.data.ipam_pool.auto_import #=> Boolean
    #   resp.data.ipam_pool.publicly_advertisable #=> Boolean
    #   resp.data.ipam_pool.address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pool.allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pool.allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pool.allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pool.allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pool.tags #=> Array<Tag>
    #   resp.data.ipam_pool.tags[0] #=> Types::Tag
    #   resp.data.ipam_pool.tags[0].key #=> String
    #   resp.data.ipam_pool.tags[0].value #=> String
    #   resp.data.ipam_pool.aws_service #=> String, one of ["ec2"]
    #
    def create_ipam_pool(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateIpamPoolInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateIpamPoolInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateIpamPool
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateIpamPool
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateIpamPool,
        params_class: Params::CreateIpamPoolOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_ipam_pool
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Create an IPAM scope. In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/add-scope-ipam.html">Add a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateIpamScopeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_id
    #   <p>The ID of the IPAM for which you're creating this scope.</p>
    #
    # @option params [String] :description
    #   <p>A description for the scope you're creating.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @return [Types::CreateIpamScopeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_ipam_scope(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateIpamScopeOutput
    #   resp.data.ipam_scope #=> Types::IpamScope
    #   resp.data.ipam_scope.owner_id #=> String
    #   resp.data.ipam_scope.ipam_scope_id #=> String
    #   resp.data.ipam_scope.ipam_scope_arn #=> String
    #   resp.data.ipam_scope.ipam_arn #=> String
    #   resp.data.ipam_scope.ipam_region #=> String
    #   resp.data.ipam_scope.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scope.is_default #=> Boolean
    #   resp.data.ipam_scope.description #=> String
    #   resp.data.ipam_scope.pool_count #=> Integer
    #   resp.data.ipam_scope.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_scope.tags #=> Array<Tag>
    #   resp.data.ipam_scope.tags[0] #=> Types::Tag
    #   resp.data.ipam_scope.tags[0].key #=> String
    #   resp.data.ipam_scope.tags[0].value #=> String
    #
    def create_ipam_scope(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateIpamScopeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateIpamScopeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateIpamScope
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateIpamScope
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateIpamScope,
        params_class: Params::CreateIpamScopeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_ipam_scope
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an ED25519 or 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public
    #             key and displays the private key for you to save to a file. The private key is returned
    #             as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name
    #             already exists, Amazon EC2 returns an error.</p>
    # 		       <p>The key pair returned to you is available only in the Amazon Web Services Region in which you create it.
    #             If you prefer, you can create your own key pair using a third-party tool and upload it
    #             to any Region using <a>ImportKeyPair</a>.</p>
    #          <p>You can have up to 5,000 key pairs per Amazon Web Services Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateKeyPairInput}.
    #
    # @option params [String] :key_name
    #   <p>A unique name for the key pair.</p>
    #   	        <p>Constraints: Up to 255 ASCII characters</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :key_type
    #   <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances, EC2 Instance Connect, and EC2 Serial Console.</p>
    #           <p>Default: <code>rsa</code>
    #            </p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the new key pair.</p>
    #
    # @return [Types::CreateKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_key_pair(
    #     key_name: 'KeyName', # required
    #     dry_run: false,
    #     key_type: 'rsa', # accepts ["rsa", "ed25519"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateKeyPairOutput
    #   resp.data.key_fingerprint #=> String
    #   resp.data.key_material #=> String
    #   resp.data.key_name #=> String
    #   resp.data.key_pair_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def create_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateKeyPairInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateKeyPair,
        params_class: Params::CreateKeyPairOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a launch template. A launch template contains the parameters to launch an
    #             instance. When you launch an instance using <a>RunInstances</a>, you can
    #             specify a launch template instead of providing the launch parameters in the request. For
    #             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a
    #                 launch template</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLaunchTemplateInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #                   Idempotency</a>.</p>
    #           <p>Constraint: Maximum 128 ASCII characters.</p>
    #
    # @option params [String] :launch_template_name
    #   <p>A name for the launch template.</p>
    #
    # @option params [String] :version_description
    #   <p>A description for the first version of the launch template.</p>
    #
    # @option params [RequestLaunchTemplateData] :launch_template_data
    #   <p>The information for the launch template.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the launch template during creation.</p>
    #
    # @return [Types::CreateLaunchTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_launch_template(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     launch_template_name: 'LaunchTemplateName', # required
    #     version_description: 'VersionDescription',
    #     launch_template_data: {
    #       kernel_id: 'KernelId',
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           virtual_name: 'VirtualName',
    #           ebs: {
    #             encrypted: false,
    #             delete_on_termination: false,
    #             iops: 1,
    #             kms_key_id: 'KmsKeyId',
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #             throughput: 1
    #           },
    #           no_device: 'NoDevice'
    #         }
    #       ],
    #       network_interfaces: [
    #         {
    #           associate_carrier_ip_address: false,
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           interface_type: 'InterfaceType',
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_addresses: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId',
    #           network_card_index: 1,
    #           ipv4_prefixes: [
    #             {
    #               ipv4_prefix: 'Ipv4Prefix'
    #             }
    #           ],
    #           ipv4_prefix_count: 1,
    #           ipv6_prefixes: [
    #             {
    #               ipv6_prefix: 'Ipv6Prefix'
    #             }
    #           ],
    #           ipv6_prefix_count: 1
    #         }
    #       ],
    #       image_id: 'ImageId',
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false
    #       },
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         affinity: 'Affinity',
    #         group_name: 'GroupName',
    #         host_id: 'HostId',
    #         tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #         spread_domain: 'SpreadDomain',
    #         host_resource_group_arn: 'HostResourceGroupArn',
    #         partition_number: 1
    #       },
    #       ram_disk_id: 'RamDiskId',
    #       disable_api_termination: false,
    #       instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #       user_data: 'UserData',
    #       tag_specifications: [
    #         {
    #           resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #           tags: [
    #             {
    #               key: 'Key',
    #               value: 'Value'
    #             }
    #           ]
    #         }
    #       ],
    #       elastic_gpu_specifications: [
    #         {
    #           type: 'Type' # required
    #         }
    #       ],
    #       elastic_inference_accelerators: [
    #         {
    #           type: 'Type', # required
    #           count: 1
    #         }
    #       ],
    #       security_groups: [
    #         'member'
    #       ],
    #       instance_market_options: {
    #         market_type: 'spot', # accepts ["spot"]
    #         spot_options: {
    #           max_price: 'MaxPrice',
    #           spot_instance_type: 'one-time', # accepts ["one-time", "persistent"]
    #           block_duration_minutes: 1,
    #           valid_until: Time.now,
    #           instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #         }
    #       },
    #       credit_specification: {
    #         cpu_credits: 'CpuCredits' # required
    #       },
    #       cpu_options: {
    #         core_count: 1,
    #         threads_per_core: 1
    #       },
    #       capacity_reservation_specification: {
    #         capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #         capacity_reservation_target: {
    #           capacity_reservation_id: 'CapacityReservationId',
    #           capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #         }
    #       },
    #       license_specifications: [
    #         {
    #           license_configuration_arn: 'LicenseConfigurationArn'
    #         }
    #       ],
    #       hibernation_options: {
    #         configured: false
    #       },
    #       metadata_options: {
    #         http_tokens: 'optional', # accepts ["optional", "required"]
    #         http_put_response_hop_limit: 1,
    #         http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #         http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #         instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #       },
    #       enclave_options: {
    #         enabled: false
    #       },
    #       instance_requirements: {
    #         v_cpu_count: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         memory_mi_b: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         cpu_manufacturers: [
    #           'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #         ],
    #         memory_gi_b_per_v_cpu: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         excluded_instance_types: [
    #           'member'
    #         ],
    #         instance_generations: [
    #           'current' # accepts ["current", "previous"]
    #         ],
    #         spot_max_price_percentage_over_lowest_price: 1,
    #         on_demand_max_price_percentage_over_lowest_price: 1,
    #         bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #         burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #         require_hibernate_support: false,
    #         network_interface_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         local_storage: 'included', # accepts ["included", "required", "excluded"]
    #         local_storage_types: [
    #           'hdd' # accepts ["hdd", "ssd"]
    #         ],
    #         total_local_storage_gb: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         baseline_ebs_bandwidth_mbps: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_types: [
    #           'gpu' # accepts ["gpu", "fpga", "inference"]
    #         ],
    #         accelerator_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_manufacturers: [
    #           'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #         ],
    #         accelerator_names: [
    #           'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #         ],
    #         accelerator_total_memory_mi_b: {
    #           min: 1,
    #           max: 1
    #         }
    #       },
    #       private_dns_name_options: {
    #         hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #         enable_resource_name_dns_a_record: false,
    #         enable_resource_name_dns_aaaa_record: false
    #       }
    #     }, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLaunchTemplateOutput
    #   resp.data.launch_template #=> Types::LaunchTemplate
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.create_time #=> Time
    #   resp.data.launch_template.created_by #=> String
    #   resp.data.launch_template.default_version_number #=> Integer
    #   resp.data.launch_template.latest_version_number #=> Integer
    #   resp.data.launch_template.tags #=> Array<Tag>
    #   resp.data.launch_template.tags[0] #=> Types::Tag
    #   resp.data.launch_template.tags[0].key #=> String
    #   resp.data.launch_template.tags[0].value #=> String
    #   resp.data.warning #=> Types::ValidationWarning
    #   resp.data.warning.errors #=> Array<ValidationError>
    #   resp.data.warning.errors[0] #=> Types::ValidationError
    #   resp.data.warning.errors[0].code #=> String
    #   resp.data.warning.errors[0].message #=> String
    #
    def create_launch_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLaunchTemplateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLaunchTemplateInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLaunchTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateLaunchTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateLaunchTemplate,
        params_class: Params::CreateLaunchTemplateOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_launch_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a new version for a launch template. You can specify an existing version of
    #             launch template from which to base the new version.</p>
    #         <p>Launch template versions are numbered in the order in which they are created. You
    #             cannot specify, change, or replace the numbering of launch template versions.</p>
    #         <p>For
    #             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#manage-launch-template-versions">Managing launch template versions</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLaunchTemplateVersionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #                   Idempotency</a>.</p>
    #           <p>Constraint: Maximum 128 ASCII characters.</p>
    #
    # @option params [String] :launch_template_id
    #   <p>The ID of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [String] :launch_template_name
    #   <p>The name of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [String] :source_version
    #   <p>The version number of the launch template version on which to base the new version.
    #               The new version inherits the same launch parameters as the source version, except for
    #               parameters that you specify in <code>LaunchTemplateData</code>. Snapshots applied
    #               to the block device mapping are ignored when creating a new version unless they
    #               are explicitly included.</p>
    #
    # @option params [String] :version_description
    #   <p>A description for the version of the launch template.</p>
    #
    # @option params [RequestLaunchTemplateData] :launch_template_data
    #   <p>The information for the launch template.</p>
    #
    # @return [Types::CreateLaunchTemplateVersionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_launch_template_version(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     source_version: 'SourceVersion',
    #     version_description: 'VersionDescription',
    #     launch_template_data: {
    #       kernel_id: 'KernelId',
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           virtual_name: 'VirtualName',
    #           ebs: {
    #             encrypted: false,
    #             delete_on_termination: false,
    #             iops: 1,
    #             kms_key_id: 'KmsKeyId',
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #             throughput: 1
    #           },
    #           no_device: 'NoDevice'
    #         }
    #       ],
    #       network_interfaces: [
    #         {
    #           associate_carrier_ip_address: false,
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           interface_type: 'InterfaceType',
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_addresses: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId',
    #           network_card_index: 1,
    #           ipv4_prefixes: [
    #             {
    #               ipv4_prefix: 'Ipv4Prefix'
    #             }
    #           ],
    #           ipv4_prefix_count: 1,
    #           ipv6_prefixes: [
    #             {
    #               ipv6_prefix: 'Ipv6Prefix'
    #             }
    #           ],
    #           ipv6_prefix_count: 1
    #         }
    #       ],
    #       image_id: 'ImageId',
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false
    #       },
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         affinity: 'Affinity',
    #         group_name: 'GroupName',
    #         host_id: 'HostId',
    #         tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #         spread_domain: 'SpreadDomain',
    #         host_resource_group_arn: 'HostResourceGroupArn',
    #         partition_number: 1
    #       },
    #       ram_disk_id: 'RamDiskId',
    #       disable_api_termination: false,
    #       instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #       user_data: 'UserData',
    #       tag_specifications: [
    #         {
    #           resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #           tags: [
    #             {
    #               key: 'Key',
    #               value: 'Value'
    #             }
    #           ]
    #         }
    #       ],
    #       elastic_gpu_specifications: [
    #         {
    #           type: 'Type' # required
    #         }
    #       ],
    #       elastic_inference_accelerators: [
    #         {
    #           type: 'Type', # required
    #           count: 1
    #         }
    #       ],
    #       security_groups: [
    #         'member'
    #       ],
    #       instance_market_options: {
    #         market_type: 'spot', # accepts ["spot"]
    #         spot_options: {
    #           max_price: 'MaxPrice',
    #           spot_instance_type: 'one-time', # accepts ["one-time", "persistent"]
    #           block_duration_minutes: 1,
    #           valid_until: Time.now,
    #           instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #         }
    #       },
    #       credit_specification: {
    #         cpu_credits: 'CpuCredits' # required
    #       },
    #       cpu_options: {
    #         core_count: 1,
    #         threads_per_core: 1
    #       },
    #       capacity_reservation_specification: {
    #         capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #         capacity_reservation_target: {
    #           capacity_reservation_id: 'CapacityReservationId',
    #           capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #         }
    #       },
    #       license_specifications: [
    #         {
    #           license_configuration_arn: 'LicenseConfigurationArn'
    #         }
    #       ],
    #       hibernation_options: {
    #         configured: false
    #       },
    #       metadata_options: {
    #         http_tokens: 'optional', # accepts ["optional", "required"]
    #         http_put_response_hop_limit: 1,
    #         http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #         http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #         instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #       },
    #       enclave_options: {
    #         enabled: false
    #       },
    #       instance_requirements: {
    #         v_cpu_count: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         memory_mi_b: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         cpu_manufacturers: [
    #           'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #         ],
    #         memory_gi_b_per_v_cpu: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         excluded_instance_types: [
    #           'member'
    #         ],
    #         instance_generations: [
    #           'current' # accepts ["current", "previous"]
    #         ],
    #         spot_max_price_percentage_over_lowest_price: 1,
    #         on_demand_max_price_percentage_over_lowest_price: 1,
    #         bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #         burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #         require_hibernate_support: false,
    #         network_interface_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         local_storage: 'included', # accepts ["included", "required", "excluded"]
    #         local_storage_types: [
    #           'hdd' # accepts ["hdd", "ssd"]
    #         ],
    #         total_local_storage_gb: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         baseline_ebs_bandwidth_mbps: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_types: [
    #           'gpu' # accepts ["gpu", "fpga", "inference"]
    #         ],
    #         accelerator_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_manufacturers: [
    #           'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #         ],
    #         accelerator_names: [
    #           'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #         ],
    #         accelerator_total_memory_mi_b: {
    #           min: 1,
    #           max: 1
    #         }
    #       },
    #       private_dns_name_options: {
    #         hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #         enable_resource_name_dns_a_record: false,
    #         enable_resource_name_dns_aaaa_record: false
    #       }
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLaunchTemplateVersionOutput
    #   resp.data.launch_template_version #=> Types::LaunchTemplateVersion
    #   resp.data.launch_template_version.launch_template_id #=> String
    #   resp.data.launch_template_version.launch_template_name #=> String
    #   resp.data.launch_template_version.version_number #=> Integer
    #   resp.data.launch_template_version.version_description #=> String
    #   resp.data.launch_template_version.create_time #=> Time
    #   resp.data.launch_template_version.created_by #=> String
    #   resp.data.launch_template_version.default_version #=> Boolean
    #   resp.data.launch_template_version.launch_template_data #=> Types::ResponseLaunchTemplateData
    #   resp.data.launch_template_version.launch_template_data.kernel_id #=> String
    #   resp.data.launch_template_version.launch_template_data.ebs_optimized #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.iam_instance_profile #=> Types::LaunchTemplateIamInstanceProfileSpecification
    #   resp.data.launch_template_version.launch_template_data.iam_instance_profile.arn #=> String
    #   resp.data.launch_template_version.launch_template_data.iam_instance_profile.name #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings #=> Array<LaunchTemplateBlockDeviceMapping>
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0] #=> Types::LaunchTemplateBlockDeviceMapping
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].device_name #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs #=> Types::LaunchTemplateEbsBlockDevice
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].no_device #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces #=> Array<LaunchTemplateInstanceNetworkInterfaceSpecification>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0] #=> Types::LaunchTemplateInstanceNetworkInterfaceSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].description #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].device_index #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].groups #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].groups[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].interface_type #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].subnet_id #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationResponse>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationResponse>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.image_id #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.launch_template_version.launch_template_data.key_name #=> String
    #   resp.data.launch_template_version.launch_template_data.monitoring #=> Types::LaunchTemplatesMonitoring
    #   resp.data.launch_template_version.launch_template_data.monitoring.enabled #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.placement #=> Types::LaunchTemplatePlacement
    #   resp.data.launch_template_version.launch_template_data.placement.availability_zone #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.affinity #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.group_name #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.host_id #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.launch_template_version.launch_template_data.placement.spread_domain #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.host_resource_group_arn #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.partition_number #=> Integer
    #   resp.data.launch_template_version.launch_template_data.ram_disk_id #=> String
    #   resp.data.launch_template_version.launch_template_data.disable_api_termination #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.instance_initiated_shutdown_behavior #=> String, one of ["stop", "terminate"]
    #   resp.data.launch_template_version.launch_template_data.user_data #=> String
    #   resp.data.launch_template_version.launch_template_data.tag_specifications #=> Array<LaunchTemplateTagSpecification>
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0] #=> Types::LaunchTemplateTagSpecification
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags[0].key #=> String
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags[0].value #=> String
    #   resp.data.launch_template_version.launch_template_data.elastic_gpu_specifications #=> Array<ElasticGpuSpecificationResponse>
    #   resp.data.launch_template_version.launch_template_data.elastic_gpu_specifications[0] #=> Types::ElasticGpuSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.elastic_gpu_specifications[0].type #=> String
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators #=> Array<LaunchTemplateElasticInferenceAcceleratorResponse>
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators[0] #=> Types::LaunchTemplateElasticInferenceAcceleratorResponse
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators[0].type #=> String
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators[0].count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.security_group_ids #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.security_group_ids[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.security_groups #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_market_options #=> Types::LaunchTemplateInstanceMarketOptions
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.market_type #=> String, one of ["spot"]
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options #=> Types::LaunchTemplateSpotMarketOptions
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.max_price #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.spot_instance_type #=> String, one of ["one-time", "persistent"]
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.block_duration_minutes #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.valid_until #=> Time
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.launch_template_version.launch_template_data.credit_specification #=> Types::CreditSpecification
    #   resp.data.launch_template_version.launch_template_data.credit_specification.cpu_credits #=> String
    #   resp.data.launch_template_version.launch_template_data.cpu_options #=> Types::LaunchTemplateCpuOptions
    #   resp.data.launch_template_version.launch_template_data.cpu_options.core_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.cpu_options.threads_per_core #=> Integer
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification #=> Types::LaunchTemplateCapacityReservationSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.launch_template_version.launch_template_data.license_specifications #=> Array<LaunchTemplateLicenseConfiguration>
    #   resp.data.launch_template_version.launch_template_data.license_specifications[0] #=> Types::LaunchTemplateLicenseConfiguration
    #   resp.data.launch_template_version.launch_template_data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.launch_template_version.launch_template_data.hibernation_options #=> Types::LaunchTemplateHibernationOptions
    #   resp.data.launch_template_version.launch_template_data.hibernation_options.configured #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.metadata_options #=> Types::LaunchTemplateInstanceMetadataOptions
    #   resp.data.launch_template_version.launch_template_data.metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_version.launch_template_data.enclave_options #=> Types::LaunchTemplateEnclaveOptions
    #   resp.data.launch_template_version.launch_template_data.enclave_options.enabled #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options #=> Types::LaunchTemplatePrivateDnsNameOptions
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.warning #=> Types::ValidationWarning
    #   resp.data.warning.errors #=> Array<ValidationError>
    #   resp.data.warning.errors[0] #=> Types::ValidationError
    #   resp.data.warning.errors[0].code #=> String
    #   resp.data.warning.errors[0].message #=> String
    #
    def create_launch_template_version(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLaunchTemplateVersionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLaunchTemplateVersionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLaunchTemplateVersion
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateLaunchTemplateVersion
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateLaunchTemplateVersion,
        params_class: Params::CreateLaunchTemplateVersionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_launch_template_version
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a static route for the specified local gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLocalGatewayRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR range used for destination matches. Routing decisions are based on
    #           the most specific match.</p>
    #
    # @option params [String] :local_gateway_route_table_id
    #   <p>The ID of the local gateway route table.</p>
    #
    # @option params [String] :local_gateway_virtual_interface_group_id
    #   <p>The ID of the virtual interface group.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateLocalGatewayRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_local_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     local_gateway_virtual_interface_group_id: 'LocalGatewayVirtualInterfaceGroupId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLocalGatewayRouteOutput
    #   resp.data.route #=> Types::LocalGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.route.local_gateway_route_table_id #=> String
    #   resp.data.route.local_gateway_route_table_arn #=> String
    #   resp.data.route.owner_id #=> String
    #
    def create_local_gateway_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLocalGatewayRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLocalGatewayRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLocalGatewayRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateLocalGatewayRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateLocalGatewayRoute,
        params_class: Params::CreateLocalGatewayRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_local_gateway_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Associates the specified VPC with the specified local gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateLocalGatewayRouteTableVpcAssociationInput}.
    #
    # @option params [String] :local_gateway_route_table_id
    #   <p>The ID of the local gateway route table.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the local gateway route table VPC association.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateLocalGatewayRouteTableVpcAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_local_gateway_route_table_vpc_association(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateLocalGatewayRouteTableVpcAssociationOutput
    #   resp.data.local_gateway_route_table_vpc_association #=> Types::LocalGatewayRouteTableVpcAssociation
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_vpc_association_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.vpc_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.owner_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.state #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_vpc_association.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].key #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].value #=> String
    #
    def create_local_gateway_route_table_vpc_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateLocalGatewayRouteTableVpcAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateLocalGatewayRouteTableVpcAssociationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateLocalGatewayRouteTableVpcAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateLocalGatewayRouteTableVpcAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateLocalGatewayRouteTableVpcAssociation,
        params_class: Params::CreateLocalGatewayRouteTableVpcAssociationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_local_gateway_route_table_vpc_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a managed prefix list. You can specify one or more entries for the prefix list.
    #             Each entry consists of a CIDR block and an optional description.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateManagedPrefixListInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix_list_name
    #   <p>A name for the prefix list.</p>
    #           <p>Constraints: Up to 255 characters in length. The name cannot start with <code>com.amazonaws</code>.</p>
    #
    # @option params [Array<AddPrefixListEntry>] :entries
    #   <p>One or more entries for the prefix list.</p>
    #
    # @option params [Integer] :max_entries
    #   <p>The maximum number of entries for the prefix list.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the prefix list during creation.</p>
    #
    # @option params [String] :address_family
    #   <p>The IP address type.</p>
    #           <p>Valid Values: <code>IPv4</code> | <code>IPv6</code>
    #            </p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #                   Idempotency</a>.</p>
    #           <p>Constraints: Up to 255 UTF-8 characters in length.</p>
    #
    # @return [Types::CreateManagedPrefixListOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_managed_prefix_list(
    #     dry_run: false,
    #     prefix_list_name: 'PrefixListName', # required
    #     entries: [
    #       {
    #         cidr: 'Cidr', # required
    #         description: 'Description'
    #       }
    #     ],
    #     max_entries: 1, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     address_family: 'AddressFamily', # required
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateManagedPrefixListOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    #
    def create_managed_prefix_list(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateManagedPrefixListInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateManagedPrefixListInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateManagedPrefixList
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateManagedPrefixList
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateManagedPrefixList,
        params_class: Params::CreateManagedPrefixListOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_managed_prefix_list
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a NAT gateway in the specified subnet. This action creates a network interface
    #           in the specified subnet with a private IP address from the IP address range of the
    #           subnet. You can create either a public NAT gateway or a private NAT gateway.</p>
    #          <p>With a public NAT gateway, internet-bound traffic from a private subnet can be routed
    #           to the NAT gateway, so that instances in a private subnet can connect to the internet.</p>
    #          <p>With a private NAT gateway, private communication is routed across VPCs and on-premises
    #             networks through a transit gateway or virtual private gateway. Common use cases include
    #             running large workloads behind a small pool of allowlisted IPv4 addresses, preserving
    #             private IPv4 addresses, and communicating between overlapping networks.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNatGatewayInput}.
    #
    # @option params [String] :allocation_id
    #   <p>[Public NAT gateways only] The allocation ID of an Elastic IP address to associate
    #             with the NAT gateway. You cannot specify an Elastic IP address with a private NAT gateway.
    #             If the Elastic IP address is associated with another resource, you must first disassociate it.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #   			request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure
    #   				idempotency</a>.</p>
    #            <p>Constraint: Maximum 64 ASCII characters.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The subnet in which to create the NAT gateway.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the NAT gateway.</p>
    #
    # @option params [String] :connectivity_type
    #   <p>Indicates whether the NAT gateway supports public or private connectivity.
    #             The default is public connectivity.</p>
    #
    # @return [Types::CreateNatGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_nat_gateway(
    #     allocation_id: 'AllocationId',
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     subnet_id: 'SubnetId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     connectivity_type: 'private' # accepts ["private", "public"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNatGatewayOutput
    #   resp.data.client_token #=> String
    #   resp.data.nat_gateway #=> Types::NatGateway
    #   resp.data.nat_gateway.create_time #=> Time
    #   resp.data.nat_gateway.delete_time #=> Time
    #   resp.data.nat_gateway.failure_code #=> String
    #   resp.data.nat_gateway.failure_message #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateway.nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateway.nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateway.nat_gateway_id #=> String
    #   resp.data.nat_gateway.provisioned_bandwidth #=> Types::ProvisionedBandwidth
    #   resp.data.nat_gateway.provisioned_bandwidth.provision_time #=> Time
    #   resp.data.nat_gateway.provisioned_bandwidth.provisioned #=> String
    #   resp.data.nat_gateway.provisioned_bandwidth.request_time #=> Time
    #   resp.data.nat_gateway.provisioned_bandwidth.requested #=> String
    #   resp.data.nat_gateway.provisioned_bandwidth.status #=> String
    #   resp.data.nat_gateway.state #=> String, one of ["pending", "failed", "available", "deleting", "deleted"]
    #   resp.data.nat_gateway.subnet_id #=> String
    #   resp.data.nat_gateway.vpc_id #=> String
    #   resp.data.nat_gateway.tags #=> Array<Tag>
    #   resp.data.nat_gateway.tags[0] #=> Types::Tag
    #   resp.data.nat_gateway.tags[0].key #=> String
    #   resp.data.nat_gateway.tags[0].value #=> String
    #   resp.data.nat_gateway.connectivity_type #=> String, one of ["private", "public"]
    #
    def create_nat_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNatGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNatGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNatGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNatGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNatGateway,
        params_class: Params::CreateNatGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_nat_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p>
    # 		       <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNetworkAclInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the network ACL.</p>
    #
    # @return [Types::CreateNetworkAclOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_network_acl(
    #     dry_run: false,
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNetworkAclOutput
    #   resp.data.network_acl #=> Types::NetworkAcl
    #   resp.data.network_acl.associations #=> Array<NetworkAclAssociation>
    #   resp.data.network_acl.associations[0] #=> Types::NetworkAclAssociation
    #   resp.data.network_acl.associations[0].network_acl_association_id #=> String
    #   resp.data.network_acl.associations[0].network_acl_id #=> String
    #   resp.data.network_acl.associations[0].subnet_id #=> String
    #   resp.data.network_acl.entries #=> Array<NetworkAclEntry>
    #   resp.data.network_acl.entries[0] #=> Types::NetworkAclEntry
    #   resp.data.network_acl.entries[0].cidr_block #=> String
    #   resp.data.network_acl.entries[0].egress #=> Boolean
    #   resp.data.network_acl.entries[0].icmp_type_code #=> Types::IcmpTypeCode
    #   resp.data.network_acl.entries[0].icmp_type_code.code #=> Integer
    #   resp.data.network_acl.entries[0].icmp_type_code.type #=> Integer
    #   resp.data.network_acl.entries[0].ipv6_cidr_block #=> String
    #   resp.data.network_acl.entries[0].port_range #=> Types::PortRange
    #   resp.data.network_acl.entries[0].port_range.from #=> Integer
    #   resp.data.network_acl.entries[0].port_range.to #=> Integer
    #   resp.data.network_acl.entries[0].protocol #=> String
    #   resp.data.network_acl.entries[0].rule_action #=> String, one of ["allow", "deny"]
    #   resp.data.network_acl.entries[0].rule_number #=> Integer
    #   resp.data.network_acl.is_default #=> Boolean
    #   resp.data.network_acl.network_acl_id #=> String
    #   resp.data.network_acl.tags #=> Array<Tag>
    #   resp.data.network_acl.tags[0] #=> Types::Tag
    #   resp.data.network_acl.tags[0].key #=> String
    #   resp.data.network_acl.tags[0].value #=> String
    #   resp.data.network_acl.vpc_id #=> String
    #   resp.data.network_acl.owner_id #=> String
    #
    def create_network_acl(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNetworkAclInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNetworkAclInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNetworkAcl
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNetworkAcl
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNetworkAcl,
        params_class: Params::CreateNetworkAclOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_network_acl
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules
    # 		        and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated
    # 		        with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of
    # 		        ingress rules and a separate set of egress rules.</p>
    # 		       <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the
    # 		        other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p>
    # 		       <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p>
    #          <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNetworkAclEntryInput}.
    #
    # @option params [String] :cidr_block
    #   <p>The IPv4 network range to allow or deny, in CIDR notation (for example
    #   		        <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :egress
    #   <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
    #
    # @option params [IcmpTypeCode] :icmp_type_code
    #   <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
    #   		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    #
    # @option params [String] :ipv6_cidr_block
    #   <p>The IPv6 network range to allow or deny, in CIDR notation (for example
    #                   <code>2001:db8:1234:1a00::/64</code>).</p>
    #
    # @option params [String] :network_acl_id
    #   <p>The ID of the network ACL.</p>
    #
    # @option params [PortRange] :port_range
    #   <p>TCP or UDP protocols: The range of ports the rule applies to.
    #   		        Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    #
    # @option params [String] :protocol
    #   <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a
    #     			protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is
    #   			allowed, regardless of any ports or ICMP types or codes that you specify. If you specify
    #   			protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and
    #   			codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6)
    #   			and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    #
    # @option params [String] :rule_action
    #   <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    #
    # @option params [Integer] :rule_number
    #   <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p>
    #            <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    #
    # @return [Types::CreateNetworkAclEntryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_network_acl_entry(
    #     cidr_block: 'CidrBlock',
    #     dry_run: false,
    #     egress: false, # required
    #     icmp_type_code: {
    #       code: 1,
    #       type: 1
    #     },
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     network_acl_id: 'NetworkAclId', # required
    #     port_range: {
    #       from: 1,
    #       to: 1
    #     },
    #     protocol: 'Protocol', # required
    #     rule_action: 'allow', # required - accepts ["allow", "deny"]
    #     rule_number: 1 # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNetworkAclEntryOutput
    #
    def create_network_acl_entry(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNetworkAclEntryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNetworkAclEntryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNetworkAclEntry
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNetworkAclEntry
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNetworkAclEntry,
        params_class: Params::CreateNetworkAclEntryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_network_acl_entry
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Network Access Scope.</p>
    #          <p>Amazon Web Services Network Access Analyzer enables cloud networking and cloud operations teams
    #          to verify that their networks on Amazon Web Services conform to their network security and governance
    #          objectives. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/">Amazon Web Services Network Access Analyzer Guide</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNetworkInsightsAccessScopeInput}.
    #
    # @option params [Array<AccessScopePathRequest>] :match_paths
    #   <p>The paths to match.</p>
    #
    # @option params [Array<AccessScopePathRequest>] :exclude_paths
    #   <p>The paths to exclude.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,
    #      see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateNetworkInsightsAccessScopeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_network_insights_access_scope(
    #     match_paths: [
    #       {
    #         source: {
    #           packet_header_statement: {
    #             source_addresses: [
    #               'member'
    #             ],
    #             protocols: [
    #               'tcp' # accepts ["tcp", "udp"]
    #             ]
    #           },
    #           resource_statement: {
    #           }
    #         },
    #         through_resources: [
    #           {
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNetworkInsightsAccessScopeOutput
    #   resp.data.network_insights_access_scope #=> Types::NetworkInsightsAccessScope
    #   resp.data.network_insights_access_scope.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope.network_insights_access_scope_arn #=> String
    #   resp.data.network_insights_access_scope.created_date #=> Time
    #   resp.data.network_insights_access_scope.updated_date #=> Time
    #   resp.data.network_insights_access_scope.tags #=> Array<Tag>
    #   resp.data.network_insights_access_scope.tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scope.tags[0].key #=> String
    #   resp.data.network_insights_access_scope.tags[0].value #=> String
    #   resp.data.network_insights_access_scope_content #=> Types::NetworkInsightsAccessScopeContent
    #   resp.data.network_insights_access_scope_content.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_content.match_paths #=> Array<AccessScopePath>
    #   resp.data.network_insights_access_scope_content.match_paths[0] #=> Types::AccessScopePath
    #   resp.data.network_insights_access_scope_content.match_paths[0].source #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement #=> Types::PacketHeaderStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses[0] #=> String
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols[0] #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resources #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resource_types #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].destination #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources #=> Array<ThroughResourcesStatement>
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0] #=> Types::ThroughResourcesStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0].resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.exclude_paths #=> Array<AccessScopePath>
    #
    def create_network_insights_access_scope(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNetworkInsightsAccessScopeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNetworkInsightsAccessScopeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNetworkInsightsAccessScope
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNetworkInsightsAccessScope
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNetworkInsightsAccessScope,
        params_class: Params::CreateNetworkInsightsAccessScopeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_network_insights_access_scope
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a path to analyze for reachability.</p>
    #          <p>Reachability Analyzer enables you to analyze and debug network reachability between
    #           two resources in your virtual private cloud (VPC). For more information, see
    #           <a href="https://docs.aws.amazon.com/vpc/latest/reachability/">What is Reachability Analyzer</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNetworkInsightsPathInput}.
    #
    # @option params [String] :source_ip
    #   <p>The IP address of the Amazon Web Services resource that is the source of the path.</p>
    #
    # @option params [String] :destination_ip
    #   <p>The IP address of the Amazon Web Services resource that is the destination of the path.</p>
    #
    # @option params [String] :source
    #   <p>The Amazon Web Services resource that is the source of the path.</p>
    #
    # @option params [String] :destination
    #   <p>The Amazon Web Services resource that is the destination of the path.</p>
    #
    # @option params [String] :protocol
    #   <p>The protocol.</p>
    #
    # @option params [Integer] :destination_port
    #   <p>The destination port.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to add to the path.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,
    #      see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::CreateNetworkInsightsPathOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_network_insights_path(
    #     source_ip: 'SourceIp',
    #     destination_ip: 'DestinationIp',
    #     source: 'Source', # required
    #     destination: 'Destination', # required
    #     protocol: 'tcp', # required - accepts ["tcp", "udp"]
    #     destination_port: 1,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNetworkInsightsPathOutput
    #   resp.data.network_insights_path #=> Types::NetworkInsightsPath
    #   resp.data.network_insights_path.network_insights_path_id #=> String
    #   resp.data.network_insights_path.network_insights_path_arn #=> String
    #   resp.data.network_insights_path.created_date #=> Time
    #   resp.data.network_insights_path.source #=> String
    #   resp.data.network_insights_path.destination #=> String
    #   resp.data.network_insights_path.source_ip #=> String
    #   resp.data.network_insights_path.destination_ip #=> String
    #   resp.data.network_insights_path.protocol #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_path.destination_port #=> Integer
    #   resp.data.network_insights_path.tags #=> Array<Tag>
    #   resp.data.network_insights_path.tags[0] #=> Types::Tag
    #   resp.data.network_insights_path.tags[0].key #=> String
    #   resp.data.network_insights_path.tags[0].value #=> String
    #
    def create_network_insights_path(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNetworkInsightsPathInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNetworkInsightsPathInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNetworkInsightsPath
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNetworkInsightsPath
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNetworkInsightsPath,
        params_class: Params::CreateNetworkInsightsPathOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_network_insights_path
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a network interface in the specified subnet.</p>
    #         <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a>
    #             in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNetworkInterfaceInput}.
    #
    # @option params [String] :description
    #   <p>A description for the network interface.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :groups
    #   <p>The IDs of one or more security groups.</p>
    #
    # @option params [Integer] :ipv6_address_count
    #   <p>The number of IPv6 addresses to assign to a network interface. Amazon EC2
    #               automatically selects the IPv6 addresses from the subnet range. You can't use this
    #               option if specifying specific IPv6 addresses. If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute set
    #               to <code>true</code>, you can specify <code>0</code> to override this setting.</p>
    #
    # @option params [Array<InstanceIpv6Address>] :ipv6_addresses
    #   <p>One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.
    #               You can't use this option if you're specifying a number of IPv6 addresses.</p>
    #
    # @option params [String] :private_ip_address
    #   <p>The primary private IPv4 address of the network interface. If you don't specify an
    #               IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you
    #               specify an IP address, you cannot indicate any IP addresses specified in
    #               <code>privateIpAddresses</code> as primary (only one IP address can be designated as
    #               primary).</p>
    #
    # @option params [Array<PrivateIpAddressSpecification>] :private_ip_addresses
    #   <p>One or more private IPv4 addresses.</p>
    #
    # @option params [Integer] :secondary_private_ip_address_count
    #   <p>The number of secondary private IPv4 addresses to assign to a network interface. When
    #               you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses
    #               within the subnet's IPv4 CIDR range. You can't specify this option and specify more than
    #               one private IP address using <code>privateIpAddresses</code>.</p>
    #           <p>The number of IP addresses you can assign to a network interface varies by instance
    #               type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per ENI Per
    #                   Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @option params [Array<Ipv4PrefixSpecificationRequest>] :ipv4_prefixes
    #   <p>One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv4PrefixCount</code> option.</p>
    #
    # @option params [Integer] :ipv4_prefix_count
    #   <p>The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv4 Prefixes</code> option.</p>
    #
    # @option params [Array<Ipv6PrefixSpecificationRequest>] :ipv6_prefixes
    #   <p>One or more IPv6 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv6PrefixCount</code> option.</p>
    #
    # @option params [Integer] :ipv6_prefix_count
    #   <p>The number of IPv6 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv6Prefixes</code> option.</p>
    #
    # @option params [String] :interface_type
    #   <p>Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify
    #   			<code>efa</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">
    #   			    Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. To create a trunk network interface, specify
    #   		    <code>trunk</code>.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet to associate with the network interface.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the new network interface.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @return [Types::CreateNetworkInterfaceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_network_interface(
    #     description: 'Description',
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ],
    #     ipv6_address_count: 1,
    #     ipv6_addresses: [
    #       {
    #         ipv6_address: 'Ipv6Address'
    #       }
    #     ],
    #     private_ip_address: 'PrivateIpAddress',
    #     private_ip_addresses: [
    #       {
    #         primary: false,
    #         private_ip_address: 'PrivateIpAddress'
    #       }
    #     ],
    #     secondary_private_ip_address_count: 1,
    #     ipv4_prefixes: [
    #       {
    #         ipv4_prefix: 'Ipv4Prefix'
    #       }
    #     ],
    #     ipv4_prefix_count: 1,
    #     ipv6_prefixes: [
    #       {
    #         ipv6_prefix: 'Ipv6Prefix'
    #       }
    #     ],
    #     ipv6_prefix_count: 1,
    #     interface_type: 'efa', # accepts ["efa", "branch", "trunk"]
    #     subnet_id: 'SubnetId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNetworkInterfaceOutput
    #   resp.data.network_interface #=> Types::NetworkInterface
    #   resp.data.network_interface.association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interface.association.allocation_id #=> String
    #   resp.data.network_interface.association.association_id #=> String
    #   resp.data.network_interface.association.ip_owner_id #=> String
    #   resp.data.network_interface.association.public_dns_name #=> String
    #   resp.data.network_interface.association.public_ip #=> String
    #   resp.data.network_interface.association.customer_owned_ip #=> String
    #   resp.data.network_interface.association.carrier_ip #=> String
    #   resp.data.network_interface.attachment #=> Types::NetworkInterfaceAttachment
    #   resp.data.network_interface.attachment.attach_time #=> Time
    #   resp.data.network_interface.attachment.attachment_id #=> String
    #   resp.data.network_interface.attachment.delete_on_termination #=> Boolean
    #   resp.data.network_interface.attachment.device_index #=> Integer
    #   resp.data.network_interface.attachment.network_card_index #=> Integer
    #   resp.data.network_interface.attachment.instance_id #=> String
    #   resp.data.network_interface.attachment.instance_owner_id #=> String
    #   resp.data.network_interface.attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.network_interface.availability_zone #=> String
    #   resp.data.network_interface.description #=> String
    #   resp.data.network_interface.groups #=> Array<GroupIdentifier>
    #   resp.data.network_interface.groups[0] #=> Types::GroupIdentifier
    #   resp.data.network_interface.groups[0].group_name #=> String
    #   resp.data.network_interface.groups[0].group_id #=> String
    #   resp.data.network_interface.interface_type #=> String, one of ["interface", "natGateway", "efa", "trunk"]
    #   resp.data.network_interface.ipv6_addresses #=> Array<NetworkInterfaceIpv6Address>
    #   resp.data.network_interface.ipv6_addresses[0] #=> Types::NetworkInterfaceIpv6Address
    #   resp.data.network_interface.ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.network_interface.mac_address #=> String
    #   resp.data.network_interface.network_interface_id #=> String
    #   resp.data.network_interface.outpost_arn #=> String
    #   resp.data.network_interface.owner_id #=> String
    #   resp.data.network_interface.private_dns_name #=> String
    #   resp.data.network_interface.private_ip_address #=> String
    #   resp.data.network_interface.private_ip_addresses #=> Array<NetworkInterfacePrivateIpAddress>
    #   resp.data.network_interface.private_ip_addresses[0] #=> Types::NetworkInterfacePrivateIpAddress
    #   resp.data.network_interface.private_ip_addresses[0].association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interface.private_ip_addresses[0].primary #=> Boolean
    #   resp.data.network_interface.private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.network_interface.private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.network_interface.ipv4_prefixes #=> Array<Ipv4PrefixSpecification>
    #   resp.data.network_interface.ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecification
    #   resp.data.network_interface.ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.network_interface.ipv6_prefixes #=> Array<Ipv6PrefixSpecification>
    #   resp.data.network_interface.ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecification
    #   resp.data.network_interface.ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.network_interface.requester_id #=> String
    #   resp.data.network_interface.requester_managed #=> Boolean
    #   resp.data.network_interface.source_dest_check #=> Boolean
    #   resp.data.network_interface.status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.network_interface.subnet_id #=> String
    #   resp.data.network_interface.tag_set #=> Array<Tag>
    #   resp.data.network_interface.tag_set[0] #=> Types::Tag
    #   resp.data.network_interface.tag_set[0].key #=> String
    #   resp.data.network_interface.tag_set[0].value #=> String
    #   resp.data.network_interface.vpc_id #=> String
    #   resp.data.network_interface.deny_all_igw_traffic #=> Boolean
    #   resp.data.network_interface.ipv6_native #=> Boolean
    #   resp.data.network_interface.ipv6_address #=> String
    #   resp.data.client_token #=> String
    #
    def create_network_interface(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNetworkInterfaceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNetworkInterfaceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNetworkInterface
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNetworkInterface
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNetworkInterface,
        params_class: Params::CreateNetworkInterfaceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_network_interface
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Grants an Amazon Web Services-authorized account permission to attach the specified network interface to
    #             an instance in their account.</p>
    # 	        <p>You can grant permission to a single Amazon Web Services account only, and only one account at a time.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateNetworkInterfacePermissionInput}.
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @option params [String] :aws_account_id
    #   <p>The Amazon Web Services account ID.</p>
    #
    # @option params [String] :aws_service
    #   <p>The Amazon Web Service. Currently not supported.</p>
    #
    # @option params [String] :permission
    #   <p>The type of permission to grant.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #   			and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #   			Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateNetworkInterfacePermissionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_network_interface_permission(
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     aws_account_id: 'AwsAccountId',
    #     aws_service: 'AwsService',
    #     permission: 'INSTANCE-ATTACH', # required - accepts ["INSTANCE-ATTACH", "EIP-ASSOCIATE"]
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateNetworkInterfacePermissionOutput
    #   resp.data.interface_permission #=> Types::NetworkInterfacePermission
    #   resp.data.interface_permission.network_interface_permission_id #=> String
    #   resp.data.interface_permission.network_interface_id #=> String
    #   resp.data.interface_permission.aws_account_id #=> String
    #   resp.data.interface_permission.aws_service #=> String
    #   resp.data.interface_permission.permission #=> String, one of ["INSTANCE-ATTACH", "EIP-ASSOCIATE"]
    #   resp.data.interface_permission.permission_state #=> Types::NetworkInterfacePermissionState
    #   resp.data.interface_permission.permission_state.state #=> String, one of ["pending", "granted", "revoking", "revoked"]
    #   resp.data.interface_permission.permission_state.status_message #=> String
    #
    def create_network_interface_permission(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateNetworkInterfacePermissionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateNetworkInterfacePermissionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateNetworkInterfacePermission
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateNetworkInterfacePermission
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateNetworkInterfacePermission,
        params_class: Params::CreateNetworkInterfacePermissionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_network_interface_permission
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a placement group in which to launch instances. The strategy of the placement
    #             group determines how the instances are organized within the group. </p>
    #         <p>A <code>cluster</code> placement group is a logical grouping of instances within a
    #             single Availability Zone that benefit from low network latency, high network throughput.
    #             A <code>spread</code> placement group places instances on distinct hardware. A
    #                 <code>partition</code> placement group places groups of instances in different
    #             partitions, where instances in one partition do not share the same hardware with
    #             instances in another partition.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreatePlacementGroupInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :group_name
    #   <p>A name for the placement group. Must be unique within the scope of your account for
    #               the Region.</p>
    #           <p>Constraints: Up to 255 ASCII characters</p>
    #
    # @option params [String] :strategy
    #   <p>The placement strategy.</p>
    #
    # @option params [Integer] :partition_count
    #   <p>The number of partitions. Valid only when <b>Strategy</b> is
    #               set to <code>partition</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the new placement group.</p>
    #
    # @return [Types::CreatePlacementGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_placement_group(
    #     dry_run: false,
    #     group_name: 'GroupName',
    #     strategy: 'cluster', # accepts ["cluster", "spread", "partition"]
    #     partition_count: 1,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreatePlacementGroupOutput
    #   resp.data.placement_group #=> Types::PlacementGroup
    #   resp.data.placement_group.group_name #=> String
    #   resp.data.placement_group.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.placement_group.strategy #=> String, one of ["cluster", "spread", "partition"]
    #   resp.data.placement_group.partition_count #=> Integer
    #   resp.data.placement_group.group_id #=> String
    #   resp.data.placement_group.tags #=> Array<Tag>
    #   resp.data.placement_group.tags[0] #=> Types::Tag
    #   resp.data.placement_group.tags[0].key #=> String
    #   resp.data.placement_group.tags[0].value #=> String
    #   resp.data.placement_group.group_arn #=> String
    #
    def create_placement_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreatePlacementGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreatePlacementGroupInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreatePlacementGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreatePlacementGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreatePlacementGroup,
        params_class: Params::CreatePlacementGroupOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_placement_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only. To monitor the status of pool creation, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePublicIpv4Pools.html">DescribePublicIpv4Pools</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreatePublicIpv4PoolInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #
    # @return [Types::CreatePublicIpv4PoolOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_public_ipv4_pool(
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreatePublicIpv4PoolOutput
    #   resp.data.pool_id #=> String
    #
    def create_public_ipv4_pool(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreatePublicIpv4PoolInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreatePublicIpv4PoolInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreatePublicIpv4Pool
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreatePublicIpv4Pool
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreatePublicIpv4Pool,
        params_class: Params::CreatePublicIpv4PoolOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_public_ipv4_pool
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a root volume replacement task for an Amazon EC2 instance. The root volume
    #       can either be restored to its initial launch state, or it can be restored using a
    #       specific snapshot.</p>
    #
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-restoring-volume.html#replace-root">Replace a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateReplaceRootVolumeTaskInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance for which to replace the root volume.</p>
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the snapshot from which to restore the replacement root volume. If you want to
    #         restore the volume to the initial launch state, omit this parameter.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
    #         If you do not specify a client token, a randomly generated token is used for the request
    #         to ensure idempotency. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the root volume replacement task.</p>
    #
    # @return [Types::CreateReplaceRootVolumeTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_replace_root_volume_task(
    #     instance_id: 'InstanceId', # required
    #     snapshot_id: 'SnapshotId',
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateReplaceRootVolumeTaskOutput
    #   resp.data.replace_root_volume_task #=> Types::ReplaceRootVolumeTask
    #   resp.data.replace_root_volume_task.replace_root_volume_task_id #=> String
    #   resp.data.replace_root_volume_task.instance_id #=> String
    #   resp.data.replace_root_volume_task.task_state #=> String, one of ["pending", "in-progress", "failing", "succeeded", "failed", "failed-detached"]
    #   resp.data.replace_root_volume_task.start_time #=> String
    #   resp.data.replace_root_volume_task.complete_time #=> String
    #   resp.data.replace_root_volume_task.tags #=> Array<Tag>
    #   resp.data.replace_root_volume_task.tags[0] #=> Types::Tag
    #   resp.data.replace_root_volume_task.tags[0].key #=> String
    #   resp.data.replace_root_volume_task.tags[0].value #=> String
    #
    def create_replace_root_volume_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateReplaceRootVolumeTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateReplaceRootVolumeTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateReplaceRootVolumeTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateReplaceRootVolumeTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateReplaceRootVolumeTask,
        params_class: Params::CreateReplaceRootVolumeTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_replace_root_volume_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance
    # 			Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your
    # 			Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p>
    #          <note>
    #             <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace.
    #        Convertible Reserved Instances cannot be sold.</p>
    #          </note>
    # 		       <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p>
    # 		       <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance
    #       Marketplace. After completing the registration process, you can create a Reserved Instance
    #       Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price
    #       to receive for them. Your Standard Reserved Instance listings then become available for purchase. To
    #       view the details of your Standard Reserved Instance listing, you can use the
    #         <a>DescribeReservedInstancesListings</a> operation.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the
    # 				<i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateReservedInstancesListingInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure idempotency of your
    #   				listings. This helps avoid duplicate listings. For more information, see
    #   				<a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [Integer] :instance_count
    #   <p>The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.</p>
    #
    # @option params [Array<PriceScheduleSpecification>] :price_schedules
    #   <p>A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.</p>
    #
    # @option params [String] :reserved_instances_id
    #   <p>The ID of the active Standard Reserved Instance.</p>
    #
    # @return [Types::CreateReservedInstancesListingOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_reserved_instances_listing(
    #     client_token: 'ClientToken', # required
    #     instance_count: 1, # required
    #     price_schedules: [
    #       {
    #         currency_code: 'USD', # accepts ["USD"]
    #         price: 1.0,
    #         term: 1
    #       }
    #     ], # required
    #     reserved_instances_id: 'ReservedInstancesId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateReservedInstancesListingOutput
    #   resp.data.reserved_instances_listings #=> Array<ReservedInstancesListing>
    #   resp.data.reserved_instances_listings[0] #=> Types::ReservedInstancesListing
    #   resp.data.reserved_instances_listings[0].client_token #=> String
    #   resp.data.reserved_instances_listings[0].create_date #=> Time
    #   resp.data.reserved_instances_listings[0].instance_counts #=> Array<InstanceCount>
    #   resp.data.reserved_instances_listings[0].instance_counts[0] #=> Types::InstanceCount
    #   resp.data.reserved_instances_listings[0].instance_counts[0].instance_count #=> Integer
    #   resp.data.reserved_instances_listings[0].instance_counts[0].state #=> String, one of ["available", "sold", "cancelled", "pending"]
    #   resp.data.reserved_instances_listings[0].price_schedules #=> Array<PriceSchedule>
    #   resp.data.reserved_instances_listings[0].price_schedules[0] #=> Types::PriceSchedule
    #   resp.data.reserved_instances_listings[0].price_schedules[0].active #=> Boolean
    #   resp.data.reserved_instances_listings[0].price_schedules[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_listings[0].price_schedules[0].price #=> Float
    #   resp.data.reserved_instances_listings[0].price_schedules[0].term #=> Integer
    #   resp.data.reserved_instances_listings[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_listings[0].reserved_instances_listing_id #=> String
    #   resp.data.reserved_instances_listings[0].status #=> String, one of ["active", "pending", "cancelled", "closed"]
    #   resp.data.reserved_instances_listings[0].status_message #=> String
    #   resp.data.reserved_instances_listings[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances_listings[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances_listings[0].tags[0].key #=> String
    #   resp.data.reserved_instances_listings[0].tags[0].value #=> String
    #   resp.data.reserved_instances_listings[0].update_date #=> Time
    #
    def create_reserved_instances_listing(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateReservedInstancesListingInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateReservedInstancesListingInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateReservedInstancesListing
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateReservedInstancesListing
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateReservedInstancesListing,
        params_class: Params::CreateReservedInstancesListingOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_reserved_instances_listing
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts a task that restores an AMI from an Amazon S3 object that was previously created by using
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p>
    #          <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
    #     	Amazon S3</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateRestoreImageTaskInput}.
    #
    # @option params [String] :bucket
    #   <p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>
    #
    # @option params [String] :object_key
    #   <p>The name of the stored AMI object in the bucket.</p>
    #
    # @option params [String] :name
    #   <p>The name for the restored AMI. The name must be unique for AMIs in the Region for this
    #         account. If you do not provide a name, the new AMI gets the same name as the original
    #         AMI.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the AMI and snapshots on restoration. You can tag the AMI, the
    #         snapshots, or both.</p>
    #            <ul>
    #               <li>
    #                  <p>To tag the AMI, the value for <code>ResourceType</code> must be <code>image</code>.</p>
    #               </li>
    #               <li>
    #                  <p>To
    #             tag the snapshots, the value for <code>ResourceType</code> must be <code>snapshot</code>. The
    #             same tag is applied to all of the snapshots that are created.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateRestoreImageTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_restore_image_task(
    #     bucket: 'Bucket', # required
    #     object_key: 'ObjectKey', # required
    #     name: 'Name',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateRestoreImageTaskOutput
    #   resp.data.image_id #=> String
    #
    def create_restore_image_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateRestoreImageTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateRestoreImageTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateRestoreImageTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateRestoreImageTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateRestoreImageTask,
        params_class: Params::CreateRestoreImageTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_restore_image_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a route in a route table within a VPC.</p>
    #          <p>You must specify one of the following targets: internet gateway or virtual private
    # 			gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.</p>
    #          <p>When determining how to route traffic, we use the route with the most specific match.
    #             For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the
    #             route table includes the following two IPv4 routes:</p>
    # 			      <ul>
    #             <li>
    # 					          <p>
    #                   <code>192.0.2.0/24</code> (goes to some target A)</p>
    # 				        </li>
    #             <li>
    # 					          <p>
    #                   <code>192.0.2.0/28</code> (goes to some target B)</p>
    # 				        </li>
    #          </ul>
    # 		       <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route
    # 				in the list covers a smaller number of IP addresses and is therefore more specific,
    # 				so we use that route to determine where to target the traffic.</p>
    #          <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    #          <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    #
    # @option params [String] :destination_ipv6_cidr_block
    #   <p>The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.</p>
    #
    # @option params [String] :destination_prefix_list_id
    #   <p>The ID of a prefix list used for the destination match.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_endpoint_id
    #   <p>The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.</p>
    #
    # @option params [String] :egress_only_internet_gateway_id
    #   <p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>
    #
    # @option params [String] :gateway_id
    #   <p>The ID of an internet gateway or virtual private gateway attached to your
    #   			VPC.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
    #
    # @option params [String] :nat_gateway_id
    #   <p>[IPv4 traffic only] The ID of a NAT gateway.</p>
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of a transit gateway.</p>
    #
    # @option params [String] :local_gateway_id
    #   <p>The ID of the local gateway.</p>
    #
    # @option params [String] :carrier_gateway_id
    #   <p>The ID of the carrier gateway.</p>
    #           <p>You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of a network interface.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table for the route.</p>
    #
    # @option params [String] :vpc_peering_connection_id
    #   <p>The ID of a VPC peering connection.</p>
    #
    # @option params [String] :core_network_arn
    #   <p>The Amazon Resource Name (ARN) of the core network.</p>
    #
    # @return [Types::CreateRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     destination_ipv6_cidr_block: 'DestinationIpv6CidrBlock',
    #     destination_prefix_list_id: 'DestinationPrefixListId',
    #     dry_run: false,
    #     vpc_endpoint_id: 'VpcEndpointId',
    #     egress_only_internet_gateway_id: 'EgressOnlyInternetGatewayId',
    #     gateway_id: 'GatewayId',
    #     instance_id: 'InstanceId',
    #     nat_gateway_id: 'NatGatewayId',
    #     transit_gateway_id: 'TransitGatewayId',
    #     local_gateway_id: 'LocalGatewayId',
    #     carrier_gateway_id: 'CarrierGatewayId',
    #     network_interface_id: 'NetworkInterfaceId',
    #     route_table_id: 'RouteTableId', # required
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId',
    #     core_network_arn: 'CoreNetworkArn'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateRouteOutput
    #   resp.data.return #=> Boolean
    #
    def create_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateRoute,
        params_class: Params::CreateRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateRouteTableInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the route table.</p>
    #
    # @return [Types::CreateRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_route_table(
    #     dry_run: false,
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateRouteTableOutput
    #   resp.data.route_table #=> Types::RouteTable
    #   resp.data.route_table.associations #=> Array<RouteTableAssociation>
    #   resp.data.route_table.associations[0] #=> Types::RouteTableAssociation
    #   resp.data.route_table.associations[0].main #=> Boolean
    #   resp.data.route_table.associations[0].route_table_association_id #=> String
    #   resp.data.route_table.associations[0].route_table_id #=> String
    #   resp.data.route_table.associations[0].subnet_id #=> String
    #   resp.data.route_table.associations[0].gateway_id #=> String
    #   resp.data.route_table.associations[0].association_state #=> Types::RouteTableAssociationState
    #   resp.data.route_table.associations[0].association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.route_table.associations[0].association_state.status_message #=> String
    #   resp.data.route_table.propagating_vgws #=> Array<PropagatingVgw>
    #   resp.data.route_table.propagating_vgws[0] #=> Types::PropagatingVgw
    #   resp.data.route_table.propagating_vgws[0].gateway_id #=> String
    #   resp.data.route_table.route_table_id #=> String
    #   resp.data.route_table.routes #=> Array<Route>
    #   resp.data.route_table.routes[0] #=> Types::Route
    #   resp.data.route_table.routes[0].destination_cidr_block #=> String
    #   resp.data.route_table.routes[0].destination_ipv6_cidr_block #=> String
    #   resp.data.route_table.routes[0].destination_prefix_list_id #=> String
    #   resp.data.route_table.routes[0].egress_only_internet_gateway_id #=> String
    #   resp.data.route_table.routes[0].gateway_id #=> String
    #   resp.data.route_table.routes[0].instance_id #=> String
    #   resp.data.route_table.routes[0].instance_owner_id #=> String
    #   resp.data.route_table.routes[0].nat_gateway_id #=> String
    #   resp.data.route_table.routes[0].transit_gateway_id #=> String
    #   resp.data.route_table.routes[0].local_gateway_id #=> String
    #   resp.data.route_table.routes[0].carrier_gateway_id #=> String
    #   resp.data.route_table.routes[0].network_interface_id #=> String
    #   resp.data.route_table.routes[0].origin #=> String, one of ["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"]
    #   resp.data.route_table.routes[0].state #=> String, one of ["active", "blackhole"]
    #   resp.data.route_table.routes[0].vpc_peering_connection_id #=> String
    #   resp.data.route_table.routes[0].core_network_arn #=> String
    #   resp.data.route_table.tags #=> Array<Tag>
    #   resp.data.route_table.tags[0] #=> Types::Tag
    #   resp.data.route_table.tags[0].key #=> String
    #   resp.data.route_table.tags[0].value #=> String
    #   resp.data.route_table.vpc_id #=> String
    #   resp.data.route_table.owner_id #=> String
    #
    def create_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateRouteTable,
        params_class: Params::CreateRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a security group.</p>
    #          <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic.
    #          For more information, see
    # 				<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 security groups</a> in
    # 				the <i>Amazon Elastic Compute Cloud User Guide</i> and
    # 				<a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security groups for your VPC</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p>
    #          <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p>
    #          <p>You can add or remove rules from your security groups using
    # 					<a>AuthorizeSecurityGroupIngress</a>,
    # 					<a>AuthorizeSecurityGroupEgress</a>,
    # 					<a>RevokeSecurityGroupIngress</a>, and
    # 					<a>RevokeSecurityGroupEgress</a>.</p>
    #          <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateSecurityGroupInput}.
    #
    # @option params [String] :description
    #   <p>A description for the security group. This is informational only.</p>
    #   		       <p>Constraints: Up to 255 characters in length</p>
    #   		       <p>Constraints for EC2-Classic: ASCII characters</p>
    #   		       <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*</p>
    #
    # @option params [String] :group_name
    #   <p>The name of the security group.</p>
    #            <p>Constraints: Up to 255 characters in length. Cannot start with
    #               <code>sg-</code>.</p>
    #            <p>Constraints for EC2-Classic: ASCII characters</p>
    #            <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*</p>
    #
    # @option params [String] :vpc_id
    #   <p>[EC2-VPC] The ID of the VPC. Required for EC2-VPC.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the security group.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateSecurityGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_security_group(
    #     description: 'Description', # required
    #     group_name: 'GroupName', # required
    #     vpc_id: 'VpcId',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateSecurityGroupOutput
    #   resp.data.group_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def create_security_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateSecurityGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateSecurityGroupInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateSecurityGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateSecurityGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateSecurityGroup,
        params_class: Params::CreateSecurityGroupOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_security_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for
    #   	backups, to make copies of EBS volumes, and to save data before shutting down an
    #   	instance.</p>
    #
    #
    #          <p>You can create snapshots of volumes in a Region and volumes on an Outpost. If you
    #     	create a snapshot of a volume in a Region, the snapshot must be stored in the same
    #     	Region as the volume. If you create a snapshot of a volume on an Outpost, the snapshot
    #     	can be stored on the same Outpost as the volume, or in the Region for that Outpost.</p>
    #   	
    #          <p>When a snapshot is created, any Amazon Web Services Marketplace product codes that are associated with the
    #       source volume are propagated to the snapshot.</p>
    #          <p>You can take a snapshot of an attached volume that is in use. However, snapshots only
    #       capture data that has been written to your Amazon EBS volume at the time the snapshot command is
    #       issued; this might exclude any data that has been cached by any applications or the operating
    #       system. If you can pause any file systems on the volume long enough to take a snapshot, your
    #       snapshot should be complete. However, if you cannot pause all file writes to the volume, you
    #       should unmount the volume from within the instance, issue the snapshot command, and then
    #       remount the volume to ensure a consistent and complete snapshot. You may remount and use your
    #       volume while the snapshot status is <code>pending</code>.</p>
    #          <p>To create a snapshot for Amazon EBS volumes that serve as root devices, you should stop the
    #       instance before taking the snapshot.</p>
    #          <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that
    #       are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes
    #       and any associated snapshots always remain protected.</p>
    #          <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2
    #         resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateSnapshotInput}.
    #
    # @option params [String] :description
    #   <p>A description for the snapshot.</p>
    #
    # @option params [String] :outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost on which to create a local
    #     	snapshot.</p>
    #     	      <ul>
    #               <li>
    #     			          <p>To create a snapshot of a volume in a Region, omit this parameter. The snapshot
    #     				is created in the same Region as the volume.</p>
    #     		        </li>
    #               <li>
    #     			          <p>To create a snapshot of a volume on an Outpost and store the snapshot in the
    #     				Region, omit this parameter. The snapshot is created in the Region for the
    #     				Outpost.</p>
    #     		        </li>
    #               <li>
    #     			          <p>To create a snapshot of a volume on an Outpost and store the snapshot on an
    #     			Outpost, specify the ARN of the destination Outpost. The snapshot must be created on
    #     			the same Outpost as the volume.</p>
    #     		        </li>
    #            </ul>
    #     	      <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-snapshot">Create local snapshots from volumes on an Outpost</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the Amazon EBS volume.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the snapshot during creation.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_snapshot(
    #     description: 'Description',
    #     outpost_arn: 'OutpostArn',
    #     volume_id: 'VolumeId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateSnapshotOutput
    #   resp.data.data_encryption_key_id #=> String
    #   resp.data.description #=> String
    #   resp.data.encrypted #=> Boolean
    #   resp.data.kms_key_id #=> String
    #   resp.data.owner_id #=> String
    #   resp.data.progress #=> String
    #   resp.data.snapshot_id #=> String
    #   resp.data.start_time #=> Time
    #   resp.data.state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.state_message #=> String
    #   resp.data.volume_id #=> String
    #   resp.data.volume_size #=> Integer
    #   resp.data.owner_alias #=> String
    #   resp.data.outpost_arn #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.storage_tier #=> String, one of ["archive", "standard"]
    #   resp.data.restore_expiry_time #=> Time
    #
    def create_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateSnapshotInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateSnapshot,
        params_class: Params::CreateSnapshotOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3.
    #     Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot
    #     each that is crash-consistent across the instance. Boot volumes can be excluded by changing the
    #     parameters. </p>
    #   	
    #          <p>You can create multi-volume snapshots of instances in a Region and instances on an
    #   	Outpost. If you create snapshots from an instance in a Region, the snapshots must be stored
    #   	in the same Region as the instance. If you create snapshots from an instance on an Outpost,
    #   	the snapshots can be stored on the same Outpost as the instance, or in the Region for that
    #   	Outpost.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateSnapshotsInput}.
    #
    # @option params [String] :description
    #   <p> A description propagated to every snapshot specified by the instance.</p>
    #
    # @option params [InstanceSpecification] :instance_specification
    #   <p>The instance to specify which volumes should be included in the snapshots.</p>
    #
    # @option params [String] :outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost on which to create the local
    #     		snapshots.</p>
    #     	      <ul>
    #               <li>
    #     			          <p>To create snapshots from an instance in a Region, omit this parameter. The
    #     				snapshots are created in the same Region as the instance.</p>
    #     		        </li>
    #               <li>
    #     			          <p>To create snapshots from an instance on an Outpost and store the snapshots
    #     				in the Region, omit this parameter. The snapshots are created in the Region
    #     				for the Outpost.</p>
    #     		        </li>
    #               <li>
    #     			          <p>To create snapshots from an instance on an Outpost and store the snapshots
    #     				on an Outpost, specify the ARN of the destination Outpost. The snapshots must
    #     				be created on the same Outpost as the instance.</p>
    #     		        </li>
    #            </ul>
    #     	      <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot">
    #     		Create multi-volume local snapshots from instances on an Outpost</a> in the
    #     		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>Tags to apply to every snapshot specified by the instance.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :copy_tags_from_source
    #   <p>Copies the tags from the specified volume to corresponding snapshot.</p>
    #
    # @return [Types::CreateSnapshotsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_snapshots(
    #     description: 'Description',
    #     instance_specification: {
    #       instance_id: 'InstanceId',
    #       exclude_boot_volume: false
    #     }, # required
    #     outpost_arn: 'OutpostArn',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     copy_tags_from_source: 'volume' # accepts ["volume"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateSnapshotsOutput
    #   resp.data.snapshots #=> Array<SnapshotInfo>
    #   resp.data.snapshots[0] #=> Types::SnapshotInfo
    #   resp.data.snapshots[0].description #=> String
    #   resp.data.snapshots[0].tags #=> Array<Tag>
    #   resp.data.snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.snapshots[0].tags[0].key #=> String
    #   resp.data.snapshots[0].tags[0].value #=> String
    #   resp.data.snapshots[0].encrypted #=> Boolean
    #   resp.data.snapshots[0].volume_id #=> String
    #   resp.data.snapshots[0].state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.snapshots[0].volume_size #=> Integer
    #   resp.data.snapshots[0].start_time #=> Time
    #   resp.data.snapshots[0].progress #=> String
    #   resp.data.snapshots[0].owner_id #=> String
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].outpost_arn #=> String
    #
    def create_snapshots(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateSnapshotsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateSnapshotsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateSnapshots
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateSnapshots
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateSnapshots,
        params_class: Params::CreateSnapshotsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_snapshots
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs.
    # 				You can create one data feed per Amazon Web Services account. For more information, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance data feed</a>
    #         in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateSpotDatafeedSubscriptionInput}.
    #
    # @option params [String] :bucket
    #   <p>The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For
    #               more information about bucket names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules">Rules for bucket
    #                   naming</a> in the <i>Amazon S3 Developer Guide</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix
    #   <p>The prefix for the data feed file names.</p>
    #
    # @return [Types::CreateSpotDatafeedSubscriptionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_spot_datafeed_subscription(
    #     bucket: 'Bucket', # required
    #     dry_run: false,
    #     prefix: 'Prefix'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateSpotDatafeedSubscriptionOutput
    #   resp.data.spot_datafeed_subscription #=> Types::SpotDatafeedSubscription
    #   resp.data.spot_datafeed_subscription.bucket #=> String
    #   resp.data.spot_datafeed_subscription.fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_datafeed_subscription.fault.code #=> String
    #   resp.data.spot_datafeed_subscription.fault.message #=> String
    #   resp.data.spot_datafeed_subscription.owner_id #=> String
    #   resp.data.spot_datafeed_subscription.prefix #=> String
    #   resp.data.spot_datafeed_subscription.state #=> String, one of ["Active", "Inactive"]
    #
    def create_spot_datafeed_subscription(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateSpotDatafeedSubscriptionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateSpotDatafeedSubscriptionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateSpotDatafeedSubscription
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateSpotDatafeedSubscription
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateSpotDatafeedSubscription,
        params_class: Params::CreateSpotDatafeedSubscriptionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_spot_datafeed_subscription
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stores an AMI as a single object in an Amazon S3 bucket.</p>
    #          <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
    #     	Amazon S3</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateStoreImageTaskInput}.
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [String] :bucket
    #   <p>The name of the Amazon S3 bucket in which the AMI object will be stored. The bucket must be in
    #         the Region in which the request is being made. The AMI object appears in the bucket only after
    #         the upload task has completed. </p>
    #
    # @option params [Array<S3ObjectTag>] :s3_object_tags
    #   <p>The tags to apply to the AMI object that will be stored in the Amazon S3 bucket. </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateStoreImageTaskOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_store_image_task(
    #     image_id: 'ImageId', # required
    #     bucket: 'Bucket', # required
    #     s3_object_tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateStoreImageTaskOutput
    #   resp.data.object_key #=> String
    #
    def create_store_image_task(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateStoreImageTaskInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateStoreImageTaskInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateStoreImageTask
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateStoreImageTask
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateStoreImageTask,
        params_class: Params::CreateStoreImageTaskOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_store_image_task
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a subnet in a specified VPC.</p>
    #         <p>You must specify an IPv4 CIDR block for the subnet. After you create a subnet, you
    #             can't change its CIDR block. The allowed block size is between a /16 netmask (65,536 IP
    #             addresses) and /28 netmask (16 IP addresses). The CIDR block must not overlap with the
    #             CIDR block of an existing subnet in the VPC.</p>
    #         <p>If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an
    #             IPv6 CIDR block that uses a /64 prefix length. </p>
    #         <important>
    #             <p>Amazon Web Services reserves both the first four and the last IPv4 address in each subnet's CIDR
    #                 block. They're not available for use.</p>
    #         </important>
    #         <p>If you add more than one subnet to a VPC, they're set up in a star topology with a
    #             logical router in the middle.</p>
    #         <p>When you stop an instance in a subnet, it retains its private IPv4 address. It's
    #             therefore possible to have a subnet with no running instances (they're all stopped), but
    #             no remaining IP addresses available.</p>
    #         <p>For more information about subnets, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and subnets</a> in the
    #                 <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateSubnetInput}.
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the subnet.</p>
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone or Local Zone for the subnet.</p>
    #            <p>Default: Amazon Web Services selects one for you. If you create more than one subnet in your VPC, we
    #             do not necessarily select a different zone for each subnet.</p>
    #            <p>To create a subnet in a Local Zone, set this value to the Local Zone ID, for example
    #             <code>us-west-2-lax-1a</code>. For information about the Regions that support Local Zones,
    #              see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">Available Regions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #            <p>To create a subnet in an Outpost, set this value to the Availability Zone for the
    #              Outpost and specify the Outpost ARN.</p>
    #
    # @option params [String] :availability_zone_id
    #   <p>The AZ ID or the Local Zone ID of the subnet.</p>
    #
    # @option params [String] :cidr_block
    #   <p>The IPv4 network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code>.
    #              We modify the specified CIDR block to its canonical form; for example, if you specify
    #              <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    #            <p>This parameter is not supported for an IPv6 only subnet.</p>
    #
    # @option params [String] :ipv6_cidr_block
    #   <p>The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a
    #               /64 prefix length.</p>
    #           <p>This parameter is required for an IPv6 only subnet.</p>
    #
    # @option params [String] :outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also
    #           specify the Availability Zone of the Outpost subnet.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :ipv6_native
    #   <p>Indicates whether to create an IPv6 only subnet.</p>
    #
    # @return [Types::CreateSubnetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_subnet(
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     availability_zone: 'AvailabilityZone',
    #     availability_zone_id: 'AvailabilityZoneId',
    #     cidr_block: 'CidrBlock',
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     outpost_arn: 'OutpostArn',
    #     vpc_id: 'VpcId', # required
    #     dry_run: false,
    #     ipv6_native: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateSubnetOutput
    #   resp.data.subnet #=> Types::Subnet
    #   resp.data.subnet.availability_zone #=> String
    #   resp.data.subnet.availability_zone_id #=> String
    #   resp.data.subnet.available_ip_address_count #=> Integer
    #   resp.data.subnet.cidr_block #=> String
    #   resp.data.subnet.default_for_az #=> Boolean
    #   resp.data.subnet.enable_lni_at_device_index #=> Integer
    #   resp.data.subnet.map_public_ip_on_launch #=> Boolean
    #   resp.data.subnet.map_customer_owned_ip_on_launch #=> Boolean
    #   resp.data.subnet.customer_owned_ipv4_pool #=> String
    #   resp.data.subnet.state #=> String, one of ["pending", "available"]
    #   resp.data.subnet.subnet_id #=> String
    #   resp.data.subnet.vpc_id #=> String
    #   resp.data.subnet.owner_id #=> String
    #   resp.data.subnet.assign_ipv6_address_on_creation #=> Boolean
    #   resp.data.subnet.ipv6_cidr_block_association_set #=> Array<SubnetIpv6CidrBlockAssociation>
    #   resp.data.subnet.ipv6_cidr_block_association_set[0] #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet.tags #=> Array<Tag>
    #   resp.data.subnet.tags[0] #=> Types::Tag
    #   resp.data.subnet.tags[0].key #=> String
    #   resp.data.subnet.tags[0].value #=> String
    #   resp.data.subnet.subnet_arn #=> String
    #   resp.data.subnet.outpost_arn #=> String
    #   resp.data.subnet.enable_dns64 #=> Boolean
    #   resp.data.subnet.ipv6_native #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch #=> Types::PrivateDnsNameOptionsOnLaunch
    #   resp.data.subnet.private_dns_name_options_on_launch.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_aaaa_record #=> Boolean
    #
    def create_subnet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateSubnetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateSubnetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateSubnet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateSubnet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateSubnet,
        params_class: Params::CreateSubnetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_subnet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a subnet CIDR reservation. For information about subnet CIDR reservations, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/subnet-cidr-reservation.html">Subnet CIDR reservations</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateSubnetCidrReservationInput}.
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the subnet CIDR reservation.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet.</p>
    #
    # @option params [String] :cidr
    #   <p>The IPv4 or IPV6 CIDR range to reserve.</p>
    #
    # @option params [String] :reservation_type
    #   <p>The type of reservation.</p>
    #           <p>The following are valid values:</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>prefix</code>: The Amazon EC2
    #                       Prefix
    #                       Delegation feature assigns the IP addresses to network interfaces that are
    #                       associated with an instance. For information about Prefix
    #                       Delegation,
    #                       see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-delegation.html">Prefix Delegation
    #                           for Amazon EC2 network interfaces</a> in the
    #                           <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>explicit</code>: You manually assign the IP addresses to resources that
    #                       reside in your subnet. </p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :description
    #   <p>The
    #               description
    #               to assign to the subnet CIDR reservation.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateSubnetCidrReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_subnet_cidr_reservation(
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     subnet_id: 'SubnetId', # required
    #     cidr: 'Cidr', # required
    #     reservation_type: 'prefix', # required - accepts ["prefix", "explicit"]
    #     description: 'Description',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateSubnetCidrReservationOutput
    #   resp.data.subnet_cidr_reservation #=> Types::SubnetCidrReservation
    #   resp.data.subnet_cidr_reservation.subnet_cidr_reservation_id #=> String
    #   resp.data.subnet_cidr_reservation.subnet_id #=> String
    #   resp.data.subnet_cidr_reservation.cidr #=> String
    #   resp.data.subnet_cidr_reservation.reservation_type #=> String, one of ["prefix", "explicit"]
    #   resp.data.subnet_cidr_reservation.owner_id #=> String
    #   resp.data.subnet_cidr_reservation.description #=> String
    #   resp.data.subnet_cidr_reservation.tags #=> Array<Tag>
    #   resp.data.subnet_cidr_reservation.tags[0] #=> Types::Tag
    #   resp.data.subnet_cidr_reservation.tags[0].key #=> String
    #   resp.data.subnet_cidr_reservation.tags[0].value #=> String
    #
    def create_subnet_cidr_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateSubnetCidrReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateSubnetCidrReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateSubnetCidrReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateSubnetCidrReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateSubnetCidrReservation,
        params_class: Params::CreateSubnetCidrReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_subnet_cidr_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or
    #          resources. When you specify an existing tag key, the value is overwritten with
    #          the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and
    #          optional value. Tag keys must be unique per resource.</p>
    #
    #          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the
    #             <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about
    #          creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported
    #             Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon
    #             Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTagsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :resources
    #   <p>The IDs of the resources, separated by spaces.</p>
    #      	     <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value,
    #           specify the parameter with no value, and we set the value to an empty string.</p>
    #
    # @return [Types::CreateTagsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_tags(
    #     dry_run: false,
    #     resources: [
    #       'member'
    #     ], # required
    #     tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTagsOutput
    #
    def create_tags(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTagsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTagsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTags
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTags
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTags,
        params_class: Params::CreateTagsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_tags
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Traffic Mirror filter.</p>
    #          <p>A Traffic Mirror filter is a set of rules that defines the traffic to mirror.</p>
    #          <p>By default, no traffic is mirrored. To mirror traffic, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a> to add Traffic Mirror rules to the filter. The rules you
    #          add define what traffic gets mirrored. You can also use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a> to mirror supported network services.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrafficMirrorFilterInput}.
    #
    # @option params [String] :description
    #   <p>The description of the Traffic Mirror filter.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to a Traffic Mirror filter.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::CreateTrafficMirrorFilterOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_traffic_mirror_filter(
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrafficMirrorFilterOutput
    #   resp.data.traffic_mirror_filter #=> Types::TrafficMirrorFilter
    #   resp.data.traffic_mirror_filter.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0] #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_number #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].protocol #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].description #=> String
    #   resp.data.traffic_mirror_filter.egress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.network_services #=> Array<String>
    #   resp.data.traffic_mirror_filter.network_services[0] #=> String, one of ["amazon-dns"]
    #   resp.data.traffic_mirror_filter.description #=> String
    #   resp.data.traffic_mirror_filter.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_filter.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_filter.tags[0].key #=> String
    #   resp.data.traffic_mirror_filter.tags[0].value #=> String
    #   resp.data.client_token #=> String
    #
    def create_traffic_mirror_filter(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrafficMirrorFilterInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrafficMirrorFilterInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrafficMirrorFilter
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTrafficMirrorFilter
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTrafficMirrorFilter,
        params_class: Params::CreateTrafficMirrorFilterOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_traffic_mirror_filter
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Traffic Mirror filter rule.</p>
    #          <p>A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.</p>
    #          <p>You need the Traffic Mirror filter ID when you create the rule.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrafficMirrorFilterRuleInput}.
    #
    # @option params [String] :traffic_mirror_filter_id
    #   <p>The ID of the filter that this rule is associated with.</p>
    #
    # @option params [String] :traffic_direction
    #   <p>The type of traffic.</p>
    #
    # @option params [Integer] :rule_number
    #   <p>The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
    #            direction. The rules are processed in ascending order by rule number.</p>
    #
    # @option params [String] :rule_action
    #   <p>The action to take on the filtered traffic.</p>
    #
    # @option params [TrafficMirrorPortRangeRequest] :destination_port_range
    #   <p>The destination port range.</p>
    #
    # @option params [TrafficMirrorPortRangeRequest] :source_port_range
    #   <p>The source port range.</p>
    #
    # @option params [Integer] :protocol
    #   <p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p>
    #            <p>For information about the protocol value, see <a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a> on the  Internet Assigned Numbers Authority (IANA) website.</p>
    #
    # @option params [String] :destination_cidr_block
    #   <p>The destination CIDR block to assign to the Traffic Mirror rule.</p>
    #
    # @option params [String] :source_cidr_block
    #   <p>The source CIDR block to assign to the Traffic Mirror rule.</p>
    #
    # @option params [String] :description
    #   <p>The description of the Traffic Mirror rule.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::CreateTrafficMirrorFilterRuleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_traffic_mirror_filter_rule(
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     traffic_direction: 'ingress', # required - accepts ["ingress", "egress"]
    #     rule_number: 1, # required
    #     rule_action: 'accept', # required - accepts ["accept", "reject"]
    #     destination_port_range: {
    #       from_port: 1,
    #       to_port: 1
    #     },
    #     protocol: 1,
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     source_cidr_block: 'SourceCidrBlock', # required
    #     description: 'Description',
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrafficMirrorFilterRuleOutput
    #   resp.data.traffic_mirror_filter_rule #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter_rule.rule_number #=> Integer
    #   resp.data.traffic_mirror_filter_rule.rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter_rule.protocol #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.description #=> String
    #   resp.data.client_token #=> String
    #
    def create_traffic_mirror_filter_rule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrafficMirrorFilterRuleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrafficMirrorFilterRuleInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrafficMirrorFilterRule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTrafficMirrorFilterRule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTrafficMirrorFilterRule,
        params_class: Params::CreateTrafficMirrorFilterRuleOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_traffic_mirror_filter_rule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Traffic Mirror session.</p>
    #          <p>A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it
    #          to the session to define a subset of the traffic to mirror, for example all TCP
    #          traffic.</p>
    #          <p>The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. </p>
    #          <p>By default, no traffic is mirrored. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a> to
    #          create filter rules that specify the traffic to mirror.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrafficMirrorSessionInput}.
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the source network interface.</p>
    #
    # @option params [String] :traffic_mirror_target_id
    #   <p>The ID of the Traffic Mirror target.</p>
    #
    # @option params [String] :traffic_mirror_filter_id
    #   <p>The ID of the Traffic Mirror filter.</p>
    #
    # @option params [Integer] :packet_length
    #   <p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do
    #            not specify this parameter when you want to mirror the entire packet. To mirror a subset of
    #            the packet, set this to the length (in bytes) that you want to mirror. For example, if you
    #            set this value to 100, then the first 100 bytes that meet the filter criteria are copied to
    #            the target.</p>
    #            <p>If you do not want to mirror the entire packet, use the <code>PacketLength</code> parameter to specify the number of bytes in each packet to mirror.</p>
    #
    # @option params [Integer] :session_number
    #   <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p>
    #            <p>Valid values are 1-32766.</p>
    #
    # @option params [Integer] :virtual_network_id
    #   <p>The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN
    #            protocol, see <a href="https://tools.ietf.org/html/rfc7348">RFC 7348</a>. If you do
    #            not specify a <code>VirtualNetworkId</code>, an account-wide unique id is chosen at
    #            random.</p>
    #
    # @option params [String] :description
    #   <p>The description of the Traffic Mirror session.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to a Traffic Mirror session.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::CreateTrafficMirrorSessionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_traffic_mirror_session(
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     traffic_mirror_target_id: 'TrafficMirrorTargetId', # required
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     packet_length: 1,
    #     session_number: 1, # required
    #     virtual_network_id: 1,
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrafficMirrorSessionOutput
    #   resp.data.traffic_mirror_session #=> Types::TrafficMirrorSession
    #   resp.data.traffic_mirror_session.traffic_mirror_session_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_session.network_interface_id #=> String
    #   resp.data.traffic_mirror_session.owner_id #=> String
    #   resp.data.traffic_mirror_session.packet_length #=> Integer
    #   resp.data.traffic_mirror_session.session_number #=> Integer
    #   resp.data.traffic_mirror_session.virtual_network_id #=> Integer
    #   resp.data.traffic_mirror_session.description #=> String
    #   resp.data.traffic_mirror_session.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_session.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_session.tags[0].key #=> String
    #   resp.data.traffic_mirror_session.tags[0].value #=> String
    #   resp.data.client_token #=> String
    #
    def create_traffic_mirror_session(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrafficMirrorSessionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrafficMirrorSessionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrafficMirrorSession
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTrafficMirrorSession
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTrafficMirrorSession,
        params_class: Params::CreateTrafficMirrorSessionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_traffic_mirror_session
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a target for your Traffic Mirror session.</p>
    #          <p>A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and
    #          the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in
    #          different VPCs connected via VPC peering or a transit gateway.</p>
    #          <p>A Traffic Mirror target can be a network interface, or a Network Load Balancer.</p>
    #          <p>To use the target in a Traffic Mirror session, use  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTrafficMirrorTargetInput}.
    #
    # @option params [String] :network_interface_id
    #   <p>The network interface ID that is associated with the target.</p>
    #
    # @option params [String] :network_load_balancer_arn
    #   <p>The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.</p>
    #
    # @option params [String] :description
    #   <p>The description of the Traffic Mirror target.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the Traffic Mirror target.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::CreateTrafficMirrorTargetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_traffic_mirror_target(
    #     network_interface_id: 'NetworkInterfaceId',
    #     network_load_balancer_arn: 'NetworkLoadBalancerArn',
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTrafficMirrorTargetOutput
    #   resp.data.traffic_mirror_target #=> Types::TrafficMirrorTarget
    #   resp.data.traffic_mirror_target.traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_target.network_interface_id #=> String
    #   resp.data.traffic_mirror_target.network_load_balancer_arn #=> String
    #   resp.data.traffic_mirror_target.type #=> String, one of ["network-interface", "network-load-balancer"]
    #   resp.data.traffic_mirror_target.description #=> String
    #   resp.data.traffic_mirror_target.owner_id #=> String
    #   resp.data.traffic_mirror_target.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_target.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_target.tags[0].key #=> String
    #   resp.data.traffic_mirror_target.tags[0].value #=> String
    #   resp.data.client_token #=> String
    #
    def create_traffic_mirror_target(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTrafficMirrorTargetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTrafficMirrorTargetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTrafficMirrorTarget
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTrafficMirrorTarget
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTrafficMirrorTarget,
        params_class: Params::CreateTrafficMirrorTargetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_traffic_mirror_target
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a transit gateway.</p>
    #          <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks.
    #           After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN
    #           connections to the transit gateway.</p>
    #          <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p>
    #          <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer
    #          gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to
    #          <a>CreateVpnConnection</a>.</p>
    #          <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table
    #          and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create
    #          additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table.
    #          You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource
    #          attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayInput}.
    #
    # @option params [String] :description
    #   <p>A description of the transit gateway.</p>
    #
    # @option params [TransitGatewayRequestOptions] :options
    #   <p>The transit gateway options.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the transit gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway(
    #     description: 'Description',
    #     options: {
    #       amazon_side_asn: 1,
    #       auto_accept_shared_attachments: 'enable', # accepts ["enable", "disable"]
    #       default_route_table_association: 'enable', # accepts ["enable", "disable"]
    #       default_route_table_propagation: 'enable', # accepts ["enable", "disable"]
    #       vpn_ecmp_support: 'enable', # accepts ["enable", "disable"]
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       multicast_support: 'enable', # accepts ["enable", "disable"]
    #       transit_gateway_cidr_blocks: [
    #         'member'
    #       ]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayOutput
    #   resp.data.transit_gateway #=> Types::TransitGateway
    #   resp.data.transit_gateway.transit_gateway_id #=> String
    #   resp.data.transit_gateway.transit_gateway_arn #=> String
    #   resp.data.transit_gateway.state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateway.owner_id #=> String
    #   resp.data.transit_gateway.description #=> String
    #   resp.data.transit_gateway.creation_time #=> Time
    #   resp.data.transit_gateway.options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateway.options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway.options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.association_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.tags #=> Array<Tag>
    #   resp.data.transit_gateway.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway.tags[0].key #=> String
    #   resp.data.transit_gateway.tags[0].value #=> String
    #
    def create_transit_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGateway,
        params_class: Params::CreateTransitGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Connect attachment from a specified transit gateway attachment. A Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a transit gateway and an appliance.</p>
    #         <p>A Connect attachment uses an existing VPC or Amazon Web Services Direct Connect attachment as the underlying transport mechanism.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayConnectInput}.
    #
    # @option params [String] :transport_transit_gateway_attachment_id
    #   <p>The ID of the transit gateway attachment. You can specify a VPC attachment or Amazon Web Services Direct Connect attachment.</p>
    #
    # @option params [CreateTransitGatewayConnectRequestOptions] :options
    #   <p>The Connect attachment options.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the Connect attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayConnectOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_connect(
    #     transport_transit_gateway_attachment_id: 'TransportTransitGatewayAttachmentId', # required
    #     options: {
    #       protocol: 'gre' # required - accepts ["gre"]
    #     }, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayConnectOutput
    #   resp.data.transit_gateway_connect #=> Types::TransitGatewayConnect
    #   resp.data.transit_gateway_connect.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transport_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transit_gateway_id #=> String
    #   resp.data.transit_gateway_connect.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_connect.creation_time #=> Time
    #   resp.data.transit_gateway_connect.options #=> Types::TransitGatewayConnectOptions
    #   resp.data.transit_gateway_connect.options.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect.tags[0].key #=> String
    #   resp.data.transit_gateway_connect.tags[0].value #=> String
    #
    def create_transit_gateway_connect(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayConnectInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayConnectInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayConnect
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayConnect
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayConnect,
        params_class: Params::CreateTransitGatewayConnectOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_connect
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Connect peer for a specified transit gateway Connect attachment between a
    #             transit gateway and an appliance.</p>
    #         <p>The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html#tgw-connect-peer">Connect peers</a> in the <i>Transit Gateways Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayConnectPeerInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the Connect attachment.</p>
    #
    # @option params [String] :transit_gateway_address
    #   <p>The peer IP address (GRE outer IP address) on the transit gateway side of the Connect peer, which must be
    #               specified from a transit gateway CIDR block. If not specified, Amazon automatically assigns
    #               the first available IP address from the transit gateway CIDR block.</p>
    #
    # @option params [String] :peer_address
    #   <p>The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.</p>
    #
    # @option params [TransitGatewayConnectRequestBgpOptions] :bgp_options
    #   <p>The BGP options for the Connect peer.</p>
    #
    # @option params [Array<String>] :inside_cidr_blocks
    #   <p>The range of inside IP addresses that are used for BGP peering. You must specify a
    #               size /29 IPv4 CIDR block from the <code>169.254.0.0/16</code> range. The first address
    #               from the range must be configured on the appliance as the BGP IP address. You can also
    #               optionally specify a size /125 IPv6 CIDR block from the <code>fd00::/8</code>
    #               range.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the Connect peer.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayConnectPeerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_connect_peer(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     transit_gateway_address: 'TransitGatewayAddress',
    #     peer_address: 'PeerAddress', # required
    #     bgp_options: {
    #       peer_asn: 1
    #     },
    #     inside_cidr_blocks: [
    #       'member'
    #     ], # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayConnectPeerOutput
    #   resp.data.transit_gateway_connect_peer #=> Types::TransitGatewayConnectPeer
    #   resp.data.transit_gateway_connect_peer.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect_peer.transit_gateway_connect_peer_id #=> String
    #   resp.data.transit_gateway_connect_peer.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_connect_peer.creation_time #=> Time
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration #=> Types::TransitGatewayConnectPeerConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations #=> Array<TransitGatewayAttachmentBgpConfiguration>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0] #=> Types::TransitGatewayAttachmentBgpConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].bgp_status #=> String, one of ["up", "down"]
    #   resp.data.transit_gateway_connect_peer.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect_peer.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect_peer.tags[0].key #=> String
    #   resp.data.transit_gateway_connect_peer.tags[0].value #=> String
    #
    def create_transit_gateway_connect_peer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayConnectPeerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayConnectPeerInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayConnectPeer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayConnectPeer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayConnectPeer,
        params_class: Params::CreateTransitGatewayConnectPeerOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_connect_peer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a multicast domain using the specified transit gateway.</p>
    #         <p>The transit gateway  must be in the available state before you create a domain. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a> to see the state of transit gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayMulticastDomainInput}.
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [CreateTransitGatewayMulticastDomainRequestOptions] :options
    #   <p>The options for the transit gateway multicast domain.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags for the transit gateway multicast domain.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayMulticastDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_multicast_domain(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     options: {
    #       igmpv2_support: 'enable', # accepts ["enable", "disable"]
    #       static_sources_support: 'enable', # accepts ["enable", "disable"]
    #       auto_accept_shared_associations: 'enable' # accepts ["enable", "disable"]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayMulticastDomainOutput
    #   resp.data.transit_gateway_multicast_domain #=> Types::TransitGatewayMulticastDomain
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_arn #=> String
    #   resp.data.transit_gateway_multicast_domain.owner_id #=> String
    #   resp.data.transit_gateway_multicast_domain.options #=> Types::TransitGatewayMulticastDomainOptions
    #   resp.data.transit_gateway_multicast_domain.options.igmpv2_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.static_sources_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.auto_accept_shared_associations #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_multicast_domain.creation_time #=> Time
    #   resp.data.transit_gateway_multicast_domain.tags #=> Array<Tag>
    #   resp.data.transit_gateway_multicast_domain.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_multicast_domain.tags[0].key #=> String
    #   resp.data.transit_gateway_multicast_domain.tags[0].value #=> String
    #
    def create_transit_gateway_multicast_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayMulticastDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayMulticastDomainInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayMulticastDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayMulticastDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayMulticastDomain,
        params_class: Params::CreateTransitGatewayMulticastDomainOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_multicast_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Requests a transit gateway peering attachment between the specified transit gateway
    #             (requester) and a peer transit gateway (accepter). The transit gateways must be in
    #             different Regions. The peer transit gateway can be in your account or a different
    #             Amazon Web Services account.</p>
    #         <p>After you create the peering attachment, the owner of the accepter transit gateway
    #             must accept the attachment request.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayPeeringAttachmentInput}.
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [String] :peer_transit_gateway_id
    #   <p>The ID of the peer transit gateway with which to create the peering attachment.</p>
    #
    # @option params [String] :peer_account_id
    #   <p>The ID of the Amazon Web Services account that owns the peer transit gateway.</p>
    #
    # @option params [String] :peer_region
    #   <p>The Region where the peer transit gateway is located.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the transit gateway peering attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayPeeringAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_peering_attachment(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     peer_transit_gateway_id: 'PeerTransitGatewayId', # required
    #     peer_account_id: 'PeerAccountId', # required
    #     peer_region: 'PeerRegion', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    #
    def create_transit_gateway_peering_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayPeeringAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayPeeringAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayPeeringAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayPeeringAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayPeeringAttachment,
        params_class: Params::CreateTransitGatewayPeeringAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_peering_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a reference (route) to a prefix list in a specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayPrefixListReferenceInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list that is used for destination matches.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment to which traffic is routed.</p>
    #
    # @option params [Boolean] :blackhole
    #   <p>Indicates whether to drop traffic that matches this route.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayPrefixListReferenceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_prefix_list_reference(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     prefix_list_id: 'PrefixListId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayPrefixListReferenceOutput
    #   resp.data.transit_gateway_prefix_list_reference #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_reference.blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_id #=> String
    #
    def create_transit_gateway_prefix_list_reference(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayPrefixListReferenceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayPrefixListReferenceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayPrefixListReference
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayPrefixListReference
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayPrefixListReference,
        params_class: Params::CreateTransitGatewayPrefixListReferenceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_prefix_list_reference
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a static route for the specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR range used for destination matches. Routing decisions are based on the
    #            most specific match.</p>
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :blackhole
    #   <p>Indicates whether to drop traffic that matches this route.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayRouteOutput
    #   resp.data.route #=> Types::TransitGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.prefix_list_id #=> String
    #   resp.data.route.transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.route.transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.route.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #
    def create_transit_gateway_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayRoute,
        params_class: Params::CreateTransitGatewayRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a route table for the specified transit gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayRouteTableInput}.
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the transit gateway route table.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_route_table(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayRouteTableOutput
    #   resp.data.transit_gateway_route_table #=> Types::TransitGatewayRouteTable
    #   resp.data.transit_gateway_route_table.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table.transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table.default_association_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.default_propagation_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.creation_time #=> Time
    #   resp.data.transit_gateway_route_table.tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table.tags[0].key #=> String
    #   resp.data.transit_gateway_route_table.tags[0].value #=> String
    #
    def create_transit_gateway_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayRouteTable,
        params_class: Params::CreateTransitGatewayRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Attaches the specified VPC to the specified transit gateway.</p>
    #          <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached,
    #          the new VPC CIDR range is not propagated to the default propagation route table.</p>
    #          <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateTransitGatewayVpcAttachmentInput}.
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>The IDs of one or more subnets. You can specify only one subnet per Availability Zone.
    #            You must specify at least one subnet, but we recommend that you specify two subnets for better availability.
    #            The transit gateway uses one IP address from each specified subnet.</p>
    #
    # @option params [CreateTransitGatewayVpcAttachmentRequestOptions] :options
    #   <p>The VPC attachment options.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the VPC attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateTransitGatewayVpcAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_transit_gateway_vpc_attachment(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     vpc_id: 'VpcId', # required
    #     subnet_ids: [
    #       'member'
    #     ], # required
    #     options: {
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       ipv6_support: 'enable', # accepts ["enable", "disable"]
    #       appliance_mode_support: 'enable' # accepts ["enable", "disable"]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    #
    def create_transit_gateway_vpc_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateTransitGatewayVpcAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateTransitGatewayVpcAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateTransitGatewayVpcAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateTransitGatewayVpcAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateTransitGatewayVpcAttachment,
        params_class: Params::CreateTransitGatewayVpcAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_transit_gateway_vpc_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone.</p>
    #          <p>You can create a new empty volume or restore a volume from an EBS snapshot.
    #       Any Amazon Web Services Marketplace product codes from the snapshot are propagated to the volume.</p>
    #          <p>You can create encrypted volumes. Encrypted volumes must be attached to instances that
    #       support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically
    #       encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2
    #         resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Create an Amazon EBS volume</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVolumeInput}.
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which to create the volume.</p>
    #
    # @option params [Boolean] :encrypted
    #   <p>Indicates whether the volume should be encrypted.
    #         The effect of setting the encryption state to <code>true</code> depends on
    #   the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled.
    #         For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">Encryption by default</a>
    #         in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #            <p>Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption.
    #         For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
    #           instance types</a>.</p>
    #
    # @option params [Integer] :iops
    #   <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents
    #         the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline
    #         performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
    #            <p>The following are the supported values for each volume type:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>gp3</code>: 3,000-16,000 IOPS</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>io1</code>: 100-64,000 IOPS</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>io2</code>: 100-64,000 IOPS</p>
    #               </li>
    #            </ul>
    #            <p>
    #               <code>io1</code> and <code>io2</code> volumes support up to 64,000 IOPS only on
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Instances built on the Nitro System</a>. Other instance families support performance
    #         up to 32,000 IOPS.</p>
    #            <p>This parameter is required for <code>io1</code> and <code>io2</code> volumes.
    #         The default for <code>gp3</code> volumes is 3,000 IOPS.
    #         This parameter is not supported for <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
    #
    # @option params [String] :kms_key_id
    #   <p>The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption.
    #         If this parameter is not specified, your KMS key for Amazon EBS is used. If <code>KmsKeyId</code> is
    #         specified, the encrypted state must be <code>true</code>.</p>
    #            <p>You can specify the KMS key using any of the following:</p>
    #            <ul>
    #               <li>
    #                  <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #               </li>
    #               <li>
    #                  <p>Key alias. For example, alias/ExampleAlias.</p>
    #               </li>
    #               <li>
    #                  <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #               </li>
    #               <li>
    #                  <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
    #               </li>
    #            </ul>
    #            <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,
    #         the action can appear to complete, but eventually fails.</p>
    #
    # @option params [String] :outpost_arn
    #   <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    #
    # @option params [Integer] :size
    #   <p>The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.
    #         If you specify a snapshot, the default is the snapshot size. You can specify a volume
    #         size that is equal to or larger than the snapshot size.</p>
    #            <p>The following are the supported volumes sizes for each volume type:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>gp2</code> and <code>gp3</code>: 1-16,384</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>io1</code> and <code>io2</code>: 4-16,384</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>st1</code> and <code>sc1</code>: 125-16,384</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>standard</code>: 1-1,024</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :snapshot_id
    #   <p>The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.</p>
    #
    # @option params [String] :volume_type
    #   <p>The volume type. This parameter can be one of the following values:</p>
    #            <ul>
    #               <li>
    #                  <p>General Purpose SSD: <code>gp2</code> | <code>gp3</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>Provisioned IOPS SSD: <code>io1</code> | <code>io2</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>Throughput Optimized HDD: <code>st1</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>Cold HDD: <code>sc1</code>
    #                  </p>
    #               </li>
    #               <li>
    #                  <p>Magnetic: <code>standard</code>
    #                  </p>
    #               </li>
    #            </ul>
    #            <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #            <p>Default: <code>gp2</code>
    #            </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the volume during creation.</p>
    #
    # @option params [Boolean] :multi_attach_enabled
    #   <p>Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the
    #       	volume to up to 16 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Instances built on the Nitro System</a> in the same Availability Zone. This parameter is
    #       	supported with <code>io1</code> and <code>io2</code> volumes only. For more information,
    #       	see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html">
    #       		Amazon EBS Multi-Attach</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [Integer] :throughput
    #   <p>The throughput to provision for a volume, with a maximum of 1,000 MiB/s.</p>
    #            <p>This parameter is valid only for <code>gp3</code> volumes.</p>
    #     	      <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency
    #         of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensure
    #           Idempotency</a>.</p>
    #
    # @return [Types::CreateVolumeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_volume(
    #     availability_zone: 'AvailabilityZone', # required
    #     encrypted: false,
    #     iops: 1,
    #     kms_key_id: 'KmsKeyId',
    #     outpost_arn: 'OutpostArn',
    #     size: 1,
    #     snapshot_id: 'SnapshotId',
    #     volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     multi_attach_enabled: false,
    #     throughput: 1,
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVolumeOutput
    #   resp.data.attachments #=> Array<VolumeAttachment>
    #   resp.data.attachments[0] #=> Types::VolumeAttachment
    #   resp.data.attachments[0].attach_time #=> Time
    #   resp.data.attachments[0].device #=> String
    #   resp.data.attachments[0].instance_id #=> String
    #   resp.data.attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.attachments[0].volume_id #=> String
    #   resp.data.attachments[0].delete_on_termination #=> Boolean
    #   resp.data.availability_zone #=> String
    #   resp.data.create_time #=> Time
    #   resp.data.encrypted #=> Boolean
    #   resp.data.kms_key_id #=> String
    #   resp.data.outpost_arn #=> String
    #   resp.data.size #=> Integer
    #   resp.data.snapshot_id #=> String
    #   resp.data.state #=> String, one of ["creating", "available", "in-use", "deleting", "deleted", "error"]
    #   resp.data.volume_id #=> String
    #   resp.data.iops #=> Integer
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.fast_restored #=> Boolean
    #   resp.data.multi_attach_enabled #=> Boolean
    #   resp.data.throughput #=> Integer
    #
    def create_volume(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVolumeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVolumeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVolume
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVolume
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVolume,
        params_class: Params::CreateVolumeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_volume
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create
    # 			uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4
    # 			addresses). For more information about how large to make your VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and
    # 				subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided
    #            IPv6 CIDR block from Amazon's pool of IPv6 addresses, or an IPv6 CIDR block from an IPv6 address
    #            pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p>
    # 	        <p>By default, each instance you launch in the VPC has the default DHCP options, which
    # 			include only a default DNS server that we provide (AmazonProvidedDNS). For more
    # 			information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>You can specify the instance tenancy value for the VPC when you create it. You can't change
    #           this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the
    #           <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpcInput}.
    #
    # @option params [String] :cidr_block
    #   <p>The IPv4 network range for the VPC, in CIDR notation. For example,
    #   		        <code>10.0.0.0/16</code>. We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    #
    # @option params [Boolean] :amazon_provided_ipv6_cidr_block
    #   <p>Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC.
    #               You cannot specify the range of IP addresses, or the size of the CIDR block.</p>
    #
    # @option params [String] :ipv6_pool
    #   <p>The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.</p>
    #
    # @option params [String] :ipv6_cidr_block
    #   <p>The IPv6 CIDR block from the IPv6 address pool. You must also specify <code>Ipv6Pool</code> in the request.</p>
    #           <p>To let Amazon choose the IPv6 CIDR block for you, omit this parameter.</p>
    #
    # @option params [String] :ipv4_ipam_pool_id
    #   <p>The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #
    #         </p>
    #
    # @option params [Integer] :ipv4_netmask_length
    #   <p>The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [String] :ipv6_ipam_pool_id
    #   <p>The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [Integer] :ipv6_netmask_length
    #   <p>The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_tenancy
    #   <p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances
    #         are launched with shared tenancy by default. You can launch instances with any tenancy into a
    #         shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy
    #         instances by default. You can only launch instances with a tenancy of <code>dedicated</code>
    #         or <code>host</code> into a dedicated tenancy VPC. </p>
    #            <p>
    #               <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p>
    #            <p>Default: <code>default</code>
    #            </p>
    #
    # @option params [String] :ipv6_cidr_block_network_border_group
    #   <p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.</p>
    #            <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the VPC.</p>
    #
    # @return [Types::CreateVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpc(
    #     cidr_block: 'CidrBlock',
    #     amazon_provided_ipv6_cidr_block: false,
    #     ipv6_pool: 'Ipv6Pool',
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     ipv4_ipam_pool_id: 'Ipv4IpamPoolId',
    #     ipv4_netmask_length: 1,
    #     ipv6_ipam_pool_id: 'Ipv6IpamPoolId',
    #     ipv6_netmask_length: 1,
    #     dry_run: false,
    #     instance_tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #     ipv6_cidr_block_network_border_group: 'Ipv6CidrBlockNetworkBorderGroup',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpcOutput
    #   resp.data.vpc #=> Types::Vpc
    #   resp.data.vpc.cidr_block #=> String
    #   resp.data.vpc.dhcp_options_id #=> String
    #   resp.data.vpc.state #=> String, one of ["pending", "available"]
    #   resp.data.vpc.vpc_id #=> String
    #   resp.data.vpc.owner_id #=> String
    #   resp.data.vpc.instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.vpc.ipv6_cidr_block_association_set #=> Array<VpcIpv6CidrBlockAssociation>
    #   resp.data.vpc.ipv6_cidr_block_association_set[0] #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].network_border_group #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_pool #=> String
    #   resp.data.vpc.cidr_block_association_set #=> Array<VpcCidrBlockAssociation>
    #   resp.data.vpc.cidr_block_association_set[0] #=> Types::VpcCidrBlockAssociation
    #   resp.data.vpc.cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.is_default #=> Boolean
    #   resp.data.vpc.tags #=> Array<Tag>
    #   resp.data.vpc.tags[0] #=> Types::Tag
    #   resp.data.vpc.tags[0].key #=> String
    #   resp.data.vpc.tags[0].value #=> String
    #
    def create_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpcInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpc,
        params_class: Params::CreateVpcOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a VPC endpoint for a specified service. An endpoint enables you to create a
    #             private connection between your VPC and the service. The service may be provided by Amazon Web Services,
    #             an Amazon Web Services Marketplace Partner, or another Amazon Web Services account. For more information,
    #             see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC Endpoints</a> in the
    #             <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #         <p>A <code>gateway</code> endpoint serves as a target for a route in your route table for
    #             traffic destined for the Amazon Web Service. You can specify an endpoint policy to attach
    #             to the endpoint, which will control access to the service from your VPC. You can also
    #             specify the VPC route tables that use the endpoint.</p>
    #         <p>An <code>interface</code> endpoint is a network interface in your subnet that
    #             serves as an endpoint for communicating with the specified service. You can specify the
    #             subnets in which to create an endpoint, and the security groups to associate with the
    #             endpoint network interface.</p>
    #         <p>A <code>GatewayLoadBalancer</code> endpoint is a network interface in your subnet that serves an endpoint for communicating with a Gateway Load Balancer that you've configured as a VPC endpoint service.</p>
    #         <p>Use <a>DescribeVpcEndpointServices</a> to get a list of supported
    #             services.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpcEndpointInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_endpoint_type
    #   <p>The type of endpoint.</p>
    #           <p>Default: Gateway</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC in which the endpoint will be used.</p>
    #
    # @option params [String] :service_name
    #   <p>The service name. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request, or get the name from the service
    #               provider.</p>
    #
    # @option params [String] :policy_document
    #   <p>(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the
    #               service. The policy must be in valid JSON format. If this parameter is not specified, we
    #               attach a default policy that allows full access to the service.</p>
    #
    # @option params [Array<String>] :route_table_ids
    #   <p>(Gateway endpoint) One or more route table IDs.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>(Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint
    #               network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.</p>
    #
    # @option params [Array<String>] :security_group_ids
    #   <p>(Interface endpoint) The ID of one or more security groups to associate with the
    #               endpoint network interface.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure
    #                   idempotency</a>.</p>
    #
    # @option params [Boolean] :private_dns_enabled
    #   <p>(Interface endpoint) Indicates whether to associate a private hosted zone with the
    #               specified VPC. The private hosted zone contains a record set for the default public DNS
    #               name for the service for the Region (for example,
    #                   <code>kinesis.us-east-1.amazonaws.com</code>), which resolves to the private IP
    #               addresses of the endpoint network interfaces in the VPC. This enables you to make
    #               requests to the default public DNS name for the service instead of the public DNS names
    #               that are automatically generated by the VPC endpoint service.</p>
    #           <p>To use a private hosted zone, you must set the following VPC attributes to
    #               <code>true</code>: <code>enableDnsHostnames</code> and
    #               <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the VPC
    #               attributes.</p>
    #           <p>Default: <code>true</code>
    #            </p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to associate with the endpoint.</p>
    #
    # @return [Types::CreateVpcEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpc_endpoint(
    #     dry_run: false,
    #     vpc_endpoint_type: 'Interface', # accepts ["Interface", "Gateway", "GatewayLoadBalancer"]
    #     vpc_id: 'VpcId', # required
    #     service_name: 'ServiceName', # required
    #     policy_document: 'PolicyDocument',
    #     route_table_ids: [
    #       'member'
    #     ],
    #     subnet_ids: [
    #       'member'
    #     ],
    #     security_group_ids: [
    #       'member'
    #     ],
    #     client_token: 'ClientToken',
    #     private_dns_enabled: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpcEndpointOutput
    #   resp.data.vpc_endpoint #=> Types::VpcEndpoint
    #   resp.data.vpc_endpoint.vpc_endpoint_id #=> String
    #   resp.data.vpc_endpoint.vpc_endpoint_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.vpc_endpoint.vpc_id #=> String
    #   resp.data.vpc_endpoint.service_name #=> String
    #   resp.data.vpc_endpoint.state #=> String, one of ["PendingAcceptance", "Pending", "Available", "Deleting", "Deleted", "Rejected", "Failed", "Expired"]
    #   resp.data.vpc_endpoint.policy_document #=> String
    #   resp.data.vpc_endpoint.route_table_ids #=> Array<String>
    #   resp.data.vpc_endpoint.route_table_ids[0] #=> String
    #   resp.data.vpc_endpoint.subnet_ids #=> Array<String>
    #   resp.data.vpc_endpoint.groups #=> Array<SecurityGroupIdentifier>
    #   resp.data.vpc_endpoint.groups[0] #=> Types::SecurityGroupIdentifier
    #   resp.data.vpc_endpoint.groups[0].group_id #=> String
    #   resp.data.vpc_endpoint.groups[0].group_name #=> String
    #   resp.data.vpc_endpoint.private_dns_enabled #=> Boolean
    #   resp.data.vpc_endpoint.requester_managed #=> Boolean
    #   resp.data.vpc_endpoint.network_interface_ids #=> Array<String>
    #   resp.data.vpc_endpoint.dns_entries #=> Array<DnsEntry>
    #   resp.data.vpc_endpoint.dns_entries[0] #=> Types::DnsEntry
    #   resp.data.vpc_endpoint.dns_entries[0].dns_name #=> String
    #   resp.data.vpc_endpoint.dns_entries[0].hosted_zone_id #=> String
    #   resp.data.vpc_endpoint.creation_timestamp #=> Time
    #   resp.data.vpc_endpoint.tags #=> Array<Tag>
    #   resp.data.vpc_endpoint.tags[0] #=> Types::Tag
    #   resp.data.vpc_endpoint.tags[0].key #=> String
    #   resp.data.vpc_endpoint.tags[0].value #=> String
    #   resp.data.vpc_endpoint.owner_id #=> String
    #   resp.data.vpc_endpoint.last_error #=> Types::LastError
    #   resp.data.vpc_endpoint.last_error.message #=> String
    #   resp.data.vpc_endpoint.last_error.code #=> String
    #   resp.data.client_token #=> String
    #
    def create_vpc_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpcEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpcEndpointInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpcEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpcEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpcEndpoint,
        params_class: Params::CreateVpcEndpointOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpc_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint
    #             service. A connection notification notifies you of specific endpoint events. You must
    #             create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in
    #             the <i>Amazon Simple Notification Service Developer Guide</i>.</p>
    #         <p>You can create a connection notification for interface endpoints only.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpcEndpointConnectionNotificationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the endpoint service.</p>
    #
    # @option params [String] :vpc_endpoint_id
    #   <p>The ID of the endpoint.</p>
    #
    # @option params [String] :connection_notification_arn
    #   <p>The ARN of the SNS topic for the notifications.</p>
    #
    # @option params [Array<String>] :connection_events
    #   <p>One or more endpoint events for which to receive notifications. Valid values are
    #                   <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and
    #                   <code>Reject</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure
    #                   idempotency</a>.</p>
    #
    # @return [Types::CreateVpcEndpointConnectionNotificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpc_endpoint_connection_notification(
    #     dry_run: false,
    #     service_id: 'ServiceId',
    #     vpc_endpoint_id: 'VpcEndpointId',
    #     connection_notification_arn: 'ConnectionNotificationArn', # required
    #     connection_events: [
    #       'member'
    #     ], # required
    #     client_token: 'ClientToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpcEndpointConnectionNotificationOutput
    #   resp.data.connection_notification #=> Types::ConnectionNotification
    #   resp.data.connection_notification.connection_notification_id #=> String
    #   resp.data.connection_notification.service_id #=> String
    #   resp.data.connection_notification.vpc_endpoint_id #=> String
    #   resp.data.connection_notification.connection_notification_type #=> String, one of ["Topic"]
    #   resp.data.connection_notification.connection_notification_arn #=> String
    #   resp.data.connection_notification.connection_events #=> Array<String>
    #   resp.data.connection_notification.connection_events[0] #=> String
    #   resp.data.connection_notification.connection_notification_state #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.client_token #=> String
    #
    def create_vpc_endpoint_connection_notification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpcEndpointConnectionNotificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpcEndpointConnectionNotificationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpcEndpointConnectionNotification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpcEndpointConnectionNotification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpcEndpointConnectionNotification,
        params_class: Params::CreateVpcEndpointConnectionNotificationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpc_endpoint_connection_notification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a VPC endpoint service configuration to which service consumers (Amazon Web Services accounts,
    #             IAM users, and IAM roles) can connect.</p>
    #         <p>To create an endpoint service configuration, you must first create one of the
    #             following for your service:</p>
    #         <ul>
    #             <li>
    #                 <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html">Network Load Balancer</a>. Service consumers connect to your service using an
    #                     interface endpoint.</p>
    #             </li>
    #             <li>
    #                 <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/introduction.html">Gateway Load Balancer</a>. Service consumers connect to your service using a
    #                     Gateway Load Balancer endpoint.</p>
    #             </li>
    #          </ul>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC Endpoint Services</a> in the
    #                 <i>Amazon Virtual Private Cloud User Guide</i>. </p>
    #         <p>If you set the private DNS name, you must prove that you own the private DNS domain
    #             name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service
    #                 Private DNS Name Verification</a> in the
    #             <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpcEndpointServiceConfigurationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :acceptance_required
    #   <p>Indicates whether requests from service consumers to create an endpoint to your service must
    #               be accepted. To accept a request, use <a>AcceptVpcEndpointConnections</a>.</p>
    #
    # @option params [String] :private_dns_name
    #   <p>(Interface endpoint configuration) The private DNS name to assign to the VPC endpoint service.</p>
    #
    # @option params [Array<String>] :network_load_balancer_arns
    #   <p>The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your
    #               service.</p>
    #
    # @option params [Array<String>] :gateway_load_balancer_arns
    #   <p>The Amazon Resource Names (ARNs) of one or more Gateway Load Balancers.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    #               For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to ensure
    #                   idempotency</a>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to associate with the service.</p>
    #
    # @return [Types::CreateVpcEndpointServiceConfigurationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpc_endpoint_service_configuration(
    #     dry_run: false,
    #     acceptance_required: false,
    #     private_dns_name: 'PrivateDnsName',
    #     network_load_balancer_arns: [
    #       'member'
    #     ],
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpcEndpointServiceConfigurationOutput
    #   resp.data.service_configuration #=> Types::ServiceConfiguration
    #   resp.data.service_configuration.service_type #=> Array<ServiceTypeDetail>
    #   resp.data.service_configuration.service_type[0] #=> Types::ServiceTypeDetail
    #   resp.data.service_configuration.service_type[0].service_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.service_configuration.service_id #=> String
    #   resp.data.service_configuration.service_name #=> String
    #   resp.data.service_configuration.service_state #=> String, one of ["Pending", "Available", "Deleting", "Deleted", "Failed"]
    #   resp.data.service_configuration.availability_zones #=> Array<String>
    #   resp.data.service_configuration.availability_zones[0] #=> String
    #   resp.data.service_configuration.acceptance_required #=> Boolean
    #   resp.data.service_configuration.manages_vpc_endpoints #=> Boolean
    #   resp.data.service_configuration.network_load_balancer_arns #=> Array<String>
    #   resp.data.service_configuration.gateway_load_balancer_arns #=> Array<String>
    #   resp.data.service_configuration.base_endpoint_dns_names #=> Array<String>
    #   resp.data.service_configuration.private_dns_name #=> String
    #   resp.data.service_configuration.private_dns_name_configuration #=> Types::PrivateDnsNameConfiguration
    #   resp.data.service_configuration.private_dns_name_configuration.state #=> String, one of ["pendingVerification", "verified", "failed"]
    #   resp.data.service_configuration.private_dns_name_configuration.type #=> String
    #   resp.data.service_configuration.private_dns_name_configuration.value #=> String
    #   resp.data.service_configuration.private_dns_name_configuration.name #=> String
    #   resp.data.service_configuration.payer_responsibility #=> String, one of ["ServiceOwner"]
    #   resp.data.service_configuration.tags #=> Array<Tag>
    #   resp.data.service_configuration.tags[0] #=> Types::Tag
    #   resp.data.service_configuration.tags[0].key #=> String
    #   resp.data.service_configuration.tags[0].value #=> String
    #   resp.data.client_token #=> String
    #
    def create_vpc_endpoint_service_configuration(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpcEndpointServiceConfigurationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpcEndpointServiceConfigurationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpcEndpointServiceConfiguration
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpcEndpointServiceConfiguration
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpcEndpointServiceConfiguration,
        params_class: Params::CreateVpcEndpointServiceConfigurationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpc_endpoint_service_configuration
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and
    # 		  an accepter VPC with which to create the connection. The accepter VPC can belong to
    # 		  another Amazon Web Services account and can be in a different Region to the requester VPC.
    #           The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p>
    #          <note>
    #             <p>Limitations and rules apply to a VPC peering connection. For more information, see
    #           the <a href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p>
    #          </note>
    #          <p>The owner of the accepter VPC must accept the peering request to activate the peering
    #             connection. The VPC peering connection request expires after 7 days, after which it
    #             cannot be accepted or rejected.</p>
    #          <p>If you create a VPC peering connection request between VPCs with overlapping CIDR
    #             blocks, the VPC peering connection has a status of <code>failed</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpcPeeringConnectionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :peer_owner_id
    #   <p>The Amazon Web Services account ID of the owner of the accepter VPC.</p>
    #            <p>Default: Your Amazon Web Services account ID</p>
    #
    # @option params [String] :peer_vpc_id
    #   <p>The ID of the VPC with which you are creating the VPC peering connection. You must
    #   			specify this parameter in the request.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the requester VPC. You must specify this parameter in the
    #   			request.</p>
    #
    # @option params [String] :peer_region
    #   <p>The Region code for the accepter VPC, if the accepter VPC is located in a Region
    #               other than the Region in which you make the request.</p>
    #   		       <p>Default: The Region in which you make the request.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to assign to the peering connection.</p>
    #
    # @return [Types::CreateVpcPeeringConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpc_peering_connection(
    #     dry_run: false,
    #     peer_owner_id: 'PeerOwnerId',
    #     peer_vpc_id: 'PeerVpcId',
    #     vpc_id: 'VpcId',
    #     peer_region: 'PeerRegion',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpcPeeringConnectionOutput
    #   resp.data.vpc_peering_connection #=> Types::VpcPeeringConnection
    #   resp.data.vpc_peering_connection.accepter_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set #=> Array<Ipv6CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0] #=> Types::Ipv6CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set #=> Array<CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0] #=> Types::CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0].cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.owner_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options #=> Types::VpcPeeringConnectionOptionsDescription
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.vpc_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.region #=> String
    #   resp.data.vpc_peering_connection.expiration_time #=> Time
    #   resp.data.vpc_peering_connection.requester_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.status #=> Types::VpcPeeringConnectionStateReason
    #   resp.data.vpc_peering_connection.status.code #=> String, one of ["initiating-request", "pending-acceptance", "active", "deleted", "rejected", "failed", "expired", "provisioning", "deleting"]
    #   resp.data.vpc_peering_connection.status.message #=> String
    #   resp.data.vpc_peering_connection.tags #=> Array<Tag>
    #   resp.data.vpc_peering_connection.tags[0] #=> Types::Tag
    #   resp.data.vpc_peering_connection.tags[0].key #=> String
    #   resp.data.vpc_peering_connection.tags[0].value #=> String
    #   resp.data.vpc_peering_connection.vpc_peering_connection_id #=> String
    #
    def create_vpc_peering_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpcPeeringConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpcPeeringConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpcPeeringConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpcPeeringConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpcPeeringConnection,
        params_class: Params::CreateVpcPeeringConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpc_peering_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a VPN connection between an existing virtual private gateway or transit
    #             gateway and a customer gateway. The supported connection type is
    #             <code>ipsec.1</code>.</p>
    #         <p>The response includes information that you need to give to your network administrator
    #             to configure your customer gateway.</p>
    #         <important>
    #             <p>We strongly recommend that you use HTTPS when calling this operation because the
    #                 response contains sensitive cryptographic information for configuring your customer
    #                 gateway device.</p>
    #         </important>
    #         <p>If you decide to shut down your VPN connection for any reason and later create a new
    #             VPN connection, you must reconfigure your customer gateway with the new information
    #             returned from this call.</p>
    #         <p>This is an idempotent operation. If you perform the operation more than once, Amazon
    #             EC2 doesn't return an error.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpnConnectionInput}.
    #
    # @option params [String] :customer_gateway_id
    #   <p>The ID of the customer gateway.</p>
    #
    # @option params [String] :type
    #   <p>The type of VPN connection (<code>ipsec.1</code>).</p>
    #
    # @option params [String] :vpn_gateway_id
    #   <p>The ID of the virtual private gateway. If you specify a virtual private gateway, you
    #               cannot specify a transit gateway.</p>
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private
    #               gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [VpnConnectionOptionsSpecification] :options
    #   <p>The options for the VPN connection.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the VPN connection.</p>
    #
    # @return [Types::CreateVpnConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpn_connection(
    #     customer_gateway_id: 'CustomerGatewayId', # required
    #     type: 'Type', # required
    #     vpn_gateway_id: 'VpnGatewayId',
    #     transit_gateway_id: 'TransitGatewayId',
    #     dry_run: false,
    #     options: {
    #       enable_acceleration: false,
    #       static_routes_only: false,
    #       tunnel_inside_ip_version: 'ipv4', # accepts ["ipv4", "ipv6"]
    #       tunnel_options: [
    #         {
    #           tunnel_inside_cidr: 'TunnelInsideCidr',
    #           tunnel_inside_ipv6_cidr: 'TunnelInsideIpv6Cidr',
    #           pre_shared_key: 'PreSharedKey',
    #           phase1_lifetime_seconds: 1,
    #           phase2_lifetime_seconds: 1,
    #           rekey_margin_time_seconds: 1,
    #           rekey_fuzz_percentage: 1,
    #           replay_window_size: 1,
    #           dpd_timeout_seconds: 1,
    #           dpd_timeout_action: 'DPDTimeoutAction',
    #           phase1_encryption_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase2_encryption_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase1_integrity_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase2_integrity_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase1_dh_group_numbers: [
    #             {
    #               value: 1
    #             }
    #           ],
    #           phase2_dh_group_numbers: [
    #             {
    #               value: 1
    #             }
    #           ],
    #           ike_versions: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           startup_action: 'StartupAction'
    #         }
    #       ],
    #       local_ipv4_network_cidr: 'LocalIpv4NetworkCidr',
    #       remote_ipv4_network_cidr: 'RemoteIpv4NetworkCidr',
    #       local_ipv6_network_cidr: 'LocalIpv6NetworkCidr',
    #       remote_ipv6_network_cidr: 'RemoteIpv6NetworkCidr'
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpnConnectionOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    #
    def create_vpn_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpnConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpnConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpnConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpnConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpnConnection,
        params_class: Params::CreateVpnConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpn_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a static route associated with a VPN connection between an existing virtual
    #             private gateway and a VPN customer gateway. The static route allows traffic to be routed
    #             from the virtual private gateway to the VPN customer gateway.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpnConnectionRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR block associated with the local subnet of the customer network.</p>
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the VPN connection.</p>
    #
    # @return [Types::CreateVpnConnectionRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpn_connection_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     vpn_connection_id: 'VpnConnectionId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpnConnectionRouteOutput
    #
    def create_vpn_connection_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpnConnectionRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpnConnectionRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpnConnectionRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpnConnectionRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpnConnectionRoute,
        params_class: Params::CreateVpnConnectionRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpn_connection_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the
    #             VPC side of your VPN connection. You can create a virtual private gateway before
    #             creating the VPC itself.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::CreateVpnGatewayInput}.
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone for the virtual private gateway.</p>
    #
    # @option params [String] :type
    #   <p>The type of VPN connection this virtual private gateway supports.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the virtual private gateway.</p>
    #
    # @option params [Integer] :amazon_side_asn
    #   <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If
    #               you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a
    #               32-bit ASN, it must be in the 4200000000 to 4294967294 range.</p>
    #           <p>Default: 64512</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::CreateVpnGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_vpn_gateway(
    #     availability_zone: 'AvailabilityZone',
    #     type: 'ipsec.1', # required - accepts ["ipsec.1"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     amazon_side_asn: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateVpnGatewayOutput
    #   resp.data.vpn_gateway #=> Types::VpnGateway
    #   resp.data.vpn_gateway.availability_zone #=> String
    #   resp.data.vpn_gateway.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_gateway.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_gateway.vpc_attachments #=> Array<VpcAttachment>
    #   resp.data.vpn_gateway.vpc_attachments[0] #=> Types::VpcAttachment
    #   resp.data.vpn_gateway.vpc_attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.vpn_gateway.vpc_attachments[0].vpc_id #=> String
    #   resp.data.vpn_gateway.vpn_gateway_id #=> String
    #   resp.data.vpn_gateway.amazon_side_asn #=> Integer
    #   resp.data.vpn_gateway.tags #=> Array<Tag>
    #   resp.data.vpn_gateway.tags[0] #=> Types::Tag
    #   resp.data.vpn_gateway.tags[0].key #=> String
    #   resp.data.vpn_gateway.tags[0].value #=> String
    #
    def create_vpn_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateVpnGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateVpnGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateVpnGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::CreateVpnGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::CreateVpnGateway,
        params_class: Params::CreateVpnGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :create_vpn_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a carrier gateway.</p>
    #         <important>
    #             <p>If you do not delete the route that contains the carrier gateway as the
    #                 Target, the route is a blackhole route. For information about how to delete a route, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteRoute.html">DeleteRoute</a>.</p>
    #         </important>
    #
    # @param [Hash] params
    #   See {Types::DeleteCarrierGatewayInput}.
    #
    # @option params [String] :carrier_gateway_id
    #   <p>The ID of the carrier gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteCarrierGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_carrier_gateway(
    #     carrier_gateway_id: 'CarrierGatewayId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteCarrierGatewayOutput
    #   resp.data.carrier_gateway #=> Types::CarrierGateway
    #   resp.data.carrier_gateway.carrier_gateway_id #=> String
    #   resp.data.carrier_gateway.vpc_id #=> String
    #   resp.data.carrier_gateway.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.carrier_gateway.owner_id #=> String
    #   resp.data.carrier_gateway.tags #=> Array<Tag>
    #   resp.data.carrier_gateway.tags[0] #=> Types::Tag
    #   resp.data.carrier_gateway.tags[0].key #=> String
    #   resp.data.carrier_gateway.tags[0].value #=> String
    #
    def delete_carrier_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteCarrierGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteCarrierGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteCarrierGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteCarrierGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteCarrierGateway,
        params_class: Params::DeleteCarrierGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_carrier_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Client VPN endpoint. You must disassociate all target networks before you
    # 			can delete a Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteClientVpnEndpointInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN to be deleted.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteClientVpnEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_client_vpn_endpoint(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteClientVpnEndpointOutput
    #   resp.data.status #=> Types::ClientVpnEndpointStatus
    #   resp.data.status.code #=> String, one of ["pending-associate", "available", "deleting", "deleted"]
    #   resp.data.status.message #=> String
    #
    def delete_client_vpn_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteClientVpnEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteClientVpnEndpointInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteClientVpnEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteClientVpnEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteClientVpnEndpoint,
        params_class: Params::DeleteClientVpnEndpointOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_client_vpn_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using
    # 			the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were
    # 			automatically added when associating a subnet. To remove routes that have been automatically added,
    # 			disassociate the target subnet from the Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteClientVpnRouteInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint from which the route is to be deleted.</p>
    #
    # @option params [String] :target_vpc_subnet_id
    #   <p>The ID of the target subnet used by the route.</p>
    #
    # @option params [String] :destination_cidr_block
    #   <p>The IPv4 address range, in CIDR notation, of the route to be deleted.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteClientVpnRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_client_vpn_route(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     target_vpc_subnet_id: 'TargetVpcSubnetId',
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteClientVpnRouteOutput
    #   resp.data.status #=> Types::ClientVpnRouteStatus
    #   resp.data.status.code #=> String, one of ["creating", "active", "failed", "deleting"]
    #   resp.data.status.message #=> String
    #
    def delete_client_vpn_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteClientVpnRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteClientVpnRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteClientVpnRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteClientVpnRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteClientVpnRoute,
        params_class: Params::DeleteClientVpnRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_client_vpn_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified customer gateway. You must delete the VPN connection before you
    #             can delete the customer gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteCustomerGatewayInput}.
    #
    # @option params [String] :customer_gateway_id
    #   <p>The ID of the customer gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteCustomerGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_customer_gateway(
    #     customer_gateway_id: 'CustomerGatewayId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteCustomerGatewayOutput
    #
    def delete_customer_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteCustomerGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteCustomerGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteCustomerGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteCustomerGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteCustomerGateway,
        params_class: Params::DeleteCustomerGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_customer_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteDhcpOptionsInput}.
    #
    # @option params [String] :dhcp_options_id
    #   <p>The ID of the DHCP options set.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteDhcpOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_dhcp_options(
    #     dhcp_options_id: 'DhcpOptionsId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteDhcpOptionsOutput
    #
    def delete_dhcp_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteDhcpOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteDhcpOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteDhcpOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteDhcpOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteDhcpOptions,
        params_class: Params::DeleteDhcpOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_dhcp_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes an egress-only internet gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteEgressOnlyInternetGatewayInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :egress_only_internet_gateway_id
    #   <p>The ID of the egress-only internet gateway.</p>
    #
    # @return [Types::DeleteEgressOnlyInternetGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_egress_only_internet_gateway(
    #     dry_run: false,
    #     egress_only_internet_gateway_id: 'EgressOnlyInternetGatewayId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteEgressOnlyInternetGatewayOutput
    #   resp.data.return_code #=> Boolean
    #
    def delete_egress_only_internet_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteEgressOnlyInternetGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteEgressOnlyInternetGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteEgressOnlyInternetGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteEgressOnlyInternetGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteEgressOnlyInternetGateway,
        params_class: Params::DeleteEgressOnlyInternetGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_egress_only_internet_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified EC2 Fleet.</p>
    #          <p>After you delete an EC2 Fleet, it launches no new instances.</p>
    #          <p>You must specify whether a deleted EC2 Fleet should also terminate its instances. If you
    #          choose to terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code>
    #          state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances
    #          continue to run until they are interrupted or you terminate them manually.</p>
    #          <p>For <code>instant</code> fleets, EC2 Fleet must terminate the instances when the fleet is
    #          deleted. A deleted <code>instant</code> fleet with running instances is not
    #          supported.</p>
    #          <p class="title">
    #             <b>Restrictions</b>
    #          </p>
    #          <ul>
    #             <li>
    #                <p>You can delete up to 25 <code>instant</code> fleets in a single request. If you exceed this
    #                number, no <code>instant</code> fleets are deleted and an error is returned. There is no
    #                restriction on the number of fleets of type <code>maintain</code> or <code>request</code> that can be deleted
    #                in a single request.</p>
    #             </li>
    #             <li>
    #                <p>Up to 1000 instances can be terminated in a single request to delete
    #                <code>instant</code> fleets.</p>
    #             </li>
    #          </ul>
    #
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#delete-fleet">Deleting an EC2
    #          Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteFleetsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :fleet_ids
    #   <p>The IDs of the EC2 Fleets.</p>
    #
    # @option params [Boolean] :terminate_instances
    #   <p>Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to
    #            terminate the instances.</p>
    #            <p>To let the instances continue to run after the EC2 Fleet is deleted, specify
    #               <code>NoTerminateInstances</code>. Supported only for fleets of type
    #               <code>maintain</code> and <code>request</code>.</p>
    #            <p>For <code>instant</code> fleets, you cannot specify <code>NoTerminateInstances</code>. A
    #            deleted <code>instant</code> fleet with running instances is not supported.</p>
    #
    # @return [Types::DeleteFleetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_fleets(
    #     dry_run: false,
    #     fleet_ids: [
    #       'member'
    #     ], # required
    #     terminate_instances: false # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteFleetsOutput
    #   resp.data.successful_fleet_deletions #=> Array<DeleteFleetSuccessItem>
    #   resp.data.successful_fleet_deletions[0] #=> Types::DeleteFleetSuccessItem
    #   resp.data.successful_fleet_deletions[0].current_fleet_state #=> String, one of ["submitted", "active", "deleted", "failed", "deleted_running", "deleted_terminating", "modifying"]
    #   resp.data.successful_fleet_deletions[0].previous_fleet_state #=> String, one of ["submitted", "active", "deleted", "failed", "deleted_running", "deleted_terminating", "modifying"]
    #   resp.data.successful_fleet_deletions[0].fleet_id #=> String
    #   resp.data.unsuccessful_fleet_deletions #=> Array<DeleteFleetErrorItem>
    #   resp.data.unsuccessful_fleet_deletions[0] #=> Types::DeleteFleetErrorItem
    #   resp.data.unsuccessful_fleet_deletions[0].error #=> Types::DeleteFleetError
    #   resp.data.unsuccessful_fleet_deletions[0].error.code #=> String, one of ["fleetIdDoesNotExist", "fleetIdMalformed", "fleetNotInDeletableState", "unexpectedError"]
    #   resp.data.unsuccessful_fleet_deletions[0].error.message #=> String
    #   resp.data.unsuccessful_fleet_deletions[0].fleet_id #=> String
    #
    def delete_fleets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteFleetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteFleetsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteFleets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteFleets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteFleets,
        params_class: Params::DeleteFleetsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_fleets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes one or more flow logs.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteFlowLogsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :flow_log_ids
    #   <p>One or more flow log IDs.</p>
    #           <p>Constraint: Maximum of 1000 flow log IDs.</p>
    #
    # @return [Types::DeleteFlowLogsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_flow_logs(
    #     dry_run: false,
    #     flow_log_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteFlowLogsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def delete_flow_logs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteFlowLogsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteFlowLogsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteFlowLogs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteFlowLogs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteFlowLogs,
        params_class: Params::DeleteFlowLogsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_flow_logs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Amazon FPGA Image (AFI).</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteFpgaImageInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :fpga_image_id
    #   <p>The ID of the AFI.</p>
    #
    # @return [Types::DeleteFpgaImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_fpga_image(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteFpgaImageOutput
    #   resp.data.return #=> Boolean
    #
    def delete_fpga_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteFpgaImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteFpgaImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteFpgaImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteFpgaImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteFpgaImage,
        params_class: Params::DeleteFpgaImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_fpga_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified event window.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteInstanceEventWindowInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :force_delete
    #   <p>Specify <code>true</code> to force delete the event window. Use the force delete parameter
    #            if the event window is currently associated with targets.</p>
    #
    # @option params [String] :instance_event_window_id
    #   <p>The ID of the event window.</p>
    #
    # @return [Types::DeleteInstanceEventWindowOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_instance_event_window(
    #     dry_run: false,
    #     force_delete: false,
    #     instance_event_window_id: 'InstanceEventWindowId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteInstanceEventWindowOutput
    #   resp.data.instance_event_window_state #=> Types::InstanceEventWindowStateChange
    #   resp.data.instance_event_window_state.instance_event_window_id #=> String
    #   resp.data.instance_event_window_state.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #
    def delete_instance_event_window(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteInstanceEventWindowInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteInstanceEventWindowInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteInstanceEventWindow
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteInstanceEventWindow
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteInstanceEventWindow,
        params_class: Params::DeleteInstanceEventWindowOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_instance_event_window
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified internet gateway. You must detach the internet gateway from the
    # 			VPC before you can delete it.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteInternetGatewayInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :internet_gateway_id
    #   <p>The ID of the internet gateway.</p>
    #
    # @return [Types::DeleteInternetGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_internet_gateway(
    #     dry_run: false,
    #     internet_gateway_id: 'InternetGatewayId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteInternetGatewayOutput
    #
    def delete_internet_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteInternetGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteInternetGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteInternetGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteInternetGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteInternetGateway,
        params_class: Params::DeleteInternetGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_internet_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Delete an IPAM. Deleting an IPAM removes all monitored data associated with the IPAM including the historical data for CIDRs.</p>
    #          <note>
    #             <p>You cannot delete an IPAM if there are CIDRs provisioned to pools or if there are allocations in the pools within the IPAM. To deprovision pool
    #                CIDRs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeprovisionIpamPoolCidr.html">DeprovisionIpamPoolCidr</a>. To release allocations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>.
    #             </p>
    #          </note>
    #          <p>For more information, see <a href="/vpc/latest/ipam/delete-ipam.html">Delete an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteIpamInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_id
    #   <p>The ID of the IPAM to delete.</p>
    #
    # @return [Types::DeleteIpamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_ipam(
    #     dry_run: false,
    #     ipam_id: 'IpamId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteIpamOutput
    #   resp.data.ipam #=> Types::Ipam
    #   resp.data.ipam.owner_id #=> String
    #   resp.data.ipam.ipam_id #=> String
    #   resp.data.ipam.ipam_arn #=> String
    #   resp.data.ipam.ipam_region #=> String
    #   resp.data.ipam.public_default_scope_id #=> String
    #   resp.data.ipam.private_default_scope_id #=> String
    #   resp.data.ipam.scope_count #=> Integer
    #   resp.data.ipam.description #=> String
    #   resp.data.ipam.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam.operating_regions[0].region_name #=> String
    #   resp.data.ipam.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam.tags #=> Array<Tag>
    #   resp.data.ipam.tags[0] #=> Types::Tag
    #   resp.data.ipam.tags[0].key #=> String
    #   resp.data.ipam.tags[0].value #=> String
    #
    def delete_ipam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteIpamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteIpamInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteIpam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteIpam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteIpam,
        params_class: Params::DeleteIpamOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_ipam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Delete an IPAM pool.</p>
    #          <note>
    #             <p>You cannot delete an IPAM pool if there are allocations in it or CIDRs provisioned to it. To release
    #          allocations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>. To deprovision pool
    #          CIDRs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeprovisionIpamPoolCidr.html">DeprovisionIpamPoolCidr</a>.</p>
    #          </note>
    #          <p>For more information, see <a href="/vpc/latest/ipam/delete-pool-ipam.html">Delete a pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteIpamPoolInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the pool to delete.</p>
    #
    # @return [Types::DeleteIpamPoolOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_ipam_pool(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteIpamPoolOutput
    #   resp.data.ipam_pool #=> Types::IpamPool
    #   resp.data.ipam_pool.owner_id #=> String
    #   resp.data.ipam_pool.ipam_pool_id #=> String
    #   resp.data.ipam_pool.source_ipam_pool_id #=> String
    #   resp.data.ipam_pool.ipam_pool_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pool.ipam_arn #=> String
    #   resp.data.ipam_pool.ipam_region #=> String
    #   resp.data.ipam_pool.locale #=> String
    #   resp.data.ipam_pool.pool_depth #=> Integer
    #   resp.data.ipam_pool.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_pool.state_message #=> String
    #   resp.data.ipam_pool.description #=> String
    #   resp.data.ipam_pool.auto_import #=> Boolean
    #   resp.data.ipam_pool.publicly_advertisable #=> Boolean
    #   resp.data.ipam_pool.address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pool.allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pool.allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pool.allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pool.allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pool.tags #=> Array<Tag>
    #   resp.data.ipam_pool.tags[0] #=> Types::Tag
    #   resp.data.ipam_pool.tags[0].key #=> String
    #   resp.data.ipam_pool.tags[0].value #=> String
    #   resp.data.ipam_pool.aws_service #=> String, one of ["ec2"]
    #
    def delete_ipam_pool(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteIpamPoolInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteIpamPoolInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteIpamPool
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteIpamPool
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteIpamPool,
        params_class: Params::DeleteIpamPoolOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_ipam_pool
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Delete the scope for an IPAM. You cannot delete the default scopes.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/delete-scope-ipam.html">Delete a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::DeleteIpamScopeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_scope_id
    #   <p>The ID of the scope to delete.</p>
    #
    # @return [Types::DeleteIpamScopeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_ipam_scope(
    #     dry_run: false,
    #     ipam_scope_id: 'IpamScopeId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteIpamScopeOutput
    #   resp.data.ipam_scope #=> Types::IpamScope
    #   resp.data.ipam_scope.owner_id #=> String
    #   resp.data.ipam_scope.ipam_scope_id #=> String
    #   resp.data.ipam_scope.ipam_scope_arn #=> String
    #   resp.data.ipam_scope.ipam_arn #=> String
    #   resp.data.ipam_scope.ipam_region #=> String
    #   resp.data.ipam_scope.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scope.is_default #=> Boolean
    #   resp.data.ipam_scope.description #=> String
    #   resp.data.ipam_scope.pool_count #=> Integer
    #   resp.data.ipam_scope.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_scope.tags #=> Array<Tag>
    #   resp.data.ipam_scope.tags[0] #=> Types::Tag
    #   resp.data.ipam_scope.tags[0].key #=> String
    #   resp.data.ipam_scope.tags[0].value #=> String
    #
    def delete_ipam_scope(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteIpamScopeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteIpamScopeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteIpamScope
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteIpamScope
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteIpamScope,
        params_class: Params::DeleteIpamScopeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_ipam_scope
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteKeyPairInput}.
    #
    # @option params [String] :key_name
    #   <p>The name of the key pair.</p>
    #
    # @option params [String] :key_pair_id
    #   <p>The ID of the key pair.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_key_pair(
    #     key_name: 'KeyName',
    #     key_pair_id: 'KeyPairId',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteKeyPairOutput
    #
    def delete_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteKeyPairInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteKeyPair,
        params_class: Params::DeleteKeyPairOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a launch template. Deleting a launch template deletes all of its versions.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteLaunchTemplateInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :launch_template_id
    #   <p>The ID of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [String] :launch_template_name
    #   <p>The name of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @return [Types::DeleteLaunchTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_launch_template(
    #     dry_run: false,
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteLaunchTemplateOutput
    #   resp.data.launch_template #=> Types::LaunchTemplate
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.create_time #=> Time
    #   resp.data.launch_template.created_by #=> String
    #   resp.data.launch_template.default_version_number #=> Integer
    #   resp.data.launch_template.latest_version_number #=> Integer
    #   resp.data.launch_template.tags #=> Array<Tag>
    #   resp.data.launch_template.tags[0] #=> Types::Tag
    #   resp.data.launch_template.tags[0].key #=> String
    #   resp.data.launch_template.tags[0].value #=> String
    #
    def delete_launch_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteLaunchTemplateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteLaunchTemplateInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteLaunchTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteLaunchTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteLaunchTemplate,
        params_class: Params::DeleteLaunchTemplateOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_launch_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes one or more versions of a launch template. You cannot delete the default
    #             version of a launch template; you must first assign a different version as the default.
    #             If the default version is the only version for the launch template, you must delete the
    #             entire launch template using <a>DeleteLaunchTemplate</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteLaunchTemplateVersionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :launch_template_id
    #   <p>The ID of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [String] :launch_template_name
    #   <p>The name of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [Array<String>] :versions
    #   <p>The version numbers of one or more launch template versions to delete.</p>
    #
    # @return [Types::DeleteLaunchTemplateVersionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_launch_template_versions(
    #     dry_run: false,
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     versions: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteLaunchTemplateVersionsOutput
    #   resp.data.successfully_deleted_launch_template_versions #=> Array<DeleteLaunchTemplateVersionsResponseSuccessItem>
    #   resp.data.successfully_deleted_launch_template_versions[0] #=> Types::DeleteLaunchTemplateVersionsResponseSuccessItem
    #   resp.data.successfully_deleted_launch_template_versions[0].launch_template_id #=> String
    #   resp.data.successfully_deleted_launch_template_versions[0].launch_template_name #=> String
    #   resp.data.successfully_deleted_launch_template_versions[0].version_number #=> Integer
    #   resp.data.unsuccessfully_deleted_launch_template_versions #=> Array<DeleteLaunchTemplateVersionsResponseErrorItem>
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0] #=> Types::DeleteLaunchTemplateVersionsResponseErrorItem
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].launch_template_id #=> String
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].launch_template_name #=> String
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].version_number #=> Integer
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].response_error #=> Types::ResponseError
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].response_error.code #=> String, one of ["launchTemplateIdDoesNotExist", "launchTemplateIdMalformed", "launchTemplateNameDoesNotExist", "launchTemplateNameMalformed", "launchTemplateVersionDoesNotExist", "unexpectedError"]
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].response_error.message #=> String
    #
    def delete_launch_template_versions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteLaunchTemplateVersionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteLaunchTemplateVersionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteLaunchTemplateVersions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteLaunchTemplateVersions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteLaunchTemplateVersions,
        params_class: Params::DeleteLaunchTemplateVersionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_launch_template_versions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified route from the specified local gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteLocalGatewayRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR range for the route. This must match the CIDR for the route exactly.</p>
    #
    # @option params [String] :local_gateway_route_table_id
    #   <p>The ID of the local gateway route table.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteLocalGatewayRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_local_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteLocalGatewayRouteOutput
    #   resp.data.route #=> Types::LocalGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.route.local_gateway_route_table_id #=> String
    #   resp.data.route.local_gateway_route_table_arn #=> String
    #   resp.data.route.owner_id #=> String
    #
    def delete_local_gateway_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteLocalGatewayRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteLocalGatewayRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteLocalGatewayRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteLocalGatewayRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteLocalGatewayRoute,
        params_class: Params::DeleteLocalGatewayRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_local_gateway_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified association between a VPC and local gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteLocalGatewayRouteTableVpcAssociationInput}.
    #
    # @option params [String] :local_gateway_route_table_vpc_association_id
    #   <p>The ID of the association.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteLocalGatewayRouteTableVpcAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_local_gateway_route_table_vpc_association(
    #     local_gateway_route_table_vpc_association_id: 'LocalGatewayRouteTableVpcAssociationId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteLocalGatewayRouteTableVpcAssociationOutput
    #   resp.data.local_gateway_route_table_vpc_association #=> Types::LocalGatewayRouteTableVpcAssociation
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_vpc_association_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.vpc_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.owner_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.state #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_vpc_association.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].key #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].value #=> String
    #
    def delete_local_gateway_route_table_vpc_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteLocalGatewayRouteTableVpcAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteLocalGatewayRouteTableVpcAssociationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteLocalGatewayRouteTableVpcAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteLocalGatewayRouteTableVpcAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteLocalGatewayRouteTableVpcAssociation,
        params_class: Params::DeleteLocalGatewayRouteTableVpcAssociationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_local_gateway_route_table_vpc_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified managed prefix list. You must first remove all references to the prefix list in your resources.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteManagedPrefixListInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @return [Types::DeleteManagedPrefixListOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_managed_prefix_list(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteManagedPrefixListOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    #
    def delete_managed_prefix_list(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteManagedPrefixListInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteManagedPrefixListInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteManagedPrefixList
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteManagedPrefixList
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteManagedPrefixList,
        params_class: Params::DeleteManagedPrefixListOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_managed_prefix_list
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates its Elastic IP address,
    #           but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway
    #           routes in your route tables.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNatGatewayInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :nat_gateway_id
    #   <p>The ID of the NAT gateway.</p>
    #
    # @return [Types::DeleteNatGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_nat_gateway(
    #     dry_run: false,
    #     nat_gateway_id: 'NatGatewayId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNatGatewayOutput
    #   resp.data.nat_gateway_id #=> String
    #
    def delete_nat_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNatGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNatGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNatGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNatGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNatGateway,
        params_class: Params::DeleteNatGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_nat_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkAclInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_acl_id
    #   <p>The ID of the network ACL.</p>
    #
    # @return [Types::DeleteNetworkAclOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_acl(
    #     dry_run: false,
    #     network_acl_id: 'NetworkAclId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkAclOutput
    #
    def delete_network_acl(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkAclInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkAclInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkAcl
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkAcl
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkAcl,
        params_class: Params::DeleteNetworkAclOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_acl
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkAclEntryInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :egress
    #   <p>Indicates whether the rule is an egress rule.</p>
    #
    # @option params [String] :network_acl_id
    #   <p>The ID of the network ACL.</p>
    #
    # @option params [Integer] :rule_number
    #   <p>The rule number of the entry to delete.</p>
    #
    # @return [Types::DeleteNetworkAclEntryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_acl_entry(
    #     dry_run: false,
    #     egress: false, # required
    #     network_acl_id: 'NetworkAclId', # required
    #     rule_number: 1 # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkAclEntryOutput
    #
    def delete_network_acl_entry(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkAclEntryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkAclEntryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkAclEntry
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkAclEntry
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkAclEntry,
        params_class: Params::DeleteNetworkAclEntryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_acl_entry
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Network Access Scope.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkInsightsAccessScopeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_insights_access_scope_id
    #   <p>The ID of the Network Access Scope.</p>
    #
    # @return [Types::DeleteNetworkInsightsAccessScopeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_insights_access_scope(
    #     dry_run: false,
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkInsightsAccessScopeOutput
    #   resp.data.network_insights_access_scope_id #=> String
    #
    def delete_network_insights_access_scope(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkInsightsAccessScopeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkInsightsAccessScopeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkInsightsAccessScope
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkInsightsAccessScope
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkInsightsAccessScope,
        params_class: Params::DeleteNetworkInsightsAccessScopeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_insights_access_scope
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Network Access Scope analysis.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkInsightsAccessScopeAnalysisInput}.
    #
    # @option params [String] :network_insights_access_scope_analysis_id
    #   <p>The ID of the Network Access Scope analysis.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteNetworkInsightsAccessScopeAnalysisOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_insights_access_scope_analysis(
    #     network_insights_access_scope_analysis_id: 'NetworkInsightsAccessScopeAnalysisId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkInsightsAccessScopeAnalysisOutput
    #   resp.data.network_insights_access_scope_analysis_id #=> String
    #
    def delete_network_insights_access_scope_analysis(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkInsightsAccessScopeAnalysisInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkInsightsAccessScopeAnalysisInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkInsightsAccessScopeAnalysis
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkInsightsAccessScopeAnalysis
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkInsightsAccessScopeAnalysis,
        params_class: Params::DeleteNetworkInsightsAccessScopeAnalysisOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_insights_access_scope_analysis
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified network insights analysis.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkInsightsAnalysisInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_insights_analysis_id
    #   <p>The ID of the network insights analysis.</p>
    #
    # @return [Types::DeleteNetworkInsightsAnalysisOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_insights_analysis(
    #     dry_run: false,
    #     network_insights_analysis_id: 'NetworkInsightsAnalysisId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkInsightsAnalysisOutput
    #   resp.data.network_insights_analysis_id #=> String
    #
    def delete_network_insights_analysis(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkInsightsAnalysisInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkInsightsAnalysisInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkInsightsAnalysis
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkInsightsAnalysis
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkInsightsAnalysis,
        params_class: Params::DeleteNetworkInsightsAnalysisOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_insights_analysis
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified path.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkInsightsPathInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_insights_path_id
    #   <p>The ID of the path.</p>
    #
    # @return [Types::DeleteNetworkInsightsPathOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_insights_path(
    #     dry_run: false,
    #     network_insights_path_id: 'NetworkInsightsPathId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkInsightsPathOutput
    #   resp.data.network_insights_path_id #=> String
    #
    def delete_network_insights_path(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkInsightsPathInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkInsightsPathInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkInsightsPath
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkInsightsPath
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkInsightsPath,
        params_class: Params::DeleteNetworkInsightsPathOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_insights_path
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkInterfaceInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @return [Types::DeleteNetworkInterfaceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_interface(
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkInterfaceOutput
    #
    def delete_network_interface(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkInterfaceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkInterfaceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkInterface
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkInterface
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkInterface,
        params_class: Params::DeleteNetworkInterfaceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_interface
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a permission for a network interface. By default, you cannot delete the
    # 			permission if the account for which you're removing the permission has attached the
    # 			network interface to an instance. However, you can force delete the permission,
    # 			regardless of any attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteNetworkInterfacePermissionInput}.
    #
    # @option params [String] :network_interface_permission_id
    #   <p>The ID of the network interface permission.</p>
    #
    # @option params [Boolean] :force
    #   <p>Specify <code>true</code> to remove the permission even if the network interface is
    #   			attached to an instance.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #   			and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #   			Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteNetworkInterfacePermissionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_network_interface_permission(
    #     network_interface_permission_id: 'NetworkInterfacePermissionId', # required
    #     force: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteNetworkInterfacePermissionOutput
    #   resp.data.return #=> Boolean
    #
    def delete_network_interface_permission(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteNetworkInterfacePermissionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteNetworkInterfacePermissionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteNetworkInterfacePermission
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteNetworkInterfacePermission
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteNetworkInterfacePermission,
        params_class: Params::DeleteNetworkInterfacePermissionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_network_interface_permission
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified placement group. You must terminate all instances in the
    #             placement group before you can delete the placement group. For more information, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeletePlacementGroupInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :group_name
    #   <p>The name of the placement group.</p>
    #
    # @return [Types::DeletePlacementGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_placement_group(
    #     dry_run: false,
    #     group_name: 'GroupName' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeletePlacementGroupOutput
    #
    def delete_placement_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeletePlacementGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeletePlacementGroupInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeletePlacementGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeletePlacementGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeletePlacementGroup,
        params_class: Params::DeletePlacementGroupOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_placement_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only.</p>
    #
    # @param [Hash] params
    #   See {Types::DeletePublicIpv4PoolInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :pool_id
    #   <p>The ID of the public IPv4 pool you want to delete.</p>
    #
    # @return [Types::DeletePublicIpv4PoolOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_public_ipv4_pool(
    #     dry_run: false,
    #     pool_id: 'PoolId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeletePublicIpv4PoolOutput
    #   resp.data.return_value #=> Boolean
    #
    def delete_public_ipv4_pool(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeletePublicIpv4PoolInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeletePublicIpv4PoolInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeletePublicIpv4Pool
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeletePublicIpv4Pool
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeletePublicIpv4Pool,
        params_class: Params::DeletePublicIpv4PoolOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_public_ipv4_pool
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the queued purchases for the specified Reserved Instances.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteQueuedReservedInstancesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :reserved_instances_ids
    #   <p>The IDs of the Reserved Instances.</p>
    #
    # @return [Types::DeleteQueuedReservedInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_queued_reserved_instances(
    #     dry_run: false,
    #     reserved_instances_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteQueuedReservedInstancesOutput
    #   resp.data.successful_queued_purchase_deletions #=> Array<SuccessfulQueuedPurchaseDeletion>
    #   resp.data.successful_queued_purchase_deletions[0] #=> Types::SuccessfulQueuedPurchaseDeletion
    #   resp.data.successful_queued_purchase_deletions[0].reserved_instances_id #=> String
    #   resp.data.failed_queued_purchase_deletions #=> Array<FailedQueuedPurchaseDeletion>
    #   resp.data.failed_queued_purchase_deletions[0] #=> Types::FailedQueuedPurchaseDeletion
    #   resp.data.failed_queued_purchase_deletions[0].error #=> Types::DeleteQueuedReservedInstancesError
    #   resp.data.failed_queued_purchase_deletions[0].error.code #=> String, one of ["reserved-instances-id-invalid", "reserved-instances-not-in-queued-state", "unexpected-error"]
    #   resp.data.failed_queued_purchase_deletions[0].error.message #=> String
    #   resp.data.failed_queued_purchase_deletions[0].reserved_instances_id #=> String
    #
    def delete_queued_reserved_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteQueuedReservedInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteQueuedReservedInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteQueuedReservedInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteQueuedReservedInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteQueuedReservedInstances,
        params_class: Params::DeleteQueuedReservedInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_queued_reserved_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified route from the specified route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
    #
    # @option params [String] :destination_ipv6_cidr_block
    #   <p>The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
    #
    # @option params [String] :destination_prefix_list_id
    #   <p>The ID of the prefix list for the route.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @return [Types::DeleteRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     destination_ipv6_cidr_block: 'DestinationIpv6CidrBlock',
    #     destination_prefix_list_id: 'DestinationPrefixListId',
    #     dry_run: false,
    #     route_table_id: 'RouteTableId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteRouteOutput
    #
    def delete_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteRoute,
        params_class: Params::DeleteRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteRouteTableInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @return [Types::DeleteRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_route_table(
    #     dry_run: false,
    #     route_table_id: 'RouteTableId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteRouteTableOutput
    #
    def delete_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteRouteTable,
        params_class: Params::DeleteRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a security group.</p>
    #          <p>If you attempt to delete a security group that is associated with an instance, or is
    # 			  referenced by another security group, the operation fails with
    # 				<code>InvalidGroup.InUse</code> in EC2-Classic or
    # 				<code>DependencyViolation</code> in EC2-VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteSecurityGroupInput}.
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group. Required for a nondefault VPC.</p>
    #
    # @option params [String] :group_name
    #   <p>[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteSecurityGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_security_group(
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteSecurityGroupOutput
    #
    def delete_security_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteSecurityGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteSecurityGroupInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteSecurityGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteSecurityGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteSecurityGroup,
        params_class: Params::DeleteSecurityGroupOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_security_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified snapshot.</p>
    #          <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the
    #       blocks on the device that have changed since your last snapshot are saved in the new snapshot.
    #       When you delete a snapshot, only the data not needed for any other snapshot is removed. So
    #       regardless of which prior snapshots have been deleted, all active snapshots will have access
    #       to all the information needed to restore the volume.</p>
    #          <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI.
    #       You must first de-register the AMI before you can delete the snapshot.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Delete an Amazon EBS snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteSnapshotInput}.
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the EBS snapshot.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_snapshot(
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteSnapshotOutput
    #
    def delete_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteSnapshotInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteSnapshot,
        params_class: Params::DeleteSnapshotOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the data feed for Spot Instances.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteSpotDatafeedSubscriptionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteSpotDatafeedSubscriptionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_spot_datafeed_subscription(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteSpotDatafeedSubscriptionOutput
    #
    def delete_spot_datafeed_subscription(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteSpotDatafeedSubscriptionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteSpotDatafeedSubscriptionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteSpotDatafeedSubscription
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteSpotDatafeedSubscription
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteSpotDatafeedSubscription,
        params_class: Params::DeleteSpotDatafeedSubscriptionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_spot_datafeed_subscription
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteSubnetInput}.
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteSubnetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_subnet(
    #     subnet_id: 'SubnetId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteSubnetOutput
    #
    def delete_subnet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteSubnetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteSubnetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteSubnet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteSubnet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteSubnet,
        params_class: Params::DeleteSubnetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_subnet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a subnet CIDR reservation.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteSubnetCidrReservationInput}.
    #
    # @option params [String] :subnet_cidr_reservation_id
    #   <p>The ID of the subnet CIDR reservation.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteSubnetCidrReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_subnet_cidr_reservation(
    #     subnet_cidr_reservation_id: 'SubnetCidrReservationId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteSubnetCidrReservationOutput
    #   resp.data.deleted_subnet_cidr_reservation #=> Types::SubnetCidrReservation
    #   resp.data.deleted_subnet_cidr_reservation.subnet_cidr_reservation_id #=> String
    #   resp.data.deleted_subnet_cidr_reservation.subnet_id #=> String
    #   resp.data.deleted_subnet_cidr_reservation.cidr #=> String
    #   resp.data.deleted_subnet_cidr_reservation.reservation_type #=> String, one of ["prefix", "explicit"]
    #   resp.data.deleted_subnet_cidr_reservation.owner_id #=> String
    #   resp.data.deleted_subnet_cidr_reservation.description #=> String
    #   resp.data.deleted_subnet_cidr_reservation.tags #=> Array<Tag>
    #   resp.data.deleted_subnet_cidr_reservation.tags[0] #=> Types::Tag
    #   resp.data.deleted_subnet_cidr_reservation.tags[0].key #=> String
    #   resp.data.deleted_subnet_cidr_reservation.tags[0].value #=> String
    #
    def delete_subnet_cidr_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteSubnetCidrReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteSubnetCidrReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteSubnetCidrReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteSubnetCidrReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteSubnetCidrReservation,
        params_class: Params::DeleteSubnetCidrReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_subnet_cidr_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified set of tags from the specified set of resources.</p>
    #          <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see
    #          <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a>
    #          in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTagsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :resources
    #   <p>The IDs of the resources, separated by spaces.</p>
    #      	     <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    #
    # @option params [Array<Tag>] :tags
    #   <p>The tags to delete. Specify a tag key and an optional tag value to delete
    #               specific tags. If you specify a tag key without a tag value, we delete any tag with this
    #               key regardless of its value. If you specify a tag key with an empty string as the tag
    #               value, we delete the tag only if its value is an empty string.</p>
    #           <p>If you omit this parameter, we delete all user-defined tags for the specified
    #               resources. We do not delete Amazon Web Services-generated tags (tags that have the <code>aws:</code>
    #               prefix).</p>
    #            <p>Constraints: Up to 1000 tags.</p>
    #
    # @return [Types::DeleteTagsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_tags(
    #     dry_run: false,
    #     resources: [
    #       'member'
    #     ], # required
    #     tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTagsOutput
    #
    def delete_tags(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTagsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTagsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTags
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTags
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTags,
        params_class: Params::DeleteTagsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_tags
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Traffic Mirror filter.</p>
    #          <p>You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTrafficMirrorFilterInput}.
    #
    # @option params [String] :traffic_mirror_filter_id
    #   <p>The ID of the Traffic Mirror filter.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTrafficMirrorFilterOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_traffic_mirror_filter(
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTrafficMirrorFilterOutput
    #   resp.data.traffic_mirror_filter_id #=> String
    #
    def delete_traffic_mirror_filter(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTrafficMirrorFilterInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTrafficMirrorFilterInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTrafficMirrorFilter
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTrafficMirrorFilter
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTrafficMirrorFilter,
        params_class: Params::DeleteTrafficMirrorFilterOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_traffic_mirror_filter
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Traffic Mirror rule.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTrafficMirrorFilterRuleInput}.
    #
    # @option params [String] :traffic_mirror_filter_rule_id
    #   <p>The ID of the Traffic Mirror rule.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTrafficMirrorFilterRuleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_traffic_mirror_filter_rule(
    #     traffic_mirror_filter_rule_id: 'TrafficMirrorFilterRuleId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTrafficMirrorFilterRuleOutput
    #   resp.data.traffic_mirror_filter_rule_id #=> String
    #
    def delete_traffic_mirror_filter_rule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTrafficMirrorFilterRuleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTrafficMirrorFilterRuleInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTrafficMirrorFilterRule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTrafficMirrorFilterRule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTrafficMirrorFilterRule,
        params_class: Params::DeleteTrafficMirrorFilterRuleOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_traffic_mirror_filter_rule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Traffic Mirror session.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTrafficMirrorSessionInput}.
    #
    # @option params [String] :traffic_mirror_session_id
    #   <p>The ID of the Traffic Mirror session.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTrafficMirrorSessionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_traffic_mirror_session(
    #     traffic_mirror_session_id: 'TrafficMirrorSessionId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTrafficMirrorSessionOutput
    #   resp.data.traffic_mirror_session_id #=> String
    #
    def delete_traffic_mirror_session(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTrafficMirrorSessionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTrafficMirrorSessionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTrafficMirrorSession
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTrafficMirrorSession
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTrafficMirrorSession,
        params_class: Params::DeleteTrafficMirrorSessionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_traffic_mirror_session
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Traffic Mirror target.</p>
    #          <p>You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTrafficMirrorTargetInput}.
    #
    # @option params [String] :traffic_mirror_target_id
    #   <p>The ID of the Traffic Mirror target.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTrafficMirrorTargetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_traffic_mirror_target(
    #     traffic_mirror_target_id: 'TrafficMirrorTargetId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTrafficMirrorTargetOutput
    #   resp.data.traffic_mirror_target_id #=> String
    #
    def delete_traffic_mirror_target(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTrafficMirrorTargetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTrafficMirrorTargetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTrafficMirrorTarget
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTrafficMirrorTarget
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTrafficMirrorTarget,
        params_class: Params::DeleteTrafficMirrorTargetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_traffic_mirror_target
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified transit gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayInput}.
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayOutput
    #   resp.data.transit_gateway #=> Types::TransitGateway
    #   resp.data.transit_gateway.transit_gateway_id #=> String
    #   resp.data.transit_gateway.transit_gateway_arn #=> String
    #   resp.data.transit_gateway.state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateway.owner_id #=> String
    #   resp.data.transit_gateway.description #=> String
    #   resp.data.transit_gateway.creation_time #=> Time
    #   resp.data.transit_gateway.options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateway.options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway.options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.association_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.tags #=> Array<Tag>
    #   resp.data.transit_gateway.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway.tags[0].key #=> String
    #   resp.data.transit_gateway.tags[0].value #=> String
    #
    def delete_transit_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGateway,
        params_class: Params::DeleteTransitGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Connect attachment. You must first delete any Connect peers for
    #             the attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayConnectInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the Connect attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayConnectOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_connect(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayConnectOutput
    #   resp.data.transit_gateway_connect #=> Types::TransitGatewayConnect
    #   resp.data.transit_gateway_connect.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transport_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transit_gateway_id #=> String
    #   resp.data.transit_gateway_connect.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_connect.creation_time #=> Time
    #   resp.data.transit_gateway_connect.options #=> Types::TransitGatewayConnectOptions
    #   resp.data.transit_gateway_connect.options.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect.tags[0].key #=> String
    #   resp.data.transit_gateway_connect.tags[0].value #=> String
    #
    def delete_transit_gateway_connect(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayConnectInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayConnectInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayConnect
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayConnect
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayConnect,
        params_class: Params::DeleteTransitGatewayConnectOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_connect
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified Connect peer.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayConnectPeerInput}.
    #
    # @option params [String] :transit_gateway_connect_peer_id
    #   <p>The ID of the Connect peer.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayConnectPeerOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_connect_peer(
    #     transit_gateway_connect_peer_id: 'TransitGatewayConnectPeerId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayConnectPeerOutput
    #   resp.data.transit_gateway_connect_peer #=> Types::TransitGatewayConnectPeer
    #   resp.data.transit_gateway_connect_peer.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect_peer.transit_gateway_connect_peer_id #=> String
    #   resp.data.transit_gateway_connect_peer.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_connect_peer.creation_time #=> Time
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration #=> Types::TransitGatewayConnectPeerConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations #=> Array<TransitGatewayAttachmentBgpConfiguration>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0] #=> Types::TransitGatewayAttachmentBgpConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].bgp_status #=> String, one of ["up", "down"]
    #   resp.data.transit_gateway_connect_peer.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect_peer.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect_peer.tags[0].key #=> String
    #   resp.data.transit_gateway_connect_peer.tags[0].value #=> String
    #
    def delete_transit_gateway_connect_peer(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayConnectPeerInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayConnectPeerInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayConnectPeer
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayConnectPeer
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayConnectPeer,
        params_class: Params::DeleteTransitGatewayConnectPeerOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_connect_peer
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified transit gateway multicast domain.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayMulticastDomainInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayMulticastDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_multicast_domain(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayMulticastDomainOutput
    #   resp.data.transit_gateway_multicast_domain #=> Types::TransitGatewayMulticastDomain
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_arn #=> String
    #   resp.data.transit_gateway_multicast_domain.owner_id #=> String
    #   resp.data.transit_gateway_multicast_domain.options #=> Types::TransitGatewayMulticastDomainOptions
    #   resp.data.transit_gateway_multicast_domain.options.igmpv2_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.static_sources_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.auto_accept_shared_associations #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_multicast_domain.creation_time #=> Time
    #   resp.data.transit_gateway_multicast_domain.tags #=> Array<Tag>
    #   resp.data.transit_gateway_multicast_domain.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_multicast_domain.tags[0].key #=> String
    #   resp.data.transit_gateway_multicast_domain.tags[0].value #=> String
    #
    def delete_transit_gateway_multicast_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayMulticastDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayMulticastDomainInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayMulticastDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayMulticastDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayMulticastDomain,
        params_class: Params::DeleteTransitGatewayMulticastDomainOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_multicast_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a transit gateway peering attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayPeeringAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the transit gateway peering attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayPeeringAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_peering_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    #
    def delete_transit_gateway_peering_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayPeeringAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayPeeringAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayPeeringAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayPeeringAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayPeeringAttachment,
        params_class: Params::DeleteTransitGatewayPeeringAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_peering_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a reference (route) to a prefix list in a specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayPrefixListReferenceInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayPrefixListReferenceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_prefix_list_reference(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     prefix_list_id: 'PrefixListId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayPrefixListReferenceOutput
    #   resp.data.transit_gateway_prefix_list_reference #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_reference.blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_id #=> String
    #
    def delete_transit_gateway_prefix_list_reference(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayPrefixListReferenceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayPrefixListReferenceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayPrefixListReference
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayPrefixListReference
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayPrefixListReference,
        params_class: Params::DeleteTransitGatewayPrefixListReferenceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_prefix_list_reference
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified route from the specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayRouteInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR range for the route. This must match the CIDR for the route exactly.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_route(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayRouteOutput
    #   resp.data.route #=> Types::TransitGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.prefix_list_id #=> String
    #   resp.data.route.transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.route.transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.route.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #
    def delete_transit_gateway_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayRoute,
        params_class: Params::DeleteTransitGatewayRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified transit gateway route table. You must disassociate the route table from any
    #           transit gateway route tables before you can delete it.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayRouteTableInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_route_table(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayRouteTableOutput
    #   resp.data.transit_gateway_route_table #=> Types::TransitGatewayRouteTable
    #   resp.data.transit_gateway_route_table.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table.transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table.default_association_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.default_propagation_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.creation_time #=> Time
    #   resp.data.transit_gateway_route_table.tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table.tags[0].key #=> String
    #   resp.data.transit_gateway_route_table.tags[0].value #=> String
    #
    def delete_transit_gateway_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayRouteTable,
        params_class: Params::DeleteTransitGatewayRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified VPC attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteTransitGatewayVpcAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteTransitGatewayVpcAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    #
    def delete_transit_gateway_vpc_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteTransitGatewayVpcAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteTransitGatewayVpcAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteTransitGatewayVpcAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteTransitGatewayVpcAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteTransitGatewayVpcAttachment,
        params_class: Params::DeleteTransitGatewayVpcAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_transit_gateway_vpc_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state
    #       (not attached to an instance).</p>
    #          <p>The volume can remain in the <code>deleting</code> state for several minutes.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Delete an Amazon EBS volume</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVolumeInput}.
    #
    # @option params [String] :volume_id
    #   <p>The ID of the volume.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteVolumeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_volume(
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVolumeOutput
    #
    def delete_volume(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVolumeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVolumeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVolume
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVolume
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVolume,
        params_class: Params::DeleteVolumeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_volume
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpcInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpc(
    #     vpc_id: 'VpcId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpcOutput
    #
    def delete_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpcInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpc,
        params_class: Params::DeleteVpcOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes one or more VPC endpoint connection notifications.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpcEndpointConnectionNotificationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :connection_notification_ids
    #   <p>One or more notification IDs.</p>
    #
    # @return [Types::DeleteVpcEndpointConnectionNotificationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpc_endpoint_connection_notifications(
    #     dry_run: false,
    #     connection_notification_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpcEndpointConnectionNotificationsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def delete_vpc_endpoint_connection_notifications(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpcEndpointConnectionNotificationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpcEndpointConnectionNotificationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpcEndpointConnectionNotifications
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpcEndpointConnectionNotifications
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpcEndpointConnectionNotifications,
        params_class: Params::DeleteVpcEndpointConnectionNotificationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpc_endpoint_connection_notifications
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes one or more VPC endpoint service configurations in your account. Before you
    #             delete the endpoint service configuration, you must reject any <code>Available</code> or
    #                 <code>PendingAcceptance</code> interface endpoint connections that are attached to
    #             the service.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpcEndpointServiceConfigurationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :service_ids
    #   <p>The IDs of one or more services.</p>
    #
    # @return [Types::DeleteVpcEndpointServiceConfigurationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpc_endpoint_service_configurations(
    #     dry_run: false,
    #     service_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpcEndpointServiceConfigurationsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def delete_vpc_endpoint_service_configurations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpcEndpointServiceConfigurationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpcEndpointServiceConfigurationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpcEndpointServiceConfigurations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpcEndpointServiceConfigurations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpcEndpointServiceConfigurations,
        params_class: Params::DeleteVpcEndpointServiceConfigurationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpc_endpoint_service_configurations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes one or more specified VPC endpoints. You can delete any of the following types of VPC endpoints.  </p>
    #         <ul>
    #             <li>
    #                <p>Gateway endpoint,</p>
    #             </li>
    #             <li>
    #                <p>Gateway Load Balancer endpoint,</p>
    #             </li>
    #             <li>
    #                <p>Interface endpoint</p>
    #             </li>
    #          </ul>
    #         <p>The following rules apply when you delete a VPC endpoint:</p>
    #         <ul>
    #             <li>
    #                 <p>When you delete a gateway endpoint, we delete the endpoint routes in the route tables that are associated with the endpoint.</p>
    #             </li>
    #             <li>
    #                 <p>When you delete a Gateway Load Balancer endpoint, we delete the endpoint network interfaces. </p>
    #                 <p>You can only delete Gateway Load Balancer endpoints when the routes that are associated with the endpoint are deleted.</p>
    #             </li>
    #             <li>
    #                 <p>When you delete an interface endpoint, we delete the  endpoint network interfaces.</p>
    #             </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpcEndpointsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :vpc_endpoint_ids
    #   <p>One or more VPC endpoint IDs.</p>
    #
    # @return [Types::DeleteVpcEndpointsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpc_endpoints(
    #     dry_run: false,
    #     vpc_endpoint_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpcEndpointsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def delete_vpc_endpoints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpcEndpointsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpcEndpointsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpcEndpoints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpcEndpoints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpcEndpoints,
        params_class: Params::DeleteVpcEndpointsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpc_endpoints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner
    #             of the accepter VPC can delete the VPC peering connection if it's in the
    #                 <code>active</code> state. The owner of the requester VPC can delete a VPC peering
    #             connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering
    #             connection that's in the <code>failed</code> state.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpcPeeringConnectionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_peering_connection_id
    #   <p>The ID of the VPC peering connection.</p>
    #
    # @return [Types::DeleteVpcPeeringConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpc_peering_connection(
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpcPeeringConnectionOutput
    #   resp.data.return #=> Boolean
    #
    def delete_vpc_peering_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpcPeeringConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpcPeeringConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpcPeeringConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpcPeeringConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpcPeeringConnection,
        params_class: Params::DeleteVpcPeeringConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpc_peering_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified VPN connection.</p>
    #         <p>If you're deleting the VPC and its associated components, we recommend that you detach
    #             the virtual private gateway from the VPC and delete the VPC before deleting the VPN
    #             connection. If you believe that the tunnel credentials for your VPN connection have been
    #             compromised, you can delete the VPN connection and create a new one that has new keys,
    #             without needing to delete the VPC or virtual private gateway. If you create a new VPN
    #             connection, you must reconfigure the customer gateway device using the new configuration
    #             information returned with the new VPN connection ID.</p>
    #         <p>For certificate-based authentication, delete all Certificate Manager (ACM) private
    #             certificates used for the Amazon Web Services-side tunnel endpoints for the VPN
    #             connection before deleting the VPN connection.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpnConnectionInput}.
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the VPN connection.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteVpnConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpn_connection(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpnConnectionOutput
    #
    def delete_vpn_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpnConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpnConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpnConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpnConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpnConnection,
        params_class: Params::DeleteVpnConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpn_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified static route associated with a VPN connection between an
    #             existing virtual private gateway and a VPN customer gateway. The static route allows
    #             traffic to be routed from the virtual private gateway to the VPN customer
    #             gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpnConnectionRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR block associated with the local subnet of the customer network.</p>
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the VPN connection.</p>
    #
    # @return [Types::DeleteVpnConnectionRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpn_connection_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     vpn_connection_id: 'VpnConnectionId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpnConnectionRouteOutput
    #
    def delete_vpn_connection_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpnConnectionRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpnConnectionRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpnConnectionRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpnConnectionRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpnConnectionRoute,
        params_class: Params::DeleteVpnConnectionRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpn_connection_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deletes the specified virtual private gateway. You must first detach the virtual
    #             private gateway from the VPC. Note that you don't need to delete the virtual private
    #             gateway if you plan to delete and recreate the VPN connection between your VPC and your
    #             network.</p>
    #
    # @param [Hash] params
    #   See {Types::DeleteVpnGatewayInput}.
    #
    # @option params [String] :vpn_gateway_id
    #   <p>The ID of the virtual private gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeleteVpnGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_vpn_gateway(
    #     vpn_gateway_id: 'VpnGatewayId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteVpnGatewayOutput
    #
    def delete_vpn_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteVpnGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteVpnGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteVpnGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeleteVpnGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeleteVpnGateway,
        params_class: Params::DeleteVpnGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :delete_vpn_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Releases the specified address range that you provisioned for use with your Amazon Web Services resources
    #          through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p>
    #          <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its
    #          address range.</p>
    #
    # @param [Hash] params
    #   See {Types::DeprovisionByoipCidrInput}.
    #
    # @option params [String] :cidr
    #   <p>The address range, in CIDR notation. The prefix must be the same prefix
    #            that you specified when you provisioned the address range.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeprovisionByoipCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deprovision_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeprovisionByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #
    def deprovision_byoip_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeprovisionByoipCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeprovisionByoipCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeprovisionByoipCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeprovisionByoipCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeprovisionByoipCidr,
        params_class: Params::DeprovisionByoipCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deprovision_byoip_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a CIDR from a pool that has a source pool, the CIDR is recycled back into the source pool. For more information, see <a href="/vpc/latest/ipam/depro-pool-cidr-ipam.html">Deprovision pool CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DeprovisionIpamPoolCidrInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the pool that has the CIDR you want to deprovision.</p>
    #
    # @option params [String] :cidr
    #   <p>The CIDR which you want to deprovision from the pool.</p>
    #
    # @return [Types::DeprovisionIpamPoolCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deprovision_ipam_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeprovisionIpamPoolCidrOutput
    #   resp.data.ipam_pool_cidr #=> Types::IpamPoolCidr
    #   resp.data.ipam_pool_cidr.cidr #=> String
    #   resp.data.ipam_pool_cidr.state #=> String, one of ["pending-provision", "provisioned", "failed-provision", "pending-deprovision", "deprovisioned", "failed-deprovision", "pending-import", "failed-import"]
    #   resp.data.ipam_pool_cidr.failure_reason #=> Types::IpamPoolCidrFailureReason
    #   resp.data.ipam_pool_cidr.failure_reason.code #=> String, one of ["cidr-not-available"]
    #   resp.data.ipam_pool_cidr.failure_reason.message #=> String
    #
    def deprovision_ipam_pool_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeprovisionIpamPoolCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeprovisionIpamPoolCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeprovisionIpamPoolCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeprovisionIpamPoolCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeprovisionIpamPoolCidr,
        params_class: Params::DeprovisionIpamPoolCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deprovision_ipam_pool_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deprovision a CIDR from a public IPv4 pool.</p>
    #
    # @param [Hash] params
    #   See {Types::DeprovisionPublicIpv4PoolCidrInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :pool_id
    #   <p>The ID of the pool that you want to deprovision the CIDR from.</p>
    #
    # @option params [String] :cidr
    #   <p>The CIDR you want to deprovision from the pool.</p>
    #
    # @return [Types::DeprovisionPublicIpv4PoolCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deprovision_public_ipv4_pool_cidr(
    #     dry_run: false,
    #     pool_id: 'PoolId', # required
    #     cidr: 'Cidr' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeprovisionPublicIpv4PoolCidrOutput
    #   resp.data.pool_id #=> String
    #   resp.data.deprovisioned_addresses #=> Array<String>
    #   resp.data.deprovisioned_addresses[0] #=> String
    #
    def deprovision_public_ipv4_pool_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeprovisionPublicIpv4PoolCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeprovisionPublicIpv4PoolCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeprovisionPublicIpv4PoolCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeprovisionPublicIpv4PoolCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeprovisionPublicIpv4PoolCidr,
        params_class: Params::DeprovisionPublicIpv4PoolCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deprovision_public_ipv4_pool_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch
    # 			new instances; however, it doesn't affect any instances that you've already launched
    # 			from the AMI. You'll continue to incur usage costs for those instances until you
    # 			terminate them.</p>
    #    	     <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was
    # 			created for the root volume of the instance during the AMI creation process. When you
    # 			deregister an instance store-backed AMI, it doesn't affect the files that you uploaded
    # 			to Amazon S3 when you created the AMI.</p>
    #
    # @param [Hash] params
    #   See {Types::DeregisterImageInput}.
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeregisterImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deregister_image(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeregisterImageOutput
    #
    def deregister_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeregisterImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeregisterImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeregisterImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeregisterImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeregisterImage,
        params_class: Params::DeregisterImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deregister_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>c</p>
    #    	     <p>Deregisters tag keys to prevent tags that have the specified tag keys from being included
    # 			in scheduled event notifications for resources in the Region.</p>
    #
    # @param [Hash] params
    #   See {Types::DeregisterInstanceEventNotificationAttributesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [DeregisterInstanceTagAttributeRequest] :instance_tag_attribute
    #   <p>Information about the tag keys to deregister.</p>
    #
    # @return [Types::DeregisterInstanceEventNotificationAttributesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deregister_instance_event_notification_attributes(
    #     dry_run: false,
    #     instance_tag_attribute: {
    #       include_all_tags_of_instance: false,
    #       instance_tag_keys: [
    #         'member'
    #       ]
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeregisterInstanceEventNotificationAttributesOutput
    #   resp.data.instance_tag_attribute #=> Types::InstanceTagNotificationAttribute
    #   resp.data.instance_tag_attribute.instance_tag_keys #=> Array<String>
    #   resp.data.instance_tag_attribute.instance_tag_keys[0] #=> String
    #   resp.data.instance_tag_attribute.include_all_tags_of_instance #=> Boolean
    #
    def deregister_instance_event_notification_attributes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeregisterInstanceEventNotificationAttributesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeregisterInstanceEventNotificationAttributesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeregisterInstanceEventNotificationAttributes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeregisterInstanceEventNotificationAttributes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeregisterInstanceEventNotificationAttributes,
        params_class: Params::DeregisterInstanceEventNotificationAttributesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deregister_instance_event_notification_attributes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deregisters the specified members (network interfaces) from the  transit gateway multicast group.</p>
    #
    # @param [Hash] params
    #   See {Types::DeregisterTransitGatewayMulticastGroupMembersInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :group_ip_address
    #   <p>The IP address assigned to the  transit gateway multicast group.</p>
    #
    # @option params [Array<String>] :network_interface_ids
    #   <p>The IDs of the group members' network interfaces.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeregisterTransitGatewayMulticastGroupMembersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deregister_transit_gateway_multicast_group_members(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeregisterTransitGatewayMulticastGroupMembersOutput
    #   resp.data.deregistered_multicast_group_members #=> Types::TransitGatewayMulticastDeregisteredGroupMembers
    #   resp.data.deregistered_multicast_group_members.transit_gateway_multicast_domain_id #=> String
    #   resp.data.deregistered_multicast_group_members.deregistered_network_interface_ids #=> Array<String>
    #   resp.data.deregistered_multicast_group_members.deregistered_network_interface_ids[0] #=> String
    #   resp.data.deregistered_multicast_group_members.group_ip_address #=> String
    #
    def deregister_transit_gateway_multicast_group_members(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeregisterTransitGatewayMulticastGroupMembersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeregisterTransitGatewayMulticastGroupMembersInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeregisterTransitGatewayMulticastGroupMembers
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeregisterTransitGatewayMulticastGroupMembers
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeregisterTransitGatewayMulticastGroupMembers,
        params_class: Params::DeregisterTransitGatewayMulticastGroupMembersOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deregister_transit_gateway_multicast_group_members
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Deregisters the specified sources (network interfaces) from the  transit gateway multicast group.</p>
    #
    # @param [Hash] params
    #   See {Types::DeregisterTransitGatewayMulticastGroupSourcesInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :group_ip_address
    #   <p>The IP address assigned to the  transit gateway multicast group.</p>
    #
    # @option params [Array<String>] :network_interface_ids
    #   <p>The IDs of the group sources' network interfaces.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DeregisterTransitGatewayMulticastGroupSourcesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.deregister_transit_gateway_multicast_group_sources(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeregisterTransitGatewayMulticastGroupSourcesOutput
    #   resp.data.deregistered_multicast_group_sources #=> Types::TransitGatewayMulticastDeregisteredGroupSources
    #   resp.data.deregistered_multicast_group_sources.transit_gateway_multicast_domain_id #=> String
    #   resp.data.deregistered_multicast_group_sources.deregistered_network_interface_ids #=> Array<String>
    #   resp.data.deregistered_multicast_group_sources.deregistered_network_interface_ids[0] #=> String
    #   resp.data.deregistered_multicast_group_sources.group_ip_address #=> String
    #
    def deregister_transit_gateway_multicast_group_sources(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeregisterTransitGatewayMulticastGroupSourcesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeregisterTransitGatewayMulticastGroupSourcesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeregisterTransitGatewayMulticastGroupSources
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DeregisterTransitGatewayMulticastGroupSources
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DeregisterTransitGatewayMulticastGroupSources,
        params_class: Params::DeregisterTransitGatewayMulticastGroupSourcesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :deregister_transit_gateway_multicast_group_sources
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes attributes of your Amazon Web Services account. The following are the supported account attributes:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>supported-platforms</code>: Indicates whether your account can launch instances
    #           into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>default-vpc</code>: The ID of the default VPC for your account, or
    #             <code>none</code>.</p>
    #             </li>
    #             <li>
    #                <p>
    #                     <code>max-instances</code>: This attribute is no longer supported. The returned
    #                     value does not reflect your actual vCPU limit for running On-Demand Instances.
    #                     For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand Instance Limits</a> in the
    #                         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups
    #           that you can assign to a network interface.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can
    #           allocate for use with EC2-Classic. </p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can
    #           allocate for use with EC2-VPC.</p>
    #             </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::DescribeAccountAttributesInput}.
    #
    # @option params [Array<String>] :attribute_names
    #   <p>The account attribute names.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #              and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #              Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeAccountAttributesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_account_attributes(
    #     attribute_names: [
    #       'supported-platforms' # accepts ["supported-platforms", "default-vpc"]
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAccountAttributesOutput
    #   resp.data.account_attributes #=> Array<AccountAttribute>
    #   resp.data.account_attributes[0] #=> Types::AccountAttribute
    #   resp.data.account_attributes[0].attribute_name #=> String
    #   resp.data.account_attributes[0].attribute_values #=> Array<AccountAttributeValue>
    #   resp.data.account_attributes[0].attribute_values[0] #=> Types::AccountAttributeValue
    #   resp.data.account_attributes[0].attribute_values[0].attribute_value #=> String
    #
    def describe_account_attributes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAccountAttributesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAccountAttributesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAccountAttributes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeAccountAttributes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeAccountAttributes,
        params_class: Params::DescribeAccountAttributesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_account_attributes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p>
    #          <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC.
    # 				For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAddressesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>association-id</code> - [EC2-VPC] The association ID for the address.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>)
    #                 or in a VPC (<code>vpc</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-border-group</code> -  A unique set of Availability Zones, Local Zones,
    #              or Wavelength Zones from where Amazon Web Services advertises IP addresses. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-interface-owner-id</code> - The Amazon Web Services account ID of the owner.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>public-ip</code> - The Elastic IP address, or the carrier IP address.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :public_ips
    #   <p>One or more Elastic IP addresses.</p>
    #            <p>Default: Describes all your Elastic IP addresses.</p>
    #
    # @option params [Array<String>] :allocation_ids
    #   <p>[EC2-VPC] Information about the allocation IDs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeAddressesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_addresses(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     public_ips: [
    #       'member'
    #     ],
    #     allocation_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAddressesOutput
    #   resp.data.addresses #=> Array<Address>
    #   resp.data.addresses[0] #=> Types::Address
    #   resp.data.addresses[0].instance_id #=> String
    #   resp.data.addresses[0].public_ip #=> String
    #   resp.data.addresses[0].allocation_id #=> String
    #   resp.data.addresses[0].association_id #=> String
    #   resp.data.addresses[0].domain #=> String, one of ["vpc", "standard"]
    #   resp.data.addresses[0].network_interface_id #=> String
    #   resp.data.addresses[0].network_interface_owner_id #=> String
    #   resp.data.addresses[0].private_ip_address #=> String
    #   resp.data.addresses[0].tags #=> Array<Tag>
    #   resp.data.addresses[0].tags[0] #=> Types::Tag
    #   resp.data.addresses[0].tags[0].key #=> String
    #   resp.data.addresses[0].tags[0].value #=> String
    #   resp.data.addresses[0].public_ipv4_pool #=> String
    #   resp.data.addresses[0].network_border_group #=> String
    #   resp.data.addresses[0].customer_owned_ip #=> String
    #   resp.data.addresses[0].customer_owned_ipv4_pool #=> String
    #   resp.data.addresses[0].carrier_ip #=> String
    #
    def describe_addresses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAddressesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAddressesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAddresses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeAddresses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeAddresses,
        params_class: Params::DescribeAddressesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_addresses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the attributes of the specified Elastic IP addresses. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAddressesAttributeInput}.
    #
    # @option params [Array<String>] :allocation_ids
    #   <p>[EC2-VPC] The allocation IDs.</p>
    #
    # @option params [String] :attribute
    #   <p>The attribute of the IP address.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeAddressesAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_addresses_attribute(
    #     allocation_ids: [
    #       'member'
    #     ],
    #     attribute: 'domain-name', # accepts ["domain-name"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAddressesAttributeOutput
    #   resp.data.addresses #=> Array<AddressAttribute>
    #   resp.data.addresses[0] #=> Types::AddressAttribute
    #   resp.data.addresses[0].public_ip #=> String
    #   resp.data.addresses[0].allocation_id #=> String
    #   resp.data.addresses[0].ptr_record #=> String
    #   resp.data.addresses[0].ptr_record_update #=> Types::PtrUpdateStatus
    #   resp.data.addresses[0].ptr_record_update.value #=> String
    #   resp.data.addresses[0].ptr_record_update.status #=> String
    #   resp.data.addresses[0].ptr_record_update.reason #=> String
    #   resp.data.next_token #=> String
    #
    def describe_addresses_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAddressesAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAddressesAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAddressesAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeAddressesAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeAddressesAttribute,
        params_class: Params::DescribeAddressesAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_addresses_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the longer ID format settings for all resource types in a specific
    #          Region. This request is useful for performing a quick audit to determine whether a
    #          specific Region is fully opted in for longer IDs (17-character IDs).</p>
    #
    #          <p>This request only returns information about resource types that support longer IDs.</p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #         <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #         <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #         <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #         <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #         <code>network-acl</code> | <code>network-acl-association</code> |
    #         <code>network-interface</code> | <code>network-interface-attachment</code> |
    #         <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #         <code>route-table-association</code> | <code>security-group</code> |
    #         <code>snapshot</code> | <code>subnet</code> |
    #         <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> |
    #         <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #         <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAggregateIdFormatInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeAggregateIdFormatOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_aggregate_id_format(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAggregateIdFormatOutput
    #   resp.data.use_long_ids_aggregated #=> Boolean
    #   resp.data.statuses #=> Array<IdFormat>
    #   resp.data.statuses[0] #=> Types::IdFormat
    #   resp.data.statuses[0].deadline #=> Time
    #   resp.data.statuses[0].resource #=> String
    #   resp.data.statuses[0].use_long_ids #=> Boolean
    #
    def describe_aggregate_id_format(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAggregateIdFormatInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAggregateIdFormatInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAggregateIdFormat
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeAggregateIdFormat
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeAggregateIdFormat,
        params_class: Params::DescribeAggregateIdFormatOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_aggregate_id_format
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Availability Zones, Local Zones, and Wavelength Zones that are available to
    #       you. If there is an event impacting a zone, you can use this request to view the state and any
    #       provided messages for that zone.</p>
    #          <p>For more information about Availability Zones, Local Zones, and Wavelength Zones, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and zones</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeAvailabilityZonesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>group-name</code> - For Availability Zones, use the Region name. For Local
    #             Zones, use the name of the group associated with the Local Zone (for example,
    #               <code>us-west-2-lax-1</code>) For Wavelength Zones, use the name of the group associated
    #             with the Wavelength Zone (for example, <code>us-east-1-wl1-bos-wlz-1</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>message</code> - The Zone message.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>opt-in-status</code> - The opt-in status (<code>opted-in</code>, and
    #               <code>not-opted-in</code> | <code>opt-in-not-required</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>parent-zoneID</code> - The ID of the zone that handles some of the Local Zone
    #             and Wavelength Zone control plane operations, such as API calls.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>parent-zoneName</code> - The ID of the zone that handles some of the Local Zone
    #             and Wavelength Zone control plane operations, such as API calls.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>region-name</code> - The name of the Region for the Zone (for example,
    #               <code>us-east-1</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the Availability Zone, the Local Zone, or the
    #             Wavelength Zone (<code>available</code> | <code>information</code> | <code>impaired</code>
    #             | <code>unavailable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>zone-id</code> - The ID of the Availability Zone (for example,
    #               <code>use1-az1</code>), the Local Zone (for example, <code>usw2-lax1-az1</code>), or the
    #             Wavelength Zone (for example, <code>us-east-1-wl1-bos-wlz-1</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>zone-type</code> - The type of zone, for example, <code>local-zone</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>zone-name</code> - The name of the Availability Zone (for example,
    #               <code>us-east-1a</code>), the Local Zone (for example, <code>us-west-2-lax-1a</code>), or
    #             the Wavelength Zone (for example, <code>us-east-1-wl1-bos-wlz-1</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>zone-type</code> - The type of zone, for example, <code>local-zone</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :zone_names
    #   <p>The names of the Availability Zones, Local Zones, and Wavelength Zones.</p>
    #
    # @option params [Array<String>] :zone_ids
    #   <p>The IDs of the Availability Zones, Local Zones, and Wavelength Zones.</p>
    #
    # @option params [Boolean] :all_availability_zones
    #   <p>Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your
    #         opt-in status.</p>
    #            <p>If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeAvailabilityZonesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_availability_zones(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     zone_names: [
    #       'member'
    #     ],
    #     zone_ids: [
    #       'member'
    #     ],
    #     all_availability_zones: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeAvailabilityZonesOutput
    #   resp.data.availability_zones #=> Array<AvailabilityZone>
    #   resp.data.availability_zones[0] #=> Types::AvailabilityZone
    #   resp.data.availability_zones[0].state #=> String, one of ["available", "information", "impaired", "unavailable"]
    #   resp.data.availability_zones[0].opt_in_status #=> String, one of ["opt-in-not-required", "opted-in", "not-opted-in"]
    #   resp.data.availability_zones[0].messages #=> Array<AvailabilityZoneMessage>
    #   resp.data.availability_zones[0].messages[0] #=> Types::AvailabilityZoneMessage
    #   resp.data.availability_zones[0].messages[0].message #=> String
    #   resp.data.availability_zones[0].region_name #=> String
    #   resp.data.availability_zones[0].zone_name #=> String
    #   resp.data.availability_zones[0].zone_id #=> String
    #   resp.data.availability_zones[0].group_name #=> String
    #   resp.data.availability_zones[0].network_border_group #=> String
    #   resp.data.availability_zones[0].zone_type #=> String
    #   resp.data.availability_zones[0].parent_zone_name #=> String
    #   resp.data.availability_zones[0].parent_zone_id #=> String
    #
    def describe_availability_zones(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeAvailabilityZonesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeAvailabilityZonesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeAvailabilityZones
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeAvailabilityZones
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeAvailabilityZones,
        params_class: Params::DescribeAvailabilityZonesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_availability_zones
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified bundle tasks or all of your bundle tasks.</p>
    #          <note>
    #             <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p>
    #          </note>
    #
    # @param [Hash] params
    #   See {Types::DescribeBundleTasksInput}.
    #
    # @option params [Array<String>] :bundle_ids
    #   <p>The bundle task IDs.</p>
    #            <p>Default: Describes all your bundle tasks.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>bundle-id</code> - The ID of the bundle task.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>error-code</code> - If the task failed, the error code returned.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>error-message</code> - If the task failed, the error message returned.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-id</code> - The ID of the instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>s3-prefix</code> - The beginning of the AMI name.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> |
    #              <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>update-time</code> - The time of the most recent update for the task.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeBundleTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_bundle_tasks(
    #     bundle_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeBundleTasksOutput
    #   resp.data.bundle_tasks #=> Array<BundleTask>
    #   resp.data.bundle_tasks[0] #=> Types::BundleTask
    #   resp.data.bundle_tasks[0].bundle_id #=> String
    #   resp.data.bundle_tasks[0].bundle_task_error #=> Types::BundleTaskError
    #   resp.data.bundle_tasks[0].bundle_task_error.code #=> String
    #   resp.data.bundle_tasks[0].bundle_task_error.message #=> String
    #   resp.data.bundle_tasks[0].instance_id #=> String
    #   resp.data.bundle_tasks[0].progress #=> String
    #   resp.data.bundle_tasks[0].start_time #=> Time
    #   resp.data.bundle_tasks[0].state #=> String, one of ["pending", "waiting-for-shutdown", "bundling", "storing", "cancelling", "complete", "failed"]
    #   resp.data.bundle_tasks[0].storage #=> Types::Storage
    #   resp.data.bundle_tasks[0].storage.s3 #=> Types::S3Storage
    #   resp.data.bundle_tasks[0].storage.s3.aws_access_key_id #=> String
    #   resp.data.bundle_tasks[0].storage.s3.bucket #=> String
    #   resp.data.bundle_tasks[0].storage.s3.prefix #=> String
    #   resp.data.bundle_tasks[0].storage.s3.upload_policy #=> String
    #   resp.data.bundle_tasks[0].storage.s3.upload_policy_signature #=> String
    #   resp.data.bundle_tasks[0].update_time #=> Time
    #
    def describe_bundle_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeBundleTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeBundleTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeBundleTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeBundleTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeBundleTasks,
        params_class: Params::DescribeBundleTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_bundle_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p>
    #          <p>To describe the address pools that were created when you provisioned the address
    #           ranges, use <a>DescribePublicIpv4Pools</a> or <a>DescribeIpv6Pools</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeByoipCidrsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeByoipCidrsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_byoip_cidrs(
    #     dry_run: false,
    #     max_results: 1, # required
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeByoipCidrsOutput
    #   resp.data.byoip_cidrs #=> Array<ByoipCidr>
    #   resp.data.byoip_cidrs[0] #=> Types::ByoipCidr
    #   resp.data.byoip_cidrs[0].cidr #=> String
    #   resp.data.byoip_cidrs[0].description #=> String
    #   resp.data.byoip_cidrs[0].status_message #=> String
    #   resp.data.byoip_cidrs[0].state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.next_token #=> String
    #
    def describe_byoip_cidrs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeByoipCidrsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeByoipCidrsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeByoipCidrs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeByoipCidrs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeByoipCidrs,
        params_class: Params::DescribeByoipCidrsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_byoip_cidrs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more Capacity Reservation Fleets.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCapacityReservationFleetsInput}.
    #
    # @option params [Array<String>] :capacity_reservation_fleet_ids
    #   <p>The IDs of the Capacity Reservation Fleets to describe.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   				           <p>
    #                     <code>state</code> - The state of the Fleet (<code>submitted</code> | <code>modifying</code> | <code>active</code> |
    #   					<code>partially_fulfilled</code> | <code>expiring</code> | <code>expired</code> | <code>cancelling</code> |
    #   					<code>cancelled</code> | <code>failed</code>).</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>instance-match-criteria</code> - The instance matching criteria for the Fleet. Only <code>open</code> is supported.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>tenancy</code> - The tenancy of the Fleet (<code>default</code> | <code>dedicated</code>).</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>allocation-strategy</code> - The allocation strategy used by the Fleet. Only <code>prioritized</code> is supported.</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeCapacityReservationFleetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_capacity_reservation_fleets(
    #     capacity_reservation_fleet_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCapacityReservationFleetsOutput
    #   resp.data.capacity_reservation_fleets #=> Array<CapacityReservationFleet>
    #   resp.data.capacity_reservation_fleets[0] #=> Types::CapacityReservationFleet
    #   resp.data.capacity_reservation_fleets[0].capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservation_fleets[0].capacity_reservation_fleet_arn #=> String
    #   resp.data.capacity_reservation_fleets[0].state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.capacity_reservation_fleets[0].total_target_capacity #=> Integer
    #   resp.data.capacity_reservation_fleets[0].total_fulfilled_capacity #=> Float
    #   resp.data.capacity_reservation_fleets[0].tenancy #=> String, one of ["default"]
    #   resp.data.capacity_reservation_fleets[0].end_date #=> Time
    #   resp.data.capacity_reservation_fleets[0].create_time #=> Time
    #   resp.data.capacity_reservation_fleets[0].instance_match_criteria #=> String, one of ["open"]
    #   resp.data.capacity_reservation_fleets[0].allocation_strategy #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications #=> Array<FleetCapacityReservation>
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0] #=> Types::FleetCapacityReservation
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].capacity_reservation_id #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].availability_zone_id #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise"]
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].availability_zone #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].total_instance_count #=> Integer
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].fulfilled_capacity #=> Float
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].ebs_optimized #=> Boolean
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].create_date #=> Time
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].weight #=> Float
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].priority #=> Integer
    #   resp.data.capacity_reservation_fleets[0].tags #=> Array<Tag>
    #   resp.data.capacity_reservation_fleets[0].tags[0] #=> Types::Tag
    #   resp.data.capacity_reservation_fleets[0].tags[0].key #=> String
    #   resp.data.capacity_reservation_fleets[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_capacity_reservation_fleets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCapacityReservationFleetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCapacityReservationFleetsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCapacityReservationFleets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeCapacityReservationFleets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeCapacityReservationFleets,
        params_class: Params::DescribeCapacityReservationFleetsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_capacity_reservation_fleets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the
    # 		    	Amazon Web Services Region that you're currently using.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCapacityReservationsInput}.
    #
    # @option params [Array<String>] :capacity_reservation_ids
    #   <p>The ID of the Capacity Reservation.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   	  	     <ul>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The type of instance for which the Capacity Reservation reserves capacity.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the Capacity Reservation.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-platform</code> - The type of operating system for which the Capacity Reservation reserves capacity.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone of the Capacity Reservation.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tenancy</code> - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the
    #   	  			following tenancy settings:</p>
    #   	  			         <ul>
    #                     <li>
    #                        <p>
    #                           <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p>
    #                     </li>
    #                  </ul>
    #   	  			      </li>
    #               <li>
    #                  <p>
    #                     <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation was created.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    #   	  		          <ul>
    #                     <li>
    #                        <p>
    #                           <code>active</code>- The Capacity Reservation is active and the capacity is available for your use.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request.
    #   	  				The reserved capacity is no longer available for your use.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters,
    #   	  				capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p>
    #   	  		             </li>
    #                  </ul>
    #   	  		       </li>
    #               <li>
    #                  <p>
    #                     <code>start-date</code> - The date and time at which the Capacity Reservation was started.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>end-date</code> - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is
    #   	  			released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>end-date-type</code> - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p>
    #   	  		          <ul>
    #                     <li>
    #                        <p>
    #                           <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p>
    #                     </li>
    #                  </ul>
    #   	  		       </li>
    #               <li>
    #                  <p>
    #                     <code>instance-match-criteria</code> - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p>
    #   	  			         <ul>
    #                     <li>
    #                        <p>
    #                           <code>open</code> - The Capacity Reservation accepts all instances that have matching
    #   							attributes (instance type, platform, and Availability Zone). Instances
    #   							that have matching attributes launch into the Capacity Reservation
    #   							automatically without specifying any additional parameters.</p>
    #                     </li>
    #                     <li>
    #                        <p>
    #                           <code>targeted</code> - The Capacity Reservation only accepts instances that have matching
    #   							attributes (instance type, platform, and Availability Zone), and
    #   							explicitly target the Capacity Reservation. This ensures that only
    #   							permitted instances can use the reserved capacity.</p>
    #                     </li>
    #                  </ul>
    #   	  		       </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeCapacityReservationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_capacity_reservations(
    #     capacity_reservation_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCapacityReservationsOutput
    #   resp.data.next_token #=> String
    #   resp.data.capacity_reservations #=> Array<CapacityReservation>
    #   resp.data.capacity_reservations[0] #=> Types::CapacityReservation
    #   resp.data.capacity_reservations[0].capacity_reservation_id #=> String
    #   resp.data.capacity_reservations[0].owner_id #=> String
    #   resp.data.capacity_reservations[0].capacity_reservation_arn #=> String
    #   resp.data.capacity_reservations[0].availability_zone_id #=> String
    #   resp.data.capacity_reservations[0].instance_type #=> String
    #   resp.data.capacity_reservations[0].instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise"]
    #   resp.data.capacity_reservations[0].availability_zone #=> String
    #   resp.data.capacity_reservations[0].tenancy #=> String, one of ["default", "dedicated"]
    #   resp.data.capacity_reservations[0].total_instance_count #=> Integer
    #   resp.data.capacity_reservations[0].available_instance_count #=> Integer
    #   resp.data.capacity_reservations[0].ebs_optimized #=> Boolean
    #   resp.data.capacity_reservations[0].ephemeral_storage #=> Boolean
    #   resp.data.capacity_reservations[0].state #=> String, one of ["active", "expired", "cancelled", "pending", "failed"]
    #   resp.data.capacity_reservations[0].start_date #=> Time
    #   resp.data.capacity_reservations[0].end_date #=> Time
    #   resp.data.capacity_reservations[0].end_date_type #=> String, one of ["unlimited", "limited"]
    #   resp.data.capacity_reservations[0].instance_match_criteria #=> String, one of ["open", "targeted"]
    #   resp.data.capacity_reservations[0].create_date #=> Time
    #   resp.data.capacity_reservations[0].tags #=> Array<Tag>
    #   resp.data.capacity_reservations[0].tags[0] #=> Types::Tag
    #   resp.data.capacity_reservations[0].tags[0].key #=> String
    #   resp.data.capacity_reservations[0].tags[0].value #=> String
    #   resp.data.capacity_reservations[0].outpost_arn #=> String
    #   resp.data.capacity_reservations[0].capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservations[0].placement_group_arn #=> String
    #
    def describe_capacity_reservations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCapacityReservationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCapacityReservationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCapacityReservations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeCapacityReservations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeCapacityReservations,
        params_class: Params::DescribeCapacityReservationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_capacity_reservations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your carrier gateways.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCarrierGatewaysInput}.
    #
    # @option params [Array<String>] :carrier_gateway_ids
    #   <p>One or more carrier gateway IDs.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>carrier-gateway-id</code> - The ID of the carrier gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the carrier gateway (<code>pending</code> |
    #                       <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>owner-id</code> - The Amazon Web Services account ID of the owner of the carrier gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpc-id</code> - The ID of the VPC associated with the carrier gateway.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeCarrierGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_carrier_gateways(
    #     carrier_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCarrierGatewaysOutput
    #   resp.data.carrier_gateways #=> Array<CarrierGateway>
    #   resp.data.carrier_gateways[0] #=> Types::CarrierGateway
    #   resp.data.carrier_gateways[0].carrier_gateway_id #=> String
    #   resp.data.carrier_gateways[0].vpc_id #=> String
    #   resp.data.carrier_gateways[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.carrier_gateways[0].owner_id #=> String
    #   resp.data.carrier_gateways[0].tags #=> Array<Tag>
    #   resp.data.carrier_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.carrier_gateways[0].tags[0].key #=> String
    #   resp.data.carrier_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_carrier_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCarrierGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCarrierGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCarrierGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeCarrierGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeCarrierGateways,
        params_class: Params::DescribeCarrierGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_carrier_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your linked EC2-Classic instances. This request only returns
    # 			information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot
    # 			use this request to return information about other instances.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeClassicLinkInstancesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #                         <p>
    #                     <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p>
    #                     </li>
    #               <li>
    #   				           <p>
    #                     <code>instance-id</code> - The ID of the instance.</p>
    #   			         </li>
    #               <li>
    #   			            <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   			         </li>
    #               <li>
    #
    #   				           <p>
    #   					             <code>vpc-id</code> - The ID of the VPC to which the instance is
    #   					linked.</p>
    #
    #   				           <p>
    #                     <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p>
    #
    #   			         </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :instance_ids
    #   <p>One or more instance IDs. Must be instances linked to a VPC through ClassicLink.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #   		       <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeClassicLinkInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_classic_link_instances(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeClassicLinkInstancesOutput
    #   resp.data.instances #=> Array<ClassicLinkInstance>
    #   resp.data.instances[0] #=> Types::ClassicLinkInstance
    #   resp.data.instances[0].groups #=> Array<GroupIdentifier>
    #   resp.data.instances[0].groups[0] #=> Types::GroupIdentifier
    #   resp.data.instances[0].groups[0].group_name #=> String
    #   resp.data.instances[0].groups[0].group_id #=> String
    #   resp.data.instances[0].instance_id #=> String
    #   resp.data.instances[0].tags #=> Array<Tag>
    #   resp.data.instances[0].tags[0] #=> Types::Tag
    #   resp.data.instances[0].tags[0].key #=> String
    #   resp.data.instances[0].tags[0].value #=> String
    #   resp.data.instances[0].vpc_id #=> String
    #   resp.data.next_token #=> String
    #
    def describe_classic_link_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeClassicLinkInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeClassicLinkInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeClassicLinkInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeClassicLinkInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeClassicLinkInstances,
        params_class: Params::DescribeClassicLinkInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_classic_link_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the authorization rules for a specified Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeClientVpnAuthorizationRulesInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #   	        <ul>
    #               <li>
    #                  <p>
    #                     <code>description</code> - The description of the authorization rule.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>destination-cidr</code> - The CIDR of the network to which the authorization rule
    #                       applies.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>group-id</code> - The ID of the Active Directory group to which the authorization rule grants access.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    #
    # @return [Types::DescribeClientVpnAuthorizationRulesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_client_vpn_authorization_rules(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeClientVpnAuthorizationRulesOutput
    #   resp.data.authorization_rules #=> Array<AuthorizationRule>
    #   resp.data.authorization_rules[0] #=> Types::AuthorizationRule
    #   resp.data.authorization_rules[0].client_vpn_endpoint_id #=> String
    #   resp.data.authorization_rules[0].description #=> String
    #   resp.data.authorization_rules[0].group_id #=> String
    #   resp.data.authorization_rules[0].access_all #=> Boolean
    #   resp.data.authorization_rules[0].destination_cidr #=> String
    #   resp.data.authorization_rules[0].status #=> Types::ClientVpnAuthorizationRuleStatus
    #   resp.data.authorization_rules[0].status.code #=> String, one of ["authorizing", "active", "failed", "revoking"]
    #   resp.data.authorization_rules[0].status.message #=> String
    #   resp.data.next_token #=> String
    #
    def describe_client_vpn_authorization_rules(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeClientVpnAuthorizationRulesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeClientVpnAuthorizationRulesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeClientVpnAuthorizationRules
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeClientVpnAuthorizationRules
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeClientVpnAuthorizationRules,
        params_class: Params::DescribeClientVpnAuthorizationRulesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_client_vpn_authorization_rules
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes active client connections and connections that have been terminated within the last 60
    # 			minutes for the specified Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeClientVpnConnectionsInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #   	        <ul>
    #               <li>
    #                  <p>
    #                     <code>connection-id</code> - The ID of the connection.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>username</code> - For Active Directory client authentication, the user name of the
    #                       client who established the client connection.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeClientVpnConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_client_vpn_connections(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeClientVpnConnectionsOutput
    #   resp.data.connections #=> Array<ClientVpnConnection>
    #   resp.data.connections[0] #=> Types::ClientVpnConnection
    #   resp.data.connections[0].client_vpn_endpoint_id #=> String
    #   resp.data.connections[0].timestamp #=> String
    #   resp.data.connections[0].connection_id #=> String
    #   resp.data.connections[0].username #=> String
    #   resp.data.connections[0].connection_established_time #=> String
    #   resp.data.connections[0].ingress_bytes #=> String
    #   resp.data.connections[0].egress_bytes #=> String
    #   resp.data.connections[0].ingress_packets #=> String
    #   resp.data.connections[0].egress_packets #=> String
    #   resp.data.connections[0].client_ip #=> String
    #   resp.data.connections[0].common_name #=> String
    #   resp.data.connections[0].status #=> Types::ClientVpnConnectionStatus
    #   resp.data.connections[0].status.code #=> String, one of ["active", "failed-to-terminate", "terminating", "terminated"]
    #   resp.data.connections[0].status.message #=> String
    #   resp.data.connections[0].connection_end_time #=> String
    #   resp.data.connections[0].posture_compliance_statuses #=> Array<String>
    #   resp.data.connections[0].posture_compliance_statuses[0] #=> String
    #   resp.data.next_token #=> String
    #
    def describe_client_vpn_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeClientVpnConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeClientVpnConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeClientVpnConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeClientVpnConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeClientVpnConnections,
        params_class: Params::DescribeClientVpnConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_client_vpn_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more Client VPN endpoints in the account.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeClientVpnEndpointsInput}.
    #
    # @option params [Array<String>] :client_vpn_endpoint_ids
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #   	        <ul>
    #               <li>
    #                  <p>
    #                     <code>endpoint-id</code> - The ID of the Client VPN endpoint.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transport-protocol</code> - The transport protocol (<code>tcp</code> |
    #                       <code>udp</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeClientVpnEndpointsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_client_vpn_endpoints(
    #     client_vpn_endpoint_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeClientVpnEndpointsOutput
    #   resp.data.client_vpn_endpoints #=> Array<ClientVpnEndpoint>
    #   resp.data.client_vpn_endpoints[0] #=> Types::ClientVpnEndpoint
    #   resp.data.client_vpn_endpoints[0].client_vpn_endpoint_id #=> String
    #   resp.data.client_vpn_endpoints[0].description #=> String
    #   resp.data.client_vpn_endpoints[0].status #=> Types::ClientVpnEndpointStatus
    #   resp.data.client_vpn_endpoints[0].status.code #=> String, one of ["pending-associate", "available", "deleting", "deleted"]
    #   resp.data.client_vpn_endpoints[0].status.message #=> String
    #   resp.data.client_vpn_endpoints[0].creation_time #=> String
    #   resp.data.client_vpn_endpoints[0].deletion_time #=> String
    #   resp.data.client_vpn_endpoints[0].dns_name #=> String
    #   resp.data.client_vpn_endpoints[0].client_cidr_block #=> String
    #   resp.data.client_vpn_endpoints[0].dns_servers #=> Array<String>
    #   resp.data.client_vpn_endpoints[0].dns_servers[0] #=> String
    #   resp.data.client_vpn_endpoints[0].split_tunnel #=> Boolean
    #   resp.data.client_vpn_endpoints[0].vpn_protocol #=> String, one of ["openvpn"]
    #   resp.data.client_vpn_endpoints[0].transport_protocol #=> String, one of ["tcp", "udp"]
    #   resp.data.client_vpn_endpoints[0].vpn_port #=> Integer
    #   resp.data.client_vpn_endpoints[0].associated_target_networks #=> Array<AssociatedTargetNetwork>
    #   resp.data.client_vpn_endpoints[0].associated_target_networks[0] #=> Types::AssociatedTargetNetwork
    #   resp.data.client_vpn_endpoints[0].associated_target_networks[0].network_id #=> String
    #   resp.data.client_vpn_endpoints[0].associated_target_networks[0].network_type #=> String, one of ["vpc"]
    #   resp.data.client_vpn_endpoints[0].server_certificate_arn #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options #=> Array<ClientVpnAuthentication>
    #   resp.data.client_vpn_endpoints[0].authentication_options[0] #=> Types::ClientVpnAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].type #=> String, one of ["certificate-authentication", "directory-service-authentication", "federated-authentication"]
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].active_directory #=> Types::DirectoryServiceAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].active_directory.directory_id #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].mutual_authentication #=> Types::CertificateAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].mutual_authentication.client_root_certificate_chain #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].federated_authentication #=> Types::FederatedAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].federated_authentication.saml_provider_arn #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].federated_authentication.self_service_saml_provider_arn #=> String
    #   resp.data.client_vpn_endpoints[0].connection_log_options #=> Types::ConnectionLogResponseOptions
    #   resp.data.client_vpn_endpoints[0].connection_log_options.enabled #=> Boolean
    #   resp.data.client_vpn_endpoints[0].connection_log_options.cloudwatch_log_group #=> String
    #   resp.data.client_vpn_endpoints[0].connection_log_options.cloudwatch_log_stream #=> String
    #   resp.data.client_vpn_endpoints[0].tags #=> Array<Tag>
    #   resp.data.client_vpn_endpoints[0].tags[0] #=> Types::Tag
    #   resp.data.client_vpn_endpoints[0].tags[0].key #=> String
    #   resp.data.client_vpn_endpoints[0].tags[0].value #=> String
    #   resp.data.client_vpn_endpoints[0].security_group_ids #=> Array<String>
    #   resp.data.client_vpn_endpoints[0].security_group_ids[0] #=> String
    #   resp.data.client_vpn_endpoints[0].vpc_id #=> String
    #   resp.data.client_vpn_endpoints[0].self_service_portal_url #=> String
    #   resp.data.client_vpn_endpoints[0].client_connect_options #=> Types::ClientConnectResponseOptions
    #   resp.data.client_vpn_endpoints[0].client_connect_options.enabled #=> Boolean
    #   resp.data.client_vpn_endpoints[0].client_connect_options.lambda_function_arn #=> String
    #   resp.data.client_vpn_endpoints[0].client_connect_options.status #=> Types::ClientVpnEndpointAttributeStatus
    #   resp.data.client_vpn_endpoints[0].client_connect_options.status.code #=> String, one of ["applying", "applied"]
    #   resp.data.client_vpn_endpoints[0].client_connect_options.status.message #=> String
    #   resp.data.next_token #=> String
    #
    def describe_client_vpn_endpoints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeClientVpnEndpointsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeClientVpnEndpointsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeClientVpnEndpoints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeClientVpnEndpoints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeClientVpnEndpoints,
        params_class: Params::DescribeClientVpnEndpointsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_client_vpn_endpoints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the routes for the specified Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeClientVpnRoutesInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #   	        <ul>
    #               <li>
    #                  <p>
    #                     <code>destination-cidr</code> - The CIDR of the route destination.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>origin</code> - How the route was associated with the Client VPN endpoint (<code>associate</code> | <code>add-route</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>target-subnet</code> - The ID of the subnet through which traffic is routed.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeClientVpnRoutesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_client_vpn_routes(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeClientVpnRoutesOutput
    #   resp.data.routes #=> Array<ClientVpnRoute>
    #   resp.data.routes[0] #=> Types::ClientVpnRoute
    #   resp.data.routes[0].client_vpn_endpoint_id #=> String
    #   resp.data.routes[0].destination_cidr #=> String
    #   resp.data.routes[0].target_subnet #=> String
    #   resp.data.routes[0].type #=> String
    #   resp.data.routes[0].origin #=> String
    #   resp.data.routes[0].status #=> Types::ClientVpnRouteStatus
    #   resp.data.routes[0].status.code #=> String, one of ["creating", "active", "failed", "deleting"]
    #   resp.data.routes[0].status.message #=> String
    #   resp.data.routes[0].description #=> String
    #   resp.data.next_token #=> String
    #
    def describe_client_vpn_routes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeClientVpnRoutesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeClientVpnRoutesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeClientVpnRoutes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeClientVpnRoutes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeClientVpnRoutes,
        params_class: Params::DescribeClientVpnRoutesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_client_vpn_routes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the target networks associated with the specified Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeClientVpnTargetNetworksInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Array<String>] :association_ids
    #   <p>The IDs of the target network associations.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #   	        <ul>
    #               <li>
    #                  <p>
    #                     <code>association-id</code> - The ID of the association.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>target-network-id</code> - The ID of the subnet specified as the target network.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-id</code> - The ID of the VPC in which the target network is located.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeClientVpnTargetNetworksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_client_vpn_target_networks(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     association_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeClientVpnTargetNetworksOutput
    #   resp.data.client_vpn_target_networks #=> Array<TargetNetwork>
    #   resp.data.client_vpn_target_networks[0] #=> Types::TargetNetwork
    #   resp.data.client_vpn_target_networks[0].association_id #=> String
    #   resp.data.client_vpn_target_networks[0].vpc_id #=> String
    #   resp.data.client_vpn_target_networks[0].target_network_id #=> String
    #   resp.data.client_vpn_target_networks[0].client_vpn_endpoint_id #=> String
    #   resp.data.client_vpn_target_networks[0].status #=> Types::AssociationStatus
    #   resp.data.client_vpn_target_networks[0].status.code #=> String, one of ["associating", "associated", "association-failed", "disassociating", "disassociated"]
    #   resp.data.client_vpn_target_networks[0].status.message #=> String
    #   resp.data.client_vpn_target_networks[0].security_groups #=> Array<String>
    #   resp.data.client_vpn_target_networks[0].security_groups[0] #=> String
    #   resp.data.next_token #=> String
    #
    def describe_client_vpn_target_networks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeClientVpnTargetNetworksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeClientVpnTargetNetworksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeClientVpnTargetNetworks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeClientVpnTargetNetworks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeClientVpnTargetNetworks,
        params_class: Params::DescribeClientVpnTargetNetworksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_client_vpn_target_networks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified customer-owned address pools or all of your customer-owned address pools.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCoipPoolsInput}.
    #
    # @option params [Array<String>] :pool_ids
    #   <p>The IDs of the address pools.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters. The following are the possible values:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>coip-pool.pool-id</code>
    #                  </p>
    #               </li>
    #            </ul>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>coip-pool.local-gateway-route-table-id</code>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeCoipPoolsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_coip_pools(
    #     pool_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCoipPoolsOutput
    #   resp.data.coip_pools #=> Array<CoipPool>
    #   resp.data.coip_pools[0] #=> Types::CoipPool
    #   resp.data.coip_pools[0].pool_id #=> String
    #   resp.data.coip_pools[0].pool_cidrs #=> Array<String>
    #   resp.data.coip_pools[0].pool_cidrs[0] #=> String
    #   resp.data.coip_pools[0].local_gateway_route_table_id #=> String
    #   resp.data.coip_pools[0].tags #=> Array<Tag>
    #   resp.data.coip_pools[0].tags[0] #=> Types::Tag
    #   resp.data.coip_pools[0].tags[0].key #=> String
    #   resp.data.coip_pools[0].tags[0].value #=> String
    #   resp.data.coip_pools[0].pool_arn #=> String
    #   resp.data.next_token #=> String
    #
    def describe_coip_pools(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCoipPoolsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCoipPoolsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCoipPools
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeCoipPools
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeCoipPools,
        params_class: Params::DescribeCoipPoolsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_coip_pools
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the
    #    <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p>
    #          <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeConversionTasksInput}.
    #
    # @option params [Array<String>] :conversion_task_ids
    #   <p>The conversion task IDs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeConversionTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_conversion_tasks(
    #     conversion_task_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeConversionTasksOutput
    #   resp.data.conversion_tasks #=> Array<ConversionTask>
    #   resp.data.conversion_tasks[0] #=> Types::ConversionTask
    #   resp.data.conversion_tasks[0].conversion_task_id #=> String
    #   resp.data.conversion_tasks[0].expiration_time #=> String
    #   resp.data.conversion_tasks[0].import_instance #=> Types::ImportInstanceTaskDetails
    #   resp.data.conversion_tasks[0].import_instance.description #=> String
    #   resp.data.conversion_tasks[0].import_instance.instance_id #=> String
    #   resp.data.conversion_tasks[0].import_instance.platform #=> String, one of ["Windows"]
    #   resp.data.conversion_tasks[0].import_instance.volumes #=> Array<ImportInstanceVolumeDetailItem>
    #   resp.data.conversion_tasks[0].import_instance.volumes[0] #=> Types::ImportInstanceVolumeDetailItem
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].availability_zone #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].bytes_converted #=> Integer
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].description #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image #=> Types::DiskImageDescription
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.checksum #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.import_manifest_url #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.size #=> Integer
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].status #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].status_message #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].volume.id #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].volume.size #=> Integer
    #   resp.data.conversion_tasks[0].import_volume #=> Types::ImportVolumeTaskDetails
    #   resp.data.conversion_tasks[0].import_volume.availability_zone #=> String
    #   resp.data.conversion_tasks[0].import_volume.bytes_converted #=> Integer
    #   resp.data.conversion_tasks[0].import_volume.description #=> String
    #   resp.data.conversion_tasks[0].import_volume.image #=> Types::DiskImageDescription
    #   resp.data.conversion_tasks[0].import_volume.volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_tasks[0].state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.conversion_tasks[0].status_message #=> String
    #   resp.data.conversion_tasks[0].tags #=> Array<Tag>
    #   resp.data.conversion_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.conversion_tasks[0].tags[0].key #=> String
    #   resp.data.conversion_tasks[0].tags[0].value #=> String
    #
    def describe_conversion_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeConversionTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeConversionTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeConversionTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeConversionTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeConversionTasks,
        params_class: Params::DescribeConversionTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_conversion_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your VPN customer gateways.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeCustomerGatewaysInput}.
    #
    # @option params [Array<String>] :customer_gateway_ids
    #   <p>One or more customer gateway IDs.</p>
    #           <p>Default: Describes all your customer gateways.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP)
    #                       Autonomous System Number (ASN).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>customer-gateway-id</code> - The ID of the customer gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ip-address</code> - The IP address of the customer gateway's
    #                       Internet-routable external interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the customer gateway (<code>pending</code> |
    #                           <code>available</code> | <code>deleting</code> |
    #                       <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>type</code> - The type of customer gateway. Currently, the only
    #                       supported type is <code>ipsec.1</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeCustomerGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_customer_gateways(
    #     customer_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeCustomerGatewaysOutput
    #   resp.data.customer_gateways #=> Array<CustomerGateway>
    #   resp.data.customer_gateways[0] #=> Types::CustomerGateway
    #   resp.data.customer_gateways[0].bgp_asn #=> String
    #   resp.data.customer_gateways[0].customer_gateway_id #=> String
    #   resp.data.customer_gateways[0].ip_address #=> String
    #   resp.data.customer_gateways[0].certificate_arn #=> String
    #   resp.data.customer_gateways[0].state #=> String
    #   resp.data.customer_gateways[0].type #=> String
    #   resp.data.customer_gateways[0].device_name #=> String
    #   resp.data.customer_gateways[0].tags #=> Array<Tag>
    #   resp.data.customer_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.customer_gateways[0].tags[0].key #=> String
    #   resp.data.customer_gateways[0].tags[0].value #=> String
    #
    def describe_customer_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeCustomerGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeCustomerGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeCustomerGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeCustomerGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeCustomerGateways,
        params_class: Params::DescribeCustomerGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_customer_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your DHCP options sets.</p>
    # 		       <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeDhcpOptionsInput}.
    #
    # @option params [Array<String>] :dhcp_options_ids
    #   <p>The IDs of one or more DHCP options sets.</p>
    #   		       <p>Default: Describes all your DHCP options sets.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   		             <p>
    #                     <code>dhcp-options-id</code> - The ID of a DHCP options set.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>value</code> - The value for one of the options.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the DHCP options set.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   		          </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeDhcpOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_dhcp_options(
    #     dhcp_options_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeDhcpOptionsOutput
    #   resp.data.dhcp_options #=> Array<DhcpOptions>
    #   resp.data.dhcp_options[0] #=> Types::DhcpOptions
    #   resp.data.dhcp_options[0].dhcp_configurations #=> Array<DhcpConfiguration>
    #   resp.data.dhcp_options[0].dhcp_configurations[0] #=> Types::DhcpConfiguration
    #   resp.data.dhcp_options[0].dhcp_configurations[0].key #=> String
    #   resp.data.dhcp_options[0].dhcp_configurations[0].values #=> Array<AttributeValue>
    #   resp.data.dhcp_options[0].dhcp_configurations[0].values[0] #=> Types::AttributeValue
    #   resp.data.dhcp_options[0].dhcp_configurations[0].values[0].value #=> String
    #   resp.data.dhcp_options[0].dhcp_options_id #=> String
    #   resp.data.dhcp_options[0].owner_id #=> String
    #   resp.data.dhcp_options[0].tags #=> Array<Tag>
    #   resp.data.dhcp_options[0].tags[0] #=> Types::Tag
    #   resp.data.dhcp_options[0].tags[0].key #=> String
    #   resp.data.dhcp_options[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_dhcp_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeDhcpOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeDhcpOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeDhcpOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeDhcpOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeDhcpOptions,
        params_class: Params::DescribeDhcpOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_dhcp_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your egress-only internet gateways.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeEgressOnlyInternetGatewaysInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :egress_only_internet_gateway_ids
    #   <p>One or more egress-only internet gateway IDs.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #       	    <ul>
    #               <li>
    #       			        <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #       		      </li>
    #               <li>
    #       			        <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #       		      </li>
    #            </ul>
    #
    # @return [Types::DescribeEgressOnlyInternetGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_egress_only_internet_gateways(
    #     dry_run: false,
    #     egress_only_internet_gateway_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeEgressOnlyInternetGatewaysOutput
    #   resp.data.egress_only_internet_gateways #=> Array<EgressOnlyInternetGateway>
    #   resp.data.egress_only_internet_gateways[0] #=> Types::EgressOnlyInternetGateway
    #   resp.data.egress_only_internet_gateways[0].attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.egress_only_internet_gateways[0].attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.egress_only_internet_gateways[0].attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.egress_only_internet_gateways[0].attachments[0].vpc_id #=> String
    #   resp.data.egress_only_internet_gateways[0].egress_only_internet_gateway_id #=> String
    #   resp.data.egress_only_internet_gateways[0].tags #=> Array<Tag>
    #   resp.data.egress_only_internet_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.egress_only_internet_gateways[0].tags[0].key #=> String
    #   resp.data.egress_only_internet_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_egress_only_internet_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeEgressOnlyInternetGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeEgressOnlyInternetGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeEgressOnlyInternetGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeEgressOnlyInternetGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeEgressOnlyInternetGateways,
        params_class: Params::DescribeEgressOnlyInternetGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_egress_only_internet_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Elastic Graphics accelerator associated with your instances. For more information
    #             about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeElasticGpusInput}.
    #
    # @option params [Array<String>] :elastic_gpu_ids
    #   <p>The Elastic Graphics accelerator IDs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>availability-zone</code> - The Availability Zone in which the
    #                       Elastic Graphics accelerator resides.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>elastic-gpu-health</code> - The status of the Elastic Graphics accelerator
    #                           (<code>OK</code> | <code>IMPAIRED</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>elastic-gpu-state</code> - The state of the Elastic Graphics accelerator
    #                           (<code>ATTACHED</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator; for example,
    #                           <code>eg1.medium</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-id</code> - The ID of the instance to which the
    #                       Elastic Graphics accelerator is associated.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value. This value
    #               can be between 5 and 1000.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @return [Types::DescribeElasticGpusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_elastic_gpus(
    #     elastic_gpu_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeElasticGpusOutput
    #   resp.data.elastic_gpu_set #=> Array<ElasticGpus>
    #   resp.data.elastic_gpu_set[0] #=> Types::ElasticGpus
    #   resp.data.elastic_gpu_set[0].elastic_gpu_id #=> String
    #   resp.data.elastic_gpu_set[0].availability_zone #=> String
    #   resp.data.elastic_gpu_set[0].elastic_gpu_type #=> String
    #   resp.data.elastic_gpu_set[0].elastic_gpu_health #=> Types::ElasticGpuHealth
    #   resp.data.elastic_gpu_set[0].elastic_gpu_health.status #=> String, one of ["OK", "IMPAIRED"]
    #   resp.data.elastic_gpu_set[0].elastic_gpu_state #=> String, one of ["ATTACHED"]
    #   resp.data.elastic_gpu_set[0].instance_id #=> String
    #   resp.data.elastic_gpu_set[0].tags #=> Array<Tag>
    #   resp.data.elastic_gpu_set[0].tags[0] #=> Types::Tag
    #   resp.data.elastic_gpu_set[0].tags[0].key #=> String
    #   resp.data.elastic_gpu_set[0].tags[0].value #=> String
    #   resp.data.max_results #=> Integer
    #   resp.data.next_token #=> String
    #
    def describe_elastic_gpus(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeElasticGpusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeElasticGpusInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeElasticGpus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeElasticGpus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeElasticGpus,
        params_class: Params::DescribeElasticGpusOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_elastic_gpus
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified export image tasks or all of your export image tasks.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeExportImageTasksInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>,
    #       <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.</p>
    #
    # @option params [Array<String>] :export_image_task_ids
    #   <p>The IDs of the export image tasks.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call.</p>
    #
    # @option params [String] :next_token
    #   <p>A token that indicates the next page of results.</p>
    #
    # @return [Types::DescribeExportImageTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_export_image_tasks(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     export_image_task_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeExportImageTasksOutput
    #   resp.data.export_image_tasks #=> Array<ExportImageTask>
    #   resp.data.export_image_tasks[0] #=> Types::ExportImageTask
    #   resp.data.export_image_tasks[0].description #=> String
    #   resp.data.export_image_tasks[0].export_image_task_id #=> String
    #   resp.data.export_image_tasks[0].image_id #=> String
    #   resp.data.export_image_tasks[0].progress #=> String
    #   resp.data.export_image_tasks[0].s3_export_location #=> Types::ExportTaskS3Location
    #   resp.data.export_image_tasks[0].s3_export_location.s3_bucket #=> String
    #   resp.data.export_image_tasks[0].s3_export_location.s3_prefix #=> String
    #   resp.data.export_image_tasks[0].status #=> String
    #   resp.data.export_image_tasks[0].status_message #=> String
    #   resp.data.export_image_tasks[0].tags #=> Array<Tag>
    #   resp.data.export_image_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.export_image_tasks[0].tags[0].key #=> String
    #   resp.data.export_image_tasks[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_export_image_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeExportImageTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeExportImageTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeExportImageTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeExportImageTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeExportImageTasks,
        params_class: Params::DescribeExportImageTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_export_image_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified export instance tasks or all of your export instance tasks.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeExportTasksInput}.
    #
    # @option params [Array<String>] :export_task_ids
    #   <p>The export task IDs.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>the filters for the export tasks.</p>
    #
    # @return [Types::DescribeExportTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_export_tasks(
    #     export_task_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeExportTasksOutput
    #   resp.data.export_tasks #=> Array<ExportTask>
    #   resp.data.export_tasks[0] #=> Types::ExportTask
    #   resp.data.export_tasks[0].description #=> String
    #   resp.data.export_tasks[0].export_task_id #=> String
    #   resp.data.export_tasks[0].export_to_s3_task #=> Types::ExportToS3Task
    #   resp.data.export_tasks[0].export_to_s3_task.container_format #=> String, one of ["ova"]
    #   resp.data.export_tasks[0].export_to_s3_task.disk_image_format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.export_tasks[0].export_to_s3_task.s3_bucket #=> String
    #   resp.data.export_tasks[0].export_to_s3_task.s3_key #=> String
    #   resp.data.export_tasks[0].instance_export_details #=> Types::InstanceExportDetails
    #   resp.data.export_tasks[0].instance_export_details.instance_id #=> String
    #   resp.data.export_tasks[0].instance_export_details.target_environment #=> String, one of ["citrix", "vmware", "microsoft"]
    #   resp.data.export_tasks[0].state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.export_tasks[0].status_message #=> String
    #   resp.data.export_tasks[0].tags #=> Array<Tag>
    #   resp.data.export_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.export_tasks[0].tags[0].key #=> String
    #   resp.data.export_tasks[0].tags[0].value #=> String
    #
    def describe_export_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeExportTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeExportTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeExportTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeExportTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeExportTasks,
        params_class: Params::DescribeExportTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_export_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the state of fast snapshot restores for your snapshots.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFastSnapshotRestoresInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code>: The Availability Zone of the snapshot.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code>: The ID of the Amazon Web Services account that enabled fast snapshot restore on the snapshot.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>snapshot-id</code>: The ID of the snapshot.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code>: The state of fast snapshot restores for the snapshot
    #            (<code>enabling</code> |
    #             <code>optimizing</code> |
    #             <code>enabled</code> |
    #             <code>disabling</code> |
    #             <code>disabled</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeFastSnapshotRestoresOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_fast_snapshot_restores(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFastSnapshotRestoresOutput
    #   resp.data.fast_snapshot_restores #=> Array<DescribeFastSnapshotRestoreSuccessItem>
    #   resp.data.fast_snapshot_restores[0] #=> Types::DescribeFastSnapshotRestoreSuccessItem
    #   resp.data.fast_snapshot_restores[0].snapshot_id #=> String
    #   resp.data.fast_snapshot_restores[0].availability_zone #=> String
    #   resp.data.fast_snapshot_restores[0].state #=> String, one of ["enabling", "optimizing", "enabled", "disabling", "disabled"]
    #   resp.data.fast_snapshot_restores[0].state_transition_reason #=> String
    #   resp.data.fast_snapshot_restores[0].owner_id #=> String
    #   resp.data.fast_snapshot_restores[0].owner_alias #=> String
    #   resp.data.fast_snapshot_restores[0].enabling_time #=> Time
    #   resp.data.fast_snapshot_restores[0].optimizing_time #=> Time
    #   resp.data.fast_snapshot_restores[0].enabled_time #=> Time
    #   resp.data.fast_snapshot_restores[0].disabling_time #=> Time
    #   resp.data.fast_snapshot_restores[0].disabled_time #=> Time
    #   resp.data.next_token #=> String
    #
    def describe_fast_snapshot_restores(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFastSnapshotRestoresInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFastSnapshotRestoresInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFastSnapshotRestores
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFastSnapshotRestores
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFastSnapshotRestores,
        params_class: Params::DescribeFastSnapshotRestoresOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_fast_snapshot_restores
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the events for the specified EC2 Fleet during the specified time.</p>
    #          <p>EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures
    #          that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events
    #          are available for 48 hours.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor fleet events using Amazon EventBridge</a> in the
    #             <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFleetHistoryInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :event_type
    #   <p>The type of events to describe. By default, all events are described.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1 and
    #            1000. The default value is 1000. To retrieve the remaining results, make another call with
    #            the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [String] :fleet_id
    #   <p>The ID of the EC2 Fleet.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start date and time for the events, in UTC format (for example,
    #               <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #
    # @return [Types::DescribeFleetHistoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_fleet_history(
    #     dry_run: false,
    #     event_type: 'instance-change', # accepts ["instance-change", "fleet-change", "service-error"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     fleet_id: 'FleetId', # required
    #     start_time: Time.now # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFleetHistoryOutput
    #   resp.data.history_records #=> Array<HistoryRecordEntry>
    #   resp.data.history_records[0] #=> Types::HistoryRecordEntry
    #   resp.data.history_records[0].event_information #=> Types::EventInformation
    #   resp.data.history_records[0].event_information.event_description #=> String
    #   resp.data.history_records[0].event_information.event_sub_type #=> String
    #   resp.data.history_records[0].event_information.instance_id #=> String
    #   resp.data.history_records[0].event_type #=> String, one of ["instance-change", "fleet-change", "service-error"]
    #   resp.data.history_records[0].timestamp #=> Time
    #   resp.data.last_evaluated_time #=> Time
    #   resp.data.next_token #=> String
    #   resp.data.fleet_id #=> String
    #   resp.data.start_time #=> Time
    #
    def describe_fleet_history(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFleetHistoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFleetHistoryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFleetHistory
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFleetHistory
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFleetHistory,
        params_class: Params::DescribeFleetHistoryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_fleet_history
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the running instances for the specified EC2 Fleet.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html#monitor-ec2-fleet">Monitoring your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFleetInstancesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1 and
    #            1000. The default value is 1000. To retrieve the remaining results, make another call with
    #            the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [String] :fleet_id
    #   <p>The ID of the EC2 Fleet.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::DescribeFleetInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_fleet_instances(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     fleet_id: 'FleetId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFleetInstancesOutput
    #   resp.data.active_instances #=> Array<ActiveInstance>
    #   resp.data.active_instances[0] #=> Types::ActiveInstance
    #   resp.data.active_instances[0].instance_id #=> String
    #   resp.data.active_instances[0].instance_type #=> String
    #   resp.data.active_instances[0].spot_instance_request_id #=> String
    #   resp.data.active_instances[0].instance_health #=> String, one of ["healthy", "unhealthy"]
    #   resp.data.next_token #=> String
    #   resp.data.fleet_id #=> String
    #
    def describe_fleet_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFleetInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFleetInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFleetInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFleetInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFleetInstances,
        params_class: Params::DescribeFleetInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_fleet_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified EC2 Fleets or all of your EC2 Fleets.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html#monitor-ec2-fleet">Monitoring your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFleetsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1 and
    #            1000. The default value is 1000. To retrieve the remaining results, make another call with
    #            the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [Array<String>] :fleet_ids
    #   <p>The ID of the EC2 Fleets.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>activity-status</code> - The progress of the EC2 Fleet ( <code>error</code> |
    #                     <code>pending-fulfillment</code> | <code>pending-termination</code> |
    #                     <code>fulfilled</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>excess-capacity-termination-policy</code> - Indicates whether to terminate
    #                  running instances if the target capacity is decreased below the current EC2 Fleet size
    #                     (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>fleet-state</code> - The state of the EC2 Fleet (<code>submitted</code> |
    #                     <code>active</code> | <code>deleted</code> | <code>failed</code> |
    #                     <code>deleted-running</code> | <code>deleted-terminating</code> |
    #                     <code>modifying</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet should replace
    #                  unhealthy instances (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>type</code> - The type of request (<code>instant</code> |
    #                     <code>request</code> | <code>maintain</code>).</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::DescribeFleetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_fleets(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     fleet_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFleetsOutput
    #   resp.data.next_token #=> String
    #   resp.data.fleets #=> Array<FleetData>
    #   resp.data.fleets[0] #=> Types::FleetData
    #   resp.data.fleets[0].activity_status #=> String, one of ["error", "pending_fulfillment", "pending_termination", "fulfilled"]
    #   resp.data.fleets[0].create_time #=> Time
    #   resp.data.fleets[0].fleet_id #=> String
    #   resp.data.fleets[0].fleet_state #=> String, one of ["submitted", "active", "deleted", "failed", "deleted_running", "deleted_terminating", "modifying"]
    #   resp.data.fleets[0].client_token #=> String
    #   resp.data.fleets[0].excess_capacity_termination_policy #=> String, one of ["no-termination", "termination"]
    #   resp.data.fleets[0].fulfilled_capacity #=> Float
    #   resp.data.fleets[0].fulfilled_on_demand_capacity #=> Float
    #   resp.data.fleets[0].launch_template_configs #=> Array<FleetLaunchTemplateConfig>
    #   resp.data.fleets[0].launch_template_configs[0] #=> Types::FleetLaunchTemplateConfig
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification.launch_template_id #=> String
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification.launch_template_name #=> String
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification.version #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides #=> Array<FleetLaunchTemplateOverrides>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0] #=> Types::FleetLaunchTemplateOverrides
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].max_price #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].subnet_id #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].availability_zone #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].weighted_capacity #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].priority #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].placement #=> Types::PlacementResponse
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].placement.group_name #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements #=> Types::InstanceRequirements
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.instance_generations #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_manufacturers[0] #=> String, one of ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_names[0] #=> String, one of ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.fleets[0].target_capacity_specification #=> Types::TargetCapacitySpecification
    #   resp.data.fleets[0].target_capacity_specification.total_target_capacity #=> Integer
    #   resp.data.fleets[0].target_capacity_specification.on_demand_target_capacity #=> Integer
    #   resp.data.fleets[0].target_capacity_specification.spot_target_capacity #=> Integer
    #   resp.data.fleets[0].target_capacity_specification.default_target_capacity_type #=> String, one of ["spot", "on-demand"]
    #   resp.data.fleets[0].target_capacity_specification.target_capacity_unit_type #=> String, one of ["vcpu", "memory-mib", "units"]
    #   resp.data.fleets[0].terminate_instances_with_expiration #=> Boolean
    #   resp.data.fleets[0].type #=> String, one of ["request", "maintain", "instant"]
    #   resp.data.fleets[0].valid_from #=> Time
    #   resp.data.fleets[0].valid_until #=> Time
    #   resp.data.fleets[0].replace_unhealthy_instances #=> Boolean
    #   resp.data.fleets[0].spot_options #=> Types::SpotOptions
    #   resp.data.fleets[0].spot_options.allocation_strategy #=> String, one of ["lowest-price", "diversified", "capacity-optimized", "capacity-optimized-prioritized"]
    #   resp.data.fleets[0].spot_options.maintenance_strategies #=> Types::FleetSpotMaintenanceStrategies
    #   resp.data.fleets[0].spot_options.maintenance_strategies.capacity_rebalance #=> Types::FleetSpotCapacityRebalance
    #   resp.data.fleets[0].spot_options.maintenance_strategies.capacity_rebalance.replacement_strategy #=> String, one of ["launch", "launch-before-terminate"]
    #   resp.data.fleets[0].spot_options.maintenance_strategies.capacity_rebalance.termination_delay #=> Integer
    #   resp.data.fleets[0].spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.fleets[0].spot_options.instance_pools_to_use_count #=> Integer
    #   resp.data.fleets[0].spot_options.single_instance_type #=> Boolean
    #   resp.data.fleets[0].spot_options.single_availability_zone #=> Boolean
    #   resp.data.fleets[0].spot_options.min_target_capacity #=> Integer
    #   resp.data.fleets[0].spot_options.max_total_price #=> String
    #   resp.data.fleets[0].on_demand_options #=> Types::OnDemandOptions
    #   resp.data.fleets[0].on_demand_options.allocation_strategy #=> String, one of ["lowest-price", "prioritized"]
    #   resp.data.fleets[0].on_demand_options.capacity_reservation_options #=> Types::CapacityReservationOptions
    #   resp.data.fleets[0].on_demand_options.capacity_reservation_options.usage_strategy #=> String, one of ["use-capacity-reservations-first"]
    #   resp.data.fleets[0].on_demand_options.single_instance_type #=> Boolean
    #   resp.data.fleets[0].on_demand_options.single_availability_zone #=> Boolean
    #   resp.data.fleets[0].on_demand_options.min_target_capacity #=> Integer
    #   resp.data.fleets[0].on_demand_options.max_total_price #=> String
    #   resp.data.fleets[0].tags #=> Array<Tag>
    #   resp.data.fleets[0].tags[0] #=> Types::Tag
    #   resp.data.fleets[0].tags[0].key #=> String
    #   resp.data.fleets[0].tags[0].value #=> String
    #   resp.data.fleets[0].errors #=> Array<DescribeFleetError>
    #   resp.data.fleets[0].errors[0] #=> Types::DescribeFleetError
    #   resp.data.fleets[0].errors[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.fleets[0].errors[0].launch_template_and_overrides.launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.fleets[0].errors[0].launch_template_and_overrides.overrides #=> Types::FleetLaunchTemplateOverrides
    #   resp.data.fleets[0].errors[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.fleets[0].errors[0].error_code #=> String
    #   resp.data.fleets[0].errors[0].error_message #=> String
    #   resp.data.fleets[0].instances #=> Array<DescribeFleetsInstances>
    #   resp.data.fleets[0].instances[0] #=> Types::DescribeFleetsInstances
    #   resp.data.fleets[0].instances[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.fleets[0].instances[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.fleets[0].instances[0].instance_ids #=> Array<String>
    #   resp.data.fleets[0].instances[0].instance_ids[0] #=> String
    #   resp.data.fleets[0].instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.fleets[0].instances[0].platform #=> String, one of ["Windows"]
    #   resp.data.fleets[0].context #=> String
    #
    def describe_fleets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFleetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFleetsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFleets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFleets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFleets,
        params_class: Params::DescribeFleetsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_fleets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more flow logs. To view the information in your flow logs (the log
    #             streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs
    #             API.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFlowLogsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filter
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> |
    #                       <code>FAILED</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>log-destination-type</code> - The type of destination to which the flow
    #                       log publishes data. Possible destination types include
    #                       <code>cloud-watch-logs</code> and <code>s3</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>flow-log-id</code> - The ID of the flow log.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>log-group-name</code> - The name of the log group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> |
    #                       <code>REJECT</code> | <code>ALL</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :flow_log_ids
    #   <p>One or more flow log IDs.</p>
    #           <p>Constraint: Maximum of 1000 flow log IDs.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeFlowLogsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_flow_logs(
    #     dry_run: false,
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     flow_log_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFlowLogsOutput
    #   resp.data.flow_logs #=> Array<FlowLog>
    #   resp.data.flow_logs[0] #=> Types::FlowLog
    #   resp.data.flow_logs[0].creation_time #=> Time
    #   resp.data.flow_logs[0].deliver_logs_error_message #=> String
    #   resp.data.flow_logs[0].deliver_logs_permission_arn #=> String
    #   resp.data.flow_logs[0].deliver_logs_status #=> String
    #   resp.data.flow_logs[0].flow_log_id #=> String
    #   resp.data.flow_logs[0].flow_log_status #=> String
    #   resp.data.flow_logs[0].log_group_name #=> String
    #   resp.data.flow_logs[0].resource_id #=> String
    #   resp.data.flow_logs[0].traffic_type #=> String, one of ["ACCEPT", "REJECT", "ALL"]
    #   resp.data.flow_logs[0].log_destination_type #=> String, one of ["cloud-watch-logs", "s3"]
    #   resp.data.flow_logs[0].log_destination #=> String
    #   resp.data.flow_logs[0].log_format #=> String
    #   resp.data.flow_logs[0].tags #=> Array<Tag>
    #   resp.data.flow_logs[0].tags[0] #=> Types::Tag
    #   resp.data.flow_logs[0].tags[0].key #=> String
    #   resp.data.flow_logs[0].tags[0].value #=> String
    #   resp.data.flow_logs[0].max_aggregation_interval #=> Integer
    #   resp.data.flow_logs[0].destination_options #=> Types::DestinationOptionsResponse
    #   resp.data.flow_logs[0].destination_options.file_format #=> String, one of ["plain-text", "parquet"]
    #   resp.data.flow_logs[0].destination_options.hive_compatible_partitions #=> Boolean
    #   resp.data.flow_logs[0].destination_options.per_hour_partition #=> Boolean
    #   resp.data.next_token #=> String
    #
    def describe_flow_logs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFlowLogsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFlowLogsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFlowLogs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFlowLogs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFlowLogs,
        params_class: Params::DescribeFlowLogsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_flow_logs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFpgaImageAttributeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :fpga_image_id
    #   <p>The ID of the AFI.</p>
    #
    # @option params [String] :attribute
    #   <p>The AFI attribute.</p>
    #
    # @return [Types::DescribeFpgaImageAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_fpga_image_attribute(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId', # required
    #     attribute: 'description' # required - accepts ["description", "name", "loadPermission", "productCodes"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFpgaImageAttributeOutput
    #   resp.data.fpga_image_attribute #=> Types::FpgaImageAttribute
    #   resp.data.fpga_image_attribute.fpga_image_id #=> String
    #   resp.data.fpga_image_attribute.name #=> String
    #   resp.data.fpga_image_attribute.description #=> String
    #   resp.data.fpga_image_attribute.load_permissions #=> Array<LoadPermission>
    #   resp.data.fpga_image_attribute.load_permissions[0] #=> Types::LoadPermission
    #   resp.data.fpga_image_attribute.load_permissions[0].user_id #=> String
    #   resp.data.fpga_image_attribute.load_permissions[0].group #=> String, one of ["all"]
    #   resp.data.fpga_image_attribute.product_codes #=> Array<ProductCode>
    #   resp.data.fpga_image_attribute.product_codes[0] #=> Types::ProductCode
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_id #=> String
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #
    def describe_fpga_image_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFpgaImageAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFpgaImageAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFpgaImageAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFpgaImageAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFpgaImageAttribute,
        params_class: Params::DescribeFpgaImageAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_fpga_image_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs,
    # 			private AFIs that you own, and AFIs owned by other Amazon Web Services accounts for which you have load
    # 			permissions.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeFpgaImagesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :fpga_image_ids
    #   <p>The AFI IDs.</p>
    #
    # @option params [Array<String>] :owners
    #   <p>Filters the AFI by owner. Specify an Amazon Web Services account ID, <code>self</code>
    #   			(owner is the sender of the request), or an Amazon Web Services owner alias (valid values are
    #   			<code>amazon</code> | <code>aws-marketplace</code>).</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #   		       <ul>
    #               <li>
    #                  <p>
    #                     <code>create-time</code> - The creation time of the AFI.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>name</code> - The name of the AFI.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The Amazon Web Services account ID of the AFI owner.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>product-code</code> - The product code.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>shell-version</code> - The version of the Amazon Web Services Shell that was used to create the bitstream.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>update-time</code> - The time of the most recent update.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call.</p>
    #
    # @return [Types::DescribeFpgaImagesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_fpga_images(
    #     dry_run: false,
    #     fpga_image_ids: [
    #       'member'
    #     ],
    #     owners: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeFpgaImagesOutput
    #   resp.data.fpga_images #=> Array<FpgaImage>
    #   resp.data.fpga_images[0] #=> Types::FpgaImage
    #   resp.data.fpga_images[0].fpga_image_id #=> String
    #   resp.data.fpga_images[0].fpga_image_global_id #=> String
    #   resp.data.fpga_images[0].name #=> String
    #   resp.data.fpga_images[0].description #=> String
    #   resp.data.fpga_images[0].shell_version #=> String
    #   resp.data.fpga_images[0].pci_id #=> Types::PciId
    #   resp.data.fpga_images[0].pci_id.device_id #=> String
    #   resp.data.fpga_images[0].pci_id.vendor_id #=> String
    #   resp.data.fpga_images[0].pci_id.subsystem_id #=> String
    #   resp.data.fpga_images[0].pci_id.subsystem_vendor_id #=> String
    #   resp.data.fpga_images[0].state #=> Types::FpgaImageState
    #   resp.data.fpga_images[0].state.code #=> String, one of ["pending", "failed", "available", "unavailable"]
    #   resp.data.fpga_images[0].state.message #=> String
    #   resp.data.fpga_images[0].create_time #=> Time
    #   resp.data.fpga_images[0].update_time #=> Time
    #   resp.data.fpga_images[0].owner_id #=> String
    #   resp.data.fpga_images[0].owner_alias #=> String
    #   resp.data.fpga_images[0].product_codes #=> Array<ProductCode>
    #   resp.data.fpga_images[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.fpga_images[0].product_codes[0].product_code_id #=> String
    #   resp.data.fpga_images[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.fpga_images[0].tags #=> Array<Tag>
    #   resp.data.fpga_images[0].tags[0] #=> Types::Tag
    #   resp.data.fpga_images[0].tags[0].key #=> String
    #   resp.data.fpga_images[0].tags[0].value #=> String
    #   resp.data.fpga_images[0].public #=> Boolean
    #   resp.data.fpga_images[0].data_retention_support #=> Boolean
    #   resp.data.next_token #=> String
    #
    def describe_fpga_images(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeFpgaImagesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeFpgaImagesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeFpgaImages
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeFpgaImages
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeFpgaImages,
        params_class: Params::DescribeFpgaImagesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_fpga_images
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Dedicated Host reservations that are available to purchase.</p>
    #         <p>The results describe all of the Dedicated Host reservation offerings, including
    # 			offerings that might not match the instance family and Region of your Dedicated Hosts.
    # 			When purchasing an offering, ensure that the instance family and Region of the offering
    # 			matches that of the Dedicated Hosts with which it is to be associated. For more
    # 			information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts</a>
    #             in the <i>Amazon EC2 User Guide</i>. </p>
    #
    # @param [Hash] params
    #   See {Types::DescribeHostReservationOfferingsInput}.
    #
    # @option params [Array<Filter>] :filter
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>instance-family</code> - The instance family of the offering (for example,
    #                           <code>m4</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
    #                           <code>PartialUpfront</code> | <code>AllUpfront</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_duration
    #   <p>This is the maximum duration of the reservation to purchase, specified in seconds.
    #               Reservations are available in one-year and three-year terms. The number of seconds
    #               specified must be the number of seconds in a year (365x24x60x60) times one of the
    #               supported durations (1 or 3). For example, specify 94608000 for three years.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #
    # @option params [Integer] :min_duration
    #   <p>This is the minimum duration of the reservation you'd like to purchase, specified
    #               in seconds. Reservations are available in one-year and three-year terms. The number of
    #               seconds specified must be the number of seconds in a year (365x24x60x60) times one of
    #               the supported durations (1 or 3). For example, specify 31536000 for one year.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @option params [String] :offering_id
    #   <p>The ID of the reservation offering.</p>
    #
    # @return [Types::DescribeHostReservationOfferingsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_host_reservation_offerings(
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_duration: 1,
    #     max_results: 1,
    #     min_duration: 1,
    #     next_token: 'NextToken',
    #     offering_id: 'OfferingId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeHostReservationOfferingsOutput
    #   resp.data.next_token #=> String
    #   resp.data.offering_set #=> Array<HostOffering>
    #   resp.data.offering_set[0] #=> Types::HostOffering
    #   resp.data.offering_set[0].currency_code #=> String, one of ["USD"]
    #   resp.data.offering_set[0].duration #=> Integer
    #   resp.data.offering_set[0].hourly_price #=> String
    #   resp.data.offering_set[0].instance_family #=> String
    #   resp.data.offering_set[0].offering_id #=> String
    #   resp.data.offering_set[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.offering_set[0].upfront_price #=> String
    #
    def describe_host_reservation_offerings(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeHostReservationOfferingsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeHostReservationOfferingsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeHostReservationOfferings
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeHostReservationOfferings
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeHostReservationOfferings,
        params_class: Params::DescribeHostReservationOfferingsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_host_reservation_offerings
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes reservations that are associated with Dedicated Hosts in your
    #             account.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeHostReservationsInput}.
    #
    # @option params [Array<Filter>] :filter
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>instance-family</code> - The instance family (for example,
    #                       <code>m4</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
    #                           <code>PartialUpfront</code> | <code>AllUpfront</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>state</code> - The state of the reservation (<code>payment-pending</code>
    #                       | <code>payment-failed</code> | <code>active</code> |
    #                       <code>retired</code>).</p>
    #               </li>
    #               <li>
    #           		     <p>
    #                     <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #           	   </li>
    #               <li>
    #           		     <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #           	   </li>
    #            </ul>
    #
    # @option params [Array<String>] :host_reservation_id_set
    #   <p>The host reservation IDs.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeHostReservationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_host_reservations(
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     host_reservation_id_set: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeHostReservationsOutput
    #   resp.data.host_reservation_set #=> Array<HostReservation>
    #   resp.data.host_reservation_set[0] #=> Types::HostReservation
    #   resp.data.host_reservation_set[0].count #=> Integer
    #   resp.data.host_reservation_set[0].currency_code #=> String, one of ["USD"]
    #   resp.data.host_reservation_set[0].duration #=> Integer
    #   resp.data.host_reservation_set[0].end #=> Time
    #   resp.data.host_reservation_set[0].host_id_set #=> Array<String>
    #   resp.data.host_reservation_set[0].host_id_set[0] #=> String
    #   resp.data.host_reservation_set[0].host_reservation_id #=> String
    #   resp.data.host_reservation_set[0].hourly_price #=> String
    #   resp.data.host_reservation_set[0].instance_family #=> String
    #   resp.data.host_reservation_set[0].offering_id #=> String
    #   resp.data.host_reservation_set[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.host_reservation_set[0].start #=> Time
    #   resp.data.host_reservation_set[0].state #=> String, one of ["payment-pending", "payment-failed", "active", "retired"]
    #   resp.data.host_reservation_set[0].upfront_price #=> String
    #   resp.data.host_reservation_set[0].tags #=> Array<Tag>
    #   resp.data.host_reservation_set[0].tags[0] #=> Types::Tag
    #   resp.data.host_reservation_set[0].tags[0].key #=> String
    #   resp.data.host_reservation_set[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_host_reservations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeHostReservationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeHostReservationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeHostReservations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeHostReservations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeHostReservations,
        params_class: Params::DescribeHostReservationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_host_reservations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p>
    #         <p>The results describe only the Dedicated Hosts in the Region you're currently using.
    #             All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have
    #             recently been released are listed with the state <code>released</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeHostsInput}.
    #
    # @option params [Array<Filter>] :filter
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>auto-placement</code> - Whether auto-placement is enabled or disabled
    #                           (<code>on</code> | <code>off</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>availability-zone</code> - The Availability Zone of the
    #                       host.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>client-token</code> - The idempotency token that you provided when you
    #                       allocated the host.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>host-reservation-id</code> - The ID of the reservation assigned to
    #                       this host.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-type</code> - The instance type size that the Dedicated Host
    #                       is configured to support.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The allocation state of the Dedicated Host
    #                           (<code>available</code> | <code>under-assessment</code> |
    #                           <code>permanent-failure</code> | <code>released</code> |
    #                           <code>released-permanent-failure</code>).</p>
    #               </li>
    #               <li>
    #           		     <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #           	   </li>
    #            </ul>
    #
    # @option params [Array<String>] :host_ids
    #   <p>The IDs of the Dedicated Hosts. The IDs are used for targeted instance
    #               launches.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #            <p>You cannot specify this parameter and the host IDs parameter in the same request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeHostsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_hosts(
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     host_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeHostsOutput
    #   resp.data.hosts #=> Array<Host>
    #   resp.data.hosts[0] #=> Types::Host
    #   resp.data.hosts[0].auto_placement #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].availability_zone #=> String
    #   resp.data.hosts[0].available_capacity #=> Types::AvailableCapacity
    #   resp.data.hosts[0].available_capacity.available_instance_capacity #=> Array<InstanceCapacity>
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0] #=> Types::InstanceCapacity
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0].available_capacity #=> Integer
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0].instance_type #=> String
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0].total_capacity #=> Integer
    #   resp.data.hosts[0].available_capacity.available_v_cpus #=> Integer
    #   resp.data.hosts[0].client_token #=> String
    #   resp.data.hosts[0].host_id #=> String
    #   resp.data.hosts[0].host_properties #=> Types::HostProperties
    #   resp.data.hosts[0].host_properties.cores #=> Integer
    #   resp.data.hosts[0].host_properties.instance_type #=> String
    #   resp.data.hosts[0].host_properties.instance_family #=> String
    #   resp.data.hosts[0].host_properties.sockets #=> Integer
    #   resp.data.hosts[0].host_properties.total_v_cpus #=> Integer
    #   resp.data.hosts[0].host_reservation_id #=> String
    #   resp.data.hosts[0].instances #=> Array<HostInstance>
    #   resp.data.hosts[0].instances[0] #=> Types::HostInstance
    #   resp.data.hosts[0].instances[0].instance_id #=> String
    #   resp.data.hosts[0].instances[0].instance_type #=> String
    #   resp.data.hosts[0].instances[0].owner_id #=> String
    #   resp.data.hosts[0].state #=> String, one of ["available", "under-assessment", "permanent-failure", "released", "released-permanent-failure", "pending"]
    #   resp.data.hosts[0].allocation_time #=> Time
    #   resp.data.hosts[0].release_time #=> Time
    #   resp.data.hosts[0].tags #=> Array<Tag>
    #   resp.data.hosts[0].tags[0] #=> Types::Tag
    #   resp.data.hosts[0].tags[0].key #=> String
    #   resp.data.hosts[0].tags[0].value #=> String
    #   resp.data.hosts[0].host_recovery #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].allows_multiple_instance_types #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].owner_id #=> String
    #   resp.data.hosts[0].availability_zone_id #=> String
    #   resp.data.hosts[0].member_of_service_linked_resource_group #=> Boolean
    #   resp.data.next_token #=> String
    #
    def describe_hosts(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeHostsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeHostsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeHosts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeHosts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeHosts,
        params_class: Params::DescribeHostsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_hosts
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your IAM instance profile associations.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIamInstanceProfileAssociationsInput}.
    #
    # @option params [Array<String>] :association_ids
    #   <p>The IAM instance profile associations.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                  <p>
    #                     <code>instance-id</code> - The ID of the instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the association (<code>associating</code> |
    #                   <code>associated</code> | <code>disassociating</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @return [Types::DescribeIamInstanceProfileAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_iam_instance_profile_associations(
    #     association_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIamInstanceProfileAssociationsOutput
    #   resp.data.iam_instance_profile_associations #=> Array<IamInstanceProfileAssociation>
    #   resp.data.iam_instance_profile_associations[0] #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_associations[0].association_id #=> String
    #   resp.data.iam_instance_profile_associations[0].instance_id #=> String
    #   resp.data.iam_instance_profile_associations[0].iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_associations[0].iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_associations[0].iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_associations[0].state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_associations[0].timestamp #=> Time
    #   resp.data.next_token #=> String
    #
    def describe_iam_instance_profile_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIamInstanceProfileAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIamInstanceProfileAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIamInstanceProfileAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIamInstanceProfileAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIamInstanceProfileAssociations,
        params_class: Params::DescribeIamInstanceProfileAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_iam_instance_profile_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #            <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #            <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #            <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #            <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #            <code>network-acl</code> | <code>network-acl-association</code> |
    #            <code>network-interface</code> | <code>network-interface-attachment</code> |
    #            <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #            <code>route-table-association</code> | <code>security-group</code> |
    #            <code>snapshot</code> | <code>subnet</code> |
    #            <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #            | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #            <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #          <p>These settings apply to the IAM user who makes the request; they do not apply to the entire
    #       Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user, unless
    #       they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources
    #       created with longer IDs are visible to all IAM users, regardless of these settings and
    #       provided that they have permission to use the relevant <code>Describe</code> command for the
    #       resource type.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIdFormatInput}.
    #
    # @option params [String] :resource
    #   <p>The type of resource: <code>bundle</code> |
    #              <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #              <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #              <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #              <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #              <code>network-acl</code> | <code>network-acl-association</code> |
    #              <code>network-interface</code> | <code>network-interface-attachment</code> |
    #              <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #              <code>route-table-association</code> | <code>security-group</code> |
    #              <code>snapshot</code> | <code>subnet</code> |
    #              <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #              | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #              <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
    #            </p>
    #
    # @return [Types::DescribeIdFormatOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_id_format(
    #     resource: 'Resource'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIdFormatOutput
    #   resp.data.statuses #=> Array<IdFormat>
    #   resp.data.statuses[0] #=> Types::IdFormat
    #   resp.data.statuses[0].deadline #=> Time
    #   resp.data.statuses[0].resource #=> String
    #   resp.data.statuses[0].use_long_ids #=> Boolean
    #
    def describe_id_format(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIdFormatInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIdFormatInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIdFormat
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIdFormat
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIdFormat,
        params_class: Params::DescribeIdFormatOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_id_format
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root
    #       user. For example, you can view the resource types that are enabled for longer IDs. This request only
    #       returns information about resource types whose ID formats can be modified; it does not return
    #       information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #           <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #           <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #           <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #           <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #           <code>network-acl</code> | <code>network-acl-association</code> |
    #           <code>network-interface</code> | <code>network-interface-attachment</code> |
    #           <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #           <code>route-table-association</code> | <code>security-group</code> |
    #           <code>snapshot</code> | <code>subnet</code> |
    #           <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #           | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #           <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #          <p>These settings apply to the principal specified in the request. They do not apply to the
    #       principal that makes the request.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIdentityIdFormatInput}.
    #
    # @option params [String] :principal_arn
    #   <p>The ARN of the principal, which can be an IAM role, IAM user, or the root user.</p>
    #
    # @option params [String] :resource
    #   <p>The type of resource: <code>bundle</code> |
    #             <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #             <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #             <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #             <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #             <code>network-acl</code> | <code>network-acl-association</code> |
    #             <code>network-interface</code> | <code>network-interface-attachment</code> |
    #             <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #             <code>route-table-association</code> | <code>security-group</code> |
    #             <code>snapshot</code> | <code>subnet</code> |
    #             <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #             | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #             <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
    #            </p>
    #
    # @return [Types::DescribeIdentityIdFormatOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_identity_id_format(
    #     principal_arn: 'PrincipalArn', # required
    #     resource: 'Resource'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIdentityIdFormatOutput
    #   resp.data.statuses #=> Array<IdFormat>
    #   resp.data.statuses[0] #=> Types::IdFormat
    #   resp.data.statuses[0].deadline #=> Time
    #   resp.data.statuses[0].resource #=> String
    #   resp.data.statuses[0].use_long_ids #=> Boolean
    #
    def describe_identity_id_format(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIdentityIdFormatInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIdentityIdFormatInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIdentityIdFormat
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIdentityIdFormat
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIdentityIdFormat,
        params_class: Params::DescribeIdentityIdFormatOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_identity_id_format
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeImageAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The AMI attribute.</p>
    #      	     <p>
    #               <b>Note</b>: The <code>blockDeviceMapping</code> attribute is deprecated.
    #      	    Using this attribute returns the <code>Client.AuthFailure</code> error. To get information about
    #      	    the block device mappings for an AMI, use the <a>DescribeImages</a> action.</p>
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeImageAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_image_attribute(
    #     attribute: 'description', # required - accepts ["description", "kernel", "ramdisk", "launchPermission", "productCodes", "blockDeviceMapping", "sriovNetSupport", "bootMode"]
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeImageAttributeOutput
    #   resp.data.block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.block_device_mappings[0].device_name #=> String
    #   resp.data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.block_device_mappings[0].no_device #=> String
    #   resp.data.image_id #=> String
    #   resp.data.launch_permissions #=> Array<LaunchPermission>
    #   resp.data.launch_permissions[0] #=> Types::LaunchPermission
    #   resp.data.launch_permissions[0].group #=> String, one of ["all"]
    #   resp.data.launch_permissions[0].user_id #=> String
    #   resp.data.launch_permissions[0].organization_arn #=> String
    #   resp.data.launch_permissions[0].organizational_unit_arn #=> String
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.description #=> Types::AttributeValue
    #   resp.data.description.value #=> String
    #   resp.data.kernel_id #=> Types::AttributeValue
    #   resp.data.ramdisk_id #=> Types::AttributeValue
    #   resp.data.sriov_net_support #=> Types::AttributeValue
    #   resp.data.boot_mode #=> Types::AttributeValue
    #
    def describe_image_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeImageAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeImageAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeImageAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeImageAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeImageAttribute,
        params_class: Params::DescribeImageAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_image_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p>
    #          <p>The images available to you include public images, private images that you own, and private images owned by other
    #        Amazon Web Services accounts for which you have explicit launch permissions.</p>
    #          <p>Recently deregistered images appear in the returned results for a short interval and then
    #       return empty results. After all instances that reference a deregistered AMI are terminated,
    #       specifying the ID of the image will eventually return an error indicating that the AMI ID
    #       cannot be found.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeImagesInput}.
    #
    # @option params [Array<String>] :executable_users
    #   <p>Scopes the images by users with explicit launch permissions.
    #          Specify an Amazon Web Services account ID, <code>self</code> (the sender of the request),
    #   				or <code>all</code> (public AMIs).</p>
    #            <ul>
    #               <li>
    #                  <p>If you specify an Amazon Web Services account ID that is not your own, only AMIs
    #             shared with that specific Amazon Web Services account ID are returned. However, AMIs that
    #             are shared with the account’s organization or organizational unit (OU) are not
    #             returned.</p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>self</code> or your own Amazon Web Services account ID, AMIs
    #             shared with your account are returned. In addition, AMIs that are shared with the
    #             organization or OU of which you are member are also returned. </p>
    #               </li>
    #               <li>
    #                  <p>If you specify <code>all</code>, all public AMIs are returned.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>architecture</code> - The image architecture (<code>i386</code> |
    #               <code>x86_64</code> | <code>arm64</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates
    #           	whether the Amazon EBS volume is deleted on instance termination.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for
    #             example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #           	         <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the Amazon EBS
    #             volume.</p>
    #               </li>
    #               <li>
    #                  <p>
    #           	         <code>block-device-mapping.volume-size</code> - The volume size of the Amazon EBS volume, in GiB.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>block-device-mapping.volume-type</code> - The volume type of the Amazon EBS volume
    #               (<code>io1</code> | <code>io2</code> | <code>gp2</code> | <code>gp3</code> | <code>sc1
    #             </code>| <code>st1</code> | <code>standard</code>).</p>
    #               </li>
    #               <li>
    #       		         <p>
    #       			           <code>block-device-mapping.encrypted</code> - A Boolean that indicates whether the Amazon EBS volume is encrypted.</p>
    #       	       </li>
    #               <li>
    #                  <p>
    #                     <code>description</code> - The description of the image (provided during image
    #             creation).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ena-support</code> - A Boolean that indicates whether enhanced networking
    #             with ENA is enabled.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>hypervisor</code> - The hypervisor type (<code>ovm</code> |
    #             <code>xen</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>image-id</code> - The ID of the image.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> |
    #               <code>ramdisk</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>is-public</code> - A Boolean that indicates whether the image is public.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>kernel-id</code> - The kernel ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>manifest-location</code> - The location of the image manifest.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>name</code> - The name of the AMI (provided during image creation).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-alias</code> - The owner alias (<code>amazon</code> | <code>aws-marketplace</code>).
    #             The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be
    #           	set using the IAM console. We recommend that you use the <b>Owner</b>
    #           	request parameter instead of this filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The Amazon Web Services account ID of the owner. We recommend that you use the
    #         		<b>Owner</b> request parameter instead of this filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>platform</code> - The platform. To only list Windows-based AMIs, use
    #               <code>windows</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>product-code</code> - The product code.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>product-code.type</code> - The type of the product code (<code>marketplace</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ramdisk-id</code> - The RAM disk ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> |
    #               <code>instance-store</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the image (<code>available</code> | <code>pending</code>
    #             | <code>failed</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state-reason-code</code> - The reason code for the state change.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state-reason-message</code> - The message for the state change.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>sriov-net-support</code> - A value of <code>simple</code> indicates
    #                       that enhanced networking with the Intel 82599 VF interface is enabled.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> |
    #               <code>hvm</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :image_ids
    #   <p>The image IDs.</p>
    #            <p>Default: Describes all images available to you.</p>
    #
    # @option params [Array<String>] :owners
    #   <p>Scopes the results to images with the specified owners. You can specify a combination of
    #         Amazon Web Services account IDs, <code>self</code>, <code>amazon</code>, and <code>aws-marketplace</code>.
    #         If you omit this parameter, the results include all images for which you have launch permissions,
    #         regardless of ownership.</p>
    #
    # @option params [Boolean] :include_deprecated
    #   <p>If <code>true</code>, all deprecated AMIs are included in the response. If
    #           <code>false</code>, no deprecated AMIs are included in the response. If no value is
    #         specified, the default value is <code>false</code>.</p>
    #            <note>
    #               <p>If you are the AMI owner, all deprecated AMIs appear in the response regardless of the value (<code>true</code> or <code>false</code>) that you set for this parameter.</p>
    #            </note>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeImagesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_images(
    #     executable_users: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     image_ids: [
    #       'member'
    #     ],
    #     owners: [
    #       'member'
    #     ],
    #     include_deprecated: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeImagesOutput
    #   resp.data.images #=> Array<Image>
    #   resp.data.images[0] #=> Types::Image
    #   resp.data.images[0].architecture #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac"]
    #   resp.data.images[0].creation_date #=> String
    #   resp.data.images[0].image_id #=> String
    #   resp.data.images[0].image_location #=> String
    #   resp.data.images[0].image_type #=> String, one of ["machine", "kernel", "ramdisk"]
    #   resp.data.images[0].public #=> Boolean
    #   resp.data.images[0].kernel_id #=> String
    #   resp.data.images[0].owner_id #=> String
    #   resp.data.images[0].platform #=> String, one of ["Windows"]
    #   resp.data.images[0].platform_details #=> String
    #   resp.data.images[0].usage_operation #=> String
    #   resp.data.images[0].product_codes #=> Array<ProductCode>
    #   resp.data.images[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.images[0].product_codes[0].product_code_id #=> String
    #   resp.data.images[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.images[0].ramdisk_id #=> String
    #   resp.data.images[0].state #=> String, one of ["pending", "available", "invalid", "deregistered", "transient", "failed", "error"]
    #   resp.data.images[0].block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.images[0].block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.images[0].block_device_mappings[0].device_name #=> String
    #   resp.data.images[0].block_device_mappings[0].virtual_name #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.images[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.images[0].block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.images[0].block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.images[0].block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.images[0].block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.images[0].block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.images[0].block_device_mappings[0].no_device #=> String
    #   resp.data.images[0].description #=> String
    #   resp.data.images[0].ena_support #=> Boolean
    #   resp.data.images[0].hypervisor #=> String, one of ["ovm", "xen"]
    #   resp.data.images[0].image_owner_alias #=> String
    #   resp.data.images[0].name #=> String
    #   resp.data.images[0].root_device_name #=> String
    #   resp.data.images[0].root_device_type #=> String, one of ["ebs", "instance-store"]
    #   resp.data.images[0].sriov_net_support #=> String
    #   resp.data.images[0].state_reason #=> Types::StateReason
    #   resp.data.images[0].state_reason.code #=> String
    #   resp.data.images[0].state_reason.message #=> String
    #   resp.data.images[0].tags #=> Array<Tag>
    #   resp.data.images[0].tags[0] #=> Types::Tag
    #   resp.data.images[0].tags[0].key #=> String
    #   resp.data.images[0].tags[0].value #=> String
    #   resp.data.images[0].virtualization_type #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.images[0].boot_mode #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.images[0].deprecation_time #=> String
    #
    def describe_images(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeImagesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeImagesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeImages
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeImages
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeImages,
        params_class: Params::DescribeImagesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_images
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeImportImageTasksInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>,
    #       <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.</p>
    #
    # @option params [Array<String>] :import_task_ids
    #   <p>The IDs of the import image tasks.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call.</p>
    #
    # @option params [String] :next_token
    #   <p>A token that indicates the next page of results.</p>
    #
    # @return [Types::DescribeImportImageTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_import_image_tasks(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     import_task_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeImportImageTasksOutput
    #   resp.data.import_image_tasks #=> Array<ImportImageTask>
    #   resp.data.import_image_tasks[0] #=> Types::ImportImageTask
    #   resp.data.import_image_tasks[0].architecture #=> String
    #   resp.data.import_image_tasks[0].description #=> String
    #   resp.data.import_image_tasks[0].encrypted #=> Boolean
    #   resp.data.import_image_tasks[0].hypervisor #=> String
    #   resp.data.import_image_tasks[0].image_id #=> String
    #   resp.data.import_image_tasks[0].import_task_id #=> String
    #   resp.data.import_image_tasks[0].kms_key_id #=> String
    #   resp.data.import_image_tasks[0].license_type #=> String
    #   resp.data.import_image_tasks[0].platform #=> String
    #   resp.data.import_image_tasks[0].progress #=> String
    #   resp.data.import_image_tasks[0].snapshot_details #=> Array<SnapshotDetail>
    #   resp.data.import_image_tasks[0].snapshot_details[0] #=> Types::SnapshotDetail
    #   resp.data.import_image_tasks[0].snapshot_details[0].description #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].device_name #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].disk_image_size #=> Float
    #   resp.data.import_image_tasks[0].snapshot_details[0].format #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].progress #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].snapshot_id #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].status #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].status_message #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].url #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].user_bucket #=> Types::UserBucketDetails
    #   resp.data.import_image_tasks[0].snapshot_details[0].user_bucket.s3_bucket #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].user_bucket.s3_key #=> String
    #   resp.data.import_image_tasks[0].status #=> String
    #   resp.data.import_image_tasks[0].status_message #=> String
    #   resp.data.import_image_tasks[0].tags #=> Array<Tag>
    #   resp.data.import_image_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.import_image_tasks[0].tags[0].key #=> String
    #   resp.data.import_image_tasks[0].tags[0].value #=> String
    #   resp.data.import_image_tasks[0].license_specifications #=> Array<ImportImageLicenseConfigurationResponse>
    #   resp.data.import_image_tasks[0].license_specifications[0] #=> Types::ImportImageLicenseConfigurationResponse
    #   resp.data.import_image_tasks[0].license_specifications[0].license_configuration_arn #=> String
    #   resp.data.import_image_tasks[0].usage_operation #=> String
    #   resp.data.import_image_tasks[0].boot_mode #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.next_token #=> String
    #
    def describe_import_image_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeImportImageTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeImportImageTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeImportImageTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeImportImageTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeImportImageTasks,
        params_class: Params::DescribeImportImageTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_import_image_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your import snapshot tasks.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeImportSnapshotTasksInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #
    # @option params [Array<String>] :import_task_ids
    #   <p>A list of import snapshot task IDs.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call
    #      with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>A token that indicates the next page of results.</p>
    #
    # @return [Types::DescribeImportSnapshotTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_import_snapshot_tasks(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     import_task_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeImportSnapshotTasksOutput
    #   resp.data.import_snapshot_tasks #=> Array<ImportSnapshotTask>
    #   resp.data.import_snapshot_tasks[0] #=> Types::ImportSnapshotTask
    #   resp.data.import_snapshot_tasks[0].description #=> String
    #   resp.data.import_snapshot_tasks[0].import_task_id #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail #=> Types::SnapshotTaskDetail
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.description #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.disk_image_size #=> Float
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.encrypted #=> Boolean
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.format #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.kms_key_id #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.progress #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.snapshot_id #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.status #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.status_message #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.url #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.user_bucket #=> Types::UserBucketDetails
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.user_bucket.s3_bucket #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.user_bucket.s3_key #=> String
    #   resp.data.import_snapshot_tasks[0].tags #=> Array<Tag>
    #   resp.data.import_snapshot_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.import_snapshot_tasks[0].tags[0].key #=> String
    #   resp.data.import_snapshot_tasks[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_import_snapshot_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeImportSnapshotTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeImportSnapshotTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeImportSnapshotTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeImportSnapshotTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeImportSnapshotTasks,
        params_class: Params::DescribeImportSnapshotTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_import_snapshot_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified attribute of the specified instance. You can specify only one
    #             attribute at a time. Valid attribute values are: <code>instanceType</code> |
    #                 <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> |
    #                 <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code>
    #             | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> |
    #                 <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> |
    #                 <code>ebsOptimized</code> | <code>sriovNetSupport</code>
    #         </p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The instance attribute.</p>
    #           <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @return [Types::DescribeInstanceAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_attribute(
    #     attribute: 'instanceType', # required - accepts ["instanceType", "kernel", "ramdisk", "userData", "disableApiTermination", "instanceInitiatedShutdownBehavior", "rootDeviceName", "blockDeviceMapping", "productCodes", "sourceDestCheck", "groupSet", "ebsOptimized", "sriovNetSupport", "enaSupport", "enclaveOptions"]
    #     dry_run: false,
    #     instance_id: 'InstanceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceAttributeOutput
    #   resp.data.groups #=> Array<GroupIdentifier>
    #   resp.data.groups[0] #=> Types::GroupIdentifier
    #   resp.data.groups[0].group_name #=> String
    #   resp.data.groups[0].group_id #=> String
    #   resp.data.block_device_mappings #=> Array<InstanceBlockDeviceMapping>
    #   resp.data.block_device_mappings[0] #=> Types::InstanceBlockDeviceMapping
    #   resp.data.block_device_mappings[0].device_name #=> String
    #   resp.data.block_device_mappings[0].ebs #=> Types::EbsInstanceBlockDevice
    #   resp.data.block_device_mappings[0].ebs.attach_time #=> Time
    #   resp.data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.block_device_mappings[0].ebs.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.block_device_mappings[0].ebs.volume_id #=> String
    #   resp.data.disable_api_termination #=> Types::AttributeBooleanValue
    #   resp.data.disable_api_termination.value #=> Boolean
    #   resp.data.ena_support #=> Types::AttributeBooleanValue
    #   resp.data.enclave_options #=> Types::EnclaveOptions
    #   resp.data.enclave_options.enabled #=> Boolean
    #   resp.data.ebs_optimized #=> Types::AttributeBooleanValue
    #   resp.data.instance_id #=> String
    #   resp.data.instance_initiated_shutdown_behavior #=> Types::AttributeValue
    #   resp.data.instance_initiated_shutdown_behavior.value #=> String
    #   resp.data.instance_type #=> Types::AttributeValue
    #   resp.data.kernel_id #=> Types::AttributeValue
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.ramdisk_id #=> Types::AttributeValue
    #   resp.data.root_device_name #=> Types::AttributeValue
    #   resp.data.source_dest_check #=> Types::AttributeBooleanValue
    #   resp.data.sriov_net_support #=> Types::AttributeValue
    #   resp.data.user_data #=> Types::AttributeValue
    #
    def describe_instance_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceAttribute,
        params_class: Params::DescribeInstanceAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the credit option for CPU usage of the specified burstable performance
    #             instances. The credit options are <code>standard</code> and
    #             <code>unlimited</code>.</p>
    #         <p>If you do not specify an instance ID, Amazon EC2 returns burstable performance
    #             instances with the <code>unlimited</code> credit option, as well as instances that were
    #             previously configured as T2, T3, and T3a with the <code>unlimited</code> credit option.
    #             For example, if you resize a T2 instance, while it is configured as
    #                 <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4
    #             instance.</p>
    #         <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option
    #                 (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify
    #             an instance ID that is not valid, such as an instance that is not a burstable
    #             performance instance, an error is returned.</p>
    #         <p>Recently terminated instances might appear in the returned results. This interval is
    #             usually less than one hour.</p>
    #         <p>If an Availability Zone is experiencing a service disruption and you specify instance
    #             IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If
    #             you specify only instance IDs in an unaffected zone, the call works normally.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                 performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceCreditSpecificationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>instance-id</code> - The ID of the instance.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The instance IDs.</p>
    #           <p>Default: Describes all your instances.</p>
    #           <p>Constraints: Maximum 1000 explicitly specified instance IDs.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value. This value
    #               can be between 5 and 1000. You cannot specify this parameter and the instance IDs
    #               parameter in the same call.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeInstanceCreditSpecificationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_credit_specifications(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceCreditSpecificationsOutput
    #   resp.data.instance_credit_specifications #=> Array<InstanceCreditSpecification>
    #   resp.data.instance_credit_specifications[0] #=> Types::InstanceCreditSpecification
    #   resp.data.instance_credit_specifications[0].instance_id #=> String
    #   resp.data.instance_credit_specifications[0].cpu_credits #=> String
    #   resp.data.next_token #=> String
    #
    def describe_instance_credit_specifications(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceCreditSpecificationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceCreditSpecificationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceCreditSpecifications
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceCreditSpecifications
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceCreditSpecifications,
        params_class: Params::DescribeInstanceCreditSpecificationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_credit_specifications
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the tag keys that are registered to appear in scheduled event notifications for
    #       	resources in the current Region.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceEventNotificationAttributesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeInstanceEventNotificationAttributesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_event_notification_attributes(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceEventNotificationAttributesOutput
    #   resp.data.instance_tag_attribute #=> Types::InstanceTagNotificationAttribute
    #   resp.data.instance_tag_attribute.instance_tag_keys #=> Array<String>
    #   resp.data.instance_tag_attribute.instance_tag_keys[0] #=> String
    #   resp.data.instance_tag_attribute.include_all_tags_of_instance #=> Boolean
    #
    def describe_instance_event_notification_attributes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceEventNotificationAttributesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceEventNotificationAttributesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceEventNotificationAttributes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceEventNotificationAttributes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceEventNotificationAttributes,
        params_class: Params::DescribeInstanceEventNotificationAttributesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_event_notification_attributes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified event windows or all event windows.</p>
    #          <p>If you specify event window IDs, the output includes information for only the specified
    #          event windows. If you specify filters, the output includes information for only those event
    #          windows that meet the filter criteria. If you do not specify event windows IDs or filters,
    #          the output includes information for all event windows, which can affect performance. We
    #          recommend that you use pagination to ensure that the operation returns quickly and
    #          successfully. </p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceEventWindowsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :instance_event_window_ids
    #   <p>The IDs of the event windows.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>dedicated-host-id</code> - The event windows associated with the specified
    #               Dedicated Host ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>event-window-name</code> - The event windows associated with the specified
    #               names. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-id</code> - The event windows associated with the specified instance
    #                  ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-tag</code> - The event windows associated with the specified tag and
    #                  value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-tag-key</code> - The event windows associated with the specified tag
    #                  key, regardless of the value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-tag-value</code> - The event windows associated with the specified tag
    #                  value, regardless of the key.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag:<key></code> - The key/value combination of a tag assigned to the
    #                  event window. Use the tag key in the filter name and the tag value as the filter
    #                  value. For example, to find all resources that have a tag with the key
    #                     <code>Owner</code> and the value <code>CMX</code>, specify <code>tag:Owner</code>
    #                  for the filter name and <code>CMX</code> for the filter value. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the event window. Use this filter
    #                  to find all event windows that have a tag with a specific key, regardless of the tag
    #                  value. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-value</code> - The value of a tag assigned to the event window. Use this
    #                  filter to find all event windows that have a tag with a specific value, regardless of
    #                  the tag key. </p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #            results, make another call with the returned <code>NextToken</code> value. This value can
    #            be between 20 and 500. You cannot specify this parameter and the event window IDs parameter
    #            in the same call.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @return [Types::DescribeInstanceEventWindowsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_event_windows(
    #     dry_run: false,
    #     instance_event_window_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceEventWindowsOutput
    #   resp.data.instance_event_windows #=> Array<InstanceEventWindow>
    #   resp.data.instance_event_windows[0] #=> Types::InstanceEventWindow
    #   resp.data.instance_event_windows[0].instance_event_window_id #=> String
    #   resp.data.instance_event_windows[0].time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_windows[0].time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_windows[0].time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_windows[0].time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_windows[0].time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_windows[0].time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_windows[0].name #=> String
    #   resp.data.instance_event_windows[0].cron_expression #=> String
    #   resp.data.instance_event_windows[0].association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_windows[0].association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_windows[0].association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_windows[0].association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_windows[0].association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_windows[0].association_target.tags[0].key #=> String
    #   resp.data.instance_event_windows[0].association_target.tags[0].value #=> String
    #   resp.data.instance_event_windows[0].association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_windows[0].association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_windows[0].state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_windows[0].tags #=> Array<Tag>
    #   resp.data.next_token #=> String
    #
    def describe_instance_event_windows(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceEventWindowsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceEventWindowsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceEventWindows
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceEventWindows
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceEventWindows,
        params_class: Params::DescribeInstanceEventWindowsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_event_windows
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the status of the specified instances or all of your instances. By default,
    #             only running instances are described, unless you specifically indicate to return the
    #             status of all instances.</p>
    #         <p>Instance status includes the following components:</p>
    #         <ul>
    #             <li>
    #                 <p>
    #                     <b>Status checks</b> - Amazon EC2 performs status
    #                     checks on running EC2 instances to identify hardware and software issues. For
    #                     more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status checks for your instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshoot
    #                         instances with failed status checks</a> in the <i>Amazon EC2 User
    #                         Guide</i>.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                     <b>Scheduled events</b> - Amazon EC2 can schedule
    #                     events (such as reboot, stop, or terminate) for your instances related to
    #                     hardware issues, software updates, or system maintenance. For more information,
    #                     see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled events for your instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #             </li>
    #             <li>
    #                 <p>
    #                     <b>Instance state</b> - You can manage your instances
    #                     from the moment you launch them through their termination. For more information,
    #                     see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
    #                         lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #             </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceStatusInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>availability-zone</code> - The Availability Zone of the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>event.code</code> - The code for the scheduled event
    #                           (<code>instance-reboot</code> | <code>system-reboot</code> |
    #                           <code>system-maintenance</code> | <code>instance-retirement</code> |
    #                           <code>instance-stop</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>event.description</code> - A description of the event.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>event.instance-event-id</code> - The ID of the event whose date and time
    #                       you are modifying.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>event.not-after</code> - The latest end time for the scheduled event
    #                       (for example, <code>2014-09-15T17:15:20.000Z</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>event.not-before</code> - The earliest start time for the scheduled
    #                       event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>event.not-before-deadline</code> - The deadline for starting the event
    #                       (for example, <code>2014-09-15T17:15:20.000Z</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-state-code</code> - The code for the instance state, as a
    #                       16-bit unsigned integer. The high byte is used for internal purposes and should
    #                       be ignored. The low byte is set based on the state represented. The valid values
    #                       are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64
    #                       (stopping), and 80 (stopped).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-state-name</code> - The state of the instance
    #                           (<code>pending</code> | <code>running</code> | <code>shutting-down</code> |
    #                           <code>terminated</code> | <code>stopping</code> |
    #                       <code>stopped</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-status.reachability</code> - Filters on instance status where
    #                       the name is <code>reachability</code> (<code>passed</code> | <code>failed</code>
    #                       | <code>initializing</code> | <code>insufficient-data</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-status.status</code> - The status of the instance
    #                           (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
    #                           <code>insufficient-data</code> | <code>not-applicable</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>system-status.reachability</code> - Filters on system status where the
    #                       name is <code>reachability</code> (<code>passed</code> | <code>failed</code> |
    #                           <code>initializing</code> | <code>insufficient-data</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>system-status.status</code> - The system status of the instance
    #                           (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
    #                           <code>insufficient-data</code> | <code>not-applicable</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The instance IDs.</p>
    #           <p>Default: Describes all your instances.</p>
    #           <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value. This value
    #               can be between 5 and 1000. You cannot specify this parameter and the instance IDs
    #               parameter in the same call.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :include_all_instances
    #   <p>When <code>true</code>, includes the health status for all instances. When
    #                   <code>false</code>, includes the health status for running instances only.</p>
    #           <p>Default: <code>false</code>
    #           </p>
    #
    # @return [Types::DescribeInstanceStatusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_status(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false,
    #     include_all_instances: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceStatusOutput
    #   resp.data.instance_statuses #=> Array<InstanceStatus>
    #   resp.data.instance_statuses[0] #=> Types::InstanceStatus
    #   resp.data.instance_statuses[0].availability_zone #=> String
    #   resp.data.instance_statuses[0].outpost_arn #=> String
    #   resp.data.instance_statuses[0].events #=> Array<InstanceStatusEvent>
    #   resp.data.instance_statuses[0].events[0] #=> Types::InstanceStatusEvent
    #   resp.data.instance_statuses[0].events[0].instance_event_id #=> String
    #   resp.data.instance_statuses[0].events[0].code #=> String, one of ["instance-reboot", "system-reboot", "system-maintenance", "instance-retirement", "instance-stop"]
    #   resp.data.instance_statuses[0].events[0].description #=> String
    #   resp.data.instance_statuses[0].events[0].not_after #=> Time
    #   resp.data.instance_statuses[0].events[0].not_before #=> Time
    #   resp.data.instance_statuses[0].events[0].not_before_deadline #=> Time
    #   resp.data.instance_statuses[0].instance_id #=> String
    #   resp.data.instance_statuses[0].instance_state #=> Types::InstanceState
    #   resp.data.instance_statuses[0].instance_state.code #=> Integer
    #   resp.data.instance_statuses[0].instance_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.instance_statuses[0].instance_status #=> Types::InstanceStatusSummary
    #   resp.data.instance_statuses[0].instance_status.details #=> Array<InstanceStatusDetails>
    #   resp.data.instance_statuses[0].instance_status.details[0] #=> Types::InstanceStatusDetails
    #   resp.data.instance_statuses[0].instance_status.details[0].impaired_since #=> Time
    #   resp.data.instance_statuses[0].instance_status.details[0].name #=> String, one of ["reachability"]
    #   resp.data.instance_statuses[0].instance_status.details[0].status #=> String, one of ["passed", "failed", "insufficient-data", "initializing"]
    #   resp.data.instance_statuses[0].instance_status.status #=> String, one of ["ok", "impaired", "insufficient-data", "not-applicable", "initializing"]
    #   resp.data.instance_statuses[0].system_status #=> Types::InstanceStatusSummary
    #   resp.data.next_token #=> String
    #
    def describe_instance_status(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceStatusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceStatusInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceStatus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceStatus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceStatus,
        params_class: Params::DescribeInstanceStatusOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_status
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of all instance types offered. The results can be filtered by location (Region or Availability
    #    Zone). If no location is specified, the instance types offered in the current Region are returned.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceTypeOfferingsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #            and provides an error response. If you have the required permissions, the error response is
    #            <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :location_type
    #   <p>The location type.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>location</code> - This depends on the location type. For example, if the location type is
    #         <code>region</code> (default), the location is the Region code (for example, <code>us-east-2</code>.)</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type. For example,
    #        <code>c5.2xlarge</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results
    #            can be seen by sending another request with the next token value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeInstanceTypeOfferingsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_type_offerings(
    #     dry_run: false,
    #     location_type: 'region', # accepts ["region", "availability-zone", "availability-zone-id"]
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceTypeOfferingsOutput
    #   resp.data.instance_type_offerings #=> Array<InstanceTypeOffering>
    #   resp.data.instance_type_offerings[0] #=> Types::InstanceTypeOffering
    #   resp.data.instance_type_offerings[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.instance_type_offerings[0].location_type #=> String, one of ["region", "availability-zone", "availability-zone-id"]
    #   resp.data.instance_type_offerings[0].location #=> String
    #   resp.data.next_token #=> String
    #
    def describe_instance_type_offerings(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceTypeOfferingsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceTypeOfferingsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceTypeOfferings
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceTypeOfferings
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceTypeOfferings,
        params_class: Params::DescribeInstanceTypeOfferingsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_type_offerings
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the details of the instance types that are offered in a location. The results can be filtered by the
    #    attributes of the instance types.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstanceTypesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #            and provides an error response. If you have the required permissions, the error response is
    #            <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :instance_types
    #   <p>The instance types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. Filter names and values are case-sensitive.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>auto-recovery-supported</code> - Indicates whether auto recovery is supported  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>bare-metal</code> - Indicates whether it is a bare metal instance type  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>burstable-performance-supported</code> - Indicates whether it is a burstable
    #        performance instance type  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>current-generation</code> - Indicates whether this instance type is the latest
    #        generation instance type of an instance family  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps</code> - The baseline
    #                       bandwidth performance for an EBS-optimized instance type, in Mbps.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-info.baseline-iops</code> - The baseline input/output storage
    #        operations per second for an EBS-optimized instance type.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-info.baseline-throughput-in-mbps</code> - The baseline
    #        throughput performance for an EBS-optimized instance type, in MB/s.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps</code> - The maximum bandwidth
    #                       performance for an EBS-optimized instance type, in Mbps.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-info.maximum-iops</code> - The maximum input/output storage
    #                       operations per second for an EBS-optimized instance type.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-info.maximum-throughput-in-mbps</code> - The maximum
    #        throughput performance for an EBS-optimized instance type, in MB/s.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.ebs-optimized-support</code> - Indicates whether the instance type is
    #        EBS-optimized (<code>supported</code> | <code>unsupported</code> |
    #        <code>default</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.encryption-support</code> - Indicates whether EBS encryption is supported
    #         (<code>supported</code> | <code>unsupported</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ebs-info.nvme-support</code> - Indicates whether non-volatile memory express (NVMe)
    #        is supported for EBS volumes (<code>required</code> | <code>supported</code> | <code>unsupported</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>free-tier-eligible</code> - Indicates whether the instance type is eligible to use
    #        in the free tier  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>hibernation-supported</code> - Indicates whether On-Demand hibernation is supported  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>hypervisor</code> - The hypervisor (<code>nitro</code> | <code>xen</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-info.disk.count</code> - The number of local disks.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-info.disk.size-in-gb</code> - The storage size of each instance storage disk, in
    #        GB.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-info.disk.type</code> - The storage technology for the local
    #        instance storage disks (<code>hdd</code> | <code>ssd</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-info.encryption-supported</code> - Indicates whether data is encrypted at rest
    #        (<code>required</code> | <code>unsupported</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-info.nvme-support</code> - Indicates whether non-volatile memory
    #        express (NVMe) is supported for instance store (<code>required</code> | <code>supported</code> |
    #        <code>unsupported</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-info.total-size-in-gb</code> - The total amount of storage available from all local
    #        instance storage, in GB.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-storage-supported</code> - Indicates whether the instance type has local
    #        instance storage  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type (for example <code>c5.2xlarge</code> or
    #        c5*).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>memory-info.size-in-mib</code> - The memory size.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.efa-info.maximum-efa-interfaces</code> - The maximum number of Elastic
    #        Fabric Adapters (EFAs) per instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.efa-supported</code> - Indicates whether the instance type supports
    #        Elastic Fabric Adapter (EFA)  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.ena-support</code> - Indicates whether Elastic Network Adapter (ENA) is
    #        supported or required (<code>required</code> | <code>supported</code> |
    #         <code>unsupported</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.encryption-in-transit-supported</code> - Indicates whether the instance type
    #        automatically encrypts in-transit traffic between instances  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.ipv4-addresses-per-interface</code> - The maximum number of private IPv4 addresses per
    #        network interface.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.ipv6-addresses-per-interface</code> - The maximum number of private IPv6 addresses per
    #        network interface.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.ipv6-supported</code> - Indicates whether the instance type supports IPv6  (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.maximum-network-interfaces</code> - The maximum number of network interfaces per instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-info.network-performance</code> - The network performance (for example, "25
    #        Gigabit").</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>processor-info.supported-architecture</code> - The CPU architecture
    #         (<code>arm64</code> | <code>i386</code> | <code>x86_64</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock speed, in GHz.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>supported-boot-mode</code> - The boot mode (<code>legacy-bios</code> |
    #         <code>uefi</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>supported-root-device-type</code> - The root device type (<code>ebs</code> |
    #         <code>instance-store</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>supported-usage-class</code> - The usage class (<code>on-demand</code> |
    #         <code>spot</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>supported-virtualization-type</code> - The virtualization type (<code>hvm</code> |
    #         <code>paravirtual</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vcpu-info.default-cores</code> - The default number of cores for the instance type.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vcpu-info.default-threads-per-core</code> - The default number of threads per core for the instance
    #        type.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the instance type.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vcpu-info.valid-cores</code> - The number of cores that can be configured for the instance type.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vcpu-info.valid-threads-per-core</code> - The number of threads per core that can be configured for the instance type.
    #           For example, "1" or "1,2".</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results
    #            can be seen by sending another request with the next token value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeInstanceTypesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instance_types(
    #     dry_run: false,
    #     instance_types: [
    #       'a1.medium' # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstanceTypesOutput
    #   resp.data.instance_types #=> Array<InstanceTypeInfo>
    #   resp.data.instance_types[0] #=> Types::InstanceTypeInfo
    #   resp.data.instance_types[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.instance_types[0].current_generation #=> Boolean
    #   resp.data.instance_types[0].free_tier_eligible #=> Boolean
    #   resp.data.instance_types[0].supported_usage_classes #=> Array<String>
    #   resp.data.instance_types[0].supported_usage_classes[0] #=> String, one of ["spot", "on-demand"]
    #   resp.data.instance_types[0].supported_root_device_types #=> Array<String>
    #   resp.data.instance_types[0].supported_root_device_types[0] #=> String, one of ["ebs", "instance-store"]
    #   resp.data.instance_types[0].supported_virtualization_types #=> Array<String>
    #   resp.data.instance_types[0].supported_virtualization_types[0] #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.instance_types[0].bare_metal #=> Boolean
    #   resp.data.instance_types[0].hypervisor #=> String, one of ["nitro", "xen"]
    #   resp.data.instance_types[0].processor_info #=> Types::ProcessorInfo
    #   resp.data.instance_types[0].processor_info.supported_architectures #=> Array<String>
    #   resp.data.instance_types[0].processor_info.supported_architectures[0] #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac"]
    #   resp.data.instance_types[0].processor_info.sustained_clock_speed_in_ghz #=> Float
    #   resp.data.instance_types[0].v_cpu_info #=> Types::VCpuInfo
    #   resp.data.instance_types[0].v_cpu_info.default_v_cpus #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.default_cores #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.default_threads_per_core #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.valid_cores #=> Array<Integer>
    #   resp.data.instance_types[0].v_cpu_info.valid_cores[0] #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.valid_threads_per_core #=> Array<Integer>
    #   resp.data.instance_types[0].v_cpu_info.valid_threads_per_core[0] #=> Integer
    #   resp.data.instance_types[0].memory_info #=> Types::MemoryInfo
    #   resp.data.instance_types[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].instance_storage_supported #=> Boolean
    #   resp.data.instance_types[0].instance_storage_info #=> Types::InstanceStorageInfo
    #   resp.data.instance_types[0].instance_storage_info.total_size_in_gb #=> Integer
    #   resp.data.instance_types[0].instance_storage_info.disks #=> Array<DiskInfo>
    #   resp.data.instance_types[0].instance_storage_info.disks[0] #=> Types::DiskInfo
    #   resp.data.instance_types[0].instance_storage_info.disks[0].size_in_gb #=> Integer
    #   resp.data.instance_types[0].instance_storage_info.disks[0].count #=> Integer
    #   resp.data.instance_types[0].instance_storage_info.disks[0].type #=> String, one of ["hdd", "ssd"]
    #   resp.data.instance_types[0].instance_storage_info.nvme_support #=> String, one of ["unsupported", "supported", "required"]
    #   resp.data.instance_types[0].instance_storage_info.encryption_support #=> String, one of ["unsupported", "required"]
    #   resp.data.instance_types[0].ebs_info #=> Types::EbsInfo
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_support #=> String, one of ["unsupported", "supported", "default"]
    #   resp.data.instance_types[0].ebs_info.encryption_support #=> String, one of ["unsupported", "supported"]
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info #=> Types::EbsOptimizedInfo
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.baseline_bandwidth_in_mbps #=> Integer
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.baseline_throughput_in_m_bps #=> Float
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.baseline_iops #=> Integer
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.maximum_bandwidth_in_mbps #=> Integer
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.maximum_throughput_in_m_bps #=> Float
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.maximum_iops #=> Integer
    #   resp.data.instance_types[0].ebs_info.nvme_support #=> String, one of ["unsupported", "supported", "required"]
    #   resp.data.instance_types[0].network_info #=> Types::NetworkInfo
    #   resp.data.instance_types[0].network_info.network_performance #=> String
    #   resp.data.instance_types[0].network_info.maximum_network_interfaces #=> Integer
    #   resp.data.instance_types[0].network_info.maximum_network_cards #=> Integer
    #   resp.data.instance_types[0].network_info.default_network_card_index #=> Integer
    #   resp.data.instance_types[0].network_info.network_cards #=> Array<NetworkCardInfo>
    #   resp.data.instance_types[0].network_info.network_cards[0] #=> Types::NetworkCardInfo
    #   resp.data.instance_types[0].network_info.network_cards[0].network_card_index #=> Integer
    #   resp.data.instance_types[0].network_info.network_cards[0].network_performance #=> String
    #   resp.data.instance_types[0].network_info.network_cards[0].maximum_network_interfaces #=> Integer
    #   resp.data.instance_types[0].network_info.ipv4_addresses_per_interface #=> Integer
    #   resp.data.instance_types[0].network_info.ipv6_addresses_per_interface #=> Integer
    #   resp.data.instance_types[0].network_info.ipv6_supported #=> Boolean
    #   resp.data.instance_types[0].network_info.ena_support #=> String, one of ["unsupported", "supported", "required"]
    #   resp.data.instance_types[0].network_info.efa_supported #=> Boolean
    #   resp.data.instance_types[0].network_info.efa_info #=> Types::EfaInfo
    #   resp.data.instance_types[0].network_info.efa_info.maximum_efa_interfaces #=> Integer
    #   resp.data.instance_types[0].network_info.encryption_in_transit_supported #=> Boolean
    #   resp.data.instance_types[0].gpu_info #=> Types::GpuInfo
    #   resp.data.instance_types[0].gpu_info.gpus #=> Array<GpuDeviceInfo>
    #   resp.data.instance_types[0].gpu_info.gpus[0] #=> Types::GpuDeviceInfo
    #   resp.data.instance_types[0].gpu_info.gpus[0].name #=> String
    #   resp.data.instance_types[0].gpu_info.gpus[0].manufacturer #=> String
    #   resp.data.instance_types[0].gpu_info.gpus[0].count #=> Integer
    #   resp.data.instance_types[0].gpu_info.gpus[0].memory_info #=> Types::GpuDeviceMemoryInfo
    #   resp.data.instance_types[0].gpu_info.gpus[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].gpu_info.total_gpu_memory_in_mi_b #=> Integer
    #   resp.data.instance_types[0].fpga_info #=> Types::FpgaInfo
    #   resp.data.instance_types[0].fpga_info.fpgas #=> Array<FpgaDeviceInfo>
    #   resp.data.instance_types[0].fpga_info.fpgas[0] #=> Types::FpgaDeviceInfo
    #   resp.data.instance_types[0].fpga_info.fpgas[0].name #=> String
    #   resp.data.instance_types[0].fpga_info.fpgas[0].manufacturer #=> String
    #   resp.data.instance_types[0].fpga_info.fpgas[0].count #=> Integer
    #   resp.data.instance_types[0].fpga_info.fpgas[0].memory_info #=> Types::FpgaDeviceMemoryInfo
    #   resp.data.instance_types[0].fpga_info.fpgas[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].fpga_info.total_fpga_memory_in_mi_b #=> Integer
    #   resp.data.instance_types[0].placement_group_info #=> Types::PlacementGroupInfo
    #   resp.data.instance_types[0].placement_group_info.supported_strategies #=> Array<String>
    #   resp.data.instance_types[0].placement_group_info.supported_strategies[0] #=> String, one of ["cluster", "partition", "spread"]
    #   resp.data.instance_types[0].inference_accelerator_info #=> Types::InferenceAcceleratorInfo
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators #=> Array<InferenceDeviceInfo>
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0] #=> Types::InferenceDeviceInfo
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].count #=> Integer
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].name #=> String
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].manufacturer #=> String
    #   resp.data.instance_types[0].hibernation_supported #=> Boolean
    #   resp.data.instance_types[0].burstable_performance_supported #=> Boolean
    #   resp.data.instance_types[0].dedicated_hosts_supported #=> Boolean
    #   resp.data.instance_types[0].auto_recovery_supported #=> Boolean
    #   resp.data.instance_types[0].supported_boot_modes #=> Array<String>
    #   resp.data.instance_types[0].supported_boot_modes[0] #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.next_token #=> String
    #
    def describe_instance_types(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstanceTypesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstanceTypesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstanceTypes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstanceTypes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstanceTypes,
        params_class: Params::DescribeInstanceTypesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instance_types
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified instances or all instances.</p>
    #         <p>If you specify instance IDs, the output includes information for only the specified instances.
    #             If you specify filters, the output includes information for only those instances that meet the filter criteria.
    #             If you do not specify instance IDs or filters, the output includes information for all instances,
    #             which can affect performance. We recommend that you use pagination to ensure that the operation
    #             returns quickly and successfully.</p>
    #         <p>If you specify an instance ID that is not valid, an error is returned. If you
    #             specify an instance that you do not own, it is not included in the output.</p>
    #         <p>Recently terminated instances might appear in the returned results. This interval is
    #             usually less than one hour.</p>
    #         <p>If you describe instances in the rare case where an Availability Zone is experiencing
    #             a service disruption and you specify instance IDs that are in the affected zone, or do
    #             not specify any instance IDs at all, the call fails. If you describe instances and
    #             specify only instance IDs that are in an unaffected zone, the call works
    #             normally.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInstancesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>affinity</code> - The affinity setting for an instance running on a
    #                       Dedicated Host (<code>default</code> | <code>host</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>architecture</code> - The instance architecture (<code>i386</code> |
    #                           <code>x86_64</code> | <code>arm64</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>availability-zone</code> - The Availability Zone of the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>block-device-mapping.attach-time</code> - The attach time for an EBS
    #                       volume mapped to the instance, for example,
    #                           <code>2010-09-15T17:15:20.000Z</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>block-device-mapping.delete-on-termination</code> - A Boolean that
    #                       indicates whether the EBS volume is deleted on instance termination.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>block-device-mapping.device-name</code> - The device name specified in the
    #                       block device mapping (for example, <code>/dev/sdh</code> or
    #                       <code>xvdh</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>block-device-mapping.status</code> - The status for the EBS volume
    #                           (<code>attaching</code> | <code>attached</code> | <code>detaching</code> |
    #                           <code>detached</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>block-device-mapping.volume-id</code> - The volume ID of the EBS
    #                       volume.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>client-token</code> - The idempotency token you provided when you launched
    #                       the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>dns-name</code> - The public DNS name of the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>group-id</code> - The ID of the security group for the instance.
    #                       EC2-Classic only.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>group-name</code> - The name of the security group for the instance.
    #                       EC2-Classic only.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>hibernation-options.configured</code> - A Boolean that indicates whether
    #                       the instance is enabled for hibernation. A value of <code>true</code> means that
    #                       the instance is enabled for hibernation. </p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>host-id</code> - The ID of the Dedicated Host on which the instance is
    #                       running, if applicable.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>hypervisor</code> - The hypervisor type of the instance
    #                       (<code>ovm</code> | <code>xen</code>). The value <code>xen</code>
    #                       is used for both Xen and Nitro hypervisors.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>iam-instance-profile.arn</code> - The instance profile associated with
    #                       the instance. Specified as an ARN.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>image-id</code> - The ID of the image used to launch the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-id</code> - The ID of the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or
    #                       a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-state-code</code> - The state of the instance, as a 16-bit
    #                       unsigned integer. The high byte is used for internal purposes and should be
    #                       ignored. The low byte is set based on the state represented. The valid values
    #                       are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64
    #                       (stopping), and 80 (stopped).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-state-name</code> - The state of the instance
    #                           (<code>pending</code> | <code>running</code> | <code>shutting-down</code> |
    #                           <code>terminated</code> | <code>stopping</code> |
    #                       <code>stopped</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-type</code> - The type of instance (for example,
    #                           <code>t2.micro</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance.group-id</code> - The ID of the security group for the
    #                       instance. </p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance.group-name</code> - The name of the security group for the
    #                       instance. </p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ip-address</code> - The public IPv4 address of the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>kernel-id</code> - The kernel ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>key-name</code> - The name of the key pair used when the instance was
    #                       launched.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch-index</code> - When launching multiple instances, this is the
    #                       index for the instance in the launch group (for example, 0, 1, 2, and so on). </p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch-time</code> - The time when the instance was launched, in the ISO
    #                       8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example,
    #                           <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard
    #                           (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an
    #                       entire day.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>metadata-options.http-tokens</code> - The metadata request authorization
    #                       state (<code>optional</code> | <code>required</code>)</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>metadata-options.http-put-response-hop-limit</code> - The http metadata
    #                       request put response hop limit (integer, possible values <code>1</code> to
    #                           <code>64</code>)</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>metadata-options.http-endpoint</code> - Enable or disable metadata
    #                       access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>monitoring-state</code> - Indicates whether detailed monitoring is
    #                       enabled (<code>disabled</code> | <code>enabled</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.addresses.private-ip-address</code> - The private IPv4
    #                       address associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.addresses.primary</code> - Specifies whether the IPv4
    #                       address of the network interface is the primary private IPv4 address.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.addresses.association.public-ip</code> - The ID of the
    #                       association of an Elastic IP address (IPv4) with a network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.addresses.association.ip-owner-id</code> - The owner
    #                       ID of the private IPv4 address associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.association.public-ip</code> - The address of the
    #                       Elastic IP address (IPv4) bound to the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.association.ip-owner-id</code> - The owner of the
    #                       Elastic IP address (IPv4) associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.association.allocation-id</code> - The allocation ID
    #                       returned when you allocated the Elastic IP address (IPv4) for your network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.association.association-id</code> - The association ID
    #                       returned when the network interface was associated with an IPv4 address.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.attachment-id</code> - The ID of the
    #                       interface attachment.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.instance-id</code> - The ID of the instance
    #                       to which the network interface is attached.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.instance-owner-id</code> - The owner ID of
    #                       the instance to which the network interface is attached.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.device-index</code> - The device index to
    #                       which the network interface is attached.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.status</code> - The status of the
    #                       attachment (<code>attaching</code> | <code>attached</code> |
    #                           <code>detaching</code> | <code>detached</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.attach-time</code> - The time that the
    #                       network interface was attached to an instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.attachment.delete-on-termination</code> - Specifies
    #                       whether the attachment is deleted when an instance is terminated.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.availability-zone</code> - The Availability Zone for
    #                       the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.description</code> - The description of the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.group-id</code> - The ID of a security group
    #                       associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.group-name</code> - The name of a security group
    #                       associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address
    #                       associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.mac-address</code> - The MAC address of the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.network-interface-id</code> - The ID of the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.owner-id</code> - The ID of the owner of the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.private-dns-name</code> - The private DNS name of the
    #                       network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.requester-id</code> - The requester ID for the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.requester-managed</code> - Indicates whether the
    #                       network interface is being managed by Amazon Web Services.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.status</code> - The status of the network interface
    #                           (<code>available</code>) | <code>in-use</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.source-dest-check</code> - Whether the network
    #                       interface performs source/destination checking. A value of <code>true</code>
    #                       means that checking is enabled, and <code>false</code> means that checking is
    #                       disabled. The value must be <code>false</code> for the network interface to
    #                       perform network address translation (NAT) in your VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.subnet-id</code> - The ID of the subnet for the
    #                       network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.vpc-id</code> - The ID of the VPC for the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>owner-id</code> - The Amazon Web Services account ID of the instance owner.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>placement-group-name</code> - The name of the placement group for the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>placement-partition-number</code> - The partition in which the instance is
    #                       located.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>platform</code> - The platform. To list only Windows instances, use
    #                           <code>windows</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>private-dns-name</code> - The private IPv4 DNS name of the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>private-ip-address</code> - The private IPv4 address of the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>product-code</code> - The product code associated with the AMI used to
    #                       launch the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>product-code.type</code> - The type of product code (<code>devpay</code> |
    #                           <code>marketplace</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>ramdisk-id</code> - The RAM disk ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>reason</code> - The reason for the current state of the instance (for
    #                       example, shows "User Initiated [date]" when you stop or terminate the instance).
    #                       Similar to the state-reason-code filter.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>requester-id</code> - The ID of the entity that launched the instance on
    #                       your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so
    #                       on).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>reservation-id</code> - The ID of the instance's reservation. A
    #                       reservation ID is created any time you launch an instance. A reservation ID has
    #                       a one-to-one relationship with an instance launch request, but can be associated
    #                       with more than one instance if you launch multiple instances using the same
    #                       launch request. For example, if you launch one instance, you get one reservation
    #                       ID. If you launch ten instances using the same launch request, you also get one
    #                       reservation ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>root-device-name</code> - The device name of the root device volume (for
    #                       example, <code>/dev/sda1</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>root-device-type</code> - The type of the root device volume
    #                           (<code>ebs</code> | <code>instance-store</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>source-dest-check</code> - Indicates whether the instance performs
    #                       source/destination checking. A value of <code>true</code> means that checking is
    #                       enabled, and <code>false</code> means that checking is disabled. The value must
    #                       be <code>false</code> for the instance to perform network address translation
    #                       (NAT) in your VPC. </p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>spot-instance-request-id</code> - The ID of the Spot Instance
    #                       request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>state-reason-code</code> - The reason code for the state change.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>state-reason-message</code> - A message that describes the state
    #                       change.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>subnet-id</code> - The ID of the subnet for the instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> |
    #                           <code>default</code> | <code>host</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>virtualization-type</code> - The virtualization type of the instance
    #                           (<code>paravirtual</code> | <code>hvm</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The instance IDs.</p>
    #           <p>Default: Describes all your instances.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value. This value
    #               can be between 5 and 1000. You cannot specify this parameter and the instance IDs
    #               parameter in the same call.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @return [Types::DescribeInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_instances(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     instance_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInstancesOutput
    #   resp.data.reservations #=> Array<Reservation>
    #   resp.data.reservations[0] #=> Types::Reservation
    #   resp.data.reservations[0].groups #=> Array<GroupIdentifier>
    #   resp.data.reservations[0].groups[0] #=> Types::GroupIdentifier
    #   resp.data.reservations[0].groups[0].group_name #=> String
    #   resp.data.reservations[0].groups[0].group_id #=> String
    #   resp.data.reservations[0].instances #=> Array<Instance>
    #   resp.data.reservations[0].instances[0] #=> Types::Instance
    #   resp.data.reservations[0].instances[0].ami_launch_index #=> Integer
    #   resp.data.reservations[0].instances[0].image_id #=> String
    #   resp.data.reservations[0].instances[0].instance_id #=> String
    #   resp.data.reservations[0].instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.reservations[0].instances[0].kernel_id #=> String
    #   resp.data.reservations[0].instances[0].key_name #=> String
    #   resp.data.reservations[0].instances[0].launch_time #=> Time
    #   resp.data.reservations[0].instances[0].monitoring #=> Types::Monitoring
    #   resp.data.reservations[0].instances[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    #   resp.data.reservations[0].instances[0].placement #=> Types::Placement
    #   resp.data.reservations[0].instances[0].placement.availability_zone #=> String
    #   resp.data.reservations[0].instances[0].placement.affinity #=> String
    #   resp.data.reservations[0].instances[0].placement.group_name #=> String
    #   resp.data.reservations[0].instances[0].placement.partition_number #=> Integer
    #   resp.data.reservations[0].instances[0].placement.host_id #=> String
    #   resp.data.reservations[0].instances[0].placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.reservations[0].instances[0].placement.spread_domain #=> String
    #   resp.data.reservations[0].instances[0].placement.host_resource_group_arn #=> String
    #   resp.data.reservations[0].instances[0].platform #=> String, one of ["Windows"]
    #   resp.data.reservations[0].instances[0].private_dns_name #=> String
    #   resp.data.reservations[0].instances[0].private_ip_address #=> String
    #   resp.data.reservations[0].instances[0].product_codes #=> Array<ProductCode>
    #   resp.data.reservations[0].instances[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.reservations[0].instances[0].product_codes[0].product_code_id #=> String
    #   resp.data.reservations[0].instances[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.reservations[0].instances[0].public_dns_name #=> String
    #   resp.data.reservations[0].instances[0].public_ip_address #=> String
    #   resp.data.reservations[0].instances[0].ramdisk_id #=> String
    #   resp.data.reservations[0].instances[0].state #=> Types::InstanceState
    #   resp.data.reservations[0].instances[0].state.code #=> Integer
    #   resp.data.reservations[0].instances[0].state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.reservations[0].instances[0].state_transition_reason #=> String
    #   resp.data.reservations[0].instances[0].subnet_id #=> String
    #   resp.data.reservations[0].instances[0].vpc_id #=> String
    #   resp.data.reservations[0].instances[0].architecture #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac"]
    #   resp.data.reservations[0].instances[0].block_device_mappings #=> Array<InstanceBlockDeviceMapping>
    #   resp.data.reservations[0].instances[0].block_device_mappings[0] #=> Types::InstanceBlockDeviceMapping
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].device_name #=> String
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs #=> Types::EbsInstanceBlockDevice
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.attach_time #=> Time
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.volume_id #=> String
    #   resp.data.reservations[0].instances[0].client_token #=> String
    #   resp.data.reservations[0].instances[0].ebs_optimized #=> Boolean
    #   resp.data.reservations[0].instances[0].ena_support #=> Boolean
    #   resp.data.reservations[0].instances[0].hypervisor #=> String, one of ["ovm", "xen"]
    #   resp.data.reservations[0].instances[0].iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.reservations[0].instances[0].iam_instance_profile.arn #=> String
    #   resp.data.reservations[0].instances[0].iam_instance_profile.id #=> String
    #   resp.data.reservations[0].instances[0].instance_lifecycle #=> String, one of ["spot", "scheduled"]
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations #=> Array<ElasticGpuAssociation>
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0] #=> Types::ElasticGpuAssociation
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_id #=> String
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_association_id #=> String
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_association_state #=> String
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_association_time #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations #=> Array<ElasticInferenceAcceleratorAssociation>
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0] #=> Types::ElasticInferenceAcceleratorAssociation
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_arn #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_id #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_state #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_time #=> Time
    #   resp.data.reservations[0].instances[0].network_interfaces #=> Array<InstanceNetworkInterface>
    #   resp.data.reservations[0].instances[0].network_interfaces[0] #=> Types::InstanceNetworkInterface
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.carrier_ip #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.customer_owned_ip #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.ip_owner_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.public_dns_name #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.public_ip #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment #=> Types::InstanceNetworkInterfaceAttachment
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.attach_time #=> Time
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.attachment_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.delete_on_termination #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.device_index #=> Integer
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.network_card_index #=> Integer
    #   resp.data.reservations[0].instances[0].network_interfaces[0].description #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].groups #=> Array<GroupIdentifier>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].mac_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].network_interface_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].owner_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_dns_name #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses #=> Array<InstancePrivateIpAddress>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0] #=> Types::InstancePrivateIpAddress
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].source_dest_check #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.reservations[0].instances[0].network_interfaces[0].subnet_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].vpc_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].interface_type #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv4_prefixes #=> Array<InstanceIpv4Prefix>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv4_prefixes[0] #=> Types::InstanceIpv4Prefix
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_prefixes #=> Array<InstanceIpv6Prefix>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_prefixes[0] #=> Types::InstanceIpv6Prefix
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.reservations[0].instances[0].outpost_arn #=> String
    #   resp.data.reservations[0].instances[0].root_device_name #=> String
    #   resp.data.reservations[0].instances[0].root_device_type #=> String, one of ["ebs", "instance-store"]
    #   resp.data.reservations[0].instances[0].security_groups #=> Array<GroupIdentifier>
    #   resp.data.reservations[0].instances[0].source_dest_check #=> Boolean
    #   resp.data.reservations[0].instances[0].spot_instance_request_id #=> String
    #   resp.data.reservations[0].instances[0].sriov_net_support #=> String
    #   resp.data.reservations[0].instances[0].state_reason #=> Types::StateReason
    #   resp.data.reservations[0].instances[0].state_reason.code #=> String
    #   resp.data.reservations[0].instances[0].state_reason.message #=> String
    #   resp.data.reservations[0].instances[0].tags #=> Array<Tag>
    #   resp.data.reservations[0].instances[0].tags[0] #=> Types::Tag
    #   resp.data.reservations[0].instances[0].tags[0].key #=> String
    #   resp.data.reservations[0].instances[0].tags[0].value #=> String
    #   resp.data.reservations[0].instances[0].virtualization_type #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.reservations[0].instances[0].cpu_options #=> Types::CpuOptions
    #   resp.data.reservations[0].instances[0].cpu_options.core_count #=> Integer
    #   resp.data.reservations[0].instances[0].cpu_options.threads_per_core #=> Integer
    #   resp.data.reservations[0].instances[0].capacity_reservation_id #=> String
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification #=> Types::CapacityReservationSpecificationResponse
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.reservations[0].instances[0].hibernation_options #=> Types::HibernationOptions
    #   resp.data.reservations[0].instances[0].hibernation_options.configured #=> Boolean
    #   resp.data.reservations[0].instances[0].licenses #=> Array<LicenseConfiguration>
    #   resp.data.reservations[0].instances[0].licenses[0] #=> Types::LicenseConfiguration
    #   resp.data.reservations[0].instances[0].licenses[0].license_configuration_arn #=> String
    #   resp.data.reservations[0].instances[0].metadata_options #=> Types::InstanceMetadataOptionsResponse
    #   resp.data.reservations[0].instances[0].metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.reservations[0].instances[0].metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.reservations[0].instances[0].metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.reservations[0].instances[0].metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.reservations[0].instances[0].metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.reservations[0].instances[0].metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.reservations[0].instances[0].enclave_options #=> Types::EnclaveOptions
    #   resp.data.reservations[0].instances[0].enclave_options.enabled #=> Boolean
    #   resp.data.reservations[0].instances[0].boot_mode #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.reservations[0].instances[0].platform_details #=> String
    #   resp.data.reservations[0].instances[0].usage_operation #=> String
    #   resp.data.reservations[0].instances[0].usage_operation_update_time #=> Time
    #   resp.data.reservations[0].instances[0].private_dns_name_options #=> Types::PrivateDnsNameOptionsResponse
    #   resp.data.reservations[0].instances[0].private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.reservations[0].instances[0].private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.reservations[0].instances[0].private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.reservations[0].instances[0].ipv6_address #=> String
    #   resp.data.reservations[0].owner_id #=> String
    #   resp.data.reservations[0].requester_id #=> String
    #   resp.data.reservations[0].reservation_id #=> String
    #   resp.data.next_token #=> String
    #
    def describe_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInstances,
        params_class: Params::DescribeInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your internet gateways.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeInternetGatewaysInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>attachment.state</code> - The current state of the attachment between the gateway
    #                       and the VPC (<code>available</code>). Present only if a VPC is attached.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>attachment.vpc-id</code> - The ID of an attached VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>internet-gateway-id</code> - The ID of the Internet gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the internet gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :internet_gateway_ids
    #   <p>One or more internet gateway IDs.</p>
    #           <p>Default: Describes all your internet gateways.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeInternetGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_internet_gateways(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     internet_gateway_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeInternetGatewaysOutput
    #   resp.data.internet_gateways #=> Array<InternetGateway>
    #   resp.data.internet_gateways[0] #=> Types::InternetGateway
    #   resp.data.internet_gateways[0].attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.internet_gateways[0].attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.internet_gateways[0].attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.internet_gateways[0].attachments[0].vpc_id #=> String
    #   resp.data.internet_gateways[0].internet_gateway_id #=> String
    #   resp.data.internet_gateways[0].owner_id #=> String
    #   resp.data.internet_gateways[0].tags #=> Array<Tag>
    #   resp.data.internet_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.internet_gateways[0].tags[0].key #=> String
    #   resp.data.internet_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_internet_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeInternetGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeInternetGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeInternetGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeInternetGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeInternetGateways,
        params_class: Params::DescribeInternetGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_internet_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Get information about your IPAM pools.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIpamPoolsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters for the request. For more information about filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering CLI output</a>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in the request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :ipam_pool_ids
    #   <p>The IDs of the IPAM pools you would like information on.</p>
    #
    # @return [Types::DescribeIpamPoolsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_ipam_pools(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIpamPoolsOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipam_pools #=> Array<IpamPool>
    #   resp.data.ipam_pools[0] #=> Types::IpamPool
    #   resp.data.ipam_pools[0].owner_id #=> String
    #   resp.data.ipam_pools[0].ipam_pool_id #=> String
    #   resp.data.ipam_pools[0].source_ipam_pool_id #=> String
    #   resp.data.ipam_pools[0].ipam_pool_arn #=> String
    #   resp.data.ipam_pools[0].ipam_scope_arn #=> String
    #   resp.data.ipam_pools[0].ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pools[0].ipam_arn #=> String
    #   resp.data.ipam_pools[0].ipam_region #=> String
    #   resp.data.ipam_pools[0].locale #=> String
    #   resp.data.ipam_pools[0].pool_depth #=> Integer
    #   resp.data.ipam_pools[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_pools[0].state_message #=> String
    #   resp.data.ipam_pools[0].description #=> String
    #   resp.data.ipam_pools[0].auto_import #=> Boolean
    #   resp.data.ipam_pools[0].publicly_advertisable #=> Boolean
    #   resp.data.ipam_pools[0].address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pools[0].allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pools[0].allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pools[0].allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pools[0].allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pools[0].allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pools[0].allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pools[0].allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pools[0].tags #=> Array<Tag>
    #   resp.data.ipam_pools[0].tags[0] #=> Types::Tag
    #   resp.data.ipam_pools[0].tags[0].key #=> String
    #   resp.data.ipam_pools[0].tags[0].value #=> String
    #   resp.data.ipam_pools[0].aws_service #=> String, one of ["ec2"]
    #
    def describe_ipam_pools(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIpamPoolsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIpamPoolsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIpamPools
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIpamPools
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIpamPools,
        params_class: Params::DescribeIpamPoolsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_ipam_pools
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Get information about your IPAM scopes.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIpamScopesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters for the request. For more information about filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering CLI output</a>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in the request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :ipam_scope_ids
    #   <p>The IDs of the scopes you want information on.</p>
    #
    # @return [Types::DescribeIpamScopesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_ipam_scopes(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIpamScopesOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipam_scopes #=> Array<IpamScope>
    #   resp.data.ipam_scopes[0] #=> Types::IpamScope
    #   resp.data.ipam_scopes[0].owner_id #=> String
    #   resp.data.ipam_scopes[0].ipam_scope_id #=> String
    #   resp.data.ipam_scopes[0].ipam_scope_arn #=> String
    #   resp.data.ipam_scopes[0].ipam_arn #=> String
    #   resp.data.ipam_scopes[0].ipam_region #=> String
    #   resp.data.ipam_scopes[0].ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scopes[0].is_default #=> Boolean
    #   resp.data.ipam_scopes[0].description #=> String
    #   resp.data.ipam_scopes[0].pool_count #=> Integer
    #   resp.data.ipam_scopes[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_scopes[0].tags #=> Array<Tag>
    #   resp.data.ipam_scopes[0].tags[0] #=> Types::Tag
    #   resp.data.ipam_scopes[0].tags[0].key #=> String
    #   resp.data.ipam_scopes[0].tags[0].value #=> String
    #
    def describe_ipam_scopes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIpamScopesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIpamScopesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIpamScopes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIpamScopes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIpamScopes,
        params_class: Params::DescribeIpamScopesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_ipam_scopes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Get information about your IPAM pools.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIpamsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters for the request. For more information about filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering CLI output</a>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in the request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :ipam_ids
    #   <p>The IDs of the IPAMs you want information on.</p>
    #
    # @return [Types::DescribeIpamsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_ipams(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIpamsOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipams #=> Array<Ipam>
    #   resp.data.ipams[0] #=> Types::Ipam
    #   resp.data.ipams[0].owner_id #=> String
    #   resp.data.ipams[0].ipam_id #=> String
    #   resp.data.ipams[0].ipam_arn #=> String
    #   resp.data.ipams[0].ipam_region #=> String
    #   resp.data.ipams[0].public_default_scope_id #=> String
    #   resp.data.ipams[0].private_default_scope_id #=> String
    #   resp.data.ipams[0].scope_count #=> Integer
    #   resp.data.ipams[0].description #=> String
    #   resp.data.ipams[0].operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipams[0].operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipams[0].operating_regions[0].region_name #=> String
    #   resp.data.ipams[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipams[0].tags #=> Array<Tag>
    #   resp.data.ipams[0].tags[0] #=> Types::Tag
    #   resp.data.ipams[0].tags[0].key #=> String
    #   resp.data.ipams[0].tags[0].value #=> String
    #
    def describe_ipams(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIpamsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIpamsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIpams
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIpams
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIpams,
        params_class: Params::DescribeIpamsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_ipams
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your IPv6 address pools.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeIpv6PoolsInput}.
    #
    # @option params [Array<String>] :pool_ids
    #   <p>The IDs of the IPv6 address pools.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::DescribeIpv6PoolsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_ipv6_pools(
    #     pool_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeIpv6PoolsOutput
    #   resp.data.ipv6_pools #=> Array<Ipv6Pool>
    #   resp.data.ipv6_pools[0] #=> Types::Ipv6Pool
    #   resp.data.ipv6_pools[0].pool_id #=> String
    #   resp.data.ipv6_pools[0].description #=> String
    #   resp.data.ipv6_pools[0].pool_cidr_blocks #=> Array<PoolCidrBlock>
    #   resp.data.ipv6_pools[0].pool_cidr_blocks[0] #=> Types::PoolCidrBlock
    #   resp.data.ipv6_pools[0].pool_cidr_blocks[0].cidr #=> String
    #   resp.data.ipv6_pools[0].tags #=> Array<Tag>
    #   resp.data.ipv6_pools[0].tags[0] #=> Types::Tag
    #   resp.data.ipv6_pools[0].tags[0].key #=> String
    #   resp.data.ipv6_pools[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_ipv6_pools(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeIpv6PoolsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeIpv6PoolsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeIpv6Pools
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeIpv6Pools
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeIpv6Pools,
        params_class: Params::DescribeIpv6PoolsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_ipv6_pools
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified key pairs or all of your key pairs.</p>
    #          <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a>
    # 				in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeKeyPairsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #        		        <p>
    #        			          <code>key-pair-id</code> - The ID of the key pair.</p>
    #        	      </li>
    #               <li>
    #                  <p>
    #                     <code>fingerprint</code> - The fingerprint of the key pair.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>key-name</code> - The name of the key pair.</p>
    #               </li>
    #               <li>
    #        		        <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #        	      </li>
    #               <li>
    #        		        <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #        	      </li>
    #            </ul>
    #
    # @option params [Array<String>] :key_names
    #   <p>The key pair names.</p>
    #            <p>Default: Describes all of your key pairs.</p>
    #
    # @option params [Array<String>] :key_pair_ids
    #   <p>The IDs of the key pairs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeKeyPairsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_key_pairs(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     key_names: [
    #       'member'
    #     ],
    #     key_pair_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeKeyPairsOutput
    #   resp.data.key_pairs #=> Array<KeyPairInfo>
    #   resp.data.key_pairs[0] #=> Types::KeyPairInfo
    #   resp.data.key_pairs[0].key_pair_id #=> String
    #   resp.data.key_pairs[0].key_fingerprint #=> String
    #   resp.data.key_pairs[0].key_name #=> String
    #   resp.data.key_pairs[0].key_type #=> String, one of ["rsa", "ed25519"]
    #   resp.data.key_pairs[0].tags #=> Array<Tag>
    #   resp.data.key_pairs[0].tags[0] #=> Types::Tag
    #   resp.data.key_pairs[0].tags[0].key #=> String
    #   resp.data.key_pairs[0].tags[0].value #=> String
    #
    def describe_key_pairs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeKeyPairsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeKeyPairsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeKeyPairs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeKeyPairs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeKeyPairs,
        params_class: Params::DescribeKeyPairsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_key_pairs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more versions of a specified launch template. You can describe all
    #             versions, individual versions, or a range of versions. You can also describe all the
    #             latest versions or all the default versions of all the launch templates in your
    #             account.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLaunchTemplateVersionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :launch_template_id
    #   <p>The ID of the launch template. To describe one or more versions of a specified launch
    #               template, you must specify either the launch template ID or the launch template name in
    #               the request. To describe all the latest or default launch template versions in your
    #               account, you must omit this parameter.</p>
    #
    # @option params [String] :launch_template_name
    #   <p>The name of the launch template. To describe one or more versions of a specified
    #               launch template, you must specify either the launch template ID or the launch template
    #               name in the request. To describe all the latest or default launch template versions in
    #               your account, you must omit this parameter.</p>
    #
    # @option params [Array<String>] :versions
    #   <p>One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account.</p>
    #               <p>To describe one or more versions of a specified launch template, valid values are <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
    #               <p>To describe all launch templates in your account that are defined as the latest
    #               version, the valid value is <code>$Latest</code>. To describe all launch templates in
    #               your account that are defined as the default version, the valid value is
    #                   <code>$Default</code>. You can specify <code>$Latest</code> and
    #                   <code>$Default</code> in the same call. You cannot specify numbers.</p>
    #
    # @option params [String] :min_version
    #   <p>The version number after which to describe launch template versions.</p>
    #
    # @option params [String] :max_version
    #   <p>The version number up to which to describe launch template versions.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value. This value
    #               can be between 1 and 200.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                  <p>
    #                     <code>create-time</code> - The time the launch template version was created.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ebs-optimized</code> - A boolean that indicates whether the instance
    #                       is optimized for Amazon EBS I/O.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on
    #                       your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the
    #                       instance metadata service is enabled (<code>enabled</code> |
    #                           <code>disabled</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>host-resource-group-arn</code> - The ARN of the host resource group in
    #                       which to launch the instances.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>http-tokens</code> - The state of token usage for your instance metadata
    #                       requests (<code>optional</code> | <code>required</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>iam-instance-profile</code> - The ARN of the IAM instance
    #                       profile.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>image-id</code> - The ID of the AMI.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-type</code> - The instance type.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>is-default-version</code> - A boolean that indicates whether the
    #                       launch template version is the default version.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>kernel-id</code> - The kernel ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>license-configuration-arn</code> - The ARN of the license
    #                       configuration.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-card-index</code> - The index of the network card.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ram-disk-id</code> - The RAM disk ID.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::DescribeLaunchTemplateVersionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_launch_template_versions(
    #     dry_run: false,
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     versions: [
    #       'member'
    #     ],
    #     min_version: 'MinVersion',
    #     max_version: 'MaxVersion',
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLaunchTemplateVersionsOutput
    #   resp.data.launch_template_versions #=> Array<LaunchTemplateVersion>
    #   resp.data.launch_template_versions[0] #=> Types::LaunchTemplateVersion
    #   resp.data.launch_template_versions[0].launch_template_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_name #=> String
    #   resp.data.launch_template_versions[0].version_number #=> Integer
    #   resp.data.launch_template_versions[0].version_description #=> String
    #   resp.data.launch_template_versions[0].create_time #=> Time
    #   resp.data.launch_template_versions[0].created_by #=> String
    #   resp.data.launch_template_versions[0].default_version #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data #=> Types::ResponseLaunchTemplateData
    #   resp.data.launch_template_versions[0].launch_template_data.kernel_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.ebs_optimized #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.iam_instance_profile #=> Types::LaunchTemplateIamInstanceProfileSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.iam_instance_profile.arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.iam_instance_profile.name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings #=> Array<LaunchTemplateBlockDeviceMapping>
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0] #=> Types::LaunchTemplateBlockDeviceMapping
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].device_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs #=> Types::LaunchTemplateEbsBlockDevice
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].no_device #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces #=> Array<LaunchTemplateInstanceNetworkInterfaceSpecification>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0] #=> Types::LaunchTemplateInstanceNetworkInterfaceSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].description #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].device_index #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].groups #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].groups[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].interface_type #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].subnet_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.image_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.launch_template_versions[0].launch_template_data.key_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.monitoring #=> Types::LaunchTemplatesMonitoring
    #   resp.data.launch_template_versions[0].launch_template_data.monitoring.enabled #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.placement #=> Types::LaunchTemplatePlacement
    #   resp.data.launch_template_versions[0].launch_template_data.placement.availability_zone #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.affinity #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.group_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.host_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.launch_template_versions[0].launch_template_data.placement.spread_domain #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.host_resource_group_arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.partition_number #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.ram_disk_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.disable_api_termination #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.instance_initiated_shutdown_behavior #=> String, one of ["stop", "terminate"]
    #   resp.data.launch_template_versions[0].launch_template_data.user_data #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications #=> Array<LaunchTemplateTagSpecification>
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0] #=> Types::LaunchTemplateTagSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags[0].key #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags[0].value #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_gpu_specifications #=> Array<ElasticGpuSpecificationResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_gpu_specifications[0] #=> Types::ElasticGpuSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_gpu_specifications[0].type #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators #=> Array<LaunchTemplateElasticInferenceAcceleratorResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators[0] #=> Types::LaunchTemplateElasticInferenceAcceleratorResponse
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators[0].type #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators[0].count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.security_group_ids #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.security_group_ids[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.security_groups #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options #=> Types::LaunchTemplateInstanceMarketOptions
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.market_type #=> String, one of ["spot"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options #=> Types::LaunchTemplateSpotMarketOptions
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.max_price #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.spot_instance_type #=> String, one of ["one-time", "persistent"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.block_duration_minutes #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.valid_until #=> Time
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.launch_template_versions[0].launch_template_data.credit_specification #=> Types::CreditSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.credit_specification.cpu_credits #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options #=> Types::LaunchTemplateCpuOptions
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options.core_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options.threads_per_core #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification #=> Types::LaunchTemplateCapacityReservationSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.license_specifications #=> Array<LaunchTemplateLicenseConfiguration>
    #   resp.data.launch_template_versions[0].launch_template_data.license_specifications[0] #=> Types::LaunchTemplateLicenseConfiguration
    #   resp.data.launch_template_versions[0].launch_template_data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.hibernation_options #=> Types::LaunchTemplateHibernationOptions
    #   resp.data.launch_template_versions[0].launch_template_data.hibernation_options.configured #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options #=> Types::LaunchTemplateInstanceMetadataOptions
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.enclave_options #=> Types::LaunchTemplateEnclaveOptions
    #   resp.data.launch_template_versions[0].launch_template_data.enclave_options.enabled #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options #=> Types::LaunchTemplatePrivateDnsNameOptions
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.next_token #=> String
    #
    def describe_launch_template_versions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLaunchTemplateVersionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLaunchTemplateVersionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLaunchTemplateVersions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLaunchTemplateVersions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLaunchTemplateVersions,
        params_class: Params::DescribeLaunchTemplateVersionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_launch_template_versions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more launch templates.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLaunchTemplatesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :launch_template_ids
    #   <p>One or more launch template IDs.</p>
    #
    # @option params [Array<String>] :launch_template_names
    #   <p>One or more launch template names.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>create-time</code> - The time the launch template was created.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch-template-name</code> - The name of the launch template.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned <code>NextToken</code> value. This value
    #               can be between 1 and 200.</p>
    #
    # @return [Types::DescribeLaunchTemplatesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_launch_templates(
    #     dry_run: false,
    #     launch_template_ids: [
    #       'member'
    #     ],
    #     launch_template_names: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLaunchTemplatesOutput
    #   resp.data.launch_templates #=> Array<LaunchTemplate>
    #   resp.data.launch_templates[0] #=> Types::LaunchTemplate
    #   resp.data.launch_templates[0].launch_template_id #=> String
    #   resp.data.launch_templates[0].launch_template_name #=> String
    #   resp.data.launch_templates[0].create_time #=> Time
    #   resp.data.launch_templates[0].created_by #=> String
    #   resp.data.launch_templates[0].default_version_number #=> Integer
    #   resp.data.launch_templates[0].latest_version_number #=> Integer
    #   resp.data.launch_templates[0].tags #=> Array<Tag>
    #   resp.data.launch_templates[0].tags[0] #=> Types::Tag
    #   resp.data.launch_templates[0].tags[0].key #=> String
    #   resp.data.launch_templates[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_launch_templates(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLaunchTemplatesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLaunchTemplatesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLaunchTemplates
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLaunchTemplates
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLaunchTemplates,
        params_class: Params::DescribeLaunchTemplatesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_launch_templates
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the associations between virtual interface groups and local gateway route tables.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput}.
    #
    # @option params [Array<String>] :local_gateway_route_table_virtual_interface_group_association_ids
    #   <p>The IDs of the associations.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-id</code> - The ID of a local gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-virtual-interface-group-association-id</code> - The ID of the association.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-virtual-interface-group-id</code> - The ID of the virtual interface group.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the association.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_local_gateway_route_table_virtual_interface_group_associations(
    #     local_gateway_route_table_virtual_interface_group_association_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations #=> Array<LocalGatewayRouteTableVirtualInterfaceGroupAssociation>
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0] #=> Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_route_table_virtual_interface_group_association_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_virtual_interface_group_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].owner_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].state #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags[0].key #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_local_gateway_route_table_virtual_interface_group_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations,
        params_class: Params::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_local_gateway_route_table_virtual_interface_group_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified associations between VPCs and local gateway route tables.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLocalGatewayRouteTableVpcAssociationsInput}.
    #
    # @option params [Array<String>] :local_gateway_route_table_vpc_association_ids
    #   <p>The IDs of the associations.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-id</code> - The ID of a local gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-vpc-association-id</code> - The ID of the association.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the association.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-id</code> - The ID of the VPC.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_local_gateway_route_table_vpc_associations(
    #     local_gateway_route_table_vpc_association_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput
    #   resp.data.local_gateway_route_table_vpc_associations #=> Array<LocalGatewayRouteTableVpcAssociation>
    #   resp.data.local_gateway_route_table_vpc_associations[0] #=> Types::LocalGatewayRouteTableVpcAssociation
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_route_table_vpc_association_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].vpc_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].owner_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].state #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags[0].key #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_local_gateway_route_table_vpc_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLocalGatewayRouteTableVpcAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLocalGatewayRouteTableVpcAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLocalGatewayRouteTableVpcAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLocalGatewayRouteTableVpcAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLocalGatewayRouteTableVpcAssociations,
        params_class: Params::DescribeLocalGatewayRouteTableVpcAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_local_gateway_route_table_vpc_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more local gateway route tables. By default, all local gateway route tables are described.
    #          Alternatively, you can filter the results.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLocalGatewayRouteTablesInput}.
    #
    # @option params [Array<String>] :local_gateway_route_table_ids
    #   <p>The IDs of the local gateway route tables.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-id</code> - The ID of a local gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-id</code> - The ID of a local gateway route table.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the local gateway route table.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeLocalGatewayRouteTablesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_local_gateway_route_tables(
    #     local_gateway_route_table_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLocalGatewayRouteTablesOutput
    #   resp.data.local_gateway_route_tables #=> Array<LocalGatewayRouteTable>
    #   resp.data.local_gateway_route_tables[0] #=> Types::LocalGatewayRouteTable
    #   resp.data.local_gateway_route_tables[0].local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_tables[0].local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_tables[0].local_gateway_id #=> String
    #   resp.data.local_gateway_route_tables[0].outpost_arn #=> String
    #   resp.data.local_gateway_route_tables[0].owner_id #=> String
    #   resp.data.local_gateway_route_tables[0].state #=> String
    #   resp.data.local_gateway_route_tables[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_route_tables[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_tables[0].tags[0].key #=> String
    #   resp.data.local_gateway_route_tables[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_local_gateway_route_tables(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLocalGatewayRouteTablesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLocalGatewayRouteTablesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLocalGatewayRouteTables
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLocalGatewayRouteTables
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLocalGatewayRouteTables,
        params_class: Params::DescribeLocalGatewayRouteTablesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_local_gateway_route_tables
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified local gateway virtual interface groups.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLocalGatewayVirtualInterfaceGroupsInput}.
    #
    # @option params [Array<String>] :local_gateway_virtual_interface_group_ids
    #   <p>The IDs of the virtual interface groups.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-id</code> - The ID of a local gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-virtual-interface-id</code> - The ID of the virtual interface.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-virtual-interface-group-id</code> - The ID of the virtual interface group.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_local_gateway_virtual_interface_groups(
    #     local_gateway_virtual_interface_group_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput
    #   resp.data.local_gateway_virtual_interface_groups #=> Array<LocalGatewayVirtualInterfaceGroup>
    #   resp.data.local_gateway_virtual_interface_groups[0] #=> Types::LocalGatewayVirtualInterfaceGroup
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_virtual_interface_group_id #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_virtual_interface_ids #=> Array<String>
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_virtual_interface_ids[0] #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_id #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].owner_id #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_virtual_interface_groups[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_virtual_interface_groups[0].tags[0].key #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_local_gateway_virtual_interface_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLocalGatewayVirtualInterfaceGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLocalGatewayVirtualInterfaceGroupsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLocalGatewayVirtualInterfaceGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLocalGatewayVirtualInterfaceGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLocalGatewayVirtualInterfaceGroups,
        params_class: Params::DescribeLocalGatewayVirtualInterfaceGroupsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_local_gateway_virtual_interface_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified local gateway virtual interfaces.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLocalGatewayVirtualInterfacesInput}.
    #
    # @option params [Array<String>] :local_gateway_virtual_interface_ids
    #   <p>The IDs of the virtual interfaces.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeLocalGatewayVirtualInterfacesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_local_gateway_virtual_interfaces(
    #     local_gateway_virtual_interface_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLocalGatewayVirtualInterfacesOutput
    #   resp.data.local_gateway_virtual_interfaces #=> Array<LocalGatewayVirtualInterface>
    #   resp.data.local_gateway_virtual_interfaces[0] #=> Types::LocalGatewayVirtualInterface
    #   resp.data.local_gateway_virtual_interfaces[0].local_gateway_virtual_interface_id #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].local_gateway_id #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].vlan #=> Integer
    #   resp.data.local_gateway_virtual_interfaces[0].local_address #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].peer_address #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].local_bgp_asn #=> Integer
    #   resp.data.local_gateway_virtual_interfaces[0].peer_bgp_asn #=> Integer
    #   resp.data.local_gateway_virtual_interfaces[0].owner_id #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_virtual_interfaces[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_virtual_interfaces[0].tags[0].key #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_local_gateway_virtual_interfaces(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLocalGatewayVirtualInterfacesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLocalGatewayVirtualInterfacesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLocalGatewayVirtualInterfaces
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLocalGatewayVirtualInterfaces
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLocalGatewayVirtualInterfaces,
        params_class: Params::DescribeLocalGatewayVirtualInterfacesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_local_gateway_virtual_interfaces
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more local gateways. By default, all local gateways are described.
    #         Alternatively, you can filter the results.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeLocalGatewaysInput}.
    #
    # @option params [Array<String>] :local_gateway_ids
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-id</code> - The ID of a local gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-virtual-interface-group-association-id</code> - The ID of the association.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>local-gateway-route-table-virtual-interface-group-id</code> - The ID of the virtual interface group.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the association.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeLocalGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_local_gateways(
    #     local_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeLocalGatewaysOutput
    #   resp.data.local_gateways #=> Array<LocalGateway>
    #   resp.data.local_gateways[0] #=> Types::LocalGateway
    #   resp.data.local_gateways[0].local_gateway_id #=> String
    #   resp.data.local_gateways[0].outpost_arn #=> String
    #   resp.data.local_gateways[0].owner_id #=> String
    #   resp.data.local_gateways[0].state #=> String
    #   resp.data.local_gateways[0].tags #=> Array<Tag>
    #   resp.data.local_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateways[0].tags[0].key #=> String
    #   resp.data.local_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_local_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeLocalGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeLocalGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeLocalGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeLocalGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeLocalGateways,
        params_class: Params::DescribeLocalGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_local_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your managed prefix lists and any Amazon Web Services-managed prefix lists.</p>
    #         <p>To view the entries for your prefix list, use <a>GetManagedPrefixListEntries</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeManagedPrefixListsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The ID of the prefix list owner.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>prefix-list-id</code> - The ID of the prefix list.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>prefix-list-name</code> - The name of the prefix list.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :prefix_list_ids
    #   <p>One or more prefix list IDs.</p>
    #
    # @return [Types::DescribeManagedPrefixListsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_managed_prefix_lists(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeManagedPrefixListsOutput
    #   resp.data.next_token #=> String
    #   resp.data.prefix_lists #=> Array<ManagedPrefixList>
    #   resp.data.prefix_lists[0] #=> Types::ManagedPrefixList
    #   resp.data.prefix_lists[0].prefix_list_id #=> String
    #   resp.data.prefix_lists[0].address_family #=> String
    #   resp.data.prefix_lists[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_lists[0].state_message #=> String
    #   resp.data.prefix_lists[0].prefix_list_arn #=> String
    #   resp.data.prefix_lists[0].prefix_list_name #=> String
    #   resp.data.prefix_lists[0].max_entries #=> Integer
    #   resp.data.prefix_lists[0].version #=> Integer
    #   resp.data.prefix_lists[0].tags #=> Array<Tag>
    #   resp.data.prefix_lists[0].tags[0] #=> Types::Tag
    #   resp.data.prefix_lists[0].tags[0].key #=> String
    #   resp.data.prefix_lists[0].tags[0].value #=> String
    #   resp.data.prefix_lists[0].owner_id #=> String
    #
    def describe_managed_prefix_lists(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeManagedPrefixListsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeManagedPrefixListsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeManagedPrefixLists
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeManagedPrefixLists
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeManagedPrefixLists,
        params_class: Params::DescribeManagedPrefixListsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_managed_prefix_lists
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeMovingAddressesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>moving-status</code> - The status of the Elastic IP address
    #             (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining
    #         results of the initial request can be seen by sending another request with the returned
    #         <code>NextToken</code> value. This value can be between 5 and 1000; if
    #         <code>MaxResults</code> is given a value outside of this range, an error is returned.</p>
    #            <p>Default: If no value is provided, the default is 1000.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :public_ips
    #   <p>One or more Elastic IP addresses.</p>
    #
    # @return [Types::DescribeMovingAddressesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_moving_addresses(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeMovingAddressesOutput
    #   resp.data.moving_address_statuses #=> Array<MovingAddressStatus>
    #   resp.data.moving_address_statuses[0] #=> Types::MovingAddressStatus
    #   resp.data.moving_address_statuses[0].move_status #=> String, one of ["movingToVpc", "restoringToClassic"]
    #   resp.data.moving_address_statuses[0].public_ip #=> String
    #   resp.data.next_token #=> String
    #
    def describe_moving_addresses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeMovingAddressesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeMovingAddressesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeMovingAddresses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeMovingAddresses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeMovingAddresses,
        params_class: Params::DescribeMovingAddressesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_moving_addresses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your NAT gateways.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNatGatewaysInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filter
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>nat-gateway-id</code> - The ID of the NAT gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the NAT gateway (<code>pending</code> |
    #                 <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p>
    #               </li>
    #               <li>
    #   		             <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   		          </li>
    #               <li>
    #   			            <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   		          </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Array<String>] :nat_gateway_ids
    #   <p>One or more NAT gateway IDs.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeNatGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_nat_gateways(
    #     dry_run: false,
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     nat_gateway_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNatGatewaysOutput
    #   resp.data.nat_gateways #=> Array<NatGateway>
    #   resp.data.nat_gateways[0] #=> Types::NatGateway
    #   resp.data.nat_gateways[0].create_time #=> Time
    #   resp.data.nat_gateways[0].delete_time #=> Time
    #   resp.data.nat_gateways[0].failure_code #=> String
    #   resp.data.nat_gateways[0].failure_message #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateways[0].nat_gateway_id #=> String
    #   resp.data.nat_gateways[0].provisioned_bandwidth #=> Types::ProvisionedBandwidth
    #   resp.data.nat_gateways[0].provisioned_bandwidth.provision_time #=> Time
    #   resp.data.nat_gateways[0].provisioned_bandwidth.provisioned #=> String
    #   resp.data.nat_gateways[0].provisioned_bandwidth.request_time #=> Time
    #   resp.data.nat_gateways[0].provisioned_bandwidth.requested #=> String
    #   resp.data.nat_gateways[0].provisioned_bandwidth.status #=> String
    #   resp.data.nat_gateways[0].state #=> String, one of ["pending", "failed", "available", "deleting", "deleted"]
    #   resp.data.nat_gateways[0].subnet_id #=> String
    #   resp.data.nat_gateways[0].vpc_id #=> String
    #   resp.data.nat_gateways[0].tags #=> Array<Tag>
    #   resp.data.nat_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.nat_gateways[0].tags[0].key #=> String
    #   resp.data.nat_gateways[0].tags[0].value #=> String
    #   resp.data.nat_gateways[0].connectivity_type #=> String, one of ["private", "public"]
    #   resp.data.next_token #=> String
    #
    def describe_nat_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNatGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNatGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNatGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNatGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNatGateways,
        params_class: Params::DescribeNatGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_nat_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your network ACLs.</p>
    # 		       <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkAclsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   		             <p>
    #                     <code>association.association-id</code> - The ID of an association ID for the ACL.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p>
    #   		          </li>
    #               <li>
    #                     <p>
    #                     <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p>
    #                  </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>entry.rule-number</code> - The number of an entry (in other words, rule) in
    #                       the set of ACL entries.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>network-acl-id</code> - The ID of the network ACL.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>vpc-id</code> - The ID of the VPC for the network ACL.</p>
    #   		          </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :network_acl_ids
    #   <p>One or more network ACL IDs.</p>
    #   		       <p>Default: Describes all your network ACLs.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeNetworkAclsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_acls(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     network_acl_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkAclsOutput
    #   resp.data.network_acls #=> Array<NetworkAcl>
    #   resp.data.network_acls[0] #=> Types::NetworkAcl
    #   resp.data.network_acls[0].associations #=> Array<NetworkAclAssociation>
    #   resp.data.network_acls[0].associations[0] #=> Types::NetworkAclAssociation
    #   resp.data.network_acls[0].associations[0].network_acl_association_id #=> String
    #   resp.data.network_acls[0].associations[0].network_acl_id #=> String
    #   resp.data.network_acls[0].associations[0].subnet_id #=> String
    #   resp.data.network_acls[0].entries #=> Array<NetworkAclEntry>
    #   resp.data.network_acls[0].entries[0] #=> Types::NetworkAclEntry
    #   resp.data.network_acls[0].entries[0].cidr_block #=> String
    #   resp.data.network_acls[0].entries[0].egress #=> Boolean
    #   resp.data.network_acls[0].entries[0].icmp_type_code #=> Types::IcmpTypeCode
    #   resp.data.network_acls[0].entries[0].icmp_type_code.code #=> Integer
    #   resp.data.network_acls[0].entries[0].icmp_type_code.type #=> Integer
    #   resp.data.network_acls[0].entries[0].ipv6_cidr_block #=> String
    #   resp.data.network_acls[0].entries[0].port_range #=> Types::PortRange
    #   resp.data.network_acls[0].entries[0].port_range.from #=> Integer
    #   resp.data.network_acls[0].entries[0].port_range.to #=> Integer
    #   resp.data.network_acls[0].entries[0].protocol #=> String
    #   resp.data.network_acls[0].entries[0].rule_action #=> String, one of ["allow", "deny"]
    #   resp.data.network_acls[0].entries[0].rule_number #=> Integer
    #   resp.data.network_acls[0].is_default #=> Boolean
    #   resp.data.network_acls[0].network_acl_id #=> String
    #   resp.data.network_acls[0].tags #=> Array<Tag>
    #   resp.data.network_acls[0].tags[0] #=> Types::Tag
    #   resp.data.network_acls[0].tags[0].key #=> String
    #   resp.data.network_acls[0].tags[0].value #=> String
    #   resp.data.network_acls[0].vpc_id #=> String
    #   resp.data.network_acls[0].owner_id #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_acls(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkAclsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkAclsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkAcls
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkAcls
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkAcls,
        params_class: Params::DescribeNetworkAclsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_acls
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified Network Access Scope analyses.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInsightsAccessScopeAnalysesInput}.
    #
    # @option params [Array<String>] :network_insights_access_scope_analysis_ids
    #   <p>The IDs of the Network Access Scope analyses.</p>
    #
    # @option params [String] :network_insights_access_scope_id
    #   <p>The ID of the Network Access Scope.</p>
    #
    # @option params [Time] :analysis_start_time_begin
    #   <p>Filters the results based on the start time. The analysis must have started on or after this time.</p>
    #
    # @option params [Time] :analysis_start_time_end
    #   <p>Filters the results based on the start time. The analysis must have started on or before this time.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>There are no supported filters.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #      To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeNetworkInsightsAccessScopeAnalysesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_insights_access_scope_analyses(
    #     network_insights_access_scope_analysis_ids: [
    #       'member'
    #     ],
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId',
    #     analysis_start_time_begin: Time.now,
    #     analysis_start_time_end: Time.now,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInsightsAccessScopeAnalysesOutput
    #   resp.data.network_insights_access_scope_analyses #=> Array<NetworkInsightsAccessScopeAnalysis>
    #   resp.data.network_insights_access_scope_analyses[0] #=> Types::NetworkInsightsAccessScopeAnalysis
    #   resp.data.network_insights_access_scope_analyses[0].network_insights_access_scope_analysis_id #=> String
    #   resp.data.network_insights_access_scope_analyses[0].network_insights_access_scope_analysis_arn #=> String
    #   resp.data.network_insights_access_scope_analyses[0].network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_analyses[0].status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_access_scope_analyses[0].status_message #=> String
    #   resp.data.network_insights_access_scope_analyses[0].warning_message #=> String
    #   resp.data.network_insights_access_scope_analyses[0].start_date #=> Time
    #   resp.data.network_insights_access_scope_analyses[0].end_date #=> Time
    #   resp.data.network_insights_access_scope_analyses[0].findings_found #=> String, one of ["true", "false", "unknown"]
    #   resp.data.network_insights_access_scope_analyses[0].analyzed_eni_count #=> Integer
    #   resp.data.network_insights_access_scope_analyses[0].tags #=> Array<Tag>
    #   resp.data.network_insights_access_scope_analyses[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scope_analyses[0].tags[0].key #=> String
    #   resp.data.network_insights_access_scope_analyses[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_insights_access_scope_analyses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInsightsAccessScopeAnalysesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInsightsAccessScopeAnalysesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInsightsAccessScopeAnalyses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInsightsAccessScopeAnalyses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInsightsAccessScopeAnalyses,
        params_class: Params::DescribeNetworkInsightsAccessScopeAnalysesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_insights_access_scope_analyses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified Network Access Scopes.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInsightsAccessScopesInput}.
    #
    # @option params [Array<String>] :network_insights_access_scope_ids
    #   <p>The IDs of the Network Access Scopes.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>There are no supported filters.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #      To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeNetworkInsightsAccessScopesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_insights_access_scopes(
    #     network_insights_access_scope_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInsightsAccessScopesOutput
    #   resp.data.network_insights_access_scopes #=> Array<NetworkInsightsAccessScope>
    #   resp.data.network_insights_access_scopes[0] #=> Types::NetworkInsightsAccessScope
    #   resp.data.network_insights_access_scopes[0].network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scopes[0].network_insights_access_scope_arn #=> String
    #   resp.data.network_insights_access_scopes[0].created_date #=> Time
    #   resp.data.network_insights_access_scopes[0].updated_date #=> Time
    #   resp.data.network_insights_access_scopes[0].tags #=> Array<Tag>
    #   resp.data.network_insights_access_scopes[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scopes[0].tags[0].key #=> String
    #   resp.data.network_insights_access_scopes[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_insights_access_scopes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInsightsAccessScopesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInsightsAccessScopesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInsightsAccessScopes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInsightsAccessScopes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInsightsAccessScopes,
        params_class: Params::DescribeNetworkInsightsAccessScopesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_insights_access_scopes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your network insights analyses.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInsightsAnalysesInput}.
    #
    # @option params [Array<String>] :network_insights_analysis_ids
    #   <p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>
    #
    # @option params [String] :network_insights_path_id
    #   <p>The ID of the path. You must specify either a path ID or analysis IDs.</p>
    #
    # @option params [Time] :analysis_start_time
    #   <p>The time when the network insights analyses started.</p>
    #
    # @option params [Time] :analysis_end_time
    #   <p>The time when the network insights analyses ended.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters. The following are possible values:</p>
    #            <ul>
    #               <li>
    #                  <p>PathFound - A Boolean value that indicates whether a feasible path is found.</p>
    #               </li>
    #               <li>
    #                  <p>Status - The status of the analysis (running | succeeded | failed).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #      To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeNetworkInsightsAnalysesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_insights_analyses(
    #     network_insights_analysis_ids: [
    #       'member'
    #     ],
    #     network_insights_path_id: 'NetworkInsightsPathId',
    #     analysis_start_time: Time.now,
    #     analysis_end_time: Time.now,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInsightsAnalysesOutput
    #   resp.data.network_insights_analyses #=> Array<NetworkInsightsAnalysis>
    #   resp.data.network_insights_analyses[0] #=> Types::NetworkInsightsAnalysis
    #   resp.data.network_insights_analyses[0].network_insights_analysis_id #=> String
    #   resp.data.network_insights_analyses[0].network_insights_analysis_arn #=> String
    #   resp.data.network_insights_analyses[0].network_insights_path_id #=> String
    #   resp.data.network_insights_analyses[0].filter_in_arns #=> Array<String>
    #   resp.data.network_insights_analyses[0].filter_in_arns[0] #=> String
    #   resp.data.network_insights_analyses[0].start_date #=> Time
    #   resp.data.network_insights_analyses[0].status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_analyses[0].status_message #=> String
    #   resp.data.network_insights_analyses[0].warning_message #=> String
    #   resp.data.network_insights_analyses[0].network_path_found #=> Boolean
    #   resp.data.network_insights_analyses[0].forward_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analyses[0].forward_path_components[0] #=> Types::PathComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].sequence_number #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.egress #=> Boolean
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.port_range.from #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.port_range.to #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.rule_action #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.rule_number #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to.id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to.arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to.name #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.destination_addresses #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.destination_addresses[0] #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.destination_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.source_addresses #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.source_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].inbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.destination_cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.destination_prefix_list_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.egress_only_internet_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.instance_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.nat_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.network_interface_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.origin #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.transit_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.vpc_peering_connection_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.direction #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.security_group_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.prefix_list_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].return_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analyses[0].explanations #=> Array<Explanation>
    #   resp.data.network_insights_analyses[0].explanations[0] #=> Types::Explanation
    #   resp.data.network_insights_analyses[0].explanations[0].acl #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analyses[0].explanations[0].address #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].addresses #=> Array<String>
    #   resp.data.network_insights_analyses[0].explanations[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].availability_zones #=> Array<String>
    #   resp.data.network_insights_analyses[0].explanations[0].availability_zones[0] #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].cidrs #=> Array<String>
    #   resp.data.network_insights_analyses[0].explanations[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].customer_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].destination #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].direction #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].explanation_code #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].ingress_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].internet_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_arn #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].classic_load_balancer_listener #=> Types::AnalysisLoadBalancerListener
    #   resp.data.network_insights_analyses[0].explanations[0].classic_load_balancer_listener.load_balancer_port #=> Integer
    #   resp.data.network_insights_analyses[0].explanations[0].classic_load_balancer_listener.instance_port #=> Integer
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_listener_port #=> Integer
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target #=> Types::AnalysisLoadBalancerTarget
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target.address #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target.availability_zone #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target.instance #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target.port #=> Integer
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analyses[0].explanations[0].load_balancer_target_port #=> Integer
    #   resp.data.network_insights_analyses[0].explanations[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].missing_component #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].nat_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].network_interface #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].packet_field #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].vpc_peering_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].port #=> Integer
    #   resp.data.network_insights_analyses[0].explanations[0].port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].explanations[0].prefix_list #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].protocols #=> Array<String>
    #   resp.data.network_insights_analyses[0].explanations[0].protocols[0] #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analyses[0].explanations[0].route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].security_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analyses[0].explanations[0].security_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analyses[0].explanations[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].state #=> String
    #   resp.data.network_insights_analyses[0].explanations[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].subnet_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].vpc_endpoint #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].vpn_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].explanations[0].vpn_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].alternate_path_hints #=> Array<AlternatePathHint>
    #   resp.data.network_insights_analyses[0].alternate_path_hints[0] #=> Types::AlternatePathHint
    #   resp.data.network_insights_analyses[0].alternate_path_hints[0].component_id #=> String
    #   resp.data.network_insights_analyses[0].alternate_path_hints[0].component_arn #=> String
    #   resp.data.network_insights_analyses[0].tags #=> Array<Tag>
    #   resp.data.network_insights_analyses[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_analyses[0].tags[0].key #=> String
    #   resp.data.network_insights_analyses[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_insights_analyses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInsightsAnalysesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInsightsAnalysesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInsightsAnalyses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInsightsAnalyses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInsightsAnalyses,
        params_class: Params::DescribeNetworkInsightsAnalysesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_insights_analyses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your paths.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInsightsPathsInput}.
    #
    # @option params [Array<String>] :network_insights_path_ids
    #   <p>The IDs of the paths.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters. The following are possible values:</p>
    #            <ul>
    #               <li>
    #                  <p>Destination - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                  <p>DestinationPort - The destination port.</p>
    #               </li>
    #               <li>
    #                  <p>Name - The path name.</p>
    #               </li>
    #               <li>
    #                  <p>Protocol - The protocol.</p>
    #               </li>
    #               <li>
    #                  <p>Source - The ID of the resource.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #      To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeNetworkInsightsPathsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_insights_paths(
    #     network_insights_path_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInsightsPathsOutput
    #   resp.data.network_insights_paths #=> Array<NetworkInsightsPath>
    #   resp.data.network_insights_paths[0] #=> Types::NetworkInsightsPath
    #   resp.data.network_insights_paths[0].network_insights_path_id #=> String
    #   resp.data.network_insights_paths[0].network_insights_path_arn #=> String
    #   resp.data.network_insights_paths[0].created_date #=> Time
    #   resp.data.network_insights_paths[0].source #=> String
    #   resp.data.network_insights_paths[0].destination #=> String
    #   resp.data.network_insights_paths[0].source_ip #=> String
    #   resp.data.network_insights_paths[0].destination_ip #=> String
    #   resp.data.network_insights_paths[0].protocol #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_paths[0].destination_port #=> Integer
    #   resp.data.network_insights_paths[0].tags #=> Array<Tag>
    #   resp.data.network_insights_paths[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_paths[0].tags[0].key #=> String
    #   resp.data.network_insights_paths[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_insights_paths(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInsightsPathsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInsightsPathsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInsightsPaths
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInsightsPaths
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInsightsPaths,
        params_class: Params::DescribeNetworkInsightsPathsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_insights_paths
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInterfaceAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The attribute of the network interface. This parameter is required.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @return [Types::DescribeNetworkInterfaceAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_interface_attribute(
    #     attribute: 'description', # accepts ["description", "groupSet", "sourceDestCheck", "attachment"]
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInterfaceAttributeOutput
    #   resp.data.attachment #=> Types::NetworkInterfaceAttachment
    #   resp.data.attachment.attach_time #=> Time
    #   resp.data.attachment.attachment_id #=> String
    #   resp.data.attachment.delete_on_termination #=> Boolean
    #   resp.data.attachment.device_index #=> Integer
    #   resp.data.attachment.network_card_index #=> Integer
    #   resp.data.attachment.instance_id #=> String
    #   resp.data.attachment.instance_owner_id #=> String
    #   resp.data.attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.description #=> Types::AttributeValue
    #   resp.data.description.value #=> String
    #   resp.data.groups #=> Array<GroupIdentifier>
    #   resp.data.groups[0] #=> Types::GroupIdentifier
    #   resp.data.groups[0].group_name #=> String
    #   resp.data.groups[0].group_id #=> String
    #   resp.data.network_interface_id #=> String
    #   resp.data.source_dest_check #=> Types::AttributeBooleanValue
    #   resp.data.source_dest_check.value #=> Boolean
    #
    def describe_network_interface_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInterfaceAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInterfaceAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInterfaceAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInterfaceAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInterfaceAttribute,
        params_class: Params::DescribeNetworkInterfaceAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_interface_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the permissions for your network interfaces. </p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInterfacePermissionsInput}.
    #
    # @option params [Array<String>] :network_interface_permission_ids
    #   <p>One or more network interface permission IDs.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #                  <p>
    #                     <code>network-interface-permission.network-interface-permission-id</code> - The ID of the
    #   				permission.</p>
    #               </li>
    #               <li>
    #   				           <p>
    #                     <code>network-interface-permission.network-interface-id</code> - The ID of
    #   					the network interface.</p>
    #   			         </li>
    #               <li>
    #   			            <p>
    #                     <code>network-interface-permission.aws-account-id</code> - The Amazon Web Services account ID.</p>
    #   			         </li>
    #               <li>
    #   			            <p>
    #                     <code>network-interface-permission.aws-service</code> - The Amazon Web Service.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>network-interface-permission.permission</code> - The type of
    #   					permission (<code>INSTANCE-ATTACH</code> |
    #   					<code>EIP-ASSOCIATE</code>).</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining results,
    #   			make another call with the returned <code>NextToken</code> value. If this parameter is not specified, up to 50 results are returned by default.</p>
    #
    # @return [Types::DescribeNetworkInterfacePermissionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_interface_permissions(
    #     network_interface_permission_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInterfacePermissionsOutput
    #   resp.data.network_interface_permissions #=> Array<NetworkInterfacePermission>
    #   resp.data.network_interface_permissions[0] #=> Types::NetworkInterfacePermission
    #   resp.data.network_interface_permissions[0].network_interface_permission_id #=> String
    #   resp.data.network_interface_permissions[0].network_interface_id #=> String
    #   resp.data.network_interface_permissions[0].aws_account_id #=> String
    #   resp.data.network_interface_permissions[0].aws_service #=> String
    #   resp.data.network_interface_permissions[0].permission #=> String, one of ["INSTANCE-ATTACH", "EIP-ASSOCIATE"]
    #   resp.data.network_interface_permissions[0].permission_state #=> Types::NetworkInterfacePermissionState
    #   resp.data.network_interface_permissions[0].permission_state.state #=> String, one of ["pending", "granted", "revoking", "revoked"]
    #   resp.data.network_interface_permissions[0].permission_state.status_message #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_interface_permissions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInterfacePermissionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInterfacePermissionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInterfacePermissions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInterfacePermissions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInterfacePermissions,
        params_class: Params::DescribeNetworkInterfacePermissionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_interface_permissions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your network interfaces.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeNetworkInterfacesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   		             <p>
    #                     <code>addresses.private-ip-address</code> - The private IPv4 addresses
    #                       associated with the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>addresses.primary</code> - Whether the private IPv4 address is the primary
    #                       IP address associated with the network interface. </p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>addresses.association.public-ip</code> - The association ID returned when
    #                       the network interface was associated with the Elastic IP address
    #                       (IPv4).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.association-id</code> - The association ID returned when the
    #                       network interface was associated with an IPv4 address.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.allocation-id</code> - The allocation ID returned when you
    #                       allocated the Elastic IP address (IPv4) for your network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.ip-owner-id</code> - The owner of the Elastic IP address
    #                       (IPv4) associated with the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.public-ip</code> - The address of the Elastic IP address
    #                       (IPv4) bound to the network interface.</p>
    #   		          </li>
    #               <li>
    #   		 		          <p>
    #                     <code>association.public-dns-name</code> - The public DNS name for the network
    #                       interface (IPv4).</p>
    #   		 	        </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.attachment-id</code> - The ID of the interface attachment.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.attach-time</code> - The time that the network interface was attached to an instance.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.device-index</code> - The device index to which the network interface is attached.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>availability-zone</code> - The Availability Zone of the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>description</code> - The description of the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>group-id</code> - The ID of a security group associated with the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>group-name</code> - The name of a security group associated with the network interface.</p>
    #   		          </li>
    #               <li>
    #                     <p>
    #                     <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with
    #                       the network interface.</p>
    #                  </li>
    #               <li>
    #   		             <p>
    #                     <code>mac-address</code> - The MAC address of the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>network-interface-id</code> - The ID of the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>owner-id</code> - The Amazon Web Services account ID of the network interface owner.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>private-ip-address</code> - The private IPv4 address or addresses of the
    #                       network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>private-dns-name</code> - The private DNS name of the network interface (IPv4).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>requester-id</code> - The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>requester-managed</code> - Indicates whether the network interface is being managed by an Amazon Web Service
    #   		               (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>source-dest-check</code> - Indicates whether the network interface performs source/destination checking.
    #   		            A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled.
    #   		            The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code>;
    #   		            if a network interface is attached to an instance the status is <code>in-use</code>.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>subnet-id</code> - The ID of the subnet for the network interface.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>vpc-id</code> - The ID of the VPC for the network interface.</p>
    #   		          </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :network_interface_ids
    #   <p>One or more network interface IDs.</p>
    #   		       <p>Default: Describes all your network interfaces.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of items to return for this request. The request returns a token that you
    #               can specify in a subsequent call to get the next set of results. You cannot specify this
    #               parameter and the network interface IDs parameter in the same request.</p>
    #
    # @return [Types::DescribeNetworkInterfacesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_network_interfaces(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeNetworkInterfacesOutput
    #   resp.data.network_interfaces #=> Array<NetworkInterface>
    #   resp.data.network_interfaces[0] #=> Types::NetworkInterface
    #   resp.data.network_interfaces[0].association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interfaces[0].association.allocation_id #=> String
    #   resp.data.network_interfaces[0].association.association_id #=> String
    #   resp.data.network_interfaces[0].association.ip_owner_id #=> String
    #   resp.data.network_interfaces[0].association.public_dns_name #=> String
    #   resp.data.network_interfaces[0].association.public_ip #=> String
    #   resp.data.network_interfaces[0].association.customer_owned_ip #=> String
    #   resp.data.network_interfaces[0].association.carrier_ip #=> String
    #   resp.data.network_interfaces[0].attachment #=> Types::NetworkInterfaceAttachment
    #   resp.data.network_interfaces[0].attachment.attach_time #=> Time
    #   resp.data.network_interfaces[0].attachment.attachment_id #=> String
    #   resp.data.network_interfaces[0].attachment.delete_on_termination #=> Boolean
    #   resp.data.network_interfaces[0].attachment.device_index #=> Integer
    #   resp.data.network_interfaces[0].attachment.network_card_index #=> Integer
    #   resp.data.network_interfaces[0].attachment.instance_id #=> String
    #   resp.data.network_interfaces[0].attachment.instance_owner_id #=> String
    #   resp.data.network_interfaces[0].attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.network_interfaces[0].availability_zone #=> String
    #   resp.data.network_interfaces[0].description #=> String
    #   resp.data.network_interfaces[0].groups #=> Array<GroupIdentifier>
    #   resp.data.network_interfaces[0].groups[0] #=> Types::GroupIdentifier
    #   resp.data.network_interfaces[0].groups[0].group_name #=> String
    #   resp.data.network_interfaces[0].groups[0].group_id #=> String
    #   resp.data.network_interfaces[0].interface_type #=> String, one of ["interface", "natGateway", "efa", "trunk"]
    #   resp.data.network_interfaces[0].ipv6_addresses #=> Array<NetworkInterfaceIpv6Address>
    #   resp.data.network_interfaces[0].ipv6_addresses[0] #=> Types::NetworkInterfaceIpv6Address
    #   resp.data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.network_interfaces[0].mac_address #=> String
    #   resp.data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.network_interfaces[0].outpost_arn #=> String
    #   resp.data.network_interfaces[0].owner_id #=> String
    #   resp.data.network_interfaces[0].private_dns_name #=> String
    #   resp.data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.network_interfaces[0].private_ip_addresses #=> Array<NetworkInterfacePrivateIpAddress>
    #   resp.data.network_interfaces[0].private_ip_addresses[0] #=> Types::NetworkInterfacePrivateIpAddress
    #   resp.data.network_interfaces[0].private_ip_addresses[0].association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.network_interfaces[0].private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecification>
    #   resp.data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecification
    #   resp.data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecification>
    #   resp.data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecification
    #   resp.data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.network_interfaces[0].requester_id #=> String
    #   resp.data.network_interfaces[0].requester_managed #=> Boolean
    #   resp.data.network_interfaces[0].source_dest_check #=> Boolean
    #   resp.data.network_interfaces[0].status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.network_interfaces[0].subnet_id #=> String
    #   resp.data.network_interfaces[0].tag_set #=> Array<Tag>
    #   resp.data.network_interfaces[0].tag_set[0] #=> Types::Tag
    #   resp.data.network_interfaces[0].tag_set[0].key #=> String
    #   resp.data.network_interfaces[0].tag_set[0].value #=> String
    #   resp.data.network_interfaces[0].vpc_id #=> String
    #   resp.data.network_interfaces[0].deny_all_igw_traffic #=> Boolean
    #   resp.data.network_interfaces[0].ipv6_native #=> Boolean
    #   resp.data.network_interfaces[0].ipv6_address #=> String
    #   resp.data.next_token #=> String
    #
    def describe_network_interfaces(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeNetworkInterfacesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeNetworkInterfacesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeNetworkInterfaces
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeNetworkInterfaces
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeNetworkInterfaces,
        params_class: Params::DescribeNetworkInterfacesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_network_interfaces
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified placement groups or all of your placement groups. For more
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribePlacementGroupsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>group-name</code> - The name of the placement group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>group-arn</code> - The Amazon Resource Name (ARN) of the placement group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>state</code> - The state of the placement group (<code>pending</code> |
    #                           <code>available</code> | <code>deleting</code> |
    #                       <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>strategy</code> - The strategy of the placement group
    #                           (<code>cluster</code> | <code>spread</code> |
    #                       <code>partition</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :group_names
    #   <p>The names of the placement groups.</p>
    #           <p>Default: Describes all your placement groups, or only those otherwise
    #               specified.</p>
    #
    # @option params [Array<String>] :group_ids
    #   <p>The IDs of the placement groups.</p>
    #
    # @return [Types::DescribePlacementGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_placement_groups(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     group_names: [
    #       'member'
    #     ],
    #     group_ids: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePlacementGroupsOutput
    #   resp.data.placement_groups #=> Array<PlacementGroup>
    #   resp.data.placement_groups[0] #=> Types::PlacementGroup
    #   resp.data.placement_groups[0].group_name #=> String
    #   resp.data.placement_groups[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.placement_groups[0].strategy #=> String, one of ["cluster", "spread", "partition"]
    #   resp.data.placement_groups[0].partition_count #=> Integer
    #   resp.data.placement_groups[0].group_id #=> String
    #   resp.data.placement_groups[0].tags #=> Array<Tag>
    #   resp.data.placement_groups[0].tags[0] #=> Types::Tag
    #   resp.data.placement_groups[0].tags[0].key #=> String
    #   resp.data.placement_groups[0].tags[0].value #=> String
    #   resp.data.placement_groups[0].group_arn #=> String
    #
    def describe_placement_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePlacementGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePlacementGroupsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePlacementGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribePlacementGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribePlacementGroups,
        params_class: Params::DescribePlacementGroupsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_placement_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes available Amazon Web Services services in a prefix list format, which includes the prefix list
    #             name and prefix list ID of the service and the IP address range for the service.</p>
    #         <p>We recommend that you use <a>DescribeManagedPrefixLists</a> instead.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribePrefixListsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>prefix-list-id</code>: The ID of a prefix list.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>prefix-list-name</code>: The name of a prefix list.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :prefix_list_ids
    #   <p>One or more prefix list IDs.</p>
    #
    # @return [Types::DescribePrefixListsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_prefix_lists(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     prefix_list_ids: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePrefixListsOutput
    #   resp.data.next_token #=> String
    #   resp.data.prefix_lists #=> Array<PrefixList>
    #   resp.data.prefix_lists[0] #=> Types::PrefixList
    #   resp.data.prefix_lists[0].cidrs #=> Array<String>
    #   resp.data.prefix_lists[0].cidrs[0] #=> String
    #   resp.data.prefix_lists[0].prefix_list_id #=> String
    #   resp.data.prefix_lists[0].prefix_list_name #=> String
    #
    def describe_prefix_lists(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePrefixListsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePrefixListsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePrefixLists
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribePrefixLists
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribePrefixLists,
        params_class: Params::DescribePrefixListsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_prefix_lists
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the ID format settings for the root user and all IAM roles and IAM users
    #             that have explicitly specified a longer ID (17-character ID) preference. </p>
    #          <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they
    #             explicitly override the settings. This request is useful for identifying those IAM users and IAM roles
    #             that have overridden the default ID settings.</p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #           <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #           <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #           <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #           <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #           <code>network-acl</code> | <code>network-acl-association</code> |
    #           <code>network-interface</code> | <code>network-interface-attachment</code> |
    #           <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #           <code>route-table-association</code> | <code>security-group</code> |
    #           <code>snapshot</code> | <code>subnet</code> |
    #           <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #           | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #           <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #
    # @param [Hash] params
    #   See {Types::DescribePrincipalIdFormatInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :resources
    #   <p>The type of resource: <code>bundle</code> |
    #               <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #               <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #               <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #               <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #               <code>network-acl</code> | <code>network-acl-association</code> |
    #               <code>network-interface</code> | <code>network-interface-attachment</code> |
    #               <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #               <code>route-table-association</code> | <code>security-group</code> |
    #               <code>snapshot</code> | <code>subnet</code> |
    #               <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #               | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #               <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
    #            </p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another call with the returned NextToken value. </p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @return [Types::DescribePrincipalIdFormatOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_principal_id_format(
    #     dry_run: false,
    #     resources: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePrincipalIdFormatOutput
    #   resp.data.principals #=> Array<PrincipalIdFormat>
    #   resp.data.principals[0] #=> Types::PrincipalIdFormat
    #   resp.data.principals[0].arn #=> String
    #   resp.data.principals[0].statuses #=> Array<IdFormat>
    #   resp.data.principals[0].statuses[0] #=> Types::IdFormat
    #   resp.data.principals[0].statuses[0].deadline #=> Time
    #   resp.data.principals[0].statuses[0].resource #=> String
    #   resp.data.principals[0].statuses[0].use_long_ids #=> Boolean
    #   resp.data.next_token #=> String
    #
    def describe_principal_id_format(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePrincipalIdFormatInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePrincipalIdFormatInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePrincipalIdFormat
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribePrincipalIdFormat
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribePrincipalIdFormat,
        params_class: Params::DescribePrincipalIdFormatOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_principal_id_format
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified IPv4 address pools.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribePublicIpv4PoolsInput}.
    #
    # @option params [Array<String>] :pool_ids
    #   <p>The IDs of the address pools.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @return [Types::DescribePublicIpv4PoolsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_public_ipv4_pools(
    #     pool_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribePublicIpv4PoolsOutput
    #   resp.data.public_ipv4_pools #=> Array<PublicIpv4Pool>
    #   resp.data.public_ipv4_pools[0] #=> Types::PublicIpv4Pool
    #   resp.data.public_ipv4_pools[0].pool_id #=> String
    #   resp.data.public_ipv4_pools[0].description #=> String
    #   resp.data.public_ipv4_pools[0].pool_address_ranges #=> Array<PublicIpv4PoolRange>
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0] #=> Types::PublicIpv4PoolRange
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].first_address #=> String
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].last_address #=> String
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].available_address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].total_address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].total_available_address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].network_border_group #=> String
    #   resp.data.public_ipv4_pools[0].tags #=> Array<Tag>
    #   resp.data.public_ipv4_pools[0].tags[0] #=> Types::Tag
    #   resp.data.public_ipv4_pools[0].tags[0].key #=> String
    #   resp.data.public_ipv4_pools[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_public_ipv4_pools(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribePublicIpv4PoolsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribePublicIpv4PoolsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribePublicIpv4Pools
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribePublicIpv4Pools
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribePublicIpv4Pools,
        params_class: Params::DescribePublicIpv4PoolsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_public_ipv4_pools
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Regions that are enabled for your account, or all Regions.</p>
    #          <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/ec2-service.html">
    #        Amazon Elastic Compute Cloud endpoints and quotas</a>.</p>
    #          <p>For information about enabling and disabling Regions for your account, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing Amazon Web Services Regions</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeRegionsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>endpoint</code> - The endpoint of the Region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>opt-in-status</code> - The opt-in status of the Region (<code>opt-in-not-required</code> | <code>opted-in</code> |
    #                    <code>not-opted-in</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>region-name</code> - The name of the Region (for example, <code>us-east-1</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :region_names
    #   <p>The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :all_regions
    #   <p>Indicates whether to display all Regions, including Regions that are disabled for your account.</p>
    #
    # @return [Types::DescribeRegionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_regions(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     region_names: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     all_regions: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeRegionsOutput
    #   resp.data.regions #=> Array<Region>
    #   resp.data.regions[0] #=> Types::Region
    #   resp.data.regions[0].endpoint #=> String
    #   resp.data.regions[0].region_name #=> String
    #   resp.data.regions[0].opt_in_status #=> String
    #
    def describe_regions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeRegionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeRegionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeRegions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeRegions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeRegions,
        params_class: Params::DescribeRegionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_regions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes a root volume replacement task. For more information, see
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-restoring-volume.html#replace-root">Replace a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeReplaceRootVolumeTasksInput}.
    #
    # @option params [Array<String>] :replace_root_volume_task_ids
    #   <p>The ID of the root volume replacement task to view.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>Filter to use:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>instance-id</code> - The ID of the instance for which the root volume replacement task was created.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeReplaceRootVolumeTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_replace_root_volume_tasks(
    #     replace_root_volume_task_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeReplaceRootVolumeTasksOutput
    #   resp.data.replace_root_volume_tasks #=> Array<ReplaceRootVolumeTask>
    #   resp.data.replace_root_volume_tasks[0] #=> Types::ReplaceRootVolumeTask
    #   resp.data.replace_root_volume_tasks[0].replace_root_volume_task_id #=> String
    #   resp.data.replace_root_volume_tasks[0].instance_id #=> String
    #   resp.data.replace_root_volume_tasks[0].task_state #=> String, one of ["pending", "in-progress", "failing", "succeeded", "failed", "failed-detached"]
    #   resp.data.replace_root_volume_tasks[0].start_time #=> String
    #   resp.data.replace_root_volume_tasks[0].complete_time #=> String
    #   resp.data.replace_root_volume_tasks[0].tags #=> Array<Tag>
    #   resp.data.replace_root_volume_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.replace_root_volume_tasks[0].tags[0].key #=> String
    #   resp.data.replace_root_volume_tasks[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_replace_root_volume_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeReplaceRootVolumeTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeReplaceRootVolumeTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeReplaceRootVolumeTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeReplaceRootVolumeTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeReplaceRootVolumeTasks,
        params_class: Params::DescribeReplaceRootVolumeTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_replace_root_volume_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of the Reserved Instances that you purchased.</p>
    #          <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
    # 				Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeReservedInstancesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type that is covered by the reservation.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>product-description</code> - The Reserved Instance product platform
    #             description. Instances that include <code>(Amazon VPC)</code> in the product platform
    #             description will only be displayed to EC2-Classic account holders and are for use with
    #             Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE
    #               Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise
    #               Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Red Hat
    #               Enterprise Linux with HA (Amazon VPC)</code> | <code>Windows</code> | <code>Windows
    #               (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with
    #               SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> |
    #               <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server
    #               Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon
    #             VPC)</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :offering_class
    #   <p>Describes whether the Reserved Instance is Standard or Convertible.</p>
    #
    # @option params [Array<String>] :reserved_instances_ids
    #   <p>One or more Reserved Instance IDs.</p>
    #            <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :offering_type
    #   <p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
    #   			version, you only have access to the <code>Medium Utilization</code> Reserved Instance
    #   			offering type.</p>
    #
    # @return [Types::DescribeReservedInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_reserved_instances(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     offering_class: 'standard', # accepts ["standard", "convertible"]
    #     reserved_instances_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     offering_type: 'Heavy Utilization' # accepts ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeReservedInstancesOutput
    #   resp.data.reserved_instances #=> Array<ReservedInstances>
    #   resp.data.reserved_instances[0] #=> Types::ReservedInstances
    #   resp.data.reserved_instances[0].availability_zone #=> String
    #   resp.data.reserved_instances[0].duration #=> Integer
    #   resp.data.reserved_instances[0].end #=> Time
    #   resp.data.reserved_instances[0].fixed_price #=> Float
    #   resp.data.reserved_instances[0].instance_count #=> Integer
    #   resp.data.reserved_instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.reserved_instances[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.reserved_instances[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances[0].start #=> Time
    #   resp.data.reserved_instances[0].state #=> String, one of ["payment-pending", "active", "payment-failed", "retired", "queued", "queued-deleted"]
    #   resp.data.reserved_instances[0].usage_price #=> Float
    #   resp.data.reserved_instances[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances[0].instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.reserved_instances[0].offering_class #=> String, one of ["standard", "convertible"]
    #   resp.data.reserved_instances[0].offering_type #=> String, one of ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   resp.data.reserved_instances[0].recurring_charges #=> Array<RecurringCharge>
    #   resp.data.reserved_instances[0].recurring_charges[0] #=> Types::RecurringCharge
    #   resp.data.reserved_instances[0].recurring_charges[0].amount #=> Float
    #   resp.data.reserved_instances[0].recurring_charges[0].frequency #=> String, one of ["Hourly"]
    #   resp.data.reserved_instances[0].scope #=> String, one of ["Availability Zone", "Region"]
    #   resp.data.reserved_instances[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances[0].tags[0].key #=> String
    #   resp.data.reserved_instances[0].tags[0].value #=> String
    #
    def describe_reserved_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeReservedInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeReservedInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeReservedInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeReservedInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeReservedInstances,
        params_class: Params::DescribeReservedInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_reserved_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p>
    # 		       <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p>
    # 		       <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p>
    # 		       <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    #         in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeReservedInstancesListingsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> |
    #              <code>cancelled</code> | <code>closed</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status-message</code> - The reason for the status.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :reserved_instances_id
    #   <p>One or more Reserved Instance IDs.</p>
    #
    # @option params [String] :reserved_instances_listing_id
    #   <p>One or more Reserved Instance listing IDs.</p>
    #
    # @return [Types::DescribeReservedInstancesListingsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_reserved_instances_listings(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     reserved_instances_id: 'ReservedInstancesId',
    #     reserved_instances_listing_id: 'ReservedInstancesListingId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeReservedInstancesListingsOutput
    #   resp.data.reserved_instances_listings #=> Array<ReservedInstancesListing>
    #   resp.data.reserved_instances_listings[0] #=> Types::ReservedInstancesListing
    #   resp.data.reserved_instances_listings[0].client_token #=> String
    #   resp.data.reserved_instances_listings[0].create_date #=> Time
    #   resp.data.reserved_instances_listings[0].instance_counts #=> Array<InstanceCount>
    #   resp.data.reserved_instances_listings[0].instance_counts[0] #=> Types::InstanceCount
    #   resp.data.reserved_instances_listings[0].instance_counts[0].instance_count #=> Integer
    #   resp.data.reserved_instances_listings[0].instance_counts[0].state #=> String, one of ["available", "sold", "cancelled", "pending"]
    #   resp.data.reserved_instances_listings[0].price_schedules #=> Array<PriceSchedule>
    #   resp.data.reserved_instances_listings[0].price_schedules[0] #=> Types::PriceSchedule
    #   resp.data.reserved_instances_listings[0].price_schedules[0].active #=> Boolean
    #   resp.data.reserved_instances_listings[0].price_schedules[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_listings[0].price_schedules[0].price #=> Float
    #   resp.data.reserved_instances_listings[0].price_schedules[0].term #=> Integer
    #   resp.data.reserved_instances_listings[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_listings[0].reserved_instances_listing_id #=> String
    #   resp.data.reserved_instances_listings[0].status #=> String, one of ["active", "pending", "cancelled", "closed"]
    #   resp.data.reserved_instances_listings[0].status_message #=> String
    #   resp.data.reserved_instances_listings[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances_listings[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances_listings[0].tags[0].key #=> String
    #   resp.data.reserved_instances_listings[0].tags[0].value #=> String
    #   resp.data.reserved_instances_listings[0].update_date #=> Time
    #
    def describe_reserved_instances_listings(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeReservedInstancesListingsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeReservedInstancesListingsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeReservedInstancesListings
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeReservedInstancesListings
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeReservedInstancesListings,
        params_class: Params::DescribeReservedInstancesListingsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_reserved_instances_listings
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p>
    #    	     <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeReservedInstancesModificationsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>client-token</code> - The idempotency token for the modification request.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>create-date</code> - The time when the modification request was created.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>effective-date</code> - The time when the modification becomes effective.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>reserved-instances-modification-id</code> - The ID of the modification request.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status</code> - The status of the Reserved Instances modification request
    #              (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status-message</code> - The reason for the status.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>update-date</code> - The time when the modification request was last updated.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :reserved_instances_modification_ids
    #   <p>IDs for the submitted modification request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeReservedInstancesModificationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_reserved_instances_modifications(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     reserved_instances_modification_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeReservedInstancesModificationsOutput
    #   resp.data.next_token #=> String
    #   resp.data.reserved_instances_modifications #=> Array<ReservedInstancesModification>
    #   resp.data.reserved_instances_modifications[0] #=> Types::ReservedInstancesModification
    #   resp.data.reserved_instances_modifications[0].client_token #=> String
    #   resp.data.reserved_instances_modifications[0].create_date #=> Time
    #   resp.data.reserved_instances_modifications[0].effective_date #=> Time
    #   resp.data.reserved_instances_modifications[0].modification_results #=> Array<ReservedInstancesModificationResult>
    #   resp.data.reserved_instances_modifications[0].modification_results[0] #=> Types::ReservedInstancesModificationResult
    #   resp.data.reserved_instances_modifications[0].modification_results[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration #=> Types::ReservedInstancesConfiguration
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.availability_zone #=> String
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.instance_count #=> Integer
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.platform #=> String
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.scope #=> String, one of ["Availability Zone", "Region"]
    #   resp.data.reserved_instances_modifications[0].reserved_instances_ids #=> Array<ReservedInstancesId>
    #   resp.data.reserved_instances_modifications[0].reserved_instances_ids[0] #=> Types::ReservedInstancesId
    #   resp.data.reserved_instances_modifications[0].reserved_instances_ids[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_modifications[0].reserved_instances_modification_id #=> String
    #   resp.data.reserved_instances_modifications[0].status #=> String
    #   resp.data.reserved_instances_modifications[0].status_message #=> String
    #   resp.data.reserved_instances_modifications[0].update_date #=> Time
    #
    def describe_reserved_instances_modifications(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeReservedInstancesModificationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeReservedInstancesModificationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeReservedInstancesModifications
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeReservedInstancesModifications
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeReservedInstancesModifications,
        params_class: Params::DescribeReservedInstancesModificationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_reserved_instances_modifications
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p>
    #          <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    # 				in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeReservedInstancesOfferingsInput}.
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone in which the Reserved Instance can be used.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be
    #             used.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>duration</code> - The duration of the Reserved Instance (for example, one year or
    #             three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>fixed-price</code> - The purchase price of the Reserved Instance (for example,
    #             9800.0).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type that is covered by the
    #             reservation.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance
    #             Marketplace offerings. When this filter is not used, which is the default behavior, all
    #             offerings from both Amazon Web Services and the Reserved Instance Marketplace are listed.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>product-description</code> - The Reserved Instance product platform description.
    #             Instances that include <code>(Amazon VPC)</code> in the product platform description will
    #             only be displayed to EC2-Classic account holders and are for use with Amazon VPC.
    #               (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE
    #               Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise
    #               Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Red Hat
    #               Enterprise Linux with HA (Amazon VPC)</code> | <code>Windows</code> | <code>Windows
    #               (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with
    #               SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> |
    #               <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server
    #               Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>reserved-instances-offering-id</code> - The Reserved Instances offering
    #             ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or
    #               <code>Region</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for
    #             example, 0.84).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :include_marketplace
    #   <p>Include Reserved Instance Marketplace offerings in the response.</p>
    #
    # @option params [String] :instance_type
    #   <p>The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see
    #          <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [Integer] :max_duration
    #   <p>The maximum duration (in seconds) to filter when searching for offerings.</p>
    #   		       <p>Default: 94608000 (3 years)</p>
    #
    # @option params [Integer] :max_instance_count
    #   <p>The maximum number of instances to filter when searching for offerings.</p>
    #   		       <p>Default: 20</p>
    #
    # @option params [Integer] :min_duration
    #   <p>The minimum duration (in seconds) to filter when searching for offerings.</p>
    #   		       <p>Default: 2592000 (1 month)</p>
    #
    # @option params [String] :offering_class
    #   <p>The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.</p>
    #
    # @option params [String] :product_description
    #   <p>The Reserved Instance product platform description. Instances that include <code>(Amazon
    #           VPC)</code> in the description are for use with Amazon VPC.</p>
    #
    # @option params [Array<String>] :reserved_instances_offering_ids
    #   <p>One or more Reserved Instances offering IDs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_tenancy
    #   <p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy
    #         of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware
    #         (i.e., Dedicated Instances).</p>
    #            <p>
    #               <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p>
    #            <p>Default: <code>default</code>
    #            </p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining
    #   			results of the initial request can be seen by sending another request with the returned
    #   				<code>NextToken</code> value. The maximum is 100.</p>
    #   		       <p>Default: 100</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @option params [String] :offering_type
    #   <p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
    #   			version, you only have access to the <code>Medium Utilization</code> Reserved Instance
    #   			offering type. </p>
    #
    # @return [Types::DescribeReservedInstancesOfferingsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_reserved_instances_offerings(
    #     availability_zone: 'AvailabilityZone',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     include_marketplace: false,
    #     instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #     max_duration: 1,
    #     max_instance_count: 1,
    #     min_duration: 1,
    #     offering_class: 'standard', # accepts ["standard", "convertible"]
    #     product_description: 'Linux/UNIX', # accepts ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #     reserved_instances_offering_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     instance_tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     offering_type: 'Heavy Utilization' # accepts ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeReservedInstancesOfferingsOutput
    #   resp.data.reserved_instances_offerings #=> Array<ReservedInstancesOffering>
    #   resp.data.reserved_instances_offerings[0] #=> Types::ReservedInstancesOffering
    #   resp.data.reserved_instances_offerings[0].availability_zone #=> String
    #   resp.data.reserved_instances_offerings[0].duration #=> Integer
    #   resp.data.reserved_instances_offerings[0].fixed_price #=> Float
    #   resp.data.reserved_instances_offerings[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.reserved_instances_offerings[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.reserved_instances_offerings[0].reserved_instances_offering_id #=> String
    #   resp.data.reserved_instances_offerings[0].usage_price #=> Float
    #   resp.data.reserved_instances_offerings[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_offerings[0].instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.reserved_instances_offerings[0].marketplace #=> Boolean
    #   resp.data.reserved_instances_offerings[0].offering_class #=> String, one of ["standard", "convertible"]
    #   resp.data.reserved_instances_offerings[0].offering_type #=> String, one of ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   resp.data.reserved_instances_offerings[0].pricing_details #=> Array<PricingDetail>
    #   resp.data.reserved_instances_offerings[0].pricing_details[0] #=> Types::PricingDetail
    #   resp.data.reserved_instances_offerings[0].pricing_details[0].count #=> Integer
    #   resp.data.reserved_instances_offerings[0].pricing_details[0].price #=> Float
    #   resp.data.reserved_instances_offerings[0].recurring_charges #=> Array<RecurringCharge>
    #   resp.data.reserved_instances_offerings[0].recurring_charges[0] #=> Types::RecurringCharge
    #   resp.data.reserved_instances_offerings[0].recurring_charges[0].amount #=> Float
    #   resp.data.reserved_instances_offerings[0].recurring_charges[0].frequency #=> String, one of ["Hourly"]
    #   resp.data.reserved_instances_offerings[0].scope #=> String, one of ["Availability Zone", "Region"]
    #   resp.data.next_token #=> String
    #
    def describe_reserved_instances_offerings(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeReservedInstancesOfferingsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeReservedInstancesOfferingsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeReservedInstancesOfferings
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeReservedInstancesOfferings
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeReservedInstancesOfferings,
        params_class: Params::DescribeReservedInstancesOfferingsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_reserved_instances_offerings
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your route tables.</p>
    #          <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p>
    # 		       <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeRouteTablesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   		             <p>
    #                     <code>association.route-table-association-id</code> - The ID of an association
    #                       ID for the route table.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.route-table-id</code> - The ID of the route table involved in
    #                       the association.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.subnet-id</code> - The ID of the subnet involved in the
    #                       association.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>association.main</code> - Indicates whether the route table is the main
    #                       route table for the VPC (<code>true</code> | <code>false</code>). Route tables
    #                       that do not have an association ID are not returned in the response.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the route table.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>route-table-id</code> - The ID of the route table.</p>
    #   		          </li>
    #               <li>
    #   				           <p>
    #                     <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a
    #                       route in the table.</p>
    #   			         </li>
    #               <li>
    #                     <p>
    #                     <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p>
    #                  </li>
    #               <li>
    #   				           <p>
    #                     <code>route.destination-prefix-list-id</code> - The ID (prefix) of the Amazon Web Service
    #                       specified in a route in the table.</p>
    #   			         </li>
    #               <li>
    #                     <p>
    #                     <code>route.egress-only-internet-gateway-id</code> - The ID of an
    #                       egress-only Internet gateway specified in a route in the route table.</p>
    #                  </li>
    #               <li>
    #   		             <p>
    #                     <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p>
    #   		          </li>
    #               <li>
    #                     <p>
    #                     <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p>
    #                  </li>
    #               <li>
    #                     <p>
    #                     <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p>
    #                  </li>
    #               <li>
    #   		             <p>
    #                     <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p>
    #   		          </li>
    #               <li>
    #   		             <p>
    #                     <code>route.origin</code> - Describes how the route was created.
    #                           <code>CreateRouteTable</code> indicates that the route was automatically
    #                       created when the route table was created; <code>CreateRoute</code> indicates
    #                       that the route was manually added to the route table;
    #                           <code>EnableVgwRoutePropagation</code> indicates that the route was
    #                       propagated by route propagation.</p>
    #   		          </li>
    #               <li>
    #                     <p>
    #                     <code>route.state</code> - The state of a route in the route table
    #                           (<code>active</code> | <code>blackhole</code>). The blackhole state
    #                       indicates that the route's target isn't available (for example, the specified
    #                       gateway isn't attached to the VPC, the specified NAT instance has been
    #                       terminated, and so on).</p>
    #                  </li>
    #               <li>
    #   		            <p>
    #                     <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering
    #   		                connection specified in a route in the table.</p>
    #   		          </li>
    #               <li>
    #   		            <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   		          </li>
    #               <li>
    #   		            <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   		          </li>
    #               <li>
    #   		            <p>
    #                     <code>vpc-id</code> - The ID of the VPC for the route table.</p>
    #   		          </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :route_table_ids
    #   <p>One or more route table IDs.</p>
    #   		       <p>Default: Describes all your route tables.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeRouteTablesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_route_tables(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     route_table_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeRouteTablesOutput
    #   resp.data.route_tables #=> Array<RouteTable>
    #   resp.data.route_tables[0] #=> Types::RouteTable
    #   resp.data.route_tables[0].associations #=> Array<RouteTableAssociation>
    #   resp.data.route_tables[0].associations[0] #=> Types::RouteTableAssociation
    #   resp.data.route_tables[0].associations[0].main #=> Boolean
    #   resp.data.route_tables[0].associations[0].route_table_association_id #=> String
    #   resp.data.route_tables[0].associations[0].route_table_id #=> String
    #   resp.data.route_tables[0].associations[0].subnet_id #=> String
    #   resp.data.route_tables[0].associations[0].gateway_id #=> String
    #   resp.data.route_tables[0].associations[0].association_state #=> Types::RouteTableAssociationState
    #   resp.data.route_tables[0].associations[0].association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.route_tables[0].associations[0].association_state.status_message #=> String
    #   resp.data.route_tables[0].propagating_vgws #=> Array<PropagatingVgw>
    #   resp.data.route_tables[0].propagating_vgws[0] #=> Types::PropagatingVgw
    #   resp.data.route_tables[0].propagating_vgws[0].gateway_id #=> String
    #   resp.data.route_tables[0].route_table_id #=> String
    #   resp.data.route_tables[0].routes #=> Array<Route>
    #   resp.data.route_tables[0].routes[0] #=> Types::Route
    #   resp.data.route_tables[0].routes[0].destination_cidr_block #=> String
    #   resp.data.route_tables[0].routes[0].destination_ipv6_cidr_block #=> String
    #   resp.data.route_tables[0].routes[0].destination_prefix_list_id #=> String
    #   resp.data.route_tables[0].routes[0].egress_only_internet_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].instance_id #=> String
    #   resp.data.route_tables[0].routes[0].instance_owner_id #=> String
    #   resp.data.route_tables[0].routes[0].nat_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].transit_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].local_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].carrier_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].network_interface_id #=> String
    #   resp.data.route_tables[0].routes[0].origin #=> String, one of ["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"]
    #   resp.data.route_tables[0].routes[0].state #=> String, one of ["active", "blackhole"]
    #   resp.data.route_tables[0].routes[0].vpc_peering_connection_id #=> String
    #   resp.data.route_tables[0].routes[0].core_network_arn #=> String
    #   resp.data.route_tables[0].tags #=> Array<Tag>
    #   resp.data.route_tables[0].tags[0] #=> Types::Tag
    #   resp.data.route_tables[0].tags[0].key #=> String
    #   resp.data.route_tables[0].tags[0].value #=> String
    #   resp.data.route_tables[0].vpc_id #=> String
    #   resp.data.route_tables[0].owner_id #=> String
    #   resp.data.next_token #=> String
    #
    def describe_route_tables(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeRouteTablesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeRouteTablesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeRouteTables
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeRouteTables
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeRouteTables,
        params_class: Params::DescribeRouteTablesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_route_tables
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Finds available schedules that meet the specified criteria.</p>
    #          <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
    #          <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a>
    #          to purchase Scheduled Instances with that schedule.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeScheduledInstanceAvailabilityInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [SlotDateTimeRangeRequest] :first_slot_start_time_range
    #   <p>The time period for the first schedule to start.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call.
    #            This value can be between 5 and 300. The default value is 300.
    #            To retrieve the remaining results, make another call with the returned
    #            <code>NextToken</code> value.</p>
    #
    # @option params [Integer] :max_slot_duration_in_hours
    #   <p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code>
    #            and less than 1,720.</p>
    #
    # @option params [Integer] :min_slot_duration_in_hours
    #   <p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [ScheduledInstanceRecurrenceRequest] :recurrence
    #   <p>The schedule recurrence.</p>
    #
    # @return [Types::DescribeScheduledInstanceAvailabilityOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_scheduled_instance_availability(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     first_slot_start_time_range: {
    #       earliest_time: Time.now, # required
    #       latest_time: Time.now # required
    #     }, # required
    #     max_results: 1,
    #     max_slot_duration_in_hours: 1,
    #     min_slot_duration_in_hours: 1,
    #     next_token: 'NextToken',
    #     recurrence: {
    #       frequency: 'Frequency',
    #       interval: 1,
    #       occurrence_days: [
    #         1
    #       ],
    #       occurrence_relative_to_end: false,
    #       occurrence_unit: 'OccurrenceUnit'
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeScheduledInstanceAvailabilityOutput
    #   resp.data.next_token #=> String
    #   resp.data.scheduled_instance_availability_set #=> Array<ScheduledInstanceAvailability>
    #   resp.data.scheduled_instance_availability_set[0] #=> Types::ScheduledInstanceAvailability
    #   resp.data.scheduled_instance_availability_set[0].availability_zone #=> String
    #   resp.data.scheduled_instance_availability_set[0].available_instance_count #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].first_slot_start_time #=> Time
    #   resp.data.scheduled_instance_availability_set[0].hourly_price #=> String
    #   resp.data.scheduled_instance_availability_set[0].instance_type #=> String
    #   resp.data.scheduled_instance_availability_set[0].max_term_duration_in_days #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].min_term_duration_in_days #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].network_platform #=> String
    #   resp.data.scheduled_instance_availability_set[0].platform #=> String
    #   resp.data.scheduled_instance_availability_set[0].purchase_token #=> String
    #   resp.data.scheduled_instance_availability_set[0].recurrence #=> Types::ScheduledInstanceRecurrence
    #   resp.data.scheduled_instance_availability_set[0].recurrence.frequency #=> String
    #   resp.data.scheduled_instance_availability_set[0].recurrence.interval #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_day_set #=> Array<Integer>
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_day_set[0] #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_relative_to_end #=> Boolean
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_unit #=> String
    #   resp.data.scheduled_instance_availability_set[0].slot_duration_in_hours #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].total_scheduled_instance_hours #=> Integer
    #
    def describe_scheduled_instance_availability(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeScheduledInstanceAvailabilityInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeScheduledInstanceAvailabilityInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeScheduledInstanceAvailability
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeScheduledInstanceAvailability
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeScheduledInstanceAvailability,
        params_class: Params::DescribeScheduledInstanceAvailabilityOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_scheduled_instance_availability
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified Scheduled Instances or all your Scheduled Instances.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeScheduledInstancesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call.
    #            This value can be between 5 and 300. The default value is 100.
    #            To retrieve the remaining results, make another call with the returned
    #            <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [Array<String>] :scheduled_instance_ids
    #   <p>The Scheduled Instance IDs.</p>
    #
    # @option params [SlotStartTimeRangeRequest] :slot_start_time_range
    #   <p>The time period for the first schedule to start.</p>
    #
    # @return [Types::DescribeScheduledInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_scheduled_instances(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     scheduled_instance_ids: [
    #       'member'
    #     ],
    #     slot_start_time_range: {
    #       earliest_time: Time.now,
    #       latest_time: Time.now
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeScheduledInstancesOutput
    #   resp.data.next_token #=> String
    #   resp.data.scheduled_instance_set #=> Array<ScheduledInstance>
    #   resp.data.scheduled_instance_set[0] #=> Types::ScheduledInstance
    #   resp.data.scheduled_instance_set[0].availability_zone #=> String
    #   resp.data.scheduled_instance_set[0].create_date #=> Time
    #   resp.data.scheduled_instance_set[0].hourly_price #=> String
    #   resp.data.scheduled_instance_set[0].instance_count #=> Integer
    #   resp.data.scheduled_instance_set[0].instance_type #=> String
    #   resp.data.scheduled_instance_set[0].network_platform #=> String
    #   resp.data.scheduled_instance_set[0].next_slot_start_time #=> Time
    #   resp.data.scheduled_instance_set[0].platform #=> String
    #   resp.data.scheduled_instance_set[0].previous_slot_end_time #=> Time
    #   resp.data.scheduled_instance_set[0].recurrence #=> Types::ScheduledInstanceRecurrence
    #   resp.data.scheduled_instance_set[0].recurrence.frequency #=> String
    #   resp.data.scheduled_instance_set[0].recurrence.interval #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set #=> Array<Integer>
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set[0] #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_relative_to_end #=> Boolean
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_unit #=> String
    #   resp.data.scheduled_instance_set[0].scheduled_instance_id #=> String
    #   resp.data.scheduled_instance_set[0].slot_duration_in_hours #=> Integer
    #   resp.data.scheduled_instance_set[0].term_end_date #=> Time
    #   resp.data.scheduled_instance_set[0].term_start_date #=> Time
    #   resp.data.scheduled_instance_set[0].total_scheduled_instance_hours #=> Integer
    #
    def describe_scheduled_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeScheduledInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeScheduledInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeScheduledInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeScheduledInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeScheduledInstances,
        params_class: Params::DescribeScheduledInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_scheduled_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSecurityGroupReferencesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :group_id
    #   <p>The IDs of the security groups in your account.</p>
    #
    # @return [Types::DescribeSecurityGroupReferencesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_security_group_references(
    #     dry_run: false,
    #     group_id: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSecurityGroupReferencesOutput
    #   resp.data.security_group_reference_set #=> Array<SecurityGroupReference>
    #   resp.data.security_group_reference_set[0] #=> Types::SecurityGroupReference
    #   resp.data.security_group_reference_set[0].group_id #=> String
    #   resp.data.security_group_reference_set[0].referencing_vpc_id #=> String
    #   resp.data.security_group_reference_set[0].vpc_peering_connection_id #=> String
    #
    def describe_security_group_references(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSecurityGroupReferencesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSecurityGroupReferencesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSecurityGroupReferences
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSecurityGroupReferences
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSecurityGroupReferences,
        params_class: Params::DescribeSecurityGroupReferencesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_security_group_references
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your security group rules.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSecurityGroupRulesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>group-id</code> - The ID of the security group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>security-group-rule-id</code> - The ID of the security group rule.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :security_group_rule_ids
    #   <p>The IDs of the security group rules.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another request with the returned <code>NextToken</code> value. This value
    #               can be between 5 and 1000. If this parameter is not specified, then all results are
    #               returned.</p>
    #
    # @return [Types::DescribeSecurityGroupRulesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_security_group_rules(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     security_group_rule_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSecurityGroupRulesOutput
    #   resp.data.security_group_rules #=> Array<SecurityGroupRule>
    #   resp.data.security_group_rules[0] #=> Types::SecurityGroupRule
    #   resp.data.security_group_rules[0].security_group_rule_id #=> String
    #   resp.data.security_group_rules[0].group_id #=> String
    #   resp.data.security_group_rules[0].group_owner_id #=> String
    #   resp.data.security_group_rules[0].is_egress #=> Boolean
    #   resp.data.security_group_rules[0].ip_protocol #=> String
    #   resp.data.security_group_rules[0].from_port #=> Integer
    #   resp.data.security_group_rules[0].to_port #=> Integer
    #   resp.data.security_group_rules[0].cidr_ipv4 #=> String
    #   resp.data.security_group_rules[0].cidr_ipv6 #=> String
    #   resp.data.security_group_rules[0].prefix_list_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info #=> Types::ReferencedSecurityGroup
    #   resp.data.security_group_rules[0].referenced_group_info.group_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.peering_status #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.user_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_peering_connection_id #=> String
    #   resp.data.security_group_rules[0].description #=> String
    #   resp.data.security_group_rules[0].tags #=> Array<Tag>
    #   resp.data.security_group_rules[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_rules[0].tags[0].key #=> String
    #   resp.data.security_group_rules[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_security_group_rules(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSecurityGroupRulesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSecurityGroupRulesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSecurityGroupRules
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSecurityGroupRules
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSecurityGroupRules,
        params_class: Params::DescribeSecurityGroupRulesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_security_group_rules
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified security groups or all of your security groups.</p>
    #          <p>A security group is for use with instances either in the EC2-Classic platform
    # 				or in a specific VPC. For more information, see
    # 				<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 security groups</a> in
    # 				the <i>Amazon Elastic Compute Cloud User Guide</i> and
    # 				<a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security groups for your VPC</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSecurityGroupsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>description</code> - The description of the security group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an outbound
    #                       security group rule.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.from-port</code> - For an outbound rule, the
    #                       start of port range for the TCP and UDP protocols, or an ICMP type
    #                       number.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.group-id</code> - The ID of a security group
    #                       that has been referenced in an outbound security group rule.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.group-name</code> - The name of a security group
    #                       that is referenced in an outbound security group rule.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an
    #                       outbound security group rule.</p>
    #               </li>
    #               <li>
    #        		        <p>
    #                     <code>egress.ip-permission.prefix-list-id</code> - The ID of a prefix list to which a security group rule allows outbound access.</p>
    #        	      </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.protocol</code> - The IP protocol for an
    #                       outbound security group rule (<code>tcp</code> | <code>udp</code> |
    #                           <code>icmp</code>, a protocol number, or -1 for all protocols).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.to-port</code> - For an outbound rule, the end
    #                       of port range for the TCP and UDP protocols, or an ICMP code.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>egress.ip-permission.user-id</code> - The ID of an Amazon Web Services account that
    #                       has been referenced in an outbound security group rule.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>group-id</code> - The ID of the security group. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>group-name</code> - The name of the security group.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound security
    #                       group rule.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.from-port</code> - For an inbound rule, the start of port
    #                       range for the TCP and UDP protocols, or an ICMP type number.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.group-id</code> - The ID of a security group that has been
    #                       referenced in an inbound security group rule.</p>
    #               </li>
    #               <li>
    #   			            <p>
    #                     <code>ip-permission.group-name</code> - The name of a security group that is
    #                       referenced in an inbound security group rule.</p>
    #   	           </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound security
    #                       group rule.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ip-permission.prefix-list-id</code> - The ID of a prefix list from which a security group rule allows inbound access.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.protocol</code> - The IP protocol for an inbound security
    #                   group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code>, a
    #                   protocol number, or -1 for all protocols).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.to-port</code> - For an inbound rule, the end of port range
    #                       for the TCP and UDP protocols, or an ICMP code.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>ip-permission.user-id</code> - The ID of an Amazon Web Services account that has been
    #                       referenced in an inbound security group rule.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The Amazon Web Services account ID of the owner of the security group.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :group_ids
    #   <p>The IDs of the security groups. Required for security groups in a nondefault VPC.</p>
    #            <p>Default: Describes all of your security groups.</p>
    #
    # @option params [Array<String>] :group_names
    #   <p>[EC2-Classic and default VPC only] The names of the security groups. You can specify either
    #   			the security group name or the security group ID. For security groups in a nondefault VPC, use
    #   			the <code>group-name</code> filter to describe security groups by name.</p>
    #            <p>Default: Describes all of your security groups.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another request with the returned <code>NextToken</code> value. This value
    #               can be between 5 and 1000. If this parameter is not specified, then all results are
    #               returned.</p>
    #
    # @return [Types::DescribeSecurityGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_security_groups(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     group_ids: [
    #       'member'
    #     ],
    #     group_names: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSecurityGroupsOutput
    #   resp.data.security_groups #=> Array<SecurityGroup>
    #   resp.data.security_groups[0] #=> Types::SecurityGroup
    #   resp.data.security_groups[0].description #=> String
    #   resp.data.security_groups[0].group_name #=> String
    #   resp.data.security_groups[0].ip_permissions #=> Array<IpPermission>
    #   resp.data.security_groups[0].ip_permissions[0] #=> Types::IpPermission
    #   resp.data.security_groups[0].ip_permissions[0].from_port #=> Integer
    #   resp.data.security_groups[0].ip_permissions[0].ip_protocol #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges #=> Array<IpRange>
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges[0] #=> Types::IpRange
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges[0].cidr_ip #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges #=> Array<Ipv6Range>
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges[0] #=> Types::Ipv6Range
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges[0].cidr_ipv6 #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids #=> Array<PrefixListId>
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids[0] #=> Types::PrefixListId
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids[0].prefix_list_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].to_port #=> Integer
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    #   resp.data.security_groups[0].owner_id #=> String
    #   resp.data.security_groups[0].group_id #=> String
    #   resp.data.security_groups[0].ip_permissions_egress #=> Array<IpPermission>
    #   resp.data.security_groups[0].tags #=> Array<Tag>
    #   resp.data.security_groups[0].tags[0] #=> Types::Tag
    #   resp.data.security_groups[0].tags[0].key #=> String
    #   resp.data.security_groups[0].tags[0].value #=> String
    #   resp.data.security_groups[0].vpc_id #=> String
    #   resp.data.next_token #=> String
    #
    def describe_security_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSecurityGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSecurityGroupsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSecurityGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSecurityGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSecurityGroups,
        params_class: Params::DescribeSecurityGroupsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_security_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified attribute of the specified snapshot. You can specify only one
    #       attribute at a time.</p>
    #          <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSnapshotAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The snapshot attribute you would like to view.</p>
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the EBS snapshot.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeSnapshotAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_snapshot_attribute(
    #     attribute: 'productCodes', # required - accepts ["productCodes", "createVolumePermission"]
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSnapshotAttributeOutput
    #   resp.data.create_volume_permissions #=> Array<CreateVolumePermission>
    #   resp.data.create_volume_permissions[0] #=> Types::CreateVolumePermission
    #   resp.data.create_volume_permissions[0].group #=> String, one of ["all"]
    #   resp.data.create_volume_permissions[0].user_id #=> String
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.snapshot_id #=> String
    #
    def describe_snapshot_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSnapshotAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSnapshotAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSnapshotAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSnapshotAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSnapshotAttribute,
        params_class: Params::DescribeSnapshotAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_snapshot_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the storage tier status of one or more Amazon EBS snapshots.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSnapshotTierStatusInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>snapshot-id</code> - The snapshot ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-id</code> - The ID of the volume the snapshot is for.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>last-tiering-operation</code> - The state of the last archive or restore action. (<code>archival-in-progress</code> | <code>archival-completed</code> |
    #             <code>archival-failed</code> | <code>permanent-restore-in-progress</code> | <code>permanent-restore-completed</code> | <code>permanent-restore-failed</code> |
    #   		<code>temporary-restore-in-progress</code> | <code>temporary-restore-completed</code> | <code>temporary-restore-failed</code>)</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeSnapshotTierStatusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_snapshot_tier_status(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSnapshotTierStatusOutput
    #   resp.data.snapshot_tier_statuses #=> Array<SnapshotTierStatus>
    #   resp.data.snapshot_tier_statuses[0] #=> Types::SnapshotTierStatus
    #   resp.data.snapshot_tier_statuses[0].snapshot_id #=> String
    #   resp.data.snapshot_tier_statuses[0].volume_id #=> String
    #   resp.data.snapshot_tier_statuses[0].status #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.snapshot_tier_statuses[0].owner_id #=> String
    #   resp.data.snapshot_tier_statuses[0].tags #=> Array<Tag>
    #   resp.data.snapshot_tier_statuses[0].tags[0] #=> Types::Tag
    #   resp.data.snapshot_tier_statuses[0].tags[0].key #=> String
    #   resp.data.snapshot_tier_statuses[0].tags[0].value #=> String
    #   resp.data.snapshot_tier_statuses[0].storage_tier #=> String, one of ["archive", "standard"]
    #   resp.data.snapshot_tier_statuses[0].last_tiering_start_time #=> Time
    #   resp.data.snapshot_tier_statuses[0].last_tiering_progress #=> Integer
    #   resp.data.snapshot_tier_statuses[0].last_tiering_operation_status #=> String, one of ["archival-in-progress", "archival-completed", "archival-failed", "temporary-restore-in-progress", "temporary-restore-completed", "temporary-restore-failed", "permanent-restore-in-progress", "permanent-restore-completed", "permanent-restore-failed"]
    #   resp.data.snapshot_tier_statuses[0].last_tiering_operation_status_detail #=> String
    #   resp.data.snapshot_tier_statuses[0].archival_complete_time #=> Time
    #   resp.data.snapshot_tier_statuses[0].restore_expiry_time #=> Time
    #   resp.data.next_token #=> String
    #
    def describe_snapshot_tier_status(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSnapshotTierStatusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSnapshotTierStatusInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSnapshotTierStatus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSnapshotTierStatus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSnapshotTierStatus,
        params_class: Params::DescribeSnapshotTierStatusOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_snapshot_tier_status
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots
    #       available to you.</p>
    #          <p>The snapshots available to you include public snapshots, private snapshots that you own,
    #       and private snapshots owned by other Amazon Web Services accounts for which you have explicit create volume
    #       permissions.</p>
    #          <p>The create volume permissions fall into the following categories:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <i>public</i>: The owner of the snapshot granted create volume
    #           permissions for the snapshot to the <code>all</code> group. All Amazon Web Services accounts have create
    #           volume permissions for these snapshots.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <i>explicit</i>: The owner of the snapshot granted create volume
    #           permissions to a specific Amazon Web Services account.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <i>implicit</i>: An Amazon Web Services account has implicit create volume permissions
    #           for all snapshots it owns.</p>
    #             </li>
    #          </ul>
    #          <p>The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot
    #       owners, or Amazon Web Services accounts with create volume permissions. If no options are specified,
    #       Amazon EC2 returns all snapshots for which you have create volume permissions.</p>
    #          <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are
    #       returned. If you specify an invalid snapshot ID, an error is returned. If you specify a
    #       snapshot ID for which you do not have access, it is not included in the returned
    #       results.</p>
    #          <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only
    #       snapshots from the specified owners and for which you have access are returned. The results
    #       can include the Amazon Web Services account IDs of the specified owners, <code>amazon</code> for snapshots
    #       owned by Amazon, or <code>self</code> for snapshots that you own.</p>
    #          <p>If you specify a list of restorable users, only snapshots with create snapshot permissions
    #       for those users are returned. You can specify Amazon Web Services account IDs (if you own the snapshots),
    #         <code>self</code> for snapshots for which you own or have explicit permissions, or
    #         <code>all</code> for public snapshots.</p>
    #          <p>If you are describing a long list of snapshots, we recommend that you paginate the output to make the
    #       list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results
    #       returned in a single page. If the list of results exceeds your <code>MaxResults</code> value,
    #       then that number of results is returned along with a <code>NextToken</code> value that can be
    #       passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining
    #       results.</p>
    #          <p>To get the state of fast snapshot restores for a snapshot, use <a>DescribeFastSnapshotRestores</a>.</p>
    #          <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSnapshotsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>description</code> - A description of the snapshot.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>encrypted</code> - Indicates whether the snapshot is encrypted
    #               (<code>true</code> | <code>false</code>)</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-alias</code> - The owner alias, from an Amazon-maintained list
    #             (<code>amazon</code>).
    #             This is not the user-configured Amazon Web Services account alias set using the IAM console.
    #             We recommend that you use the related parameter instead of this filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The Amazon Web Services account ID of the owner. We recommend that
    #             you use the related parameter instead of this filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>progress</code> - The progress of the snapshot, as a percentage (for example,
    #             80%).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>snapshot-id</code> - The snapshot ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>start-time</code> - The time stamp when the snapshot was initiated.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status</code> - The status of the snapshot (<code>pending</code> |
    #               <code>completed</code> | <code>error</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>storage-tier</code> - The storage tier of the snapshot (<code>archive</code> |
    #             <code>standard</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-id</code> - The ID of the volume the snapshot is for.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-size</code> - The size of the volume, in GiB.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in
    #         paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns
    #           <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
    #         response element. The remaining results of the initial request can be seen by sending another
    #           <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This
    #         value can be between 5 and 1,000; if <code>MaxResults</code> is given a value larger than 1,000,
    #         only 1,000 results are returned. If this parameter is not used, then
    #           <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and
    #         the snapshot IDs parameter in the same request.</p>
    #
    # @option params [String] :next_token
    #   <p>The <code>NextToken</code> value returned from a previous paginated
    #           <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the
    #         results exceeded the value of that parameter. Pagination continues from the end of the
    #         previous results that returned the <code>NextToken</code> value. This value is
    #           <code>null</code> when there are no more results to return.</p>
    #
    # @option params [Array<String>] :owner_ids
    #   <p>Scopes the results to snapshots with the specified owners. You can specify a combination of
    #         Amazon Web Services account IDs, <code>self</code>, and <code>amazon</code>.</p>
    #
    # @option params [Array<String>] :restorable_by_user_ids
    #   <p>The IDs of the Amazon Web Services accounts that can create volumes from the snapshot.</p>
    #
    # @option params [Array<String>] :snapshot_ids
    #   <p>The snapshot IDs.</p>
    #            <p>Default: Describes the snapshots for which you have create volume permissions.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeSnapshotsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_snapshots(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     owner_ids: [
    #       'member'
    #     ],
    #     restorable_by_user_ids: [
    #       'member'
    #     ],
    #     snapshot_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSnapshotsOutput
    #   resp.data.snapshots #=> Array<Snapshot>
    #   resp.data.snapshots[0] #=> Types::Snapshot
    #   resp.data.snapshots[0].data_encryption_key_id #=> String
    #   resp.data.snapshots[0].description #=> String
    #   resp.data.snapshots[0].encrypted #=> Boolean
    #   resp.data.snapshots[0].kms_key_id #=> String
    #   resp.data.snapshots[0].owner_id #=> String
    #   resp.data.snapshots[0].progress #=> String
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].start_time #=> Time
    #   resp.data.snapshots[0].state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.snapshots[0].state_message #=> String
    #   resp.data.snapshots[0].volume_id #=> String
    #   resp.data.snapshots[0].volume_size #=> Integer
    #   resp.data.snapshots[0].owner_alias #=> String
    #   resp.data.snapshots[0].outpost_arn #=> String
    #   resp.data.snapshots[0].tags #=> Array<Tag>
    #   resp.data.snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.snapshots[0].tags[0].key #=> String
    #   resp.data.snapshots[0].tags[0].value #=> String
    #   resp.data.snapshots[0].storage_tier #=> String, one of ["archive", "standard"]
    #   resp.data.snapshots[0].restore_expiry_time #=> Time
    #   resp.data.next_token #=> String
    #
    def describe_snapshots(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSnapshotsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSnapshotsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSnapshots
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSnapshots
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSnapshots,
        params_class: Params::DescribeSnapshotsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_snapshots
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
    #                 Instance data feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSpotDatafeedSubscriptionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeSpotDatafeedSubscriptionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_spot_datafeed_subscription(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSpotDatafeedSubscriptionOutput
    #   resp.data.spot_datafeed_subscription #=> Types::SpotDatafeedSubscription
    #   resp.data.spot_datafeed_subscription.bucket #=> String
    #   resp.data.spot_datafeed_subscription.fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_datafeed_subscription.fault.code #=> String
    #   resp.data.spot_datafeed_subscription.fault.message #=> String
    #   resp.data.spot_datafeed_subscription.owner_id #=> String
    #   resp.data.spot_datafeed_subscription.prefix #=> String
    #   resp.data.spot_datafeed_subscription.state #=> String, one of ["Active", "Inactive"]
    #
    def describe_spot_datafeed_subscription(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSpotDatafeedSubscriptionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSpotDatafeedSubscriptionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSpotDatafeedSubscription
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSpotDatafeedSubscription
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSpotDatafeedSubscription,
        params_class: Params::DescribeSpotDatafeedSubscriptionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_spot_datafeed_subscription
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the running instances for the specified Spot Fleet.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSpotFleetInstancesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1
    #               and 1000. The default value is 1000. To retrieve the remaining results, make another
    #               call with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [String] :spot_fleet_request_id
    #   <p>The ID of the Spot Fleet request.</p>
    #
    # @return [Types::DescribeSpotFleetInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_spot_fleet_instances(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     spot_fleet_request_id: 'SpotFleetRequestId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSpotFleetInstancesOutput
    #   resp.data.active_instances #=> Array<ActiveInstance>
    #   resp.data.active_instances[0] #=> Types::ActiveInstance
    #   resp.data.active_instances[0].instance_id #=> String
    #   resp.data.active_instances[0].instance_type #=> String
    #   resp.data.active_instances[0].spot_instance_request_id #=> String
    #   resp.data.active_instances[0].instance_health #=> String, one of ["healthy", "unhealthy"]
    #   resp.data.next_token #=> String
    #   resp.data.spot_fleet_request_id #=> String
    #
    def describe_spot_fleet_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSpotFleetInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSpotFleetInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSpotFleetInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSpotFleetInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSpotFleetInstances,
        params_class: Params::DescribeSpotFleetInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_spot_fleet_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the events for the specified Spot Fleet request during the specified
    #             time.</p>
    #         <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This
    #             ensures that you can query by the last evaluated time and not miss a recorded event.
    #             Spot Fleet events are available for 48 hours.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor fleet events using Amazon
    #                 EventBridge</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSpotFleetRequestHistoryInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :event_type
    #   <p>The type of events to describe. By default, all events are described.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1
    #               and 1000. The default value is 1000. To retrieve the remaining results, make another
    #               call with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [String] :spot_fleet_request_id
    #   <p>The ID of the Spot Fleet request.</p>
    #
    # @option params [Time] :start_time
    #   <p>The starting date and time for the events, in UTC format (for example,
    #                   <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #
    # @return [Types::DescribeSpotFleetRequestHistoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_spot_fleet_request_history(
    #     dry_run: false,
    #     event_type: 'instanceChange', # accepts ["instanceChange", "fleetRequestChange", "error", "information"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     spot_fleet_request_id: 'SpotFleetRequestId', # required
    #     start_time: Time.now # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSpotFleetRequestHistoryOutput
    #   resp.data.history_records #=> Array<HistoryRecord>
    #   resp.data.history_records[0] #=> Types::HistoryRecord
    #   resp.data.history_records[0].event_information #=> Types::EventInformation
    #   resp.data.history_records[0].event_information.event_description #=> String
    #   resp.data.history_records[0].event_information.event_sub_type #=> String
    #   resp.data.history_records[0].event_information.instance_id #=> String
    #   resp.data.history_records[0].event_type #=> String, one of ["instanceChange", "fleetRequestChange", "error", "information"]
    #   resp.data.history_records[0].timestamp #=> Time
    #   resp.data.last_evaluated_time #=> Time
    #   resp.data.next_token #=> String
    #   resp.data.spot_fleet_request_id #=> String
    #   resp.data.start_time #=> Time
    #
    def describe_spot_fleet_request_history(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSpotFleetRequestHistoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSpotFleetRequestHistoryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSpotFleetRequestHistory
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSpotFleetRequestHistory
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSpotFleetRequestHistory,
        params_class: Params::DescribeSpotFleetRequestHistoryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_spot_fleet_request_history
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your Spot Fleet requests.</p>
    #         <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances
    #             are terminated.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSpotFleetRequestsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1
    #               and 1000. The default value is 1000. To retrieve the remaining results, make another
    #               call with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [Array<String>] :spot_fleet_request_ids
    #   <p>The IDs of the Spot Fleet requests.</p>
    #
    # @return [Types::DescribeSpotFleetRequestsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_spot_fleet_requests(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     spot_fleet_request_ids: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSpotFleetRequestsOutput
    #   resp.data.next_token #=> String
    #   resp.data.spot_fleet_request_configs #=> Array<SpotFleetRequestConfig>
    #   resp.data.spot_fleet_request_configs[0] #=> Types::SpotFleetRequestConfig
    #   resp.data.spot_fleet_request_configs[0].activity_status #=> String, one of ["error", "pending_fulfillment", "pending_termination", "fulfilled"]
    #   resp.data.spot_fleet_request_configs[0].create_time #=> Time
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config #=> Types::SpotFleetRequestConfigData
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.allocation_strategy #=> String, one of ["lowestPrice", "diversified", "capacityOptimized", "capacityOptimizedPrioritized"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_allocation_strategy #=> String, one of ["lowestPrice", "prioritized"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies #=> Types::SpotMaintenanceStrategies
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies.capacity_rebalance #=> Types::SpotCapacityRebalance
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies.capacity_rebalance.replacement_strategy #=> String, one of ["launch", "launch-before-terminate"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies.capacity_rebalance.termination_delay #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.client_token #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.excess_capacity_termination_policy #=> String, one of ["noTermination", "default"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.fulfilled_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_fulfilled_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.iam_fleet_role #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications #=> Array<SpotFleetLaunchSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0] #=> Types::SpotFleetLaunchSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups #=> Array<GroupIdentifier>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups[0] #=> Types::GroupIdentifier
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups[0].group_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups[0].group_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].addressing_type #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].device_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].virtual_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].no_device #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].ebs_optimized #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].iam_instance_profile #=> Types::IamInstanceProfileSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].iam_instance_profile.arn #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].iam_instance_profile.name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].image_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].kernel_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].key_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].monitoring #=> Types::SpotFleetMonitoring
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].monitoring.enabled #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces #=> Array<InstanceNetworkInterfaceSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0] #=> Types::InstanceNetworkInterfaceSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].description #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].device_index #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].groups #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].groups[0] #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].network_interface_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_address #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].subnet_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].interface_type #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].network_card_index #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationRequest>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationRequest>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement #=> Types::SpotPlacement
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement.availability_zone #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement.group_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].ramdisk_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].spot_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].subnet_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].user_data #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].weighted_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications #=> Array<SpotFleetTagSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0] #=> Types::SpotFleetTagSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags[0].key #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags[0].value #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements #=> Types::InstanceRequirements
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.instance_generations #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_manufacturers[0] #=> String, one of ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_names[0] #=> String, one of ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs #=> Array<LaunchTemplateConfig>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0] #=> Types::LaunchTemplateConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification.launch_template_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification.launch_template_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification.version #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides #=> Array<LaunchTemplateOverrides>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0] #=> Types::LaunchTemplateOverrides
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].spot_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].subnet_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].availability_zone #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].weighted_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].priority #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].instance_requirements #=> Types::InstanceRequirements
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.target_capacity #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_target_capacity #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_max_total_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_max_total_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.terminate_instances_with_expiration #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.type #=> String, one of ["request", "maintain", "instant"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.valid_from #=> Time
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.valid_until #=> Time
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.replace_unhealthy_instances #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config #=> Types::LoadBalancersConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config #=> Types::ClassicLoadBalancersConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config.classic_load_balancers #=> Array<ClassicLoadBalancer>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config.classic_load_balancers[0] #=> Types::ClassicLoadBalancer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config.classic_load_balancers[0].name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config #=> Types::TargetGroupsConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config.target_groups #=> Array<TargetGroup>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config.target_groups[0] #=> Types::TargetGroup
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config.target_groups[0].arn #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.instance_pools_to_use_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.context #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.target_capacity_unit_type #=> String, one of ["vcpu", "memory-mib", "units"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications #=> Array<TagSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications[0] #=> Types::TagSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_state #=> String, one of ["submitted", "active", "cancelled", "failed", "cancelled_running", "cancelled_terminating", "modifying"]
    #   resp.data.spot_fleet_request_configs[0].tags #=> Array<Tag>
    #
    def describe_spot_fleet_requests(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSpotFleetRequestsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSpotFleetRequestsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSpotFleetRequests
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSpotFleetRequests
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSpotFleetRequests,
        params_class: Params::DescribeSpotFleetRequestsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_spot_fleet_requests
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified Spot Instance requests.</p>
    #         <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by
    #             examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the
    #             instance ID appears in the response and contains the identifier of the instance.
    #             Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a>
    #             with a filter to look for instances where the instance lifecycle is
    #             <code>spot</code>.</p>
    #         <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to
    #             limit the number of results returned. This paginates the output, which makes the list
    #             more manageable and returns the results faster. If the list of results exceeds your
    #                 <code>MaxResults</code> value, then that number of results is returned along with a
    #                 <code>NextToken</code> value that can be passed to a subsequent
    #                 <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining
    #             results.</p>
    #         <p>Spot Instance requests are deleted four hours after they are canceled and their instances are
    #             terminated.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSpotInstanceRequestsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>availability-zone-group</code> - The Availability Zone group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>create-time</code> - The time stamp when the Spot Instance request was
    #                       created.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>fault-code</code> - The fault code related to the request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>fault-message</code> - The fault message related to the request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>instance-id</code> - The ID of the instance that fulfilled the
    #                       request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch-group</code> - The Spot Instance launch group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.block-device-mapping.delete-on-termination</code> - Indicates
    #                       whether the EBS volume is deleted on instance termination.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.block-device-mapping.device-name</code> - The device name for the
    #                       volume in the block device mapping (for example, <code>/dev/sdh</code> or
    #                           <code>xvdh</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot
    #                       for the EBS volume.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.block-device-mapping.volume-size</code> - The size of the EBS
    #                       volume, in GiB.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume:
    #                           <code>gp2</code> for General Purpose SSD, <code>io1</code> or
    #                           <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput
    #                       Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for
    #                       Magnetic.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.group-id</code> - The ID of the security group for the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.group-name</code> - The name of the security group for the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.image-id</code> - The ID of the AMI.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.instance-type</code> - The type of instance (for example,
    #                           <code>m3.medium</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.kernel-id</code> - The kernel ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.key-name</code> - The name of the key pair the instance launched
    #                       with.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.monitoring-enabled</code> - Whether detailed monitoring is
    #                       enabled for the Spot Instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launch.ramdisk-id</code> - The RAM disk ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>launched-availability-zone</code> - The Availability Zone in which the
    #                       request is launched.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.addresses.primary</code> - Indicates whether the IP
    #                       address is the primary private IP address.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.delete-on-termination</code> - Indicates whether the
    #                       network interface is deleted when the instance is terminated.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.description</code> - A description of the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.device-index</code> - The index of the device for the
    #                       network interface attachment on the instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.group-id</code> - The ID of the security group
    #                       associated with the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.network-interface-id</code> - The ID of the network
    #                       interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.private-ip-address</code> - The primary private IP
    #                       address of the network interface.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>network-interface.subnet-id</code> - The ID of the subnet for the
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>product-description</code> - The product description associated with the
    #                       instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>spot-instance-request-id</code> - The Spot Instance request ID.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>spot-price</code> - The maximum hourly price for any Spot Instance
    #                       launched to fulfill the request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the Spot Instance request (<code>open</code>
    #                       | <code>active</code> | <code>closed</code> | <code>cancelled</code> |
    #                           <code>failed</code>). Spot request status information can help you track
    #                       your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot
    #                           request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>status-code</code> - The short code describing the most recent
    #                       evaluation of your Spot Instance request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>status-message</code> - The message explaining the status of the Spot
    #                       Instance request.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>type</code> - The type of Spot Instance request (<code>one-time</code> |
    #                           <code>persistent</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>valid-from</code> - The start date of the request.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>valid-until</code> - The end date of the request.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :spot_instance_request_ids
    #   <p>One or more Spot Instance request IDs.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next set of results. This value is <code>null</code> when
    #               there are no more results to return.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 5
    #               and 1000. To retrieve the remaining results, make another call with the returned
    #                   <code>NextToken</code> value.</p>
    #
    # @return [Types::DescribeSpotInstanceRequestsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_spot_instance_requests(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     spot_instance_request_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSpotInstanceRequestsOutput
    #   resp.data.spot_instance_requests #=> Array<SpotInstanceRequest>
    #   resp.data.spot_instance_requests[0] #=> Types::SpotInstanceRequest
    #   resp.data.spot_instance_requests[0].actual_block_hourly_price #=> String
    #   resp.data.spot_instance_requests[0].availability_zone_group #=> String
    #   resp.data.spot_instance_requests[0].block_duration_minutes #=> Integer
    #   resp.data.spot_instance_requests[0].create_time #=> Time
    #   resp.data.spot_instance_requests[0].fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_instance_requests[0].fault.code #=> String
    #   resp.data.spot_instance_requests[0].fault.message #=> String
    #   resp.data.spot_instance_requests[0].instance_id #=> String
    #   resp.data.spot_instance_requests[0].launch_group #=> String
    #   resp.data.spot_instance_requests[0].launch_specification #=> Types::LaunchSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.user_data #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups #=> Array<GroupIdentifier>
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0] #=> Types::GroupIdentifier
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.addressing_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].device_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].virtual_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].no_device #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.ebs_optimized #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile #=> Types::IamInstanceProfileSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.image_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.spot_instance_requests[0].launch_specification.kernel_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.key_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces #=> Array<InstanceNetworkInterfaceSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0] #=> Types::InstanceNetworkInterfaceSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].description #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].device_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups #=> Array<String>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups[0] #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_interface_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].interface_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.placement #=> Types::SpotPlacement
    #   resp.data.spot_instance_requests[0].launch_specification.placement.availability_zone #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.spot_instance_requests[0].launch_specification.ramdisk_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring #=> Types::RunInstancesMonitoringEnabled
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring.enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launched_availability_zone #=> String
    #   resp.data.spot_instance_requests[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.spot_instance_requests[0].spot_instance_request_id #=> String
    #   resp.data.spot_instance_requests[0].spot_price #=> String
    #   resp.data.spot_instance_requests[0].state #=> String, one of ["open", "active", "closed", "cancelled", "failed"]
    #   resp.data.spot_instance_requests[0].status #=> Types::SpotInstanceStatus
    #   resp.data.spot_instance_requests[0].status.code #=> String
    #   resp.data.spot_instance_requests[0].status.message #=> String
    #   resp.data.spot_instance_requests[0].status.update_time #=> Time
    #   resp.data.spot_instance_requests[0].tags #=> Array<Tag>
    #   resp.data.spot_instance_requests[0].tags[0] #=> Types::Tag
    #   resp.data.spot_instance_requests[0].tags[0].key #=> String
    #   resp.data.spot_instance_requests[0].tags[0].value #=> String
    #   resp.data.spot_instance_requests[0].type #=> String, one of ["one-time", "persistent"]
    #   resp.data.spot_instance_requests[0].valid_from #=> Time
    #   resp.data.spot_instance_requests[0].valid_until #=> Time
    #   resp.data.spot_instance_requests[0].instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.next_token #=> String
    #
    def describe_spot_instance_requests(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSpotInstanceRequestsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSpotInstanceRequestsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSpotInstanceRequests
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSpotInstanceRequests
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSpotInstanceRequests,
        params_class: Params::DescribeSpotInstanceRequestsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_spot_instance_requests
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance pricing history</a> in the
    #             <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #         <p>When you specify a start and end time, the operation returns the prices of the
    #             instance types within that time range. It also returns the last price change before the
    #             start time, which is the effective price as of the start time.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSpotPriceHistoryInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>availability-zone</code> - The Availability Zone for which prices should
    #                       be returned.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>instance-type</code> - The type of instance (for example,
    #                           <code>m3.medium</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>product-description</code> - The product description for the Spot price
    #                           (<code>Linux/UNIX</code> | <code>Red Hat Enterprise Linux</code> |
    #                           <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon
    #                           VPC)</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> |
    #                           <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon
    #                       VPC)</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>spot-price</code> - The Spot price. The value must match exactly (or use
    #                       wildcards; greater than or less than comparison is not supported).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>timestamp</code> - The time stamp of the Spot price history, in UTC format
    #                       (for example,
    #                           <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    #                       You can use wildcards (* and ?). Greater than or less than comparison is not
    #                       supported.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :availability_zone
    #   <p>Filters the results by the specified Availability Zone.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Time] :end_time
    #   <p>The date and time, up to the current date, from which to stop retrieving the price
    #               history data, in UTC format (for example,
    #                   <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #
    # @option params [Array<String>] :instance_types
    #   <p>Filters the results by the specified instance types.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1
    #               and 1000. The default value is 1000. To retrieve the remaining results, make another
    #               call with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @option params [Array<String>] :product_descriptions
    #   <p>Filters the results by the specified basic product descriptions.</p>
    #
    # @option params [Time] :start_time
    #   <p>The date and time, up to the past 90 days, from which to start retrieving the price
    #               history data, in UTC format (for example,
    #                   <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #
    # @return [Types::DescribeSpotPriceHistoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_spot_price_history(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     availability_zone: 'AvailabilityZone',
    #     dry_run: false,
    #     end_time: Time.now,
    #     instance_types: [
    #       'a1.medium' # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     product_descriptions: [
    #       'member'
    #     ],
    #     start_time: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSpotPriceHistoryOutput
    #   resp.data.next_token #=> String
    #   resp.data.spot_price_history #=> Array<SpotPrice>
    #   resp.data.spot_price_history[0] #=> Types::SpotPrice
    #   resp.data.spot_price_history[0].availability_zone #=> String
    #   resp.data.spot_price_history[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.spot_price_history[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.spot_price_history[0].spot_price #=> String
    #   resp.data.spot_price_history[0].timestamp #=> Time
    #
    def describe_spot_price_history(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSpotPriceHistoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSpotPriceHistoryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSpotPriceHistory
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSpotPriceHistory
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSpotPriceHistory,
        params_class: Params::DescribeSpotPriceHistoryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_spot_price_history
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>[VPC only] Describes the stale security group rules for security groups in a specified VPC.
    #           Rules are stale when they reference a deleted security group in the same VPC or in a peer VPC,
    #           or if they reference a security group in a peer VPC for which the VPC peering connection has
    #           been deleted.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeStaleSecurityGroupsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::DescribeStaleSecurityGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_stale_security_groups(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeStaleSecurityGroupsOutput
    #   resp.data.next_token #=> String
    #   resp.data.stale_security_group_set #=> Array<StaleSecurityGroup>
    #   resp.data.stale_security_group_set[0] #=> Types::StaleSecurityGroup
    #   resp.data.stale_security_group_set[0].description #=> String
    #   resp.data.stale_security_group_set[0].group_id #=> String
    #   resp.data.stale_security_group_set[0].group_name #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions #=> Array<StaleIpPermission>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0] #=> Types::StaleIpPermission
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].from_port #=> Integer
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].ip_protocol #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].ip_ranges #=> Array<String>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].ip_ranges[0] #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].prefix_list_ids #=> Array<String>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].prefix_list_ids[0] #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].to_port #=> Integer
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions_egress #=> Array<StaleIpPermission>
    #   resp.data.stale_security_group_set[0].vpc_id #=> String
    #
    def describe_stale_security_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeStaleSecurityGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeStaleSecurityGroupsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeStaleSecurityGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeStaleSecurityGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeStaleSecurityGroups,
        params_class: Params::DescribeStaleSecurityGroupsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_stale_security_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the progress of the AMI store tasks. You can describe the store tasks for
    #       specified AMIs. If you don't specify the AMIs, you get a paginated list of store tasks from
    #       the last 31 days.</p>
    #          <p>For each AMI task, the response indicates if the task is <code>InProgress</code>,
    #         <code>Completed</code>, or <code>Failed</code>. For tasks <code>InProgress</code>, the
    #       response shows the estimated progress as a percentage.</p>
    #          <p>Tasks are listed in reverse chronological order. Currently, only tasks from the past 31
    #       days can be viewed.</p>
    #          <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
    #     	Amazon S3</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeStoreImageTasksInput}.
    #
    # @option params [Array<String>] :image_ids
    #   <p>The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>task-state</code> - Returns tasks in a certain state (<code>InProgress</code> |
    #               <code>Completed</code> | <code>Failed</code>)</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>bucket</code> - Returns task information for tasks that targeted a specific
    #             bucket. For the filter value, specify the bucket name.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #         results, make another call with the returned <code>NextToken</code> value. This value can be
    #         between 1 and 200. You cannot specify this parameter and the <code>ImageIDs</code> parameter
    #         in the same call.</p>
    #
    # @return [Types::DescribeStoreImageTasksOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_store_image_tasks(
    #     image_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeStoreImageTasksOutput
    #   resp.data.store_image_task_results #=> Array<StoreImageTaskResult>
    #   resp.data.store_image_task_results[0] #=> Types::StoreImageTaskResult
    #   resp.data.store_image_task_results[0].ami_id #=> String
    #   resp.data.store_image_task_results[0].task_start_time #=> Time
    #   resp.data.store_image_task_results[0].bucket #=> String
    #   resp.data.store_image_task_results[0].s3object_key #=> String
    #   resp.data.store_image_task_results[0].progress_percentage #=> Integer
    #   resp.data.store_image_task_results[0].store_task_state #=> String
    #   resp.data.store_image_task_results[0].store_task_failure_reason #=> String
    #   resp.data.next_token #=> String
    #
    def describe_store_image_tasks(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeStoreImageTasksInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeStoreImageTasksInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeStoreImageTasks
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeStoreImageTasks
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeStoreImageTasks,
        params_class: Params::DescribeStoreImageTasksOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_store_image_tasks
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your subnets.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and subnets</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeSubnetsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>availability-zone</code> - The Availability Zone for the subnet. You can also use
    #                       <code>availabilityZone</code> as the filter name.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>availability-zone-id</code> - The ID of the Availability Zone for the subnet.
    #                       You can also use <code>availabilityZoneId</code> as the filter name.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>available-ip-address-count</code> - The number of IPv4 addresses in the
    #                       subnet that are available.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR block you
    #                       specify must exactly match the subnet's CIDR block for information to be
    #                       returned for the subnet. You can also use <code>cidr</code> or
    #                       <code>cidrBlock</code> as the filter names.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>default-for-az</code> - Indicates whether this is the default subnet for the
    #                       Availability Zone (<code>true</code> | <code>false</code>). You can also use
    #                       <code>defaultForAz</code> as the filter name.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
    #                       block associated with the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.association-id</code> - An association ID
    #                       for an IPv6 CIDR block associated with the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
    #                       block associated with the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-native</code> - Indicates whether this is an IPv6 only subnet (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>subnet-id</code> - The ID of the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpc-id</code> - The ID of the VPC for the subnet.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>One or more subnet IDs.</p>
    #   		       <p>Default: Describes all your subnets.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeSubnetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_subnets(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeSubnetsOutput
    #   resp.data.subnets #=> Array<Subnet>
    #   resp.data.subnets[0] #=> Types::Subnet
    #   resp.data.subnets[0].availability_zone #=> String
    #   resp.data.subnets[0].availability_zone_id #=> String
    #   resp.data.subnets[0].available_ip_address_count #=> Integer
    #   resp.data.subnets[0].cidr_block #=> String
    #   resp.data.subnets[0].default_for_az #=> Boolean
    #   resp.data.subnets[0].enable_lni_at_device_index #=> Integer
    #   resp.data.subnets[0].map_public_ip_on_launch #=> Boolean
    #   resp.data.subnets[0].map_customer_owned_ip_on_launch #=> Boolean
    #   resp.data.subnets[0].customer_owned_ipv4_pool #=> String
    #   resp.data.subnets[0].state #=> String, one of ["pending", "available"]
    #   resp.data.subnets[0].subnet_id #=> String
    #   resp.data.subnets[0].vpc_id #=> String
    #   resp.data.subnets[0].owner_id #=> String
    #   resp.data.subnets[0].assign_ipv6_address_on_creation #=> Boolean
    #   resp.data.subnets[0].ipv6_cidr_block_association_set #=> Array<SubnetIpv6CidrBlockAssociation>
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0] #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnets[0].tags #=> Array<Tag>
    #   resp.data.subnets[0].tags[0] #=> Types::Tag
    #   resp.data.subnets[0].tags[0].key #=> String
    #   resp.data.subnets[0].tags[0].value #=> String
    #   resp.data.subnets[0].subnet_arn #=> String
    #   resp.data.subnets[0].outpost_arn #=> String
    #   resp.data.subnets[0].enable_dns64 #=> Boolean
    #   resp.data.subnets[0].ipv6_native #=> Boolean
    #   resp.data.subnets[0].private_dns_name_options_on_launch #=> Types::PrivateDnsNameOptionsOnLaunch
    #   resp.data.subnets[0].private_dns_name_options_on_launch.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.subnets[0].private_dns_name_options_on_launch.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.subnets[0].private_dns_name_options_on_launch.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.next_token #=> String
    #
    def describe_subnets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeSubnetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeSubnetsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeSubnets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeSubnets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeSubnets,
        params_class: Params::DescribeSubnetsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_subnets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified tags for your EC2 resources.</p>
    #          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the
    #      <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTagsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>key</code> - The tag key.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-id</code> - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dedicated-host</code> | <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> | <code>fpga-image</code> | <code>host-reservation</code> | <code>image</code> | <code>instance</code> | <code>internet-gateway</code> | <code>key-pair</code> | <code>launch-template</code> | <code>natgateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>placement-group</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-endpoint</code> | <code>vpc-endpoint-service</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of the tag. For example,
    #                   specify "tag:Owner" for the filter name and "TeamA" for the filter value to find
    #                   resources with the tag "Owner=TeamA".</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>value</code> - The tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call.
    #         This value can be between 5 and 1000.
    #   			To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeTagsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_tags(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTagsOutput
    #   resp.data.next_token #=> String
    #   resp.data.tags #=> Array<TagDescription>
    #   resp.data.tags[0] #=> Types::TagDescription
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].resource_id #=> String
    #   resp.data.tags[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #   resp.data.tags[0].value #=> String
    #
    def describe_tags(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTagsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTagsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTags
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTags
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTags,
        params_class: Params::DescribeTagsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_tags
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more Traffic Mirror filters.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrafficMirrorFiltersInput}.
    #
    # @option params [Array<String>] :traffic_mirror_filter_ids
    #   <p>The ID of the Traffic Mirror filter.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>description</code>: The Traffic Mirror filter description.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeTrafficMirrorFiltersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_traffic_mirror_filters(
    #     traffic_mirror_filter_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrafficMirrorFiltersOutput
    #   resp.data.traffic_mirror_filters #=> Array<TrafficMirrorFilter>
    #   resp.data.traffic_mirror_filters[0] #=> Types::TrafficMirrorFilter
    #   resp.data.traffic_mirror_filters[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0] #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].rule_number #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].protocol #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].source_cidr_block #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].description #=> String
    #   resp.data.traffic_mirror_filters[0].egress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filters[0].network_services #=> Array<String>
    #   resp.data.traffic_mirror_filters[0].network_services[0] #=> String, one of ["amazon-dns"]
    #   resp.data.traffic_mirror_filters[0].description #=> String
    #   resp.data.traffic_mirror_filters[0].tags #=> Array<Tag>
    #   resp.data.traffic_mirror_filters[0].tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_filters[0].tags[0].key #=> String
    #   resp.data.traffic_mirror_filters[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_traffic_mirror_filters(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrafficMirrorFiltersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrafficMirrorFiltersInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrafficMirrorFilters
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTrafficMirrorFilters
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTrafficMirrorFilters,
        params_class: Params::DescribeTrafficMirrorFiltersOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_traffic_mirror_filters
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrafficMirrorSessionsInput}.
    #
    # @option params [Array<String>] :traffic_mirror_session_ids
    #   <p>The ID of the Traffic Mirror session.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>description</code>: The Traffic Mirror session description.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>packet-length</code>: The assigned number of packets to mirror. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>session-number</code>: The assigned session number. </p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror session.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>virtual-network-id</code>: The virtual network ID of the Traffic Mirror session.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeTrafficMirrorSessionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_traffic_mirror_sessions(
    #     traffic_mirror_session_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrafficMirrorSessionsOutput
    #   resp.data.traffic_mirror_sessions #=> Array<TrafficMirrorSession>
    #   resp.data.traffic_mirror_sessions[0] #=> Types::TrafficMirrorSession
    #   resp.data.traffic_mirror_sessions[0].traffic_mirror_session_id #=> String
    #   resp.data.traffic_mirror_sessions[0].traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_sessions[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_sessions[0].network_interface_id #=> String
    #   resp.data.traffic_mirror_sessions[0].owner_id #=> String
    #   resp.data.traffic_mirror_sessions[0].packet_length #=> Integer
    #   resp.data.traffic_mirror_sessions[0].session_number #=> Integer
    #   resp.data.traffic_mirror_sessions[0].virtual_network_id #=> Integer
    #   resp.data.traffic_mirror_sessions[0].description #=> String
    #   resp.data.traffic_mirror_sessions[0].tags #=> Array<Tag>
    #   resp.data.traffic_mirror_sessions[0].tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_sessions[0].tags[0].key #=> String
    #   resp.data.traffic_mirror_sessions[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_traffic_mirror_sessions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrafficMirrorSessionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrafficMirrorSessionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrafficMirrorSessions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTrafficMirrorSessions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTrafficMirrorSessions,
        params_class: Params::DescribeTrafficMirrorSessionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_traffic_mirror_sessions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Information about one or more Traffic Mirror targets.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrafficMirrorTargetsInput}.
    #
    # @option params [Array<String>] :traffic_mirror_target_ids
    #   <p>The ID of the Traffic Mirror targets.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>description</code>: The Traffic Mirror target description.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::DescribeTrafficMirrorTargetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_traffic_mirror_targets(
    #     traffic_mirror_target_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrafficMirrorTargetsOutput
    #   resp.data.traffic_mirror_targets #=> Array<TrafficMirrorTarget>
    #   resp.data.traffic_mirror_targets[0] #=> Types::TrafficMirrorTarget
    #   resp.data.traffic_mirror_targets[0].traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_targets[0].network_interface_id #=> String
    #   resp.data.traffic_mirror_targets[0].network_load_balancer_arn #=> String
    #   resp.data.traffic_mirror_targets[0].type #=> String, one of ["network-interface", "network-load-balancer"]
    #   resp.data.traffic_mirror_targets[0].description #=> String
    #   resp.data.traffic_mirror_targets[0].owner_id #=> String
    #   resp.data.traffic_mirror_targets[0].tags #=> Array<Tag>
    #   resp.data.traffic_mirror_targets[0].tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_targets[0].tags[0].key #=> String
    #   resp.data.traffic_mirror_targets[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_traffic_mirror_targets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrafficMirrorTargetsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrafficMirrorTargetsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrafficMirrorTargets
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTrafficMirrorTargets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTrafficMirrorTargets,
        params_class: Params::DescribeTrafficMirrorTargetsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_traffic_mirror_targets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more attachments between resources and transit gateways. By default, all attachments are described.
    #          Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayAttachmentsInput}.
    #
    # @option params [Array<String>] :transit_gateway_attachment_ids
    #   <p>The IDs of the attachments.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>association.state</code> - The state of the association (<code>associating</code> | <code>associated</code> |
    #                  <code>disassociating</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>association.transit-gateway-route-table-id</code> - The ID of the route table for the transit gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-id</code> - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-owner-id</code> - The ID of the Amazon Web Services account that owns the resource.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-type</code> - The resource type. Valid values are <code>vpc</code>
    #                       | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code>
    #                       | <code>connect</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the attachment. Valid values are <code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> |  <code>failing</code> | <code>initiatingRequest</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-owner-id</code> - The ID of the Amazon Web Services account that owns the transit gateway.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayAttachmentsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_attachments(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayAttachmentsOutput
    #   resp.data.transit_gateway_attachments #=> Array<TransitGatewayAttachment>
    #   resp.data.transit_gateway_attachments[0] #=> Types::TransitGatewayAttachment
    #   resp.data.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_attachments[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_attachments[0].transit_gateway_owner_id #=> String
    #   resp.data.transit_gateway_attachments[0].resource_owner_id #=> String
    #   resp.data.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.transit_gateway_attachments[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_attachments[0].association #=> Types::TransitGatewayAttachmentAssociation
    #   resp.data.transit_gateway_attachments[0].association.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_attachments[0].association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.transit_gateway_attachments[0].creation_time #=> Time
    #   resp.data.transit_gateway_attachments[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_attachments[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_attachments[0].tags[0].key #=> String
    #   resp.data.transit_gateway_attachments[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_attachments(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayAttachmentsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayAttachmentsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayAttachments
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayAttachments
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayAttachments,
        params_class: Params::DescribeTransitGatewayAttachmentsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_attachments
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more Connect peers.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayConnectPeersInput}.
    #
    # @option params [Array<String>] :transit_gateway_connect_peer_ids
    #   <p>The IDs of the Connect peers.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the Connect peer (<code>pending</code> |
    #                           <code>available</code> | <code>deleting</code> |
    #                       <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-connect-peer-id</code> - The ID of the Connect peer.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayConnectPeersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_connect_peers(
    #     transit_gateway_connect_peer_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayConnectPeersOutput
    #   resp.data.transit_gateway_connect_peers #=> Array<TransitGatewayConnectPeer>
    #   resp.data.transit_gateway_connect_peers[0] #=> Types::TransitGatewayConnectPeer
    #   resp.data.transit_gateway_connect_peers[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect_peers[0].transit_gateway_connect_peer_id #=> String
    #   resp.data.transit_gateway_connect_peers[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_connect_peers[0].creation_time #=> Time
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration #=> Types::TransitGatewayConnectPeerConfiguration
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.peer_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.inside_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.inside_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations #=> Array<TransitGatewayAttachmentBgpConfiguration>
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0] #=> Types::TransitGatewayAttachmentBgpConfiguration
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].transit_gateway_asn #=> Integer
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].peer_asn #=> Integer
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].peer_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].bgp_status #=> String, one of ["up", "down"]
    #   resp.data.transit_gateway_connect_peers[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect_peers[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect_peers[0].tags[0].key #=> String
    #   resp.data.transit_gateway_connect_peers[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_connect_peers(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayConnectPeersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayConnectPeersInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayConnectPeers
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayConnectPeers
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayConnectPeers,
        params_class: Params::DescribeTransitGatewayConnectPeersOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_connect_peers
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more Connect attachments.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayConnectsInput}.
    #
    # @option params [Array<String>] :transit_gateway_attachment_ids
    #   <p>The IDs of the attachments.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                  <p>
    #                     <code>options.protocol</code> - The tunnel protocol (<code>gre</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the attachment (<code>initiating</code> |
    #                           <code>initiatingRequest</code> | <code>pendingAcceptance</code> |
    #                           <code>rollingBack</code> | <code>pending</code> | <code>available</code> |
    #                           <code>modifying</code> | <code>deleting</code> | <code>deleted</code> |
    #                           <code>failed</code> | <code>rejected</code> | <code>rejecting</code> |
    #                           <code>failing</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the
    #                       Connect attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transport-transit-gateway-attachment-id</code> - The ID of the transit gateway attachment from which the Connect attachment was created.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayConnectsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_connects(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayConnectsOutput
    #   resp.data.transit_gateway_connects #=> Array<TransitGatewayConnect>
    #   resp.data.transit_gateway_connects[0] #=> Types::TransitGatewayConnect
    #   resp.data.transit_gateway_connects[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connects[0].transport_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connects[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_connects[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_connects[0].creation_time #=> Time
    #   resp.data.transit_gateway_connects[0].options #=> Types::TransitGatewayConnectOptions
    #   resp.data.transit_gateway_connects[0].options.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connects[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_connects[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connects[0].tags[0].key #=> String
    #   resp.data.transit_gateway_connects[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_connects(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayConnectsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayConnectsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayConnects
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayConnects
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayConnects,
        params_class: Params::DescribeTransitGatewayConnectsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_connects
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more transit gateway multicast domains.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayMulticastDomainsInput}.
    #
    # @option params [Array<String>] :transit_gateway_multicast_domain_ids
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the transit gateway multicast domain. Valid values are <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-multicast-domain-id</code> - The ID of the transit gateway multicast domain.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayMulticastDomainsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_multicast_domains(
    #     transit_gateway_multicast_domain_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayMulticastDomainsOutput
    #   resp.data.transit_gateway_multicast_domains #=> Array<TransitGatewayMulticastDomain>
    #   resp.data.transit_gateway_multicast_domains[0] #=> Types::TransitGatewayMulticastDomain
    #   resp.data.transit_gateway_multicast_domains[0].transit_gateway_multicast_domain_id #=> String
    #   resp.data.transit_gateway_multicast_domains[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_multicast_domains[0].transit_gateway_multicast_domain_arn #=> String
    #   resp.data.transit_gateway_multicast_domains[0].owner_id #=> String
    #   resp.data.transit_gateway_multicast_domains[0].options #=> Types::TransitGatewayMulticastDomainOptions
    #   resp.data.transit_gateway_multicast_domains[0].options.igmpv2_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domains[0].options.static_sources_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domains[0].options.auto_accept_shared_associations #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domains[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_multicast_domains[0].creation_time #=> Time
    #   resp.data.transit_gateway_multicast_domains[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_multicast_domains[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_multicast_domains[0].tags[0].key #=> String
    #   resp.data.transit_gateway_multicast_domains[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_multicast_domains(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayMulticastDomainsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayMulticastDomainsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayMulticastDomains
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayMulticastDomains
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayMulticastDomains,
        params_class: Params::DescribeTransitGatewayMulticastDomainsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_multicast_domains
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes your transit gateway peering attachments.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayPeeringAttachmentsInput}.
    #
    # @option params [Array<String>] :transit_gateway_attachment_ids
    #   <p>One or more IDs of the transit gateway peering attachments.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the transit gateway attachment.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>local-owner-id</code> - The ID of your Amazon Web Services account.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>remote-owner-id</code> - The ID of the Amazon Web Services account in the remote Region that owns the transit gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the peering attachment. Valid values are <code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> |  <code>failing</code> | <code>initiatingRequest</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayPeeringAttachmentsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_peering_attachments(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayPeeringAttachmentsOutput
    #   resp.data.transit_gateway_peering_attachments #=> Array<TransitGatewayPeeringAttachment>
    #   resp.data.transit_gateway_peering_attachments[0] #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachments[0].accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachments[0].status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachments[0].status.code #=> String
    #   resp.data.transit_gateway_peering_attachments[0].status.message #=> String
    #   resp.data.transit_gateway_peering_attachments[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachments[0].creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachments[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachments[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachments[0].tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachments[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_peering_attachments(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayPeeringAttachmentsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayPeeringAttachmentsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayPeeringAttachments
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayPeeringAttachments
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayPeeringAttachments,
        params_class: Params::DescribeTransitGatewayPeeringAttachmentsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_peering_attachments
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more transit gateway route tables. By default, all transit gateway route tables are described.
    #          Alternatively, you can filter the results.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayRouteTablesInput}.
    #
    # @option params [Array<String>] :transit_gateway_route_table_ids
    #   <p>The IDs of the transit gateway route tables.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>default-association-route-table</code> - Indicates whether this is the default
    #                   association route table for the transit gateway (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>default-propagation-route-table</code> - Indicates whether this is the default
    #                  propagation route table for the transit gateway (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the route table (<code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>pending</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayRouteTablesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_route_tables(
    #     transit_gateway_route_table_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayRouteTablesOutput
    #   resp.data.transit_gateway_route_tables #=> Array<TransitGatewayRouteTable>
    #   resp.data.transit_gateway_route_tables[0] #=> Types::TransitGatewayRouteTable
    #   resp.data.transit_gateway_route_tables[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_tables[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_tables[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_tables[0].default_association_route_table #=> Boolean
    #   resp.data.transit_gateway_route_tables[0].default_propagation_route_table #=> Boolean
    #   resp.data.transit_gateway_route_tables[0].creation_time #=> Time
    #   resp.data.transit_gateway_route_tables[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_tables[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_tables[0].tags[0].key #=> String
    #   resp.data.transit_gateway_route_tables[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_route_tables(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayRouteTablesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayRouteTablesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayRouteTables
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayRouteTables
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayRouteTables,
        params_class: Params::DescribeTransitGatewayRouteTablesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_route_tables
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more VPC attachments. By default, all VPC attachments are described.
    #          Alternatively, you can filter the results.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewayVpcAttachmentsInput}.
    #
    # @option params [Array<String>] :transit_gateway_attachment_ids
    #   <p>The IDs of the attachments.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the attachment. Valid values are <code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> |  <code>failing</code> | <code>initiatingRequest</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-id</code> - The ID of the VPC.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewayVpcAttachmentsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateway_vpc_attachments(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewayVpcAttachmentsOutput
    #   resp.data.transit_gateway_vpc_attachments #=> Array<TransitGatewayVpcAttachment>
    #   resp.data.transit_gateway_vpc_attachments[0] #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachments[0].subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachments[0].subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachments[0].options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachments[0].options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachments[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachments[0].tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateway_vpc_attachments(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewayVpcAttachmentsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewayVpcAttachmentsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGatewayVpcAttachments
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGatewayVpcAttachments
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGatewayVpcAttachments,
        params_class: Params::DescribeTransitGatewayVpcAttachmentsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateway_vpc_attachments
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can
    #          filter the results.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTransitGatewaysInput}.
    #
    # @option params [Array<String>] :transit_gateway_ids
    #   <p>The IDs of the transit gateways.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically
    #                  associated with the default association route table (<code>enable</code> | <code>disable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate
    #                  routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled  (<code>enable</code> | <code>disable</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the transit gateway.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the transit gateway (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>modifying</code> | <code>pending</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeTransitGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_transit_gateways(
    #     transit_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTransitGatewaysOutput
    #   resp.data.transit_gateways #=> Array<TransitGateway>
    #   resp.data.transit_gateways[0] #=> Types::TransitGateway
    #   resp.data.transit_gateways[0].transit_gateway_id #=> String
    #   resp.data.transit_gateways[0].transit_gateway_arn #=> String
    #   resp.data.transit_gateways[0].state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateways[0].owner_id #=> String
    #   resp.data.transit_gateways[0].description #=> String
    #   resp.data.transit_gateways[0].creation_time #=> Time
    #   resp.data.transit_gateways[0].options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateways[0].options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateways[0].options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateways[0].options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateways[0].options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.association_default_route_table_id #=> String
    #   resp.data.transit_gateways[0].options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateways[0].options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].tags #=> Array<Tag>
    #   resp.data.transit_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateways[0].tags[0].key #=> String
    #   resp.data.transit_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_transit_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTransitGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTransitGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTransitGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTransitGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTransitGateways,
        params_class: Params::DescribeTransitGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_transit_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <note>
    #             <p>This API action is currently in <b>limited preview only</b>.
    #                 If you are interested in using this feature, contact your account manager.</p>
    #         </note>
    #         <p>Describes one or more network interface trunk associations.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeTrunkInterfaceAssociationsInput}.
    #
    # @option params [Array<String>] :association_ids
    #   <p>The IDs of the associations.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>gre-key</code> - The ID of a trunk interface association.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>interface-protocol</code> - The interface protocol. Valid values are <code>VLAN</code> and <code>GRE</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #               To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeTrunkInterfaceAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_trunk_interface_associations(
    #     association_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeTrunkInterfaceAssociationsOutput
    #   resp.data.interface_associations #=> Array<TrunkInterfaceAssociation>
    #   resp.data.interface_associations[0] #=> Types::TrunkInterfaceAssociation
    #   resp.data.interface_associations[0].association_id #=> String
    #   resp.data.interface_associations[0].branch_interface_id #=> String
    #   resp.data.interface_associations[0].trunk_interface_id #=> String
    #   resp.data.interface_associations[0].interface_protocol #=> String, one of ["VLAN", "GRE"]
    #   resp.data.interface_associations[0].vlan_id #=> Integer
    #   resp.data.interface_associations[0].gre_key #=> Integer
    #   resp.data.interface_associations[0].tags #=> Array<Tag>
    #   resp.data.interface_associations[0].tags[0] #=> Types::Tag
    #   resp.data.interface_associations[0].tags[0].key #=> String
    #   resp.data.interface_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_trunk_interface_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeTrunkInterfaceAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeTrunkInterfaceAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeTrunkInterfaceAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeTrunkInterfaceAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeTrunkInterfaceAssociations,
        params_class: Params::DescribeTrunkInterfaceAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_trunk_interface_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified attribute of the specified volume. You can specify only one
    #       attribute at a time.</p>
    #          <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVolumeAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The attribute of the volume. This parameter is required.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the volume.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeVolumeAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_volume_attribute(
    #     attribute: 'autoEnableIO', # required - accepts ["autoEnableIO", "productCodes"]
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVolumeAttributeOutput
    #   resp.data.auto_enable_io #=> Types::AttributeBooleanValue
    #   resp.data.auto_enable_io.value #=> Boolean
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.volume_id #=> String
    #
    def describe_volume_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVolumeAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVolumeAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVolumeAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVolumeAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVolumeAttribute,
        params_class: Params::DescribeVolumeAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_volume_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the status of the specified volumes. Volume status provides the result of the
    #       checks performed on your volumes to determine events that can impair the performance of your
    #       volumes. The performance of a volume can be affected if an issue occurs on the volume's
    #       underlying host. If the volume's underlying host experiences a power outage or system issue,
    #       after the system is restored, there could be data inconsistencies on the volume. Volume events
    #       notify you if this occurs. Volume actions notify you if any action needs to be taken in
    #       response to the event.</p>
    #          <p>The <code>DescribeVolumeStatus</code> operation provides the following information about
    #       the specified volumes:</p>
    #          <p>
    #             <i>Status</i>: Reflects the current status of the volume. The possible
    #       values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or
    #         <code>insufficient-data</code>. If all checks pass, the overall status of the volume is
    #         <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the
    #       status is <code>insufficient-data</code>, then the checks might still be taking place on your
    #       volume at the time. We recommend that you retry the request. For more information about volume
    #       status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitor the status of your volumes</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>
    #             <i>Events</i>: Reflect the cause of a volume status and might require you to
    #       take action. For example, if your volume returns an <code>impaired</code> status, then the
    #       volume event might be <code>potential-data-inconsistency</code>. This means that your volume
    #       has been affected by an issue with the underlying host, has all I/O operations disabled, and
    #       might have inconsistent data.</p>
    #          <p>
    #             <i>Actions</i>: Reflect the actions you might have to take in response to an
    #       event. For example, if the status of the volume is <code>impaired</code> and the volume event
    #       shows <code>potential-data-inconsistency</code>, then the action shows
    #         <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for
    #       the volume by calling the <a>EnableVolumeIO</a> action and then check the volume
    #       for data consistency.</p>
    #          <p>Volume status is based on the volume status checks, and does not reflect the volume state.
    #       Therefore, volume status does not indicate volumes in the <code>error</code> state (for
    #       example, when a volume is incapable of accepting I/O.)</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVolumeStatusInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>action.code</code> - The action code for the event (for example,
    #               <code>enable-volume-io</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>action.description</code> - A description of the action.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>action.event-id</code> - The event ID associated with the action.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone of the instance.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>event.description</code> - A description of the event.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>event.event-id</code> - The event ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>event.event-type</code> - The event type (for <code>io-enabled</code>:
    #               <code>passed</code> | <code>failed</code>; for <code>io-performance</code>:
    #               <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> |
    #               <code>io-performance:stalled</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>event.not-after</code> - The latest end time for the event.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>event.not-before</code> - The earliest start time for the event.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-status.details-name</code> - The cause for
    #               <code>volume-status.status</code> (<code>io-enabled</code> |
    #             <code>io-performance</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-status.details-status</code> - The status of
    #               <code>volume-status.details-name</code> (for <code>io-enabled</code>:
    #               <code>passed</code> | <code>failed</code>; for <code>io-performance</code>:
    #               <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> |
    #               <code>stalled</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-status.status</code> - The status of the volume (<code>ok</code> |
    #               <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in
    #         paginated output. When this parameter is used, the request only returns
    #           <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
    #         response element. The remaining results of the initial request can be seen by sending another
    #         request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000;
    #         if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned.
    #         If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You
    #         cannot specify this parameter and the volume IDs parameter in the same request.</p>
    #
    # @option params [String] :next_token
    #   <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code>
    #         request. When the results of the request exceed <code>MaxResults</code>, this value can be
    #         used to retrieve the next page of results. This value is <code>null</code> when there are no
    #         more results to return.</p>
    #
    # @option params [Array<String>] :volume_ids
    #   <p>The IDs of the volumes.</p>
    #            <p>Default: Describes all your volumes.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeVolumeStatusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_volume_status(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     volume_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVolumeStatusOutput
    #   resp.data.next_token #=> String
    #   resp.data.volume_statuses #=> Array<VolumeStatusItem>
    #   resp.data.volume_statuses[0] #=> Types::VolumeStatusItem
    #   resp.data.volume_statuses[0].actions #=> Array<VolumeStatusAction>
    #   resp.data.volume_statuses[0].actions[0] #=> Types::VolumeStatusAction
    #   resp.data.volume_statuses[0].actions[0].code #=> String
    #   resp.data.volume_statuses[0].actions[0].description #=> String
    #   resp.data.volume_statuses[0].actions[0].event_id #=> String
    #   resp.data.volume_statuses[0].actions[0].event_type #=> String
    #   resp.data.volume_statuses[0].availability_zone #=> String
    #   resp.data.volume_statuses[0].outpost_arn #=> String
    #   resp.data.volume_statuses[0].events #=> Array<VolumeStatusEvent>
    #   resp.data.volume_statuses[0].events[0] #=> Types::VolumeStatusEvent
    #   resp.data.volume_statuses[0].events[0].description #=> String
    #   resp.data.volume_statuses[0].events[0].event_id #=> String
    #   resp.data.volume_statuses[0].events[0].event_type #=> String
    #   resp.data.volume_statuses[0].events[0].not_after #=> Time
    #   resp.data.volume_statuses[0].events[0].not_before #=> Time
    #   resp.data.volume_statuses[0].events[0].instance_id #=> String
    #   resp.data.volume_statuses[0].volume_id #=> String
    #   resp.data.volume_statuses[0].volume_status #=> Types::VolumeStatusInfo
    #   resp.data.volume_statuses[0].volume_status.details #=> Array<VolumeStatusDetails>
    #   resp.data.volume_statuses[0].volume_status.details[0] #=> Types::VolumeStatusDetails
    #   resp.data.volume_statuses[0].volume_status.details[0].name #=> String, one of ["io-enabled", "io-performance"]
    #   resp.data.volume_statuses[0].volume_status.details[0].status #=> String
    #   resp.data.volume_statuses[0].volume_status.status #=> String, one of ["ok", "impaired", "insufficient-data"]
    #   resp.data.volume_statuses[0].attachment_statuses #=> Array<VolumeStatusAttachmentStatus>
    #   resp.data.volume_statuses[0].attachment_statuses[0] #=> Types::VolumeStatusAttachmentStatus
    #   resp.data.volume_statuses[0].attachment_statuses[0].io_performance #=> String
    #   resp.data.volume_statuses[0].attachment_statuses[0].instance_id #=> String
    #
    def describe_volume_status(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVolumeStatusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVolumeStatusInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVolumeStatus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVolumeStatus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVolumeStatus,
        params_class: Params::DescribeVolumeStatusOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_volume_status
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified EBS volumes or all of your EBS volumes.</p>
    #          <p>If you are describing a long list of volumes, we recommend that you paginate the output to make the list
    #       more manageable. The <code>MaxResults</code> parameter sets the maximum number of results
    #       returned in a single page. If the list of results exceeds your <code>MaxResults</code> value,
    #       then that number of results is returned along with a <code>NextToken</code> value that can be
    #       passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining
    #       results.</p>
    #          <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVolumesInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>attachment.attach-time</code> - The time stamp when the attachment
    #             initiated.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.delete-on-termination</code> - Whether the volume is deleted on
    #             instance termination.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.device</code> - The device name specified in the block device mapping
    #             (for example, <code>/dev/sda1</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.instance-id</code> - The ID of the instance the volume is attached
    #             to.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.status</code> - The attachment state (<code>attaching</code> |
    #               <code>attached</code> | <code>detaching</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>availability-zone</code> - The Availability Zone in which the volume was
    #             created.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>create-time</code> - The time stamp when the volume was created.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code>
    #             | <code>false</code>)</p>
    #               </li>
    #               <li>
    #       		         <p>
    #                     <code>multi-attach-enabled</code> - Indicates whether the volume is enabled for Multi-Attach (<code>true</code>
    #       			| <code>false</code>)</p>
    #       	       </li>
    #               <li>
    #                  <p>
    #                     <code>fast-restored</code> - Indicates whether the volume was created from a
    #             snapshot that is enabled for fast snapshot restore (<code>true</code> |
    #             <code>false</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>size</code> - The size of the volume, in GiB.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>snapshot-id</code> - The snapshot from which the volume was created.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status</code> - The state of the volume (<code>creating</code> |
    #               <code>available</code> | <code>in-use</code> | <code>deleting</code> |
    #               <code>deleted</code> | <code>error</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-id</code> - The volume ID.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-type</code> - The Amazon EBS volume type (<code>gp2</code> | <code>gp3</code> | <code>io1</code> | <code>io2</code> |
    #             <code>st1</code> | <code>sc1</code>| <code>standard</code>)</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :volume_ids
    #   <p>The volume IDs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated
    #         output. When this parameter is used, <code>DescribeVolumes</code> only returns
    #           <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
    #         response element. The remaining results of the initial request can be seen by sending another
    #           <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This
    #         value can be between 5 and 500; if <code>MaxResults</code> is given a value larger than 500,
    #         only 500 results are returned. If this parameter is not used, then
    #           <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the
    #         volume IDs parameter in the same request.</p>
    #
    # @option params [String] :next_token
    #   <p>The <code>NextToken</code> value returned from a previous paginated
    #           <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results
    #         exceeded the value of that parameter. Pagination continues from the end of the previous
    #         results that returned the <code>NextToken</code> value. This value is <code>null</code> when
    #         there are no more results to return.</p>
    #
    # @return [Types::DescribeVolumesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_volumes(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     volume_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVolumesOutput
    #   resp.data.volumes #=> Array<Volume>
    #   resp.data.volumes[0] #=> Types::Volume
    #   resp.data.volumes[0].attachments #=> Array<VolumeAttachment>
    #   resp.data.volumes[0].attachments[0] #=> Types::VolumeAttachment
    #   resp.data.volumes[0].attachments[0].attach_time #=> Time
    #   resp.data.volumes[0].attachments[0].device #=> String
    #   resp.data.volumes[0].attachments[0].instance_id #=> String
    #   resp.data.volumes[0].attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.volumes[0].attachments[0].volume_id #=> String
    #   resp.data.volumes[0].attachments[0].delete_on_termination #=> Boolean
    #   resp.data.volumes[0].availability_zone #=> String
    #   resp.data.volumes[0].create_time #=> Time
    #   resp.data.volumes[0].encrypted #=> Boolean
    #   resp.data.volumes[0].kms_key_id #=> String
    #   resp.data.volumes[0].outpost_arn #=> String
    #   resp.data.volumes[0].size #=> Integer
    #   resp.data.volumes[0].snapshot_id #=> String
    #   resp.data.volumes[0].state #=> String, one of ["creating", "available", "in-use", "deleting", "deleted", "error"]
    #   resp.data.volumes[0].volume_id #=> String
    #   resp.data.volumes[0].iops #=> Integer
    #   resp.data.volumes[0].tags #=> Array<Tag>
    #   resp.data.volumes[0].tags[0] #=> Types::Tag
    #   resp.data.volumes[0].tags[0].key #=> String
    #   resp.data.volumes[0].tags[0].value #=> String
    #   resp.data.volumes[0].volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volumes[0].fast_restored #=> Boolean
    #   resp.data.volumes[0].multi_attach_enabled #=> Boolean
    #   resp.data.volumes[0].throughput #=> Integer
    #   resp.data.next_token #=> String
    #
    def describe_volumes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVolumesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVolumesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVolumes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVolumes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVolumes,
        params_class: Params::DescribeVolumesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_volumes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the most recent volume modification request for the specified EBS volumes.</p>
    #          <p>If a volume has never been modified, some information in the output will be null.
    #       If a volume has been modified more than once, the output includes only the most
    #       recent modification request.</p>
    #          <p>You can also use CloudWatch Events to check the status of a modification to an EBS
    #       volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVolumesModificationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :volume_ids
    #   <p>The IDs of the volumes.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>modification-state</code> - The current modification state (modifying |
    #             optimizing | completed | failed).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>original-iops</code> - The original IOPS rate of the volume.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>original-size</code> - The original size of the volume, in GiB.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>original-volume-type</code> - The original volume type of the volume (standard |
    #             io1 | io2 | gp2 | sc1 | st1).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>originalMultiAttachEnabled</code> - Indicates whether Multi-Attach support was enabled (true | false).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>start-time</code> - The modification start time.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>target-iops</code> - The target IOPS rate of the volume.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>target-size</code> - The target size of the volume, in GiB.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>target-volume-type</code> - The target volume type of the volume (standard |
    #             io1 | io2 | gp2 | sc1 | st1).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>targetMultiAttachEnabled</code> - Indicates whether Multi-Attach support is to be enabled (true | false).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>volume-id</code> - The ID of the volume.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :next_token
    #   <p>The <code>nextToken</code> value returned by a previous paginated request.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results (up to a limit of 500) to be returned in a paginated
    #         request.</p>
    #
    # @return [Types::DescribeVolumesModificationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_volumes_modifications(
    #     dry_run: false,
    #     volume_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVolumesModificationsOutput
    #   resp.data.volumes_modifications #=> Array<VolumeModification>
    #   resp.data.volumes_modifications[0] #=> Types::VolumeModification
    #   resp.data.volumes_modifications[0].volume_id #=> String
    #   resp.data.volumes_modifications[0].modification_state #=> String, one of ["modifying", "optimizing", "completed", "failed"]
    #   resp.data.volumes_modifications[0].status_message #=> String
    #   resp.data.volumes_modifications[0].target_size #=> Integer
    #   resp.data.volumes_modifications[0].target_iops #=> Integer
    #   resp.data.volumes_modifications[0].target_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volumes_modifications[0].target_throughput #=> Integer
    #   resp.data.volumes_modifications[0].target_multi_attach_enabled #=> Boolean
    #   resp.data.volumes_modifications[0].original_size #=> Integer
    #   resp.data.volumes_modifications[0].original_iops #=> Integer
    #   resp.data.volumes_modifications[0].original_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volumes_modifications[0].original_throughput #=> Integer
    #   resp.data.volumes_modifications[0].original_multi_attach_enabled #=> Boolean
    #   resp.data.volumes_modifications[0].progress #=> Integer
    #   resp.data.volumes_modifications[0].start_time #=> Time
    #   resp.data.volumes_modifications[0].end_time #=> Time
    #   resp.data.next_token #=> String
    #
    def describe_volumes_modifications(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVolumesModificationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVolumesModificationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVolumesModifications
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVolumesModifications
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVolumesModifications,
        params_class: Params::DescribeVolumesModificationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_volumes_modifications
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The VPC attribute.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeVpcAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_attribute(
    #     attribute: 'enableDnsSupport', # required - accepts ["enableDnsSupport", "enableDnsHostnames"]
    #     vpc_id: 'VpcId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcAttributeOutput
    #   resp.data.vpc_id #=> String
    #   resp.data.enable_dns_hostnames #=> Types::AttributeBooleanValue
    #   resp.data.enable_dns_hostnames.value #=> Boolean
    #   resp.data.enable_dns_support #=> Types::AttributeBooleanValue
    #
    def describe_vpc_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcAttribute,
        params_class: Params::DescribeVpcAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the ClassicLink status of one or more VPCs.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcClassicLinkInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   				           <p>
    #                     <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink
    #   					   (<code>true</code> | <code>false</code>).</p>
    #   			         </li>
    #               <li>
    #   			            <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   			         </li>
    #               <li>
    #       			        <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :vpc_ids
    #   <p>One or more VPCs for which you want to describe the ClassicLink status.</p>
    #
    # @return [Types::DescribeVpcClassicLinkOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_classic_link(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     vpc_ids: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcClassicLinkOutput
    #   resp.data.vpcs #=> Array<VpcClassicLink>
    #   resp.data.vpcs[0] #=> Types::VpcClassicLink
    #   resp.data.vpcs[0].classic_link_enabled #=> Boolean
    #   resp.data.vpcs[0].tags #=> Array<Tag>
    #   resp.data.vpcs[0].tags[0] #=> Types::Tag
    #   resp.data.vpcs[0].tags[0].key #=> String
    #   resp.data.vpcs[0].tags[0].value #=> String
    #   resp.data.vpcs[0].vpc_id #=> String
    #
    def describe_vpc_classic_link(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcClassicLinkInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcClassicLinkInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcClassicLink
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcClassicLink
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcClassicLink,
        params_class: Params::DescribeVpcClassicLinkOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_classic_link
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS
    #             hostname of a linked EC2-Classic instance resolves to its private IP address when
    #             addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
    #             of an instance in a VPC resolves to its private IP address when addressed from a linked
    #             EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcClassicLinkDnsSupportInput}.
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :vpc_ids
    #   <p>One or more VPC IDs.</p>
    #
    # @return [Types::DescribeVpcClassicLinkDnsSupportOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_classic_link_dns_support(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     vpc_ids: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcClassicLinkDnsSupportOutput
    #   resp.data.next_token #=> String
    #   resp.data.vpcs #=> Array<ClassicLinkDnsSupport>
    #   resp.data.vpcs[0] #=> Types::ClassicLinkDnsSupport
    #   resp.data.vpcs[0].classic_link_dns_supported #=> Boolean
    #   resp.data.vpcs[0].vpc_id #=> String
    #
    def describe_vpc_classic_link_dns_support(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcClassicLinkDnsSupportInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcClassicLinkDnsSupportInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcClassicLinkDnsSupport
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcClassicLinkDnsSupport
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcClassicLinkDnsSupport,
        params_class: Params::DescribeVpcClassicLinkDnsSupportOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_classic_link_dns_support
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the connection notifications for VPC endpoints and VPC endpoint
    #             services.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcEndpointConnectionNotificationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :connection_notification_id
    #   <p>The ID of the notification.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>connection-notification-arn</code> - The ARN of the SNS topic for the
    #                       notification.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>connection-notification-id</code> - The ID of the
    #                       notification.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>connection-notification-state</code> - The state of the notification
    #                           (<code>Enabled</code> | <code>Disabled</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>connection-notification-type</code> - The type of notification
    #                           (<code>Topic</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>service-id</code> - The ID of the endpoint service.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. To retrieve the remaining
    #               results, make another request with the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to request the next page of results.</p>
    #
    # @return [Types::DescribeVpcEndpointConnectionNotificationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_endpoint_connection_notifications(
    #     dry_run: false,
    #     connection_notification_id: 'ConnectionNotificationId',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcEndpointConnectionNotificationsOutput
    #   resp.data.connection_notification_set #=> Array<ConnectionNotification>
    #   resp.data.connection_notification_set[0] #=> Types::ConnectionNotification
    #   resp.data.connection_notification_set[0].connection_notification_id #=> String
    #   resp.data.connection_notification_set[0].service_id #=> String
    #   resp.data.connection_notification_set[0].vpc_endpoint_id #=> String
    #   resp.data.connection_notification_set[0].connection_notification_type #=> String, one of ["Topic"]
    #   resp.data.connection_notification_set[0].connection_notification_arn #=> String
    #   resp.data.connection_notification_set[0].connection_events #=> Array<String>
    #   resp.data.connection_notification_set[0].connection_events[0] #=> String
    #   resp.data.connection_notification_set[0].connection_notification_state #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.next_token #=> String
    #
    def describe_vpc_endpoint_connection_notifications(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcEndpointConnectionNotificationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcEndpointConnectionNotificationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcEndpointConnectionNotifications
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcEndpointConnectionNotifications
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcEndpointConnectionNotifications,
        params_class: Params::DescribeVpcEndpointConnectionNotificationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_endpoint_connection_notifications
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the VPC endpoint connections to your VPC endpoint services, including any
    #             endpoints that are pending your acceptance.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcEndpointConnectionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #                   <p>
    #                     <code>service-id</code> - The ID of the service.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-endpoint-owner</code> - The ID of the Amazon Web Services account ID
    #   		        that owns the endpoint.</p>
    #               </li>
    #               <li>
    #   			            <p>
    #                     <code>vpc-endpoint-state</code> - The state of the endpoint
    #   			        (<code>pendingAcceptance</code> | <code>pending</code> |
    #   			        <code>available</code> | <code>deleting</code> | <code>deleted</code> |
    #   			        <code>rejected</code> | <code>failed</code>).</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>vpc-endpoint-id</code> - The ID of the endpoint.</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining
    #               results of the initial request can be seen by sending another request with the returned
    #                   <code>NextToken</code> value. This value can be between 5 and 1,000; if
    #                   <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are
    #               returned.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeVpcEndpointConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_endpoint_connections(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcEndpointConnectionsOutput
    #   resp.data.vpc_endpoint_connections #=> Array<VpcEndpointConnection>
    #   resp.data.vpc_endpoint_connections[0] #=> Types::VpcEndpointConnection
    #   resp.data.vpc_endpoint_connections[0].service_id #=> String
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_id #=> String
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_owner #=> String
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_state #=> String, one of ["PendingAcceptance", "Pending", "Available", "Deleting", "Deleted", "Rejected", "Failed", "Expired"]
    #   resp.data.vpc_endpoint_connections[0].creation_timestamp #=> Time
    #   resp.data.vpc_endpoint_connections[0].dns_entries #=> Array<DnsEntry>
    #   resp.data.vpc_endpoint_connections[0].dns_entries[0] #=> Types::DnsEntry
    #   resp.data.vpc_endpoint_connections[0].dns_entries[0].dns_name #=> String
    #   resp.data.vpc_endpoint_connections[0].dns_entries[0].hosted_zone_id #=> String
    #   resp.data.vpc_endpoint_connections[0].network_load_balancer_arns #=> Array<String>
    #   resp.data.vpc_endpoint_connections[0].network_load_balancer_arns[0] #=> String
    #   resp.data.vpc_endpoint_connections[0].gateway_load_balancer_arns #=> Array<String>
    #   resp.data.next_token #=> String
    #
    def describe_vpc_endpoint_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcEndpointConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcEndpointConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcEndpointConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcEndpointConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcEndpointConnections,
        params_class: Params::DescribeVpcEndpointConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_endpoint_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the VPC endpoint service configurations in your account (your services).</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcEndpointServiceConfigurationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :service_ids
    #   <p>The IDs of one or more services.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   				           <p>
    #                     <code>service-name</code> - The name of the service.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>service-id</code> - The ID of the service.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>service-state</code> - The state of the service (<code>Pending</code> |
    #                           <code>Available</code> | <code>Deleting</code> | <code>Deleted</code> |
    #                           <code>Failed</code>). </p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining
    #               results of the initial request can be seen by sending another request with the returned
    #                   <code>NextToken</code> value. This value can be between 5 and 1,000; if
    #                   <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are
    #               returned.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeVpcEndpointServiceConfigurationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_endpoint_service_configurations(
    #     dry_run: false,
    #     service_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcEndpointServiceConfigurationsOutput
    #   resp.data.service_configurations #=> Array<ServiceConfiguration>
    #   resp.data.service_configurations[0] #=> Types::ServiceConfiguration
    #   resp.data.service_configurations[0].service_type #=> Array<ServiceTypeDetail>
    #   resp.data.service_configurations[0].service_type[0] #=> Types::ServiceTypeDetail
    #   resp.data.service_configurations[0].service_type[0].service_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.service_configurations[0].service_id #=> String
    #   resp.data.service_configurations[0].service_name #=> String
    #   resp.data.service_configurations[0].service_state #=> String, one of ["Pending", "Available", "Deleting", "Deleted", "Failed"]
    #   resp.data.service_configurations[0].availability_zones #=> Array<String>
    #   resp.data.service_configurations[0].availability_zones[0] #=> String
    #   resp.data.service_configurations[0].acceptance_required #=> Boolean
    #   resp.data.service_configurations[0].manages_vpc_endpoints #=> Boolean
    #   resp.data.service_configurations[0].network_load_balancer_arns #=> Array<String>
    #   resp.data.service_configurations[0].gateway_load_balancer_arns #=> Array<String>
    #   resp.data.service_configurations[0].base_endpoint_dns_names #=> Array<String>
    #   resp.data.service_configurations[0].private_dns_name #=> String
    #   resp.data.service_configurations[0].private_dns_name_configuration #=> Types::PrivateDnsNameConfiguration
    #   resp.data.service_configurations[0].private_dns_name_configuration.state #=> String, one of ["pendingVerification", "verified", "failed"]
    #   resp.data.service_configurations[0].private_dns_name_configuration.type #=> String
    #   resp.data.service_configurations[0].private_dns_name_configuration.value #=> String
    #   resp.data.service_configurations[0].private_dns_name_configuration.name #=> String
    #   resp.data.service_configurations[0].payer_responsibility #=> String, one of ["ServiceOwner"]
    #   resp.data.service_configurations[0].tags #=> Array<Tag>
    #   resp.data.service_configurations[0].tags[0] #=> Types::Tag
    #   resp.data.service_configurations[0].tags[0].key #=> String
    #   resp.data.service_configurations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_vpc_endpoint_service_configurations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcEndpointServiceConfigurationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcEndpointServiceConfigurationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcEndpointServiceConfigurations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcEndpointServiceConfigurations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcEndpointServiceConfigurations,
        params_class: Params::DescribeVpcEndpointServiceConfigurationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_endpoint_service_configurations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the principals (service consumers) that are permitted to discover your VPC
    #             endpoint service.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcEndpointServicePermissionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the service.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #   		       <ul>
    #               <li>
    #   				           <p>
    #                     <code>principal</code> - The ARN of the principal.</p>
    #   			         </li>
    #               <li>
    #   				           <p>
    #                     <code>principal-type</code> - The principal type (<code>All</code> |
    #   						<code>Service</code> | <code>OrganizationUnit</code> | <code>Account</code>
    #   					| <code>User</code> | <code>Role</code>).</p>
    #   			         </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining
    #               results of the initial request can be seen by sending another request with the returned
    #                   <code>NextToken</code> value. This value can be between 5 and 1,000; if
    #                   <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are
    #               returned.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to retrieve the next page of results.</p>
    #
    # @return [Types::DescribeVpcEndpointServicePermissionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_endpoint_service_permissions(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcEndpointServicePermissionsOutput
    #   resp.data.allowed_principals #=> Array<AllowedPrincipal>
    #   resp.data.allowed_principals[0] #=> Types::AllowedPrincipal
    #   resp.data.allowed_principals[0].principal_type #=> String, one of ["All", "Service", "OrganizationUnit", "Account", "User", "Role"]
    #   resp.data.allowed_principals[0].principal #=> String
    #   resp.data.next_token #=> String
    #
    def describe_vpc_endpoint_service_permissions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcEndpointServicePermissionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcEndpointServicePermissionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcEndpointServicePermissions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcEndpointServicePermissions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcEndpointServicePermissions,
        params_class: Params::DescribeVpcEndpointServicePermissionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_endpoint_service_permissions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes available services to which you can create a VPC endpoint.</p>
    #         <p>When the service provider and the consumer have different accounts in multiple
    #             Availability Zones, and the consumer views the VPC endpoint service information, the
    #             response only includes the common Availability Zones. For example, when the service
    #             provider account uses <code>us-east-1a</code> and <code>us-east-1c</code> and the
    #             consumer uses <code>us-east-1a</code> and <code>us-east-1b</code>, the response includes
    #             the VPC endpoint services in the common Availability Zone,
    #             <code>us-east-1a</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcEndpointServicesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :service_names
    #   <p>One or more service names.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>service-name</code> - The name of the service.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>service-type</code> - The type of service (<code>Interface</code> |
    #                           <code>Gateway</code>).</p>
    #               </li>
    #               <li>
    #           		     <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #           	   </li>
    #               <li>
    #           		     <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #           	   </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #           <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    #
    # @return [Types::DescribeVpcEndpointServicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_endpoint_services(
    #     dry_run: false,
    #     service_names: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcEndpointServicesOutput
    #   resp.data.service_names #=> Array<String>
    #   resp.data.service_names[0] #=> String
    #   resp.data.service_details #=> Array<ServiceDetail>
    #   resp.data.service_details[0] #=> Types::ServiceDetail
    #   resp.data.service_details[0].service_name #=> String
    #   resp.data.service_details[0].service_id #=> String
    #   resp.data.service_details[0].service_type #=> Array<ServiceTypeDetail>
    #   resp.data.service_details[0].service_type[0] #=> Types::ServiceTypeDetail
    #   resp.data.service_details[0].service_type[0].service_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.service_details[0].availability_zones #=> Array<String>
    #   resp.data.service_details[0].owner #=> String
    #   resp.data.service_details[0].base_endpoint_dns_names #=> Array<String>
    #   resp.data.service_details[0].private_dns_name #=> String
    #   resp.data.service_details[0].private_dns_names #=> Array<PrivateDnsDetails>
    #   resp.data.service_details[0].private_dns_names[0] #=> Types::PrivateDnsDetails
    #   resp.data.service_details[0].private_dns_names[0].private_dns_name #=> String
    #   resp.data.service_details[0].vpc_endpoint_policy_supported #=> Boolean
    #   resp.data.service_details[0].acceptance_required #=> Boolean
    #   resp.data.service_details[0].manages_vpc_endpoints #=> Boolean
    #   resp.data.service_details[0].payer_responsibility #=> String, one of ["ServiceOwner"]
    #   resp.data.service_details[0].tags #=> Array<Tag>
    #   resp.data.service_details[0].tags[0] #=> Types::Tag
    #   resp.data.service_details[0].tags[0].key #=> String
    #   resp.data.service_details[0].tags[0].value #=> String
    #   resp.data.service_details[0].private_dns_name_verification_state #=> String, one of ["pendingVerification", "verified", "failed"]
    #   resp.data.next_token #=> String
    #
    def describe_vpc_endpoint_services(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcEndpointServicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcEndpointServicesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcEndpointServices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcEndpointServices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcEndpointServices,
        params_class: Params::DescribeVpcEndpointServicesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_endpoint_services
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your VPC endpoints.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcEndpointsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :vpc_endpoint_ids
    #   <p>One or more endpoint IDs.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>service-name</code> - The name of the service.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>vpc-id</code> - The ID of the VPC in which the endpoint resides.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>vpc-endpoint-id</code> - The ID of the endpoint.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpc-endpoint-state</code> - The state of the endpoint
    #                           (<code>pendingAcceptance</code> | <code>pending</code> |
    #                           <code>available</code> | <code>deleting</code> | <code>deleted</code> |
    #                           <code>rejected</code> | <code>failed</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpc-endpoint-type</code> - The type of VPC endpoint (<code>Interface</code> | <code>Gateway</code> | <code>GatewayLoadBalancer</code>).</p>
    #               </li>
    #               <li>
    #           		     <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #           	   </li>
    #               <li>
    #           		     <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #           	   </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #           <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    #
    # @return [Types::DescribeVpcEndpointsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_endpoints(
    #     dry_run: false,
    #     vpc_endpoint_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcEndpointsOutput
    #   resp.data.vpc_endpoints #=> Array<VpcEndpoint>
    #   resp.data.vpc_endpoints[0] #=> Types::VpcEndpoint
    #   resp.data.vpc_endpoints[0].vpc_endpoint_id #=> String
    #   resp.data.vpc_endpoints[0].vpc_endpoint_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.vpc_endpoints[0].vpc_id #=> String
    #   resp.data.vpc_endpoints[0].service_name #=> String
    #   resp.data.vpc_endpoints[0].state #=> String, one of ["PendingAcceptance", "Pending", "Available", "Deleting", "Deleted", "Rejected", "Failed", "Expired"]
    #   resp.data.vpc_endpoints[0].policy_document #=> String
    #   resp.data.vpc_endpoints[0].route_table_ids #=> Array<String>
    #   resp.data.vpc_endpoints[0].route_table_ids[0] #=> String
    #   resp.data.vpc_endpoints[0].subnet_ids #=> Array<String>
    #   resp.data.vpc_endpoints[0].groups #=> Array<SecurityGroupIdentifier>
    #   resp.data.vpc_endpoints[0].groups[0] #=> Types::SecurityGroupIdentifier
    #   resp.data.vpc_endpoints[0].groups[0].group_id #=> String
    #   resp.data.vpc_endpoints[0].groups[0].group_name #=> String
    #   resp.data.vpc_endpoints[0].private_dns_enabled #=> Boolean
    #   resp.data.vpc_endpoints[0].requester_managed #=> Boolean
    #   resp.data.vpc_endpoints[0].network_interface_ids #=> Array<String>
    #   resp.data.vpc_endpoints[0].dns_entries #=> Array<DnsEntry>
    #   resp.data.vpc_endpoints[0].dns_entries[0] #=> Types::DnsEntry
    #   resp.data.vpc_endpoints[0].dns_entries[0].dns_name #=> String
    #   resp.data.vpc_endpoints[0].dns_entries[0].hosted_zone_id #=> String
    #   resp.data.vpc_endpoints[0].creation_timestamp #=> Time
    #   resp.data.vpc_endpoints[0].tags #=> Array<Tag>
    #   resp.data.vpc_endpoints[0].tags[0] #=> Types::Tag
    #   resp.data.vpc_endpoints[0].tags[0].key #=> String
    #   resp.data.vpc_endpoints[0].tags[0].value #=> String
    #   resp.data.vpc_endpoints[0].owner_id #=> String
    #   resp.data.vpc_endpoints[0].last_error #=> Types::LastError
    #   resp.data.vpc_endpoints[0].last_error.message #=> String
    #   resp.data.vpc_endpoints[0].last_error.code #=> String
    #   resp.data.next_token #=> String
    #
    def describe_vpc_endpoints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcEndpointsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcEndpointsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcEndpoints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcEndpoints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcEndpoints,
        params_class: Params::DescribeVpcEndpointsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_endpoints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your VPC peering connections.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcPeeringConnectionsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                       <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter
    #                       VPC.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                       <code>accepter-vpc-info.owner-id</code> - The ID of the Amazon Web Services account that owns the
    #                       accepter VPC.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                       <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>expiration-time</code> - The expiration date and time for the VPC peering
    #             connection.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                       <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
    #                       requester's VPC.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>requester-vpc-info.owner-id</code> - The ID of the Amazon Web Services account that owns the
    #                     requester VPC.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                       <code>status-code</code> - The status of the VPC peering connection
    #                           (<code>pending-acceptance</code> | <code>failed</code> |
    #                           <code>expired</code> | <code>provisioning</code> | <code>active</code> |
    #                           <code>deleting</code> | <code>deleted</code> |
    #                       <code>rejected</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>status-message</code> - A message that provides more information about the status
    #             of the VPC peering connection, if applicable.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :vpc_peering_connection_ids
    #   <p>One or more VPC peering connection IDs.</p>
    #            <p>Default: Describes all your VPC peering connections.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeVpcPeeringConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpc_peering_connections(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     vpc_peering_connection_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcPeeringConnectionsOutput
    #   resp.data.vpc_peering_connections #=> Array<VpcPeeringConnection>
    #   resp.data.vpc_peering_connections[0] #=> Types::VpcPeeringConnection
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.ipv6_cidr_block_set #=> Array<Ipv6CidrBlock>
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.ipv6_cidr_block_set[0] #=> Types::Ipv6CidrBlock
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.ipv6_cidr_block_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block_set #=> Array<CidrBlock>
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block_set[0] #=> Types::CidrBlock
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block_set[0].cidr_block #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.owner_id #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options #=> Types::VpcPeeringConnectionOptionsDescription
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.vpc_id #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.region #=> String
    #   resp.data.vpc_peering_connections[0].expiration_time #=> Time
    #   resp.data.vpc_peering_connections[0].requester_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connections[0].status #=> Types::VpcPeeringConnectionStateReason
    #   resp.data.vpc_peering_connections[0].status.code #=> String, one of ["initiating-request", "pending-acceptance", "active", "deleted", "rejected", "failed", "expired", "provisioning", "deleting"]
    #   resp.data.vpc_peering_connections[0].status.message #=> String
    #   resp.data.vpc_peering_connections[0].tags #=> Array<Tag>
    #   resp.data.vpc_peering_connections[0].tags[0] #=> Types::Tag
    #   resp.data.vpc_peering_connections[0].tags[0].key #=> String
    #   resp.data.vpc_peering_connections[0].tags[0].value #=> String
    #   resp.data.vpc_peering_connections[0].vpc_peering_connection_id #=> String
    #   resp.data.next_token #=> String
    #
    def describe_vpc_peering_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcPeeringConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcPeeringConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcPeeringConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcPeeringConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcPeeringConnections,
        params_class: Params::DescribeVpcPeeringConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpc_peering_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your VPCs.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpcsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block you
    #                       specify must exactly match the VPC's CIDR block for information to be returned
    #                       for the VPC. Must contain the slash followed by one or two digits (for example,
    #                       <code>/28</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block associated with the
    #                       VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>cidr-block-association.association-id</code> - The association ID for
    #                       an IPv4 CIDR block associated with the VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>cidr-block-association.state</code> - The state of an IPv4 CIDR block
    #                       associated with the VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
    #                       block associated with the VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.ipv6-pool</code> - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.association-id</code> - The association
    #                       ID for an IPv6 CIDR block associated with the VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
    #                       block associated with the VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>is-default</code> - Indicates whether the VPC is the default VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>owner-id</code> - The ID of the Amazon Web Services account that owns the VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpc-id</code> - The ID of the VPC.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :vpc_ids
    #   <p>One or more VPC IDs.</p>
    #   		       <p>Default: Describes all your VPCs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::DescribeVpcsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpcs(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     vpc_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpcsOutput
    #   resp.data.vpcs #=> Array<Vpc>
    #   resp.data.vpcs[0] #=> Types::Vpc
    #   resp.data.vpcs[0].cidr_block #=> String
    #   resp.data.vpcs[0].dhcp_options_id #=> String
    #   resp.data.vpcs[0].state #=> String, one of ["pending", "available"]
    #   resp.data.vpcs[0].vpc_id #=> String
    #   resp.data.vpcs[0].owner_id #=> String
    #   resp.data.vpcs[0].instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set #=> Array<VpcIpv6CidrBlockAssociation>
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0] #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].network_border_group #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_pool #=> String
    #   resp.data.vpcs[0].cidr_block_association_set #=> Array<VpcCidrBlockAssociation>
    #   resp.data.vpcs[0].cidr_block_association_set[0] #=> Types::VpcCidrBlockAssociation
    #   resp.data.vpcs[0].cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpcs[0].cidr_block_association_set[0].cidr_block #=> String
    #   resp.data.vpcs[0].cidr_block_association_set[0].cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpcs[0].is_default #=> Boolean
    #   resp.data.vpcs[0].tags #=> Array<Tag>
    #   resp.data.vpcs[0].tags[0] #=> Types::Tag
    #   resp.data.vpcs[0].tags[0].key #=> String
    #   resp.data.vpcs[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    #
    def describe_vpcs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpcsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpcsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpcs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpcs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpcs,
        params_class: Params::DescribeVpcsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpcs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your VPN connections.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpnConnectionsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>customer-gateway-configuration</code> - The configuration information
    #                       for the customer gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>customer-gateway-id</code> - The ID of a customer gateway associated
    #                       with the VPN connection.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the VPN connection (<code>pending</code> |
    #                           <code>available</code> | <code>deleting</code> |
    #                       <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>option.static-routes-only</code> - Indicates whether the connection has
    #                       static routes only. Used for devices that do not support Border Gateway Protocol
    #                       (BGP).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>route.destination-cidr-block</code> - The destination CIDR block. This
    #                       corresponds to the subnet used in a customer data center.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with
    #                       a BGP device.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>type</code> - The type of VPN connection. Currently the only supported
    #                       type is <code>ipsec.1</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpn-connection-id</code> - The ID of the VPN connection.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated
    #                       with the VPN connection.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-id</code> - The ID of a transit gateway associated with
    #                       the VPN connection.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :vpn_connection_ids
    #   <p>One or more VPN connection IDs.</p>
    #           <p>Default: Describes your VPN connections.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeVpnConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpn_connections(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     vpn_connection_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpnConnectionsOutput
    #   resp.data.vpn_connections #=> Array<VpnConnection>
    #   resp.data.vpn_connections[0] #=> Types::VpnConnection
    #   resp.data.vpn_connections[0].customer_gateway_configuration #=> String
    #   resp.data.vpn_connections[0].customer_gateway_id #=> String
    #   resp.data.vpn_connections[0].category #=> String
    #   resp.data.vpn_connections[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connections[0].type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connections[0].vpn_connection_id #=> String
    #   resp.data.vpn_connections[0].vpn_gateway_id #=> String
    #   resp.data.vpn_connections[0].transit_gateway_id #=> String
    #   resp.data.vpn_connections[0].core_network_arn #=> String
    #   resp.data.vpn_connections[0].core_network_attachment_arn #=> String
    #   resp.data.vpn_connections[0].gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connections[0].options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connections[0].options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connections[0].options.static_routes_only #=> Boolean
    #   resp.data.vpn_connections[0].options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connections[0].options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connections[0].options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connections[0].options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connections[0].routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connections[0].routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connections[0].routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connections[0].routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connections[0].routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connections[0].tags #=> Array<Tag>
    #   resp.data.vpn_connections[0].tags[0] #=> Types::Tag
    #   resp.data.vpn_connections[0].tags[0].key #=> String
    #   resp.data.vpn_connections[0].tags[0].value #=> String
    #   resp.data.vpn_connections[0].vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connections[0].vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connections[0].vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connections[0].vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connections[0].vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connections[0].vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connections[0].vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connections[0].vgw_telemetry[0].certificate_arn #=> String
    #
    def describe_vpn_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpnConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpnConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpnConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpnConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpnConnections,
        params_class: Params::DescribeVpnConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpn_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes one or more of your virtual private gateways.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DescribeVpnGatewaysInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the
    #                       Amazon side of the gateway.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>attachment.state</code> - The current state of the attachment between
    #                       the gateway and the VPC (<code>attaching</code> | <code>attached</code> |
    #                           <code>detaching</code> | <code>detached</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>attachment.vpc-id</code> - The ID of an attached VPC.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>availability-zone</code> - The Availability Zone for the virtual private
    #                       gateway (if applicable).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the virtual private gateway
    #                           (<code>pending</code> | <code>available</code> | <code>deleting</code> |
    #                           <code>deleted</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>type</code> - The type of virtual private gateway. Currently the only
    #                       supported type is <code>ipsec.1</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<String>] :vpn_gateway_ids
    #   <p>One or more virtual private gateway IDs.</p>
    #           <p>Default: Describes all your virtual private gateways.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DescribeVpnGatewaysOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_vpn_gateways(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     vpn_gateway_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeVpnGatewaysOutput
    #   resp.data.vpn_gateways #=> Array<VpnGateway>
    #   resp.data.vpn_gateways[0] #=> Types::VpnGateway
    #   resp.data.vpn_gateways[0].availability_zone #=> String
    #   resp.data.vpn_gateways[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_gateways[0].type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_gateways[0].vpc_attachments #=> Array<VpcAttachment>
    #   resp.data.vpn_gateways[0].vpc_attachments[0] #=> Types::VpcAttachment
    #   resp.data.vpn_gateways[0].vpc_attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.vpn_gateways[0].vpc_attachments[0].vpc_id #=> String
    #   resp.data.vpn_gateways[0].vpn_gateway_id #=> String
    #   resp.data.vpn_gateways[0].amazon_side_asn #=> Integer
    #   resp.data.vpn_gateways[0].tags #=> Array<Tag>
    #   resp.data.vpn_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.vpn_gateways[0].tags[0].key #=> String
    #   resp.data.vpn_gateways[0].tags[0].value #=> String
    #
    def describe_vpn_gateways(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeVpnGatewaysInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeVpnGatewaysInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeVpnGateways
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DescribeVpnGateways
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DescribeVpnGateways,
        params_class: Params::DescribeVpnGatewaysOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :describe_vpn_gateways
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachClassicLinkVpcInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance to unlink from the VPC.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC to which the instance is linked.</p>
    #
    # @return [Types::DetachClassicLinkVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_classic_link_vpc(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachClassicLinkVpcOutput
    #   resp.data.return #=> Boolean
    #
    def detach_classic_link_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachClassicLinkVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachClassicLinkVpcInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachClassicLinkVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DetachClassicLinkVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DetachClassicLinkVpc,
        params_class: Params::DetachClassicLinkVpcOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :detach_classic_link_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches an internet gateway from a VPC, disabling connectivity between the internet
    # 			and the VPC. The VPC must not contain any running instances with Elastic IP addresses or
    # 			public IPv4 addresses.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachInternetGatewayInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :internet_gateway_id
    #   <p>The ID of the internet gateway.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::DetachInternetGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_internet_gateway(
    #     dry_run: false,
    #     internet_gateway_id: 'InternetGatewayId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachInternetGatewayOutput
    #
    def detach_internet_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachInternetGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachInternetGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachInternetGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DetachInternetGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DetachInternetGateway,
        params_class: Params::DetachInternetGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :detach_internet_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches a network interface from an instance.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachNetworkInterfaceInput}.
    #
    # @option params [String] :attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :force
    #   <p>Specifies whether to force a detachment.</p>
    #           <note>
    #               <ul>
    #                  <li>
    #                       <p>Use the <code>Force</code> parameter only as a last resort to detach a network interface from a failed instance. </p>
    #                   </li>
    #                  <li>
    #                       <p>If you use the <code>Force</code> parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.</p>
    #                   </li>
    #                  <li>
    #                       <p>If you force the detachment of a network interface, the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">instance metadata</a>
    #                           might not get updated. This means that the attributes associated
    #                           with the detached network interface might still be visible. The
    #                           instance metadata will get updated when you stop and start the
    #                           instance.</p>
    #                   </li>
    #               </ul>
    #           </note>
    #
    # @return [Types::DetachNetworkInterfaceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_network_interface(
    #     attachment_id: 'AttachmentId', # required
    #     dry_run: false,
    #     force: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachNetworkInterfaceOutput
    #
    def detach_network_interface(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachNetworkInterfaceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachNetworkInterfaceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachNetworkInterface
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DetachNetworkInterface
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DetachNetworkInterface,
        params_class: Params::DetachNetworkInterfaceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :detach_network_interface
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the
    #       device within your operating system before detaching the volume. Failure to do so can result
    #       in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens,
    #       detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot
    #       the instance, or all three. If an EBS volume is the root device of an instance, it can't be
    #       detached while the instance is running. To detach the root volume, stop the instance
    #       first.</p>
    #          <p>When a volume with an Amazon Web Services Marketplace product code is detached from an instance, the
    #       product code is no longer associated with the instance.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detach an Amazon EBS volume</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachVolumeInput}.
    #
    # @option params [String] :device
    #   <p>The device name.</p>
    #
    # @option params [Boolean] :force
    #   <p>Forces detachment if the previous detachment attempt did not occur cleanly (for example,
    #         logging into an instance, unmounting the volume, and detaching normally). This option can lead
    #         to data loss or a corrupted file system. Use this option only as a last resort to detach a
    #         volume from a failed instance. The instance won't have an opportunity to flush file system
    #         caches or file system metadata. If you use this option, you must perform file system check and
    #         repair procedures.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the volume.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DetachVolumeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_volume(
    #     device: 'Device',
    #     force: false,
    #     instance_id: 'InstanceId',
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachVolumeOutput
    #   resp.data.attach_time #=> Time
    #   resp.data.device #=> String
    #   resp.data.instance_id #=> String
    #   resp.data.state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.volume_id #=> String
    #   resp.data.delete_on_termination #=> Boolean
    #
    def detach_volume(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachVolumeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachVolumeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachVolume
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DetachVolume
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DetachVolume,
        params_class: Params::DetachVolumeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :detach_volume
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn
    #             off the VPC and not use it anymore. You can confirm a virtual private gateway has been
    #             completely detached from a VPC by describing the virtual private gateway (any
    #             attachments to the virtual private gateway are also described).</p>
    #         <p>You must wait for the attachment's state to switch to <code>detached</code> before you
    #             can delete the VPC or attach a different VPC to the virtual private gateway.</p>
    #
    # @param [Hash] params
    #   See {Types::DetachVpnGatewayInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [String] :vpn_gateway_id
    #   <p>The ID of the virtual private gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DetachVpnGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.detach_vpn_gateway(
    #     vpc_id: 'VpcId', # required
    #     vpn_gateway_id: 'VpnGatewayId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DetachVpnGatewayOutput
    #
    def detach_vpn_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DetachVpnGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DetachVpnGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DetachVpnGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DetachVpnGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DetachVpnGateway,
        params_class: Params::DetachVpnGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :detach_vpn_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables EBS encryption by default for your account in the current Region.</p>
    #          <p>After you disable encryption by default, you can still create encrypted volumes by
    #       enabling encryption when you create each volume.</p>
    #          <p>Disabling encryption by default does not change the encryption status of your
    #       existing volumes.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableEbsEncryptionByDefaultInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisableEbsEncryptionByDefaultOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_ebs_encryption_by_default(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableEbsEncryptionByDefaultOutput
    #   resp.data.ebs_encryption_by_default #=> Boolean
    #
    def disable_ebs_encryption_by_default(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableEbsEncryptionByDefaultInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableEbsEncryptionByDefaultInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableEbsEncryptionByDefault
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableEbsEncryptionByDefault
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableEbsEncryptionByDefault,
        params_class: Params::DisableEbsEncryptionByDefaultOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_ebs_encryption_by_default
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableFastSnapshotRestoresInput}.
    #
    # @option params [Array<String>] :availability_zones
    #   <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    #
    # @option params [Array<String>] :source_snapshot_ids
    #   <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisableFastSnapshotRestoresOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_fast_snapshot_restores(
    #     availability_zones: [
    #       'member'
    #     ], # required
    #     source_snapshot_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableFastSnapshotRestoresOutput
    #   resp.data.successful #=> Array<DisableFastSnapshotRestoreSuccessItem>
    #   resp.data.successful[0] #=> Types::DisableFastSnapshotRestoreSuccessItem
    #   resp.data.successful[0].snapshot_id #=> String
    #   resp.data.successful[0].availability_zone #=> String
    #   resp.data.successful[0].state #=> String, one of ["enabling", "optimizing", "enabled", "disabling", "disabled"]
    #   resp.data.successful[0].state_transition_reason #=> String
    #   resp.data.successful[0].owner_id #=> String
    #   resp.data.successful[0].owner_alias #=> String
    #   resp.data.successful[0].enabling_time #=> Time
    #   resp.data.successful[0].optimizing_time #=> Time
    #   resp.data.successful[0].enabled_time #=> Time
    #   resp.data.successful[0].disabling_time #=> Time
    #   resp.data.successful[0].disabled_time #=> Time
    #   resp.data.unsuccessful #=> Array<DisableFastSnapshotRestoreErrorItem>
    #   resp.data.unsuccessful[0] #=> Types::DisableFastSnapshotRestoreErrorItem
    #   resp.data.unsuccessful[0].snapshot_id #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors #=> Array<DisableFastSnapshotRestoreStateErrorItem>
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0] #=> Types::DisableFastSnapshotRestoreStateErrorItem
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].availability_zone #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error #=> Types::DisableFastSnapshotRestoreStateError
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.code #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.message #=> String
    #
    def disable_fast_snapshot_restores(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableFastSnapshotRestoresInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableFastSnapshotRestoresInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableFastSnapshotRestores
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableFastSnapshotRestores
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableFastSnapshotRestores,
        params_class: Params::DisableFastSnapshotRestoresOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_fast_snapshot_restores
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Cancels the deprecation of the specified AMI.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableImageDeprecationInput}.
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisableImageDeprecationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_image_deprecation(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableImageDeprecationOutput
    #   resp.data.return #=> Boolean
    #
    def disable_image_deprecation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableImageDeprecationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableImageDeprecationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableImageDeprecation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableImageDeprecation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableImageDeprecation,
        params_class: Params::DisableImageDeprecationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_image_deprecation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disable the IPAM account. For more information, see <a href="/vpc/latest/ipam/enable-integ-ipam.html">Enable integration with Organizations</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::DisableIpamOrganizationAdminAccountInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :delegated_admin_account_id
    #   <p>The Organizations member account ID that you want to disable as IPAM account.</p>
    #
    # @return [Types::DisableIpamOrganizationAdminAccountOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_ipam_organization_admin_account(
    #     dry_run: false,
    #     delegated_admin_account_id: 'DelegatedAdminAccountId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableIpamOrganizationAdminAccountOutput
    #   resp.data.success #=> Boolean
    #
    def disable_ipam_organization_admin_account(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableIpamOrganizationAdminAccountInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableIpamOrganizationAdminAccountInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableIpamOrganizationAdminAccount
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableIpamOrganizationAdminAccount
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableIpamOrganizationAdminAccount,
        params_class: Params::DisableIpamOrganizationAdminAccountOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_ipam_organization_admin_account
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables access to the EC2 serial console of all instances for your account. By default,
    # 			access to the EC2 serial console is disabled for your account. For more information, see
    # 				<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2
    # 				User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableSerialConsoleAccessInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisableSerialConsoleAccessOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_serial_console_access(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableSerialConsoleAccessOutput
    #   resp.data.serial_console_access_enabled #=> Boolean
    #
    def disable_serial_console_access(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableSerialConsoleAccessInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableSerialConsoleAccessInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableSerialConsoleAccess
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableSerialConsoleAccess
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableSerialConsoleAccess,
        params_class: Params::DisableSerialConsoleAccessOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_serial_console_access
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables the specified resource attachment from propagating routes to the specified
    #          propagation route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableTransitGatewayRouteTablePropagationInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the propagation route table.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisableTransitGatewayRouteTablePropagationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_transit_gateway_route_table_propagation(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableTransitGatewayRouteTablePropagationOutput
    #   resp.data.propagation #=> Types::TransitGatewayPropagation
    #   resp.data.propagation.transit_gateway_attachment_id #=> String
    #   resp.data.propagation.resource_id #=> String
    #   resp.data.propagation.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.propagation.transit_gateway_route_table_id #=> String
    #   resp.data.propagation.state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #
    def disable_transit_gateway_route_table_propagation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableTransitGatewayRouteTablePropagationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableTransitGatewayRouteTablePropagationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableTransitGatewayRouteTablePropagation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableTransitGatewayRouteTablePropagation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableTransitGatewayRouteTablePropagation,
        params_class: Params::DisableTransitGatewayRouteTablePropagationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_transit_gateway_route_table_propagation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables a virtual private gateway (VGW) from propagating routes to a specified route
    #             table of a VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableVgwRoutePropagationInput}.
    #
    # @option params [String] :gateway_id
    #   <p>The ID of the virtual private gateway.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisableVgwRoutePropagationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_vgw_route_propagation(
    #     gateway_id: 'GatewayId', # required
    #     route_table_id: 'RouteTableId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableVgwRoutePropagationOutput
    #
    def disable_vgw_route_propagation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableVgwRoutePropagationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableVgwRoutePropagationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableVgwRoutePropagation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableVgwRoutePropagation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableVgwRoutePropagation,
        params_class: Params::DisableVgwRoutePropagationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_vgw_route_propagation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableVpcClassicLinkInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::DisableVpcClassicLinkOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_vpc_classic_link(
    #     dry_run: false,
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableVpcClassicLinkOutput
    #   resp.data.return #=> Boolean
    #
    def disable_vpc_classic_link(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableVpcClassicLinkInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableVpcClassicLinkInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableVpcClassicLink
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableVpcClassicLink
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableVpcClassicLink,
        params_class: Params::DisableVpcClassicLinkOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_vpc_classic_link
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to
    # 			public IP addresses when addressed between a linked EC2-Classic instance and instances
    # 			in the VPC to which it's linked. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    # 				<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You must specify a VPC ID in the request.</p>
    #
    # @param [Hash] params
    #   See {Types::DisableVpcClassicLinkDnsSupportInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::DisableVpcClassicLinkDnsSupportOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disable_vpc_classic_link_dns_support(
    #     vpc_id: 'VpcId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisableVpcClassicLinkDnsSupportOutput
    #   resp.data.return #=> Boolean
    #
    def disable_vpc_classic_link_dns_support(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisableVpcClassicLinkDnsSupportInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisableVpcClassicLinkDnsSupportInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisableVpcClassicLinkDnsSupport
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisableVpcClassicLinkDnsSupport
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisableVpcClassicLinkDnsSupport,
        params_class: Params::DisableVpcClassicLinkDnsSupportOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disable_vpc_classic_link_dns_support
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p>
    # 			      <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more
    # 			information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP
    # 				Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateAddressInput}.
    #
    # @option params [String] :association_id
    #   <p>[EC2-VPC] The association ID. Required for EC2-VPC.</p>
    #
    # @option params [String] :public_ip
    #   <p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateAddressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_address(
    #     association_id: 'AssociationId',
    #     public_ip: 'PublicIp',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateAddressOutput
    #
    def disassociate_address(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateAddressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateAddressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateAddress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateAddress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateAddress,
        params_class: Params::DisassociateAddressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_address
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the
    # 			last target network from a Client VPN, the following happens:</p>
    # 		       <ul>
    #             <li>
    # 				           <p>The route that was automatically added for the VPC is deleted</p>
    # 			         </li>
    #             <li>
    # 				           <p>All active client connections are terminated</p>
    # 			         </li>
    #             <li>
    # 				           <p>New client connections are disallowed</p>
    # 			         </li>
    #             <li>
    # 				           <p>The Client VPN endpoint's status changes to <code>pending-associate</code>
    #                </p>
    # 			         </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::DisassociateClientVpnTargetNetworkInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint from which to disassociate the target network.</p>
    #
    # @option params [String] :association_id
    #   <p>The ID of the target network association.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateClientVpnTargetNetworkOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_client_vpn_target_network(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     association_id: 'AssociationId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateClientVpnTargetNetworkOutput
    #   resp.data.association_id #=> String
    #   resp.data.status #=> Types::AssociationStatus
    #   resp.data.status.code #=> String, one of ["associating", "associated", "association-failed", "disassociating", "disassociated"]
    #   resp.data.status.message #=> String
    #
    def disassociate_client_vpn_target_network(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateClientVpnTargetNetworkInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateClientVpnTargetNetworkInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateClientVpnTargetNetwork
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateClientVpnTargetNetwork
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateClientVpnTargetNetwork,
        params_class: Params::DisassociateClientVpnTargetNetworkOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_client_vpn_target_network
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates an IAM role from an Certificate Manager (ACM) certificate. Disassociating an IAM role
    # 			from an ACM certificate removes the Amazon S3 object that contains the certificate, certificate chain, and
    # 			encrypted private key from the Amazon S3 bucket. It also revokes the IAM role's permission to use the
    # 			KMS key used to encrypt the private key. This effectively revokes the role's permission
    # 			to use the certificate.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateEnclaveCertificateIamRoleInput}.
    #
    # @option params [String] :certificate_arn
    #   <p>The ARN of the ACM certificate from which to disassociate the IAM role.</p>
    #
    # @option params [String] :role_arn
    #   <p>The ARN of the IAM role to disassociate.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateEnclaveCertificateIamRoleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_enclave_certificate_iam_role(
    #     certificate_arn: 'CertificateArn',
    #     role_arn: 'RoleArn',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateEnclaveCertificateIamRoleOutput
    #   resp.data.return #=> Boolean
    #
    def disassociate_enclave_certificate_iam_role(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateEnclaveCertificateIamRoleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateEnclaveCertificateIamRoleInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateEnclaveCertificateIamRole
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateEnclaveCertificateIamRole
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateEnclaveCertificateIamRole,
        params_class: Params::DisassociateEnclaveCertificateIamRoleOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_enclave_certificate_iam_role
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates an IAM instance profile from a running or stopped instance.</p>
    #         <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
    #             ID.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateIamInstanceProfileInput}.
    #
    # @option params [String] :association_id
    #   <p>The ID of the IAM instance profile association.</p>
    #
    # @return [Types::DisassociateIamInstanceProfileOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_iam_instance_profile(
    #     association_id: 'AssociationId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateIamInstanceProfileOutput
    #   resp.data.iam_instance_profile_association #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_association.association_id #=> String
    #   resp.data.iam_instance_profile_association.instance_id #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_association.iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_association.timestamp #=> Time
    #
    def disassociate_iam_instance_profile(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateIamInstanceProfileInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateIamInstanceProfileInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateIamInstanceProfile
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateIamInstanceProfile
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateIamInstanceProfile,
        params_class: Params::DisassociateIamInstanceProfileOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_iam_instance_profile
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates one or more targets from an event window.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateInstanceEventWindowInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_event_window_id
    #   <p>The ID of the event window.</p>
    #
    # @option params [InstanceEventWindowDisassociationRequest] :association_target
    #   <p>One or more targets to disassociate from the specified event window.</p>
    #
    # @return [Types::DisassociateInstanceEventWindowOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_instance_event_window(
    #     dry_run: false,
    #     instance_event_window_id: 'InstanceEventWindowId', # required
    #     association_target: {
    #       instance_ids: [
    #         'member'
    #       ],
    #       instance_tags: [
    #         {
    #           key: 'Key',
    #           value: 'Value'
    #         }
    #       ],
    #       dedicated_host_ids: [
    #         'member'
    #       ]
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    #
    def disassociate_instance_event_window(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateInstanceEventWindowInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateInstanceEventWindowInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateInstanceEventWindow
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateInstanceEventWindow
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateInstanceEventWindow,
        params_class: Params::DisassociateInstanceEventWindowOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_instance_event_window
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates a subnet or gateway from a route table.</p>
    # 		       <p>After you perform this action, the subnet no longer uses the routes in the route table.
    # 				Instead, it uses the routes in the VPC's main route table. For more information
    # 				about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
    # 				tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateRouteTableInput}.
    #
    # @option params [String] :association_id
    #   <p>The association ID representing the current association between the route table and subnet or gateway.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_route_table(
    #     association_id: 'AssociationId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateRouteTableOutput
    #
    def disassociate_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateRouteTable,
        params_class: Params::DisassociateRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateSubnetCidrBlockInput}.
    #
    # @option params [String] :association_id
    #   <p>The association ID for the CIDR block.</p>
    #
    # @return [Types::DisassociateSubnetCidrBlockOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_subnet_cidr_block(
    #     association_id: 'AssociationId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateSubnetCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet_id #=> String
    #
    def disassociate_subnet_cidr_block(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateSubnetCidrBlockInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateSubnetCidrBlockInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateSubnetCidrBlock
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateSubnetCidrBlock
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateSubnetCidrBlock,
        params_class: Params::DisassociateSubnetCidrBlockOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_subnet_cidr_block
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates the specified subnets from the transit gateway multicast domain. </p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateTransitGatewayMulticastDomainInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>The IDs of the subnets;</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateTransitGatewayMulticastDomainOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_transit_gateway_multicast_domain(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateTransitGatewayMulticastDomainOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    #
    def disassociate_transit_gateway_multicast_domain(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateTransitGatewayMulticastDomainInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateTransitGatewayMulticastDomainInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateTransitGatewayMulticastDomain
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateTransitGatewayMulticastDomain
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateTransitGatewayMulticastDomain,
        params_class: Params::DisassociateTransitGatewayMulticastDomainOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_transit_gateway_multicast_domain
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates a resource attachment from a transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateTransitGatewayRouteTableInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateTransitGatewayRouteTableOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_transit_gateway_route_table(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateTransitGatewayRouteTableOutput
    #   resp.data.association #=> Types::TransitGatewayAssociation
    #   resp.data.association.transit_gateway_route_table_id #=> String
    #   resp.data.association.transit_gateway_attachment_id #=> String
    #   resp.data.association.resource_id #=> String
    #   resp.data.association.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #
    def disassociate_transit_gateway_route_table(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateTransitGatewayRouteTableInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateTransitGatewayRouteTableInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateTransitGatewayRouteTable
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateTransitGatewayRouteTable
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateTransitGatewayRouteTable,
        params_class: Params::DisassociateTransitGatewayRouteTableOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_transit_gateway_route_table
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <note>
    #             <p>This API action is currently in <b>limited preview only</b>.
    #                 If you are interested in using this feature, contact your account manager.</p>
    #         </note>
    #         <p>Removes an association between a branch network interface with a trunk network interface.</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateTrunkInterfaceInput}.
    #
    # @option params [String] :association_id
    #   <p>The ID of the association</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure
    #                   Idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::DisassociateTrunkInterfaceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_trunk_interface(
    #     association_id: 'AssociationId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateTrunkInterfaceOutput
    #   resp.data.return #=> Boolean
    #   resp.data.client_token #=> String
    #
    def disassociate_trunk_interface(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateTrunkInterfaceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateTrunkInterfaceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateTrunkInterface
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateTrunkInterface
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateTrunkInterface,
        params_class: Params::DisassociateTrunkInterfaceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_trunk_interface
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must
    #             specify its association ID. You can get the association ID by using
    #                 <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that
    #             are associated with the CIDR block before you can disassociate it. </p>
    # 		       <p>You cannot disassociate the CIDR block with which you originally created the VPC (the
    # 			primary CIDR block).</p>
    #
    # @param [Hash] params
    #   See {Types::DisassociateVpcCidrBlockInput}.
    #
    # @option params [String] :association_id
    #   <p>The association ID for the CIDR block.</p>
    #
    # @return [Types::DisassociateVpcCidrBlockOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_vpc_cidr_block(
    #     association_id: 'AssociationId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateVpcCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.ipv6_cidr_block_association.network_border_group #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_pool #=> String
    #   resp.data.cidr_block_association #=> Types::VpcCidrBlockAssociation
    #   resp.data.cidr_block_association.association_id #=> String
    #   resp.data.cidr_block_association.cidr_block #=> String
    #   resp.data.cidr_block_association.cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc_id #=> String
    #
    def disassociate_vpc_cidr_block(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateVpcCidrBlockInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateVpcCidrBlockInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateVpcCidrBlock
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::DisassociateVpcCidrBlock
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::DisassociateVpcCidrBlock,
        params_class: Params::DisassociateVpcCidrBlockOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :disassociate_vpc_cidr_block
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables EBS encryption by default for your account in the current Region.</p>
    #          <p>After you enable encryption by default, the EBS volumes that you create are
    #     	always encrypted, either using the default KMS key or the KMS key that you specified
    #       when you created each volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #   	      <p>You can specify the default KMS key for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a>
    #       or <a>ResetEbsDefaultKmsKeyId</a>.</p>
    #          <p>Enabling encryption by default has no effect on the encryption status of your
    #       existing volumes.</p>
    #          <p>After you enable encryption by default, you can no longer launch instances
    #       using instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
    #         instance types</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableEbsEncryptionByDefaultInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::EnableEbsEncryptionByDefaultOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_ebs_encryption_by_default(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableEbsEncryptionByDefaultOutput
    #   resp.data.ebs_encryption_by_default #=> Boolean
    #
    def enable_ebs_encryption_by_default(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableEbsEncryptionByDefaultInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableEbsEncryptionByDefaultInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableEbsEncryptionByDefault
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableEbsEncryptionByDefault
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableEbsEncryptionByDefault,
        params_class: Params::EnableEbsEncryptionByDefaultOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_ebs_encryption_by_default
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
    #          <p>You get the full benefit of fast snapshot restores after they enter the <code>enabled</code> state.
    #       To get the current state of fast snapshot restores, use <a>DescribeFastSnapshotRestores</a>.
    #       To disable fast snapshot restores, use <a>DisableFastSnapshotRestores</a>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-fast-snapshot-restore.html">Amazon EBS fast snapshot
    #       restore</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableFastSnapshotRestoresInput}.
    #
    # @option params [Array<String>] :availability_zones
    #   <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    #
    # @option params [Array<String>] :source_snapshot_ids
    #   <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>. You can specify
    #         a snapshot that was shared with you from another Amazon Web Services account.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::EnableFastSnapshotRestoresOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_fast_snapshot_restores(
    #     availability_zones: [
    #       'member'
    #     ], # required
    #     source_snapshot_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableFastSnapshotRestoresOutput
    #   resp.data.successful #=> Array<EnableFastSnapshotRestoreSuccessItem>
    #   resp.data.successful[0] #=> Types::EnableFastSnapshotRestoreSuccessItem
    #   resp.data.successful[0].snapshot_id #=> String
    #   resp.data.successful[0].availability_zone #=> String
    #   resp.data.successful[0].state #=> String, one of ["enabling", "optimizing", "enabled", "disabling", "disabled"]
    #   resp.data.successful[0].state_transition_reason #=> String
    #   resp.data.successful[0].owner_id #=> String
    #   resp.data.successful[0].owner_alias #=> String
    #   resp.data.successful[0].enabling_time #=> Time
    #   resp.data.successful[0].optimizing_time #=> Time
    #   resp.data.successful[0].enabled_time #=> Time
    #   resp.data.successful[0].disabling_time #=> Time
    #   resp.data.successful[0].disabled_time #=> Time
    #   resp.data.unsuccessful #=> Array<EnableFastSnapshotRestoreErrorItem>
    #   resp.data.unsuccessful[0] #=> Types::EnableFastSnapshotRestoreErrorItem
    #   resp.data.unsuccessful[0].snapshot_id #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors #=> Array<EnableFastSnapshotRestoreStateErrorItem>
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0] #=> Types::EnableFastSnapshotRestoreStateErrorItem
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].availability_zone #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error #=> Types::EnableFastSnapshotRestoreStateError
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.code #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.message #=> String
    #
    def enable_fast_snapshot_restores(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableFastSnapshotRestoresInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableFastSnapshotRestoresInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableFastSnapshotRestores
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableFastSnapshotRestores
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableFastSnapshotRestores,
        params_class: Params::EnableFastSnapshotRestoresOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_fast_snapshot_restores
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables deprecation of the specified AMI at the specified date and time.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableImageDeprecationInput}.
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [Time] :deprecate_at
    #   <p>The date and time to deprecate the AMI, in UTC, in the following format:
    #           <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.
    #         If you specify a value for seconds, Amazon EC2 rounds the seconds to the
    #         nearest minute.</p>
    #            <p>You can’t specify a date in the past. The upper limit for <code>DeprecateAt</code> is 10
    #         years from now.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::EnableImageDeprecationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_image_deprecation(
    #     image_id: 'ImageId', # required
    #     deprecate_at: Time.now, # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableImageDeprecationOutput
    #   resp.data.return #=> Boolean
    #
    def enable_image_deprecation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableImageDeprecationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableImageDeprecationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableImageDeprecation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableImageDeprecation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableImageDeprecation,
        params_class: Params::EnableImageDeprecationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_image_deprecation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enable an Organizations member account as the IPAM admin account. You cannot select the Organizations management account as the IPAM admin account. For more information, see <a href="/vpc/latest/ipam/enable-integ-ipam.html">Enable integration with Organizations</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::EnableIpamOrganizationAdminAccountInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :delegated_admin_account_id
    #   <p>The Organizations member account ID that you want to enable as the IPAM account.</p>
    #
    # @return [Types::EnableIpamOrganizationAdminAccountOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_ipam_organization_admin_account(
    #     dry_run: false,
    #     delegated_admin_account_id: 'DelegatedAdminAccountId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableIpamOrganizationAdminAccountOutput
    #   resp.data.success #=> Boolean
    #
    def enable_ipam_organization_admin_account(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableIpamOrganizationAdminAccountInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableIpamOrganizationAdminAccountInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableIpamOrganizationAdminAccount
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableIpamOrganizationAdminAccount
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableIpamOrganizationAdminAccount,
        params_class: Params::EnableIpamOrganizationAdminAccountOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_ipam_organization_admin_account
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables access to the EC2 serial console of all instances for your account. By default,
    # 			access to the EC2 serial console is disabled for your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a>
    # 			in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableSerialConsoleAccessInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::EnableSerialConsoleAccessOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_serial_console_access(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableSerialConsoleAccessOutput
    #   resp.data.serial_console_access_enabled #=> Boolean
    #
    def enable_serial_console_access(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableSerialConsoleAccessInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableSerialConsoleAccessInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableSerialConsoleAccess
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableSerialConsoleAccess
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableSerialConsoleAccess,
        params_class: Params::EnableSerialConsoleAccessOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_serial_console_access
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables the specified attachment to propagate routes to the specified
    #          propagation route table.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableTransitGatewayRouteTablePropagationInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the propagation route table.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::EnableTransitGatewayRouteTablePropagationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_transit_gateway_route_table_propagation(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableTransitGatewayRouteTablePropagationOutput
    #   resp.data.propagation #=> Types::TransitGatewayPropagation
    #   resp.data.propagation.transit_gateway_attachment_id #=> String
    #   resp.data.propagation.resource_id #=> String
    #   resp.data.propagation.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.propagation.transit_gateway_route_table_id #=> String
    #   resp.data.propagation.state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #
    def enable_transit_gateway_route_table_propagation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableTransitGatewayRouteTablePropagationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableTransitGatewayRouteTablePropagationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableTransitGatewayRouteTablePropagation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableTransitGatewayRouteTablePropagation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableTransitGatewayRouteTablePropagation,
        params_class: Params::EnableTransitGatewayRouteTablePropagationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_transit_gateway_route_table_propagation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables a virtual private gateway (VGW) to propagate routes to the specified route
    #             table of a VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableVgwRoutePropagationInput}.
    #
    # @option params [String] :gateway_id
    #   <p>The ID of the virtual private gateway that is attached to a VPC. The virtual private
    #               gateway must be attached to the same VPC that the routing tables are associated with.
    #           </p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table. The routing table must be associated with the same VPC that
    #               the virtual private gateway is attached to. </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::EnableVgwRoutePropagationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_vgw_route_propagation(
    #     gateway_id: 'GatewayId', # required
    #     route_table_id: 'RouteTableId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableVgwRoutePropagationOutput
    #
    def enable_vgw_route_propagation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableVgwRoutePropagationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableVgwRoutePropagationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableVgwRoutePropagation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableVgwRoutePropagation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableVgwRoutePropagation,
        params_class: Params::EnableVgwRoutePropagationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_vgw_route_propagation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables I/O operations for a volume that had I/O operations disabled because the data on
    #       the volume was potentially inconsistent.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableVolumeIOInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the volume.</p>
    #
    # @return [Types::EnableVolumeIOOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_volume_io(
    #     dry_run: false,
    #     volume_id: 'VolumeId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableVolumeIOOutput
    #
    def enable_volume_io(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableVolumeIOInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableVolumeIOInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableVolumeIO
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableVolumeIO
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableVolumeIO,
        params_class: Params::EnableVolumeIOOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_volume_io
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your
    # 			ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot
    # 			enable your VPC for ClassicLink if any of your VPC route tables have existing routes for
    # 			address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local
    # 			routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address
    # 			ranges. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    # 				<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableVpcClassicLinkInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::EnableVpcClassicLinkOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_vpc_classic_link(
    #     dry_run: false,
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableVpcClassicLinkOutput
    #   resp.data.return #=> Boolean
    #
    def enable_vpc_classic_link(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableVpcClassicLinkInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableVpcClassicLinkInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableVpcClassicLink
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableVpcClassicLink
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableVpcClassicLink,
        params_class: Params::EnableVpcClassicLinkOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_vpc_classic_link
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS
    # 			hostname of a linked EC2-Classic instance resolves to its private IP address when
    # 			addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
    # 			of an instance in a VPC resolves to its private IP address when addressed from a linked
    # 			EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
    # 				<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You must specify a VPC ID in the request.</p>
    #
    # @param [Hash] params
    #   See {Types::EnableVpcClassicLinkDnsSupportInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::EnableVpcClassicLinkDnsSupportOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.enable_vpc_classic_link_dns_support(
    #     vpc_id: 'VpcId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::EnableVpcClassicLinkDnsSupportOutput
    #   resp.data.return #=> Boolean
    #
    def enable_vpc_classic_link_dns_support(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::EnableVpcClassicLinkDnsSupportInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::EnableVpcClassicLinkDnsSupportInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::EnableVpcClassicLinkDnsSupport
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::EnableVpcClassicLinkDnsSupport
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::EnableVpcClassicLinkDnsSupport,
        params_class: Params::EnableVpcClassicLinkDnsSupportOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :enable_vpc_classic_link_dns_support
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Downloads the client certificate revocation list for the specified Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::ExportClientVpnClientCertificateRevocationListInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ExportClientVpnClientCertificateRevocationListOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.export_client_vpn_client_certificate_revocation_list(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ExportClientVpnClientCertificateRevocationListOutput
    #   resp.data.certificate_revocation_list #=> String
    #   resp.data.status #=> Types::ClientCertificateRevocationListStatus
    #   resp.data.status.code #=> String, one of ["pending", "active"]
    #   resp.data.status.message #=> String
    #
    def export_client_vpn_client_certificate_revocation_list(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ExportClientVpnClientCertificateRevocationListInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ExportClientVpnClientCertificateRevocationListInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ExportClientVpnClientCertificateRevocationList
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ExportClientVpnClientCertificateRevocationList
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ExportClientVpnClientCertificateRevocationList,
        params_class: Params::ExportClientVpnClientCertificateRevocationListOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :export_client_vpn_client_certificate_revocation_list
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration
    # 			file includes the Client VPN endpoint and certificate information clients need to establish a connection
    # 			with the Client VPN endpoint.</p>
    #
    # @param [Hash] params
    #   See {Types::ExportClientVpnClientConfigurationInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ExportClientVpnClientConfigurationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.export_client_vpn_client_configuration(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ExportClientVpnClientConfigurationOutput
    #   resp.data.client_configuration #=> String
    #
    def export_client_vpn_client_configuration(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ExportClientVpnClientConfigurationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ExportClientVpnClientConfigurationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ExportClientVpnClientConfiguration
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ExportClientVpnClientConfiguration
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ExportClientVpnClientConfiguration,
        params_class: Params::ExportClientVpnClientConfigurationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :export_client_vpn_client_configuration
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Exports an Amazon Machine Image (AMI) to a VM file. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting a VM
    #     directly from an Amazon Machine Image (AMI)</a> in the
    #     <i>VM Import/Export User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ExportImageInput}.
    #
    # @option params [String] :client_token
    #   <p>Token to enable idempotency for export image requests.</p>
    #
    # @option params [String] :description
    #   <p>A description of the image being exported. The maximum length is 255 characters.</p>
    #
    # @option params [String] :disk_image_format
    #   <p>The disk image format.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :image_id
    #   <p>The ID of the image.</p>
    #
    # @option params [ExportTaskS3LocationRequest] :s3_export_location
    #   <p>Information about the destination Amazon S3 bucket. The bucket must exist and grant WRITE
    #      and READ_ACP permissions to the Amazon Web Services account vm-import-export@amazon.com.</p>
    #
    # @option params [String] :role_name
    #   <p>The name of the role that grants VM Import/Export permission to export images to your Amazon
    #      S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the export image task during creation.</p>
    #
    # @return [Types::ExportImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.export_image(
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     disk_image_format: 'VMDK', # required - accepts ["VMDK", "RAW", "VHD"]
    #     dry_run: false,
    #     image_id: 'ImageId', # required
    #     s3_export_location: {
    #       s3_bucket: 'S3Bucket', # required
    #       s3_prefix: 'S3Prefix'
    #     }, # required
    #     role_name: 'RoleName',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ExportImageOutput
    #   resp.data.description #=> String
    #   resp.data.disk_image_format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.export_image_task_id #=> String
    #   resp.data.image_id #=> String
    #   resp.data.role_name #=> String
    #   resp.data.progress #=> String
    #   resp.data.s3_export_location #=> Types::ExportTaskS3Location
    #   resp.data.s3_export_location.s3_bucket #=> String
    #   resp.data.s3_export_location.s3_prefix #=> String
    #   resp.data.status #=> String
    #   resp.data.status_message #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def export_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ExportImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ExportImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ExportImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ExportImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ExportImage,
        params_class: Params::ExportImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :export_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Exports routes from the specified transit gateway route table to the specified S3 bucket.
    #          By default, all routes are exported. Alternatively, you can filter by CIDR range.</p>
    #          <p>The routes are saved to the specified bucket in a JSON file. For more information, see
    #                 <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export Route Tables
    #                 to Amazon S3</a> in <i>Transit Gateways</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ExportTransitGatewayRoutesInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>attachment.transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.exact-match</code> - The exact match of the specified filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-route-destination-cidr-block</code> - The CIDR range.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>type</code> - The type of route (<code>propagated</code> |
    #                  <code>static</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :s3_bucket
    #   <p>The name of the S3 bucket.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ExportTransitGatewayRoutesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.export_transit_gateway_routes(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     s3_bucket: 'S3Bucket', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ExportTransitGatewayRoutesOutput
    #   resp.data.s3_location #=> String
    #
    def export_transit_gateway_routes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ExportTransitGatewayRoutesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ExportTransitGatewayRoutesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ExportTransitGatewayRoutes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ExportTransitGatewayRoutes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ExportTransitGatewayRoutes,
        params_class: Params::ExportTransitGatewayRoutesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :export_transit_gateway_routes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns the IAM roles that are associated with the specified ACM (ACM) certificate.
    # 			It also returns the name of the Amazon S3 bucket and the Amazon S3 object key where the certificate,
    # 			certificate chain, and encrypted private key bundle are stored, and the ARN of the KMS key
    # 			that's used to encrypt the private key.</p>
    #
    # @param [Hash] params
    #   See {Types::GetAssociatedEnclaveCertificateIamRolesInput}.
    #
    # @option params [String] :certificate_arn
    #   <p>The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon
    #   			S3 object information.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetAssociatedEnclaveCertificateIamRolesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_associated_enclave_certificate_iam_roles(
    #     certificate_arn: 'CertificateArn',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetAssociatedEnclaveCertificateIamRolesOutput
    #   resp.data.associated_roles #=> Array<AssociatedRole>
    #   resp.data.associated_roles[0] #=> Types::AssociatedRole
    #   resp.data.associated_roles[0].associated_role_arn #=> String
    #   resp.data.associated_roles[0].certificate_s3_bucket_name #=> String
    #   resp.data.associated_roles[0].certificate_s3_object_key #=> String
    #   resp.data.associated_roles[0].encryption_kms_key_id #=> String
    #
    def get_associated_enclave_certificate_iam_roles(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetAssociatedEnclaveCertificateIamRolesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetAssociatedEnclaveCertificateIamRolesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetAssociatedEnclaveCertificateIamRoles
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetAssociatedEnclaveCertificateIamRoles
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetAssociatedEnclaveCertificateIamRoles,
        params_class: Params::GetAssociatedEnclaveCertificateIamRolesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_associated_enclave_certificate_iam_roles
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.</p>
    #
    # @param [Hash] params
    #   See {Types::GetAssociatedIpv6PoolCidrsInput}.
    #
    # @option params [String] :pool_id
    #   <p>The ID of the IPv6 address pool.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetAssociatedIpv6PoolCidrsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_associated_ipv6_pool_cidrs(
    #     pool_id: 'PoolId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetAssociatedIpv6PoolCidrsOutput
    #   resp.data.ipv6_cidr_associations #=> Array<Ipv6CidrAssociation>
    #   resp.data.ipv6_cidr_associations[0] #=> Types::Ipv6CidrAssociation
    #   resp.data.ipv6_cidr_associations[0].ipv6_cidr #=> String
    #   resp.data.ipv6_cidr_associations[0].associated_resource #=> String
    #   resp.data.next_token #=> String
    #
    def get_associated_ipv6_pool_cidrs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetAssociatedIpv6PoolCidrsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetAssociatedIpv6PoolCidrsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetAssociatedIpv6PoolCidrs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetAssociatedIpv6PoolCidrs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetAssociatedIpv6PoolCidrs,
        params_class: Params::GetAssociatedIpv6PoolCidrsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_associated_ipv6_pool_cidrs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner
    # 			and each Amazon Web Services account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only
    # 			the Capacity Reservation owner's usage.</p>
    #
    # @param [Hash] params
    #   See {Types::GetCapacityReservationUsageInput}.
    #
    # @option params [String] :capacity_reservation_id
    #   <p>The ID of the Capacity Reservation.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #   		       <p>Valid range: Minimum value of 1. Maximum value of 1000.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetCapacityReservationUsageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_capacity_reservation_usage(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetCapacityReservationUsageOutput
    #   resp.data.next_token #=> String
    #   resp.data.capacity_reservation_id #=> String
    #   resp.data.instance_type #=> String
    #   resp.data.total_instance_count #=> Integer
    #   resp.data.available_instance_count #=> Integer
    #   resp.data.state #=> String, one of ["active", "expired", "cancelled", "pending", "failed"]
    #   resp.data.instance_usages #=> Array<InstanceUsage>
    #   resp.data.instance_usages[0] #=> Types::InstanceUsage
    #   resp.data.instance_usages[0].account_id #=> String
    #   resp.data.instance_usages[0].used_instance_count #=> Integer
    #
    def get_capacity_reservation_usage(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetCapacityReservationUsageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetCapacityReservationUsageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetCapacityReservationUsage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetCapacityReservationUsage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetCapacityReservationUsage,
        params_class: Params::GetCapacityReservationUsageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_capacity_reservation_usage
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the allocations from the specified customer-owned address pool.</p>
    #
    # @param [Hash] params
    #   See {Types::GetCoipPoolUsageInput}.
    #
    # @option params [String] :pool_id
    #   <p>The ID of the address pool.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>The filters. The following are the possible values:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>coip-address-usage.allocation-id</code>
    #                  </p>
    #               </li>
    #            </ul>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>coip-address-usage.aws-account-id</code>
    #                  </p>
    #               </li>
    #            </ul>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>coip-address-usage.aws-service</code>
    #                  </p>
    #               </li>
    #            </ul>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>coip-address-usage.co-ip</code>
    #                  </p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetCoipPoolUsageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_coip_pool_usage(
    #     pool_id: 'PoolId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetCoipPoolUsageOutput
    #   resp.data.coip_pool_id #=> String
    #   resp.data.coip_address_usages #=> Array<CoipAddressUsage>
    #   resp.data.coip_address_usages[0] #=> Types::CoipAddressUsage
    #   resp.data.coip_address_usages[0].allocation_id #=> String
    #   resp.data.coip_address_usages[0].aws_account_id #=> String
    #   resp.data.coip_address_usages[0].aws_service #=> String
    #   resp.data.coip_address_usages[0].co_ip #=> String
    #   resp.data.local_gateway_route_table_id #=> String
    #
    def get_coip_pool_usage(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetCoipPoolUsageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetCoipPoolUsageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetCoipPoolUsage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetCoipPoolUsage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetCoipPoolUsage,
        params_class: Params::GetCoipPoolUsageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_coip_pool_usage
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets the console output for the specified instance. For Linux instances, the instance
    #             console output displays the exact console output that would normally be displayed on a
    #             physical monitor attached to a computer. For Windows instances, the instance console
    #             output includes the last three system event log errors.</p>
    #         <p>By default, the console output returns buffered information that was posted shortly
    #             after an instance transition state (start, stop, reboot, or terminate). This information
    #             is available for at least one hour after the most recent post. Only the most recent 64
    #             KB of console output is available.</p>
    #         <p>You can optionally retrieve the latest serial console output at any time during the
    #             instance lifecycle. This option is supported on instance types that use the Nitro
    #             hypervisor.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance
    #                 console output</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetConsoleOutputInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :latest
    #   <p>When enabled, retrieves the latest console output for the instance.</p>
    #           <p>Default: disabled (<code>false</code>)</p>
    #
    # @return [Types::GetConsoleOutputOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_console_output(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false,
    #     latest: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetConsoleOutputOutput
    #   resp.data.instance_id #=> String
    #   resp.data.output #=> String
    #   resp.data.timestamp #=> Time
    #
    def get_console_output(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetConsoleOutputInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetConsoleOutputInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetConsoleOutput
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetConsoleOutput
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetConsoleOutput,
        params_class: Params::GetConsoleOutputOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_console_output
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Retrieve a JPG-format screenshot of a running instance to help with
    #             troubleshooting.</p>
    #         <p>The returned content is Base64-encoded.</p>
    #
    # @param [Hash] params
    #   See {Types::GetConsoleScreenshotInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [Boolean] :wake_up
    #   <p>When set to <code>true</code>, acts as keystroke input and wakes up an instance that's
    #               in standby or "sleep" mode.</p>
    #
    # @return [Types::GetConsoleScreenshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_console_screenshot(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     wake_up: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetConsoleScreenshotOutput
    #   resp.data.image_data #=> String
    #   resp.data.instance_id #=> String
    #
    def get_console_screenshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetConsoleScreenshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetConsoleScreenshotInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetConsoleScreenshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetConsoleScreenshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetConsoleScreenshot,
        params_class: Params::GetConsoleScreenshotOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_console_screenshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the default credit option for CPU usage of a burstable performance instance family.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #             performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetDefaultCreditSpecificationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_family
    #   <p>The instance family.</p>
    #
    # @return [Types::GetDefaultCreditSpecificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_default_credit_specification(
    #     dry_run: false,
    #     instance_family: 't2' # required - accepts ["t2", "t3", "t3a", "t4g"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetDefaultCreditSpecificationOutput
    #   resp.data.instance_family_credit_specification #=> Types::InstanceFamilyCreditSpecification
    #   resp.data.instance_family_credit_specification.instance_family #=> String, one of ["t2", "t3", "t3a", "t4g"]
    #   resp.data.instance_family_credit_specification.cpu_credits #=> String
    #
    def get_default_credit_specification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetDefaultCreditSpecificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetDefaultCreditSpecificationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetDefaultCreditSpecification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetDefaultCreditSpecification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetDefaultCreditSpecification,
        params_class: Params::GetDefaultCreditSpecificationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_default_credit_specification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes the default KMS key for EBS encryption by default for your account in this Region.
    #   		You can change the default KMS key for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or
    #       <a>ResetEbsDefaultKmsKeyId</a>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetEbsDefaultKmsKeyIdInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetEbsDefaultKmsKeyIdOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_ebs_default_kms_key_id(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetEbsDefaultKmsKeyIdOutput
    #   resp.data.kms_key_id #=> String
    #
    def get_ebs_default_kms_key_id(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetEbsDefaultKmsKeyIdInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetEbsDefaultKmsKeyIdInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetEbsDefaultKmsKeyId
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetEbsDefaultKmsKeyId
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetEbsDefaultKmsKeyId,
        params_class: Params::GetEbsDefaultKmsKeyIdOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_ebs_default_kms_key_id
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Describes whether EBS encryption by default is enabled for your account in the current
    #       Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetEbsEncryptionByDefaultInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetEbsEncryptionByDefaultOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_ebs_encryption_by_default(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetEbsEncryptionByDefaultOutput
    #   resp.data.ebs_encryption_by_default #=> Boolean
    #
    def get_ebs_encryption_by_default(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetEbsEncryptionByDefaultInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetEbsEncryptionByDefaultInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetEbsEncryptionByDefault
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetEbsEncryptionByDefault
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetEbsEncryptionByDefault,
        params_class: Params::GetEbsEncryptionByDefaultOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_ebs_encryption_by_default
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs
    #             with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data.
    #             Based on the information that you provide, we configure resources in the template to do the following:</p>
    #         <ul>
    #             <li>
    #                 <p>Create a table in Athena that maps fields to a custom log format</p>
    #             </li>
    #             <li>
    #                 <p>Create a Lambda function that updates the table with new partitions on a daily, weekly, or
    #                     monthly basis</p>
    #             </li>
    #             <li>
    #                 <p>Create a table partitioned between two timestamps in the past</p>
    #             </li>
    #             <li>
    #                 <p>Create a set of named queries in Athena that you can use to get started quickly</p>
    #             </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::GetFlowLogsIntegrationTemplateInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :flow_log_id
    #   <p>The ID of the flow log.</p>
    #
    # @option params [String] :config_delivery_s3_destination_arn
    #   <p>To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.</p>
    #
    # @option params [IntegrateServices] :integrate_services
    #   <p>Information about the service integration.</p>
    #
    # @return [Types::GetFlowLogsIntegrationTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_flow_logs_integration_template(
    #     dry_run: false,
    #     flow_log_id: 'FlowLogId', # required
    #     config_delivery_s3_destination_arn: 'ConfigDeliveryS3DestinationArn', # required
    #     integrate_services: {
    #       athena_integrations: [
    #         {
    #           integration_result_s3_destination_arn: 'IntegrationResultS3DestinationArn', # required
    #           partition_load_frequency: 'none', # required - accepts ["none", "daily", "weekly", "monthly"]
    #           partition_start_date: Time.now,
    #           partition_end_date: Time.now
    #         }
    #       ]
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetFlowLogsIntegrationTemplateOutput
    #   resp.data.result #=> String
    #
    def get_flow_logs_integration_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetFlowLogsIntegrationTemplateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetFlowLogsIntegrationTemplateInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetFlowLogsIntegrationTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetFlowLogsIntegrationTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetFlowLogsIntegrationTemplate,
        params_class: Params::GetFlowLogsIntegrationTemplateOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_flow_logs_integration_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the resource groups to which a Capacity Reservation has been added.</p>
    #
    # @param [Hash] params
    #   See {Types::GetGroupsForCapacityReservationInput}.
    #
    # @option params [String] :capacity_reservation_id
    #   <p>The ID of the Capacity Reservation.</p>
    #
    # @option params [String] :next_token
    #   <p>The token to use to retrieve the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetGroupsForCapacityReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_groups_for_capacity_reservation(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetGroupsForCapacityReservationOutput
    #   resp.data.next_token #=> String
    #   resp.data.capacity_reservation_groups #=> Array<CapacityReservationGroup>
    #   resp.data.capacity_reservation_groups[0] #=> Types::CapacityReservationGroup
    #   resp.data.capacity_reservation_groups[0].group_arn #=> String
    #   resp.data.capacity_reservation_groups[0].owner_id #=> String
    #
    def get_groups_for_capacity_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetGroupsForCapacityReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetGroupsForCapacityReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetGroupsForCapacityReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetGroupsForCapacityReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetGroupsForCapacityReservation,
        params_class: Params::GetGroupsForCapacityReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_groups_for_capacity_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Preview a reservation purchase with configurations that match those of your
    #             Dedicated Host. You must have active Dedicated Hosts in your account before you purchase
    #             a reservation.</p>
    #         <p>This is a preview of the <a>PurchaseHostReservation</a> action and does
    #             not result in the offering being purchased.</p>
    #
    # @param [Hash] params
    #   See {Types::GetHostReservationPurchasePreviewInput}.
    #
    # @option params [Array<String>] :host_id_set
    #   <p>The IDs of the Dedicated Hosts with which the reservation is associated.</p>
    #
    # @option params [String] :offering_id
    #   <p>The offering ID of the reservation.</p>
    #
    # @return [Types::GetHostReservationPurchasePreviewOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_host_reservation_purchase_preview(
    #     host_id_set: [
    #       'member'
    #     ], # required
    #     offering_id: 'OfferingId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetHostReservationPurchasePreviewOutput
    #   resp.data.currency_code #=> String, one of ["USD"]
    #   resp.data.purchase #=> Array<Purchase>
    #   resp.data.purchase[0] #=> Types::Purchase
    #   resp.data.purchase[0].currency_code #=> String, one of ["USD"]
    #   resp.data.purchase[0].duration #=> Integer
    #   resp.data.purchase[0].host_id_set #=> Array<String>
    #   resp.data.purchase[0].host_id_set[0] #=> String
    #   resp.data.purchase[0].host_reservation_id #=> String
    #   resp.data.purchase[0].hourly_price #=> String
    #   resp.data.purchase[0].instance_family #=> String
    #   resp.data.purchase[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.purchase[0].upfront_price #=> String
    #   resp.data.total_hourly_price #=> String
    #   resp.data.total_upfront_price #=> String
    #
    def get_host_reservation_purchase_preview(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetHostReservationPurchasePreviewInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetHostReservationPurchasePreviewInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetHostReservationPurchasePreview
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetHostReservationPurchasePreview
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetHostReservationPurchasePreview,
        params_class: Params::GetHostReservationPurchasePreviewOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_host_reservation_purchase_preview
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a list of instance types with the specified instance attributes. You can
    #          use the response to preview the instance types without launching instances. Note
    #          that the response does not consider capacity.</p>
    #          <p>When you specify multiple parameters, you get instance types that satisfy all of the
    #          specified parameters. If you specify multiple values for a parameter, you get instance
    #          types that satisfy any of the specified values.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html#spotfleet-get-instance-types-from-instance-requirements">Preview instance types with specified attributes</a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Attribute-based instance type selection for EC2 Fleet</a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html">Attribute-based instance type selection for Spot Fleet</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
    #             placement score</a> in the <i>Amazon EC2 User Guide</i>, and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating an
    #             Auto Scaling group using attribute-based instance type selection</a> in the
    #             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetInstanceTypesFromInstanceRequirementsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :architecture_types
    #   <p>The processor architecture type.</p>
    #
    # @option params [Array<String>] :virtualization_types
    #   <p>The virtualization type.</p>
    #
    # @option params [InstanceRequirementsRequest] :instance_requirements
    #   <p>The attributes required for the instance types.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1 and 
    #            1000. The default value is 1000. To retrieve the remaining results, make another call with 
    #            the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @return [Types::GetInstanceTypesFromInstanceRequirementsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_instance_types_from_instance_requirements(
    #     dry_run: false,
    #     architecture_types: [
    #       'i386' # accepts ["i386", "x86_64", "arm64", "x86_64_mac"]
    #     ], # required
    #     virtualization_types: [
    #       'hvm' # accepts ["hvm", "paravirtual"]
    #     ], # required
    #     instance_requirements: {
    #       v_cpu_count: {
    #         min: 1, # required
    #         max: 1
    #       }, # required
    #       memory_mi_b: {
    #         min: 1, # required
    #         max: 1
    #       }, # required
    #       cpu_manufacturers: [
    #         'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #       ],
    #       memory_gi_b_per_v_cpu: {
    #         min: 1.0,
    #         max: 1.0
    #       },
    #       excluded_instance_types: [
    #         'member'
    #       ],
    #       instance_generations: [
    #         'current' # accepts ["current", "previous"]
    #       ],
    #       spot_max_price_percentage_over_lowest_price: 1,
    #       on_demand_max_price_percentage_over_lowest_price: 1,
    #       bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #       burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #       require_hibernate_support: false,
    #       network_interface_count: {
    #         min: 1,
    #         max: 1
    #       },
    #       local_storage: 'included', # accepts ["included", "required", "excluded"]
    #       local_storage_types: [
    #         'hdd' # accepts ["hdd", "ssd"]
    #       ],
    #       total_local_storage_gb: {
    #         min: 1.0,
    #         max: 1.0
    #       },
    #       baseline_ebs_bandwidth_mbps: {
    #         min: 1,
    #         max: 1
    #       },
    #       accelerator_types: [
    #         'gpu' # accepts ["gpu", "fpga", "inference"]
    #       ],
    #       accelerator_count: {
    #         min: 1,
    #         max: 1
    #       },
    #       accelerator_manufacturers: [
    #         'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #       ],
    #       accelerator_names: [
    #         'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #       ],
    #       accelerator_total_memory_mi_b: {
    #         min: 1,
    #         max: 1
    #       }
    #     }, # required
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetInstanceTypesFromInstanceRequirementsOutput
    #   resp.data.instance_types #=> Array<InstanceTypeInfoFromInstanceRequirements>
    #   resp.data.instance_types[0] #=> Types::InstanceTypeInfoFromInstanceRequirements
    #   resp.data.instance_types[0].instance_type #=> String
    #   resp.data.next_token #=> String
    #
    def get_instance_types_from_instance_requirements(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetInstanceTypesFromInstanceRequirementsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetInstanceTypesFromInstanceRequirementsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetInstanceTypesFromInstanceRequirements
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetInstanceTypesFromInstanceRequirements
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetInstanceTypesFromInstanceRequirements,
        params_class: Params::GetInstanceTypesFromInstanceRequirementsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_instance_types_from_instance_requirements
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Retrieve historical information about a CIDR within an IPAM scope. For more information, see <a href="/vpc/latest/ipam/view-history-cidr-ipam.html">View the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetIpamAddressHistoryInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :cidr
    #   <p>The CIDR you want the history of. The CIDR can be an IPv4 or IPv6 IP address range.
    #            If you enter a /16 IPv4 CIDR, you will get records that match it exactly. You will not get records for any subnets within the /16 CIDR.</p>
    #
    # @option params [String] :ipam_scope_id
    #   <p>The ID of the IPAM scope that the CIDR is in.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC you want your history records filtered by.</p>
    #
    # @option params [Time] :start_time
    #   <p>The start of the time period for which you are looking for history. If you omit this option, it will default to the value of EndTime.</p>
    #
    # @option params [Time] :end_time
    #   <p>The end of the time period for which you are looking for history. If you omit this option, it will default to the current time.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of historical results you would like returned per page. Defaults to 100.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::GetIpamAddressHistoryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_ipam_address_history(
    #     dry_run: false,
    #     cidr: 'Cidr', # required
    #     ipam_scope_id: 'IpamScopeId', # required
    #     vpc_id: 'VpcId',
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetIpamAddressHistoryOutput
    #   resp.data.history_records #=> Array<IpamAddressHistoryRecord>
    #   resp.data.history_records[0] #=> Types::IpamAddressHistoryRecord
    #   resp.data.history_records[0].resource_owner_id #=> String
    #   resp.data.history_records[0].resource_region #=> String
    #   resp.data.history_records[0].resource_type #=> String, one of ["eip", "vpc", "subnet", "network-interface", "instance"]
    #   resp.data.history_records[0].resource_id #=> String
    #   resp.data.history_records[0].resource_cidr #=> String
    #   resp.data.history_records[0].resource_name #=> String
    #   resp.data.history_records[0].resource_compliance_status #=> String, one of ["compliant", "noncompliant", "unmanaged", "ignored"]
    #   resp.data.history_records[0].resource_overlap_status #=> String, one of ["overlapping", "nonoverlapping", "ignored"]
    #   resp.data.history_records[0].vpc_id #=> String
    #   resp.data.history_records[0].sampled_start_time #=> Time
    #   resp.data.history_records[0].sampled_end_time #=> Time
    #   resp.data.next_token #=> String
    #
    def get_ipam_address_history(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetIpamAddressHistoryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetIpamAddressHistoryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetIpamAddressHistory
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetIpamAddressHistory
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetIpamAddressHistory,
        params_class: Params::GetIpamAddressHistoryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_ipam_address_history
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Get a list of all the CIDR allocations in an IPAM pool.</p>
    #
    # @param [Hash] params
    #   See {Types::GetIpamPoolAllocationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool you want to see the allocations for.</p>
    #
    # @option params [String] :ipam_pool_allocation_id
    #   <p>The ID of the allocation.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters for the request. For more information about filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering CLI output</a>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results you would like returned per page.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::GetIpamPoolAllocationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_ipam_pool_allocations(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     ipam_pool_allocation_id: 'IpamPoolAllocationId',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetIpamPoolAllocationsOutput
    #   resp.data.ipam_pool_allocations #=> Array<IpamPoolAllocation>
    #   resp.data.ipam_pool_allocations[0] #=> Types::IpamPoolAllocation
    #   resp.data.ipam_pool_allocations[0].cidr #=> String
    #   resp.data.ipam_pool_allocations[0].ipam_pool_allocation_id #=> String
    #   resp.data.ipam_pool_allocations[0].description #=> String
    #   resp.data.ipam_pool_allocations[0].resource_id #=> String
    #   resp.data.ipam_pool_allocations[0].resource_type #=> String, one of ["ipam-pool", "vpc", "ec2-public-ipv4-pool", "custom"]
    #   resp.data.ipam_pool_allocations[0].resource_region #=> String
    #   resp.data.ipam_pool_allocations[0].resource_owner #=> String
    #   resp.data.next_token #=> String
    #
    def get_ipam_pool_allocations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetIpamPoolAllocationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetIpamPoolAllocationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetIpamPoolAllocations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetIpamPoolAllocations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetIpamPoolAllocations,
        params_class: Params::GetIpamPoolAllocationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_ipam_pool_allocations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Get the CIDRs provisioned to an IPAM pool.</p>
    #
    # @param [Hash] params
    #   See {Types::GetIpamPoolCidrsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool you want the CIDR for.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters for the request. For more information about filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering CLI output</a>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in the request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::GetIpamPoolCidrsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_ipam_pool_cidrs(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetIpamPoolCidrsOutput
    #   resp.data.ipam_pool_cidrs #=> Array<IpamPoolCidr>
    #   resp.data.ipam_pool_cidrs[0] #=> Types::IpamPoolCidr
    #   resp.data.ipam_pool_cidrs[0].cidr #=> String
    #   resp.data.ipam_pool_cidrs[0].state #=> String, one of ["pending-provision", "provisioned", "failed-provision", "pending-deprovision", "deprovisioned", "failed-deprovision", "pending-import", "failed-import"]
    #   resp.data.ipam_pool_cidrs[0].failure_reason #=> Types::IpamPoolCidrFailureReason
    #   resp.data.ipam_pool_cidrs[0].failure_reason.code #=> String, one of ["cidr-not-available"]
    #   resp.data.ipam_pool_cidrs[0].failure_reason.message #=> String
    #   resp.data.next_token #=> String
    #
    def get_ipam_pool_cidrs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetIpamPoolCidrsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetIpamPoolCidrsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetIpamPoolCidrs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetIpamPoolCidrs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetIpamPoolCidrs,
        params_class: Params::GetIpamPoolCidrsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_ipam_pool_cidrs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Get information about the resources in a scope.</p>
    #
    # @param [Hash] params
    #   See {Types::GetIpamResourceCidrsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters for the request. For more information about filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Filtering CLI output</a>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in the request.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [String] :ipam_scope_id
    #   <p>The ID of the scope that the resource is in.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool that the resource is in.</p>
    #
    # @option params [String] :resource_id
    #   <p>The ID of the resource.</p>
    #
    # @option params [String] :resource_type
    #   <p>The resource type.</p>
    #
    # @option params [RequestIpamResourceTag] :resource_tag
    #   <p>A tag on an IPAM resource.</p>
    #
    # @option params [String] :resource_owner
    #   <p>The ID of the Amazon Web Services account that owns the resource.</p>
    #
    # @return [Types::GetIpamResourceCidrsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_ipam_resource_cidrs(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     ipam_scope_id: 'IpamScopeId', # required
    #     ipam_pool_id: 'IpamPoolId',
    #     resource_id: 'ResourceId',
    #     resource_type: 'vpc', # accepts ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool"]
    #     resource_tag: {
    #       key: 'Key',
    #       value: 'Value'
    #     },
    #     resource_owner: 'ResourceOwner'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetIpamResourceCidrsOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipam_resource_cidrs #=> Array<IpamResourceCidr>
    #   resp.data.ipam_resource_cidrs[0] #=> Types::IpamResourceCidr
    #   resp.data.ipam_resource_cidrs[0].ipam_id #=> String
    #   resp.data.ipam_resource_cidrs[0].ipam_scope_id #=> String
    #   resp.data.ipam_resource_cidrs[0].ipam_pool_id #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_region #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_owner_id #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_id #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_name #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_cidr #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_type #=> String, one of ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool"]
    #   resp.data.ipam_resource_cidrs[0].resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_resource_cidrs[0].resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_resource_cidrs[0].resource_tags[0].key #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_tags[0].value #=> String
    #   resp.data.ipam_resource_cidrs[0].ip_usage #=> Float
    #   resp.data.ipam_resource_cidrs[0].compliance_status #=> String, one of ["compliant", "noncompliant", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidrs[0].management_state #=> String, one of ["managed", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidrs[0].overlap_status #=> String, one of ["overlapping", "nonoverlapping", "ignored"]
    #   resp.data.ipam_resource_cidrs[0].vpc_id #=> String
    #
    def get_ipam_resource_cidrs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetIpamResourceCidrsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetIpamResourceCidrsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetIpamResourceCidrs
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetIpamResourceCidrs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetIpamResourceCidrs,
        params_class: Params::GetIpamResourceCidrsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_ipam_resource_cidrs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Retrieves the configuration data of the specified instance. You can use this data
    #             to create a launch template. </p>
    #         <p>This action calls on other describe actions to get instance information. Depending on your instance configuration, you may need to allow the following
    #             actions in your IAM policy: DescribeSpotInstanceRequests, DescribeInstanceCreditSpecifications, DescribeVolumes, DescribeInstanceAttribute, and DescribeElasticGpus. Or, you can allow
    #         <code>describe*</code> depending on your instance requirements.</p>
    #
    # @param [Hash] params
    #   See {Types::GetLaunchTemplateDataInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @return [Types::GetLaunchTemplateDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_launch_template_data(
    #     dry_run: false,
    #     instance_id: 'InstanceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetLaunchTemplateDataOutput
    #   resp.data.launch_template_data #=> Types::ResponseLaunchTemplateData
    #   resp.data.launch_template_data.kernel_id #=> String
    #   resp.data.launch_template_data.ebs_optimized #=> Boolean
    #   resp.data.launch_template_data.iam_instance_profile #=> Types::LaunchTemplateIamInstanceProfileSpecification
    #   resp.data.launch_template_data.iam_instance_profile.arn #=> String
    #   resp.data.launch_template_data.iam_instance_profile.name #=> String
    #   resp.data.launch_template_data.block_device_mappings #=> Array<LaunchTemplateBlockDeviceMapping>
    #   resp.data.launch_template_data.block_device_mappings[0] #=> Types::LaunchTemplateBlockDeviceMapping
    #   resp.data.launch_template_data.block_device_mappings[0].device_name #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].ebs #=> Types::LaunchTemplateEbsBlockDevice
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.launch_template_data.block_device_mappings[0].no_device #=> String
    #   resp.data.launch_template_data.network_interfaces #=> Array<LaunchTemplateInstanceNetworkInterfaceSpecification>
    #   resp.data.launch_template_data.network_interfaces[0] #=> Types::LaunchTemplateInstanceNetworkInterfaceSpecification
    #   resp.data.launch_template_data.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].description #=> String
    #   resp.data.launch_template_data.network_interfaces[0].device_index #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].groups #=> Array<String>
    #   resp.data.launch_template_data.network_interfaces[0].groups[0] #=> String
    #   resp.data.launch_template_data.network_interfaces[0].interface_type #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.launch_template_data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.launch_template_data.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].subnet_id #=> String
    #   resp.data.launch_template_data.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationResponse>
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationResponse
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationResponse>
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationResponse
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.launch_template_data.image_id #=> String
    #   resp.data.launch_template_data.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.launch_template_data.key_name #=> String
    #   resp.data.launch_template_data.monitoring #=> Types::LaunchTemplatesMonitoring
    #   resp.data.launch_template_data.monitoring.enabled #=> Boolean
    #   resp.data.launch_template_data.placement #=> Types::LaunchTemplatePlacement
    #   resp.data.launch_template_data.placement.availability_zone #=> String
    #   resp.data.launch_template_data.placement.affinity #=> String
    #   resp.data.launch_template_data.placement.group_name #=> String
    #   resp.data.launch_template_data.placement.host_id #=> String
    #   resp.data.launch_template_data.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.launch_template_data.placement.spread_domain #=> String
    #   resp.data.launch_template_data.placement.host_resource_group_arn #=> String
    #   resp.data.launch_template_data.placement.partition_number #=> Integer
    #   resp.data.launch_template_data.ram_disk_id #=> String
    #   resp.data.launch_template_data.disable_api_termination #=> Boolean
    #   resp.data.launch_template_data.instance_initiated_shutdown_behavior #=> String, one of ["stop", "terminate"]
    #   resp.data.launch_template_data.user_data #=> String
    #   resp.data.launch_template_data.tag_specifications #=> Array<LaunchTemplateTagSpecification>
    #   resp.data.launch_template_data.tag_specifications[0] #=> Types::LaunchTemplateTagSpecification
    #   resp.data.launch_template_data.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #   resp.data.launch_template_data.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.launch_template_data.tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.launch_template_data.tag_specifications[0].tags[0].key #=> String
    #   resp.data.launch_template_data.tag_specifications[0].tags[0].value #=> String
    #   resp.data.launch_template_data.elastic_gpu_specifications #=> Array<ElasticGpuSpecificationResponse>
    #   resp.data.launch_template_data.elastic_gpu_specifications[0] #=> Types::ElasticGpuSpecificationResponse
    #   resp.data.launch_template_data.elastic_gpu_specifications[0].type #=> String
    #   resp.data.launch_template_data.elastic_inference_accelerators #=> Array<LaunchTemplateElasticInferenceAcceleratorResponse>
    #   resp.data.launch_template_data.elastic_inference_accelerators[0] #=> Types::LaunchTemplateElasticInferenceAcceleratorResponse
    #   resp.data.launch_template_data.elastic_inference_accelerators[0].type #=> String
    #   resp.data.launch_template_data.elastic_inference_accelerators[0].count #=> Integer
    #   resp.data.launch_template_data.security_group_ids #=> Array<String>
    #   resp.data.launch_template_data.security_group_ids[0] #=> String
    #   resp.data.launch_template_data.security_groups #=> Array<String>
    #   resp.data.launch_template_data.instance_market_options #=> Types::LaunchTemplateInstanceMarketOptions
    #   resp.data.launch_template_data.instance_market_options.market_type #=> String, one of ["spot"]
    #   resp.data.launch_template_data.instance_market_options.spot_options #=> Types::LaunchTemplateSpotMarketOptions
    #   resp.data.launch_template_data.instance_market_options.spot_options.max_price #=> String
    #   resp.data.launch_template_data.instance_market_options.spot_options.spot_instance_type #=> String, one of ["one-time", "persistent"]
    #   resp.data.launch_template_data.instance_market_options.spot_options.block_duration_minutes #=> Integer
    #   resp.data.launch_template_data.instance_market_options.spot_options.valid_until #=> Time
    #   resp.data.launch_template_data.instance_market_options.spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.launch_template_data.credit_specification #=> Types::CreditSpecification
    #   resp.data.launch_template_data.credit_specification.cpu_credits #=> String
    #   resp.data.launch_template_data.cpu_options #=> Types::LaunchTemplateCpuOptions
    #   resp.data.launch_template_data.cpu_options.core_count #=> Integer
    #   resp.data.launch_template_data.cpu_options.threads_per_core #=> Integer
    #   resp.data.launch_template_data.capacity_reservation_specification #=> Types::LaunchTemplateCapacityReservationSpecificationResponse
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.launch_template_data.license_specifications #=> Array<LaunchTemplateLicenseConfiguration>
    #   resp.data.launch_template_data.license_specifications[0] #=> Types::LaunchTemplateLicenseConfiguration
    #   resp.data.launch_template_data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.launch_template_data.hibernation_options #=> Types::LaunchTemplateHibernationOptions
    #   resp.data.launch_template_data.hibernation_options.configured #=> Boolean
    #   resp.data.launch_template_data.metadata_options #=> Types::LaunchTemplateInstanceMetadataOptions
    #   resp.data.launch_template_data.metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.launch_template_data.metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.launch_template_data.metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.launch_template_data.metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_data.metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_data.metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_data.enclave_options #=> Types::LaunchTemplateEnclaveOptions
    #   resp.data.launch_template_data.enclave_options.enabled #=> Boolean
    #   resp.data.launch_template_data.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.launch_template_data.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.launch_template_data.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.launch_template_data.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.launch_template_data.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.launch_template_data.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.launch_template_data.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_data.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_data.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_data.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_data.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.launch_template_data.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.launch_template_data.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_data.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.launch_template_data.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.launch_template_data.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.launch_template_data.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.launch_template_data.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.launch_template_data.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #   resp.data.launch_template_data.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #   resp.data.launch_template_data.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.launch_template_data.private_dns_name_options #=> Types::LaunchTemplatePrivateDnsNameOptions
    #   resp.data.launch_template_data.private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.launch_template_data.private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.launch_template_data.private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #
    def get_launch_template_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetLaunchTemplateDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetLaunchTemplateDataInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetLaunchTemplateData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetLaunchTemplateData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetLaunchTemplateData,
        params_class: Params::GetLaunchTemplateDataOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_launch_template_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the resources that are associated with the specified managed prefix list.</p>
    #
    # @param [Hash] params
    #   See {Types::GetManagedPrefixListAssociationsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::GetManagedPrefixListAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_managed_prefix_list_associations(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetManagedPrefixListAssociationsOutput
    #   resp.data.prefix_list_associations #=> Array<PrefixListAssociation>
    #   resp.data.prefix_list_associations[0] #=> Types::PrefixListAssociation
    #   resp.data.prefix_list_associations[0].resource_id #=> String
    #   resp.data.prefix_list_associations[0].resource_owner #=> String
    #   resp.data.next_token #=> String
    #
    def get_managed_prefix_list_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetManagedPrefixListAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetManagedPrefixListAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetManagedPrefixListAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetManagedPrefixListAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetManagedPrefixListAssociations,
        params_class: Params::GetManagedPrefixListAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_managed_prefix_list_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the entries for a specified managed prefix list.</p>
    #
    # @param [Hash] params
    #   See {Types::GetManagedPrefixListEntriesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @option params [Integer] :target_version
    #   <p>The version of the prefix list for which to return the entries. The default is the current version.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @return [Types::GetManagedPrefixListEntriesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_managed_prefix_list_entries(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     target_version: 1,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetManagedPrefixListEntriesOutput
    #   resp.data.entries #=> Array<PrefixListEntry>
    #   resp.data.entries[0] #=> Types::PrefixListEntry
    #   resp.data.entries[0].cidr #=> String
    #   resp.data.entries[0].description #=> String
    #   resp.data.next_token #=> String
    #
    def get_managed_prefix_list_entries(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetManagedPrefixListEntriesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetManagedPrefixListEntriesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetManagedPrefixListEntries
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetManagedPrefixListEntries
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetManagedPrefixListEntries,
        params_class: Params::GetManagedPrefixListEntriesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_managed_prefix_list_entries
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets the findings for the specified Network Access Scope analysis.</p>
    #
    # @param [Hash] params
    #   See {Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput}.
    #
    # @option params [String] :network_insights_access_scope_analysis_id
    #   <p>The ID of the Network Access Scope analysis.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #      To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_network_insights_access_scope_analysis_findings(
    #     network_insights_access_scope_analysis_id: 'NetworkInsightsAccessScopeAnalysisId', # required
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput
    #   resp.data.network_insights_access_scope_analysis_id #=> String
    #   resp.data.analysis_status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.analysis_findings #=> Array<AccessScopeAnalysisFinding>
    #   resp.data.analysis_findings[0] #=> Types::AccessScopeAnalysisFinding
    #   resp.data.analysis_findings[0].network_insights_access_scope_analysis_id #=> String
    #   resp.data.analysis_findings[0].network_insights_access_scope_id #=> String
    #   resp.data.analysis_findings[0].finding_id #=> String
    #   resp.data.analysis_findings[0].finding_components #=> Array<PathComponent>
    #   resp.data.analysis_findings[0].finding_components[0] #=> Types::PathComponent
    #   resp.data.analysis_findings[0].finding_components[0].sequence_number #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.egress #=> Boolean
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.port_range #=> Types::PortRange
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.port_range.from #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.port_range.to #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.rule_action #=> String
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.rule_number #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].attached_to.id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].attached_to.arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].attached_to.name #=> String
    #   resp.data.analysis_findings[0].finding_components[0].component #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.destination_addresses #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.destination_addresses[0] #=> String
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.destination_port_ranges #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.source_addresses #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.source_port_ranges #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].inbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.destination_cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.destination_prefix_list_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.egress_only_internet_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.instance_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.nat_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.network_interface_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.origin #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.transit_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.vpc_peering_connection_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.direction #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.security_group_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.port_range #=> Types::PortRange
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.prefix_list_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].subnet #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].vpc #=> Types::AnalysisComponent
    #   resp.data.next_token #=> String
    #
    def get_network_insights_access_scope_analysis_findings(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetNetworkInsightsAccessScopeAnalysisFindingsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetNetworkInsightsAccessScopeAnalysisFindings
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetNetworkInsightsAccessScopeAnalysisFindings
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetNetworkInsightsAccessScopeAnalysisFindings,
        params_class: Params::GetNetworkInsightsAccessScopeAnalysisFindingsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_network_insights_access_scope_analysis_findings
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets the content for the specified Network Access Scope.</p>
    #
    # @param [Hash] params
    #   See {Types::GetNetworkInsightsAccessScopeContentInput}.
    #
    # @option params [String] :network_insights_access_scope_id
    #   <p>The ID of the Network Access Scope.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetNetworkInsightsAccessScopeContentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_network_insights_access_scope_content(
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetNetworkInsightsAccessScopeContentOutput
    #   resp.data.network_insights_access_scope_content #=> Types::NetworkInsightsAccessScopeContent
    #   resp.data.network_insights_access_scope_content.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_content.match_paths #=> Array<AccessScopePath>
    #   resp.data.network_insights_access_scope_content.match_paths[0] #=> Types::AccessScopePath
    #   resp.data.network_insights_access_scope_content.match_paths[0].source #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement #=> Types::PacketHeaderStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses[0] #=> String
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols[0] #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resources #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resource_types #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].destination #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources #=> Array<ThroughResourcesStatement>
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0] #=> Types::ThroughResourcesStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0].resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.exclude_paths #=> Array<AccessScopePath>
    #
    def get_network_insights_access_scope_content(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetNetworkInsightsAccessScopeContentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetNetworkInsightsAccessScopeContentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetNetworkInsightsAccessScopeContent
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetNetworkInsightsAccessScopeContent
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetNetworkInsightsAccessScopeContent,
        params_class: Params::GetNetworkInsightsAccessScopeContentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_network_insights_access_scope_content
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Retrieves the encrypted administrator password for a running Windows instance.</p>
    #         <p>The Windows password is generated at boot by the <code>EC2Config</code> service or
    #                 <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only
    #             happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the
    #             <i>Amazon EC2 User Guide</i>.</p>
    #         <p>For the <code>EC2Config</code> service, the password is not generated for rebundled
    #             AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p>
    #         <p>The password is encrypted using the key pair that you specified when you launched the
    #             instance. You must provide the corresponding key pair file.</p>
    #         <p>When you launch an instance, password generation and encryption may take a few
    #             minutes. If you try to retrieve the password before it's available, the output returns
    #             an empty string. We recommend that you wait up to 15 minutes after launching an instance
    #             before trying to retrieve the generated password.</p>
    #
    # @param [Hash] params
    #   See {Types::GetPasswordDataInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the Windows instance.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetPasswordDataOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_password_data(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetPasswordDataOutput
    #   resp.data.instance_id #=> String
    #   resp.data.password_data #=> String
    #   resp.data.timestamp #=> Time
    #
    def get_password_data(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetPasswordDataInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetPasswordDataInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetPasswordData
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetPasswordData
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetPasswordData,
        params_class: Params::GetPasswordDataOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_password_data
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Returns a quote and exchange information for exchanging one or more specified
    #             Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange
    #             cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.</p>
    #
    # @param [Hash] params
    #   See {Types::GetReservedInstancesExchangeQuoteInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #         and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #         Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :reserved_instance_ids
    #   <p>The IDs of the Convertible Reserved Instances to exchange.</p>
    #
    # @option params [Array<TargetConfigurationRequest>] :target_configurations
    #   <p>The configuration of the target Convertible Reserved Instance to exchange for your
    #               current Convertible Reserved Instances.</p>
    #
    # @return [Types::GetReservedInstancesExchangeQuoteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_reserved_instances_exchange_quote(
    #     dry_run: false,
    #     reserved_instance_ids: [
    #       'member'
    #     ], # required
    #     target_configurations: [
    #       {
    #         instance_count: 1,
    #         offering_id: 'OfferingId' # required
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetReservedInstancesExchangeQuoteOutput
    #   resp.data.currency_code #=> String
    #   resp.data.is_valid_exchange #=> Boolean
    #   resp.data.output_reserved_instances_will_expire_at #=> Time
    #   resp.data.payment_due #=> String
    #   resp.data.reserved_instance_value_rollup #=> Types::ReservationValue
    #   resp.data.reserved_instance_value_rollup.hourly_price #=> String
    #   resp.data.reserved_instance_value_rollup.remaining_total_value #=> String
    #   resp.data.reserved_instance_value_rollup.remaining_upfront_value #=> String
    #   resp.data.reserved_instance_value_set #=> Array<ReservedInstanceReservationValue>
    #   resp.data.reserved_instance_value_set[0] #=> Types::ReservedInstanceReservationValue
    #   resp.data.reserved_instance_value_set[0].reservation_value #=> Types::ReservationValue
    #   resp.data.reserved_instance_value_set[0].reserved_instance_id #=> String
    #   resp.data.target_configuration_value_rollup #=> Types::ReservationValue
    #   resp.data.target_configuration_value_set #=> Array<TargetReservationValue>
    #   resp.data.target_configuration_value_set[0] #=> Types::TargetReservationValue
    #   resp.data.target_configuration_value_set[0].reservation_value #=> Types::ReservationValue
    #   resp.data.target_configuration_value_set[0].target_configuration #=> Types::TargetConfiguration
    #   resp.data.target_configuration_value_set[0].target_configuration.instance_count #=> Integer
    #   resp.data.target_configuration_value_set[0].target_configuration.offering_id #=> String
    #   resp.data.validation_failure_reason #=> String
    #
    def get_reserved_instances_exchange_quote(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetReservedInstancesExchangeQuoteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetReservedInstancesExchangeQuoteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetReservedInstancesExchangeQuote
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetReservedInstancesExchangeQuote
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetReservedInstancesExchangeQuote,
        params_class: Params::GetReservedInstancesExchangeQuoteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_reserved_instances_exchange_quote
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Retrieves the access status of your account to the EC2 serial console of all instances. By
    # 			default, access to the EC2 serial console is disabled for your account. For more
    # 			information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2
    # 				User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetSerialConsoleAccessStatusInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetSerialConsoleAccessStatusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_serial_console_access_status(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetSerialConsoleAccessStatusOutput
    #   resp.data.serial_console_access_enabled #=> Boolean
    #
    def get_serial_console_access_status(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetSerialConsoleAccessStatusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetSerialConsoleAccessStatusInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetSerialConsoleAccessStatus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetSerialConsoleAccessStatus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetSerialConsoleAccessStatus,
        params_class: Params::GetSerialConsoleAccessStatusOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_serial_console_access_status
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Calculates the Spot placement score for a Region or Availability Zone based on the
    #          specified target capacity and compute requirements.</p>
    #          <p>You can specify your compute requirements either by using
    #             <code>InstanceRequirementsWithMetadata</code> and letting Amazon EC2 choose the optimal
    #          instance types to fulfill your Spot request, or you can specify the instance types by using
    #             <code>InstanceTypes</code>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot placement score</a> in
    #          the Amazon EC2 User Guide.</p>
    #
    # @param [Hash] params
    #   See {Types::GetSpotPlacementScoresInput}.
    #
    # @option params [Array<String>] :instance_types
    #   <p>The instance types. We recommend that you specify at least three instance types. If you
    #            specify one or two instance types, or specify variations of a single instance type (for
    #            example, an <code>m3.xlarge</code> with and without instance storage), the returned
    #            placement score will always be low. </p>
    #            <p>If you specify <code>InstanceTypes</code>, you can't specify
    #               <code>InstanceRequirementsWithMetadata</code>.</p>
    #
    # @option params [Integer] :target_capacity
    #   <p>The target capacity.</p>
    #
    # @option params [String] :target_capacity_unit_type
    #   <p>The unit for the target capacity.</p>
    #            <p>Default: <code>units</code> (translates to number of instances)</p>
    #
    # @option params [Boolean] :single_availability_zone
    #   <p>Specify <code>true</code> so that the response returns a list of scored Availability Zones.
    #            Otherwise, the response returns a list of scored Regions.</p>
    #            <p>A list of scored Availability Zones is useful if you want to launch all of your Spot
    #            capacity into a single Availability Zone.</p>
    #
    # @option params [Array<String>] :region_names
    #   <p>The Regions used to narrow down the list of Regions to be scored. Enter the Region code,
    #            for example, <code>us-east-1</code>.</p>
    #
    # @option params [InstanceRequirementsWithMetadataRequest] :instance_requirements_with_metadata
    #   <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
    #            identify instance types with those attributes.</p>
    #            <p>If you specify <code>InstanceRequirementsWithMetadata</code>, you can't specify
    #               <code>InstanceTypes</code>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return in a single call. Specify a value between 1 and 
    #         1000. The default value is 1000. To retrieve the remaining results, make another call with 
    #         the returned <code>NextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next set of results.</p>
    #
    # @return [Types::GetSpotPlacementScoresOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_spot_placement_scores(
    #     instance_types: [
    #       'member'
    #     ],
    #     target_capacity: 1, # required
    #     target_capacity_unit_type: 'vcpu', # accepts ["vcpu", "memory-mib", "units"]
    #     single_availability_zone: false,
    #     region_names: [
    #       'member'
    #     ],
    #     instance_requirements_with_metadata: {
    #       architecture_types: [
    #         'i386' # accepts ["i386", "x86_64", "arm64", "x86_64_mac"]
    #       ],
    #       virtualization_types: [
    #         'hvm' # accepts ["hvm", "paravirtual"]
    #       ],
    #       instance_requirements: {
    #         v_cpu_count: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         memory_mi_b: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         cpu_manufacturers: [
    #           'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #         ],
    #         memory_gi_b_per_v_cpu: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         excluded_instance_types: [
    #           'member'
    #         ],
    #         instance_generations: [
    #           'current' # accepts ["current", "previous"]
    #         ],
    #         spot_max_price_percentage_over_lowest_price: 1,
    #         on_demand_max_price_percentage_over_lowest_price: 1,
    #         bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #         burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #         require_hibernate_support: false,
    #         network_interface_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         local_storage: 'included', # accepts ["included", "required", "excluded"]
    #         local_storage_types: [
    #           'hdd' # accepts ["hdd", "ssd"]
    #         ],
    #         total_local_storage_gb: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         baseline_ebs_bandwidth_mbps: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_types: [
    #           'gpu' # accepts ["gpu", "fpga", "inference"]
    #         ],
    #         accelerator_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_manufacturers: [
    #           'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #         ],
    #         accelerator_names: [
    #           'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #         ],
    #         accelerator_total_memory_mi_b: {
    #           min: 1,
    #           max: 1
    #         }
    #       }
    #     },
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetSpotPlacementScoresOutput
    #   resp.data.spot_placement_scores #=> Array<SpotPlacementScore>
    #   resp.data.spot_placement_scores[0] #=> Types::SpotPlacementScore
    #   resp.data.spot_placement_scores[0].region #=> String
    #   resp.data.spot_placement_scores[0].availability_zone_id #=> String
    #   resp.data.spot_placement_scores[0].score #=> Integer
    #   resp.data.next_token #=> String
    #
    def get_spot_placement_scores(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetSpotPlacementScoresInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetSpotPlacementScoresInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetSpotPlacementScores
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetSpotPlacementScores
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetSpotPlacementScores,
        params_class: Params::GetSpotPlacementScoresOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_spot_placement_scores
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the subnet CIDR reservations.</p>
    #
    # @param [Hash] params
    #   See {Types::GetSubnetCidrReservationsInput}.
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>reservationType</code> - The type of reservation (<code>prefix</code> |
    #                       <code>explicit</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>subnet-id</code> - The ID of the subnet.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    #       For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    #               </li>
    #            </ul>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @return [Types::GetSubnetCidrReservationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_subnet_cidr_reservations(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     subnet_id: 'SubnetId', # required
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetSubnetCidrReservationsOutput
    #   resp.data.subnet_ipv4_cidr_reservations #=> Array<SubnetCidrReservation>
    #   resp.data.subnet_ipv4_cidr_reservations[0] #=> Types::SubnetCidrReservation
    #   resp.data.subnet_ipv4_cidr_reservations[0].subnet_cidr_reservation_id #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].subnet_id #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].cidr #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].reservation_type #=> String, one of ["prefix", "explicit"]
    #   resp.data.subnet_ipv4_cidr_reservations[0].owner_id #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].description #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags #=> Array<Tag>
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags[0] #=> Types::Tag
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags[0].key #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags[0].value #=> String
    #   resp.data.subnet_ipv6_cidr_reservations #=> Array<SubnetCidrReservation>
    #   resp.data.next_token #=> String
    #
    def get_subnet_cidr_reservations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetSubnetCidrReservationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetSubnetCidrReservationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetSubnetCidrReservations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetSubnetCidrReservations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetSubnetCidrReservations,
        params_class: Params::GetSubnetCidrReservationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_subnet_cidr_reservations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists the route tables to which the specified resource attachment propagates routes.</p>
    #
    # @param [Hash] params
    #   See {Types::GetTransitGatewayAttachmentPropagationsInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetTransitGatewayAttachmentPropagationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_transit_gateway_attachment_propagations(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetTransitGatewayAttachmentPropagationsOutput
    #   resp.data.transit_gateway_attachment_propagations #=> Array<TransitGatewayAttachmentPropagation>
    #   resp.data.transit_gateway_attachment_propagations[0] #=> Types::TransitGatewayAttachmentPropagation
    #   resp.data.transit_gateway_attachment_propagations[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_attachment_propagations[0].state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #   resp.data.next_token #=> String
    #
    def get_transit_gateway_attachment_propagations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetTransitGatewayAttachmentPropagationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetTransitGatewayAttachmentPropagationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetTransitGatewayAttachmentPropagations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetTransitGatewayAttachmentPropagations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetTransitGatewayAttachmentPropagations,
        params_class: Params::GetTransitGatewayAttachmentPropagationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_transit_gateway_attachment_propagations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the associations for the transit gateway multicast domain.</p>
    #
    # @param [Hash] params
    #   See {Types::GetTransitGatewayMulticastDomainAssociationsInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>resource-id</code> - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>resource-type</code> - The type of resource. The valid value is: <code>vpc</code>.</p>
    #               </li>
    #               <li>
    #
    #                   <p>
    #                     <code>state</code> - The state of the subnet association. Valid values are
    #                           <code>associated</code> |
    #                           <code>associating</code>
    #                       | <code>disassociated</code> | <code>disassociating</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>subnet-id</code> - The ID of the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetTransitGatewayMulticastDomainAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_transit_gateway_multicast_domain_associations(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetTransitGatewayMulticastDomainAssociationsOutput
    #   resp.data.multicast_domain_associations #=> Array<TransitGatewayMulticastDomainAssociation>
    #   resp.data.multicast_domain_associations[0] #=> Types::TransitGatewayMulticastDomainAssociation
    #   resp.data.multicast_domain_associations[0].transit_gateway_attachment_id #=> String
    #   resp.data.multicast_domain_associations[0].resource_id #=> String
    #   resp.data.multicast_domain_associations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.multicast_domain_associations[0].resource_owner_id #=> String
    #   resp.data.multicast_domain_associations[0].subnet #=> Types::SubnetAssociation
    #   resp.data.multicast_domain_associations[0].subnet.subnet_id #=> String
    #   resp.data.multicast_domain_associations[0].subnet.state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    #   resp.data.next_token #=> String
    #
    def get_transit_gateway_multicast_domain_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetTransitGatewayMulticastDomainAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetTransitGatewayMulticastDomainAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetTransitGatewayMulticastDomainAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetTransitGatewayMulticastDomainAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetTransitGatewayMulticastDomainAssociations,
        params_class: Params::GetTransitGatewayMulticastDomainAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_transit_gateway_multicast_domain_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the prefix list references in a specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::GetTransitGatewayPrefixListReferencesInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>attachment.resource-id</code> - The ID of the resource for the attachment.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>attachment.resource-type</code> - The type of resource for the
    #                       attachment. Valid values are <code>vpc</code> | <code>vpn</code> |
    #                           <code>direct-connect-gateway</code> | <code>peering</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>attachment.transit-gateway-attachment-id</code> - The ID of the attachment.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>is-blackhole</code> - Whether traffic matching the route is blocked (<code>true</code> | <code>false</code>).</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>prefix-list-id</code> - The ID of the prefix list.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>prefix-list-owner-id</code> - The ID of the owner of the prefix list.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>state</code> - The state of the prefix list reference (<code>pending</code> | <code>available</code> | <code>modifying</code> | <code>deleting</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetTransitGatewayPrefixListReferencesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_transit_gateway_prefix_list_references(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetTransitGatewayPrefixListReferencesOutput
    #   resp.data.transit_gateway_prefix_list_references #=> Array<TransitGatewayPrefixListReference>
    #   resp.data.transit_gateway_prefix_list_references[0] #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_references[0].blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment.resource_id #=> String
    #   resp.data.next_token #=> String
    #
    def get_transit_gateway_prefix_list_references(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetTransitGatewayPrefixListReferencesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetTransitGatewayPrefixListReferencesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetTransitGatewayPrefixListReferences
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetTransitGatewayPrefixListReferences
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetTransitGatewayPrefixListReferences,
        params_class: Params::GetTransitGatewayPrefixListReferencesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_transit_gateway_prefix_list_references
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the associations for the specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::GetTransitGatewayRouteTableAssociationsInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>resource-id</code> - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-type</code> - The resource type. Valid values are <code>vpc</code>
    #                       | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code>
    #                       | <code>connect</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetTransitGatewayRouteTableAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_transit_gateway_route_table_associations(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetTransitGatewayRouteTableAssociationsOutput
    #   resp.data.associations #=> Array<TransitGatewayRouteTableAssociation>
    #   resp.data.associations[0] #=> Types::TransitGatewayRouteTableAssociation
    #   resp.data.associations[0].transit_gateway_attachment_id #=> String
    #   resp.data.associations[0].resource_id #=> String
    #   resp.data.associations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations[0].state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.next_token #=> String
    #
    def get_transit_gateway_route_table_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetTransitGatewayRouteTableAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetTransitGatewayRouteTableAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetTransitGatewayRouteTableAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetTransitGatewayRouteTableAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetTransitGatewayRouteTableAssociations,
        params_class: Params::GetTransitGatewayRouteTableAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_transit_gateway_route_table_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Gets information about the route table propagations for the specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::GetTransitGatewayRouteTablePropagationsInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>resource-id</code> - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>resource-type</code> - The resource type. Valid values are <code>vpc</code>
    #                       | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code>
    #                       | <code>connect</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetTransitGatewayRouteTablePropagationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_transit_gateway_route_table_propagations(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetTransitGatewayRouteTablePropagationsOutput
    #   resp.data.transit_gateway_route_table_propagations #=> Array<TransitGatewayRouteTablePropagation>
    #   resp.data.transit_gateway_route_table_propagations[0] #=> Types::TransitGatewayRouteTablePropagation
    #   resp.data.transit_gateway_route_table_propagations[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_route_table_propagations[0].resource_id #=> String
    #   resp.data.transit_gateway_route_table_propagations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_route_table_propagations[0].state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #   resp.data.next_token #=> String
    #
    def get_transit_gateway_route_table_propagations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetTransitGatewayRouteTablePropagationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetTransitGatewayRouteTablePropagationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetTransitGatewayRouteTablePropagations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetTransitGatewayRouteTablePropagations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetTransitGatewayRouteTablePropagations,
        params_class: Params::GetTransitGatewayRouteTablePropagationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_transit_gateway_route_table_propagations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Download an Amazon Web Services-provided sample configuration file to be used with the customer
    #             gateway device specified for your Site-to-Site VPN connection.</p>
    #
    # @param [Hash] params
    #   See {Types::GetVpnConnectionDeviceSampleConfigurationInput}.
    #
    # @option params [String] :vpn_connection_id
    #   <p>The <code>VpnConnectionId</code> specifies the Site-to-Site VPN connection used for the sample
    #               configuration.</p>
    #
    # @option params [String] :vpn_connection_device_type_id
    #   <p>Device identifier provided by the <code>GetVpnConnectionDeviceTypes</code> API.</p>
    #
    # @option params [String] :internet_key_exchange_version
    #   <p>The IKE version to be used in the sample configuration file for your customer gateway
    #               device. You can specify one of the following versions: <code>ikev1</code> or
    #                   <code>ikev2</code>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetVpnConnectionDeviceSampleConfigurationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_vpn_connection_device_sample_configuration(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_connection_device_type_id: 'VpnConnectionDeviceTypeId', # required
    #     internet_key_exchange_version: 'InternetKeyExchangeVersion',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetVpnConnectionDeviceSampleConfigurationOutput
    #   resp.data.vpn_connection_device_sample_configuration #=> String
    #
    def get_vpn_connection_device_sample_configuration(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetVpnConnectionDeviceSampleConfigurationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetVpnConnectionDeviceSampleConfigurationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetVpnConnectionDeviceSampleConfiguration
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetVpnConnectionDeviceSampleConfiguration
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetVpnConnectionDeviceSampleConfiguration,
        params_class: Params::GetVpnConnectionDeviceSampleConfigurationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_vpn_connection_device_sample_configuration
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Obtain a list of customer gateway devices for which sample configuration
    #             files can be provided. The request has no additional parameters. You can also see the
    #             list of device types with sample configuration files available under <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html">Your customer gateway
    #                 device</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::GetVpnConnectionDeviceTypesInput}.
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results returned by <code>GetVpnConnectionDeviceTypes</code> in
    #               paginated output. When this parameter is used, <code>GetVpnConnectionDeviceTypes</code>
    #               only returns <code>MaxResults</code> results in a single page along with a
    #                   <code>NextToken</code> response element. The remaining results of the initial
    #               request can be seen by sending another <code>GetVpnConnectionDeviceTypes</code> request
    #               with the returned <code>NextToken</code> value. This value can be between 200 and 1000.
    #               If this parameter is not used, then <code>GetVpnConnectionDeviceTypes</code> returns all
    #               results.</p>
    #
    # @option params [String] :next_token
    #   <p>The <code>NextToken</code> value returned from a previous paginated
    #                   <code>GetVpnConnectionDeviceTypes</code> request where <code>MaxResults</code> was
    #               used and the results exceeded the value of that parameter. Pagination continues from the
    #               end of the previous results that returned the <code>NextToken</code> value. This value
    #               is null when there are no more results to return. </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::GetVpnConnectionDeviceTypesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_vpn_connection_device_types(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetVpnConnectionDeviceTypesOutput
    #   resp.data.vpn_connection_device_types #=> Array<VpnConnectionDeviceType>
    #   resp.data.vpn_connection_device_types[0] #=> Types::VpnConnectionDeviceType
    #   resp.data.vpn_connection_device_types[0].vpn_connection_device_type_id #=> String
    #   resp.data.vpn_connection_device_types[0].vendor #=> String
    #   resp.data.vpn_connection_device_types[0].platform #=> String
    #   resp.data.vpn_connection_device_types[0].software #=> String
    #   resp.data.next_token #=> String
    #
    def get_vpn_connection_device_types(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetVpnConnectionDeviceTypesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetVpnConnectionDeviceTypesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetVpnConnectionDeviceTypes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::GetVpnConnectionDeviceTypes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::GetVpnConnectionDeviceTypes,
        params_class: Params::GetVpnConnectionDeviceTypesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :get_vpn_connection_device_types
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p>
    # 		       <p>Uploading a client certificate revocation list resets existing client connections.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportClientVpnClientCertificateRevocationListInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint to which the client certificate revocation list applies.</p>
    #
    # @option params [String] :certificate_revocation_list
    #   <p>The client certificate revocation list file. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate">Generate a Client Certificate Revocation List</a> in the
    #   				<i>Client VPN Administrator Guide</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ImportClientVpnClientCertificateRevocationListOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_client_vpn_client_certificate_revocation_list(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     certificate_revocation_list: 'CertificateRevocationList', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportClientVpnClientCertificateRevocationListOutput
    #   resp.data.return #=> Boolean
    #
    def import_client_vpn_client_certificate_revocation_list(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportClientVpnClientCertificateRevocationListInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportClientVpnClientCertificateRevocationListInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportClientVpnClientCertificateRevocationList
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ImportClientVpnClientCertificateRevocationList
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ImportClientVpnClientCertificateRevocationList,
        params_class: Params::ImportClientVpnClientCertificateRevocationListOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :import_client_vpn_client_certificate_revocation_list
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI).</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a
    #    VM as an image using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportImageInput}.
    #
    # @option params [String] :architecture
    #   <p>The architecture of the virtual machine.</p>
    #            <p>Valid values: <code>i386</code> | <code>x86_64</code>
    #            </p>
    #
    # @option params [ClientData] :client_data
    #   <p>The client-specific data.</p>
    #
    # @option params [String] :client_token
    #   <p>The token to enable idempotency for VM import requests.</p>
    #
    # @option params [String] :description
    #   <p>A description string for the import image task.</p>
    #
    # @option params [Array<ImageDiskContainer>] :disk_containers
    #   <p>Information about the disk containers.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :encrypted
    #   <p>Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used
    #      unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :hypervisor
    #   <p>The target hypervisor platform.</p>
    #            <p>Valid values: <code>xen</code>
    #            </p>
    #
    # @option params [String] :kms_key_id
    #   <p>An identifier for the symmetric KMS key to use when creating the
    #      encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this
    #      parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is
    #      specified, the <code>Encrypted</code> flag must also be set. </p>
    #            <p>The KMS key identifier may be provided in any of the following formats: </p>
    #            <ul>
    #               <li>
    #                  <p>Key ID</p>
    #               </li>
    #               <li>
    #                  <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p>
    #               </li>
    #               <li>
    #                  <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p>
    #               </li>
    #               <li>
    #                  <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p>
    #               </li>
    #            </ul>
    #            <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even
    #      though you provided an invalid identifier. This action will eventually report failure. </p>
    #            <p>The specified KMS key must exist in the Region that the AMI is being copied to.</p>
    #            <p>Amazon EBS does not support asymmetric KMS keys.</p>
    #
    # @option params [String] :license_type
    #   <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
    #            <p>By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify
    #      <code>AWS</code> to replace the source-system license with an Amazon Web Services license, if appropriate. Specify <code>BYOL</code>
    #      to retain the source-system license, if appropriate.</p>
    #            <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party
    #      cloud, such as Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the
    #      VM Import/Export User Guide.</p>
    #
    # @option params [String] :platform
    #   <p>The operating system of the virtual machine.</p>
    #            <p>Valid values: <code>Windows</code> | <code>Linux</code>
    #            </p>
    #
    # @option params [String] :role_name
    #   <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    #
    # @option params [Array<ImportImageLicenseConfigurationRequest>] :license_specifications
    #   <p>The ARNs of the license configurations.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the import image task during creation.</p>
    #
    # @option params [String] :usage_operation
    #   <p>The usage operation value. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites">Licensing options</a> in the <i>VM Import/Export User Guide</i>.</p>
    #
    # @option params [String] :boot_mode
    #   <p>The boot mode of the virtual machine.</p>
    #
    # @return [Types::ImportImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_image(
    #     architecture: 'Architecture',
    #     client_data: {
    #       comment: 'Comment',
    #       upload_end: Time.now,
    #       upload_size: 1.0,
    #       upload_start: Time.now
    #     },
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     disk_containers: [
    #       {
    #         description: 'Description',
    #         device_name: 'DeviceName',
    #         format: 'Format',
    #         snapshot_id: 'SnapshotId',
    #         url: 'Url',
    #         user_bucket: {
    #           s3_bucket: 'S3Bucket',
    #           s3_key: 'S3Key'
    #         }
    #       }
    #     ],
    #     dry_run: false,
    #     encrypted: false,
    #     hypervisor: 'Hypervisor',
    #     kms_key_id: 'KmsKeyId',
    #     license_type: 'LicenseType',
    #     platform: 'Platform',
    #     role_name: 'RoleName',
    #     license_specifications: [
    #       {
    #         license_configuration_arn: 'LicenseConfigurationArn'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     usage_operation: 'UsageOperation',
    #     boot_mode: 'legacy-bios' # accepts ["legacy-bios", "uefi"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportImageOutput
    #   resp.data.architecture #=> String
    #   resp.data.description #=> String
    #   resp.data.encrypted #=> Boolean
    #   resp.data.hypervisor #=> String
    #   resp.data.image_id #=> String
    #   resp.data.import_task_id #=> String
    #   resp.data.kms_key_id #=> String
    #   resp.data.license_type #=> String
    #   resp.data.platform #=> String
    #   resp.data.progress #=> String
    #   resp.data.snapshot_details #=> Array<SnapshotDetail>
    #   resp.data.snapshot_details[0] #=> Types::SnapshotDetail
    #   resp.data.snapshot_details[0].description #=> String
    #   resp.data.snapshot_details[0].device_name #=> String
    #   resp.data.snapshot_details[0].disk_image_size #=> Float
    #   resp.data.snapshot_details[0].format #=> String
    #   resp.data.snapshot_details[0].progress #=> String
    #   resp.data.snapshot_details[0].snapshot_id #=> String
    #   resp.data.snapshot_details[0].status #=> String
    #   resp.data.snapshot_details[0].status_message #=> String
    #   resp.data.snapshot_details[0].url #=> String
    #   resp.data.snapshot_details[0].user_bucket #=> Types::UserBucketDetails
    #   resp.data.snapshot_details[0].user_bucket.s3_bucket #=> String
    #   resp.data.snapshot_details[0].user_bucket.s3_key #=> String
    #   resp.data.status #=> String
    #   resp.data.status_message #=> String
    #   resp.data.license_specifications #=> Array<ImportImageLicenseConfigurationResponse>
    #   resp.data.license_specifications[0] #=> Types::ImportImageLicenseConfigurationResponse
    #   resp.data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.usage_operation #=> String
    #
    def import_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ImportImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ImportImage,
        params_class: Params::ImportImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :import_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an import instance task using metadata from the specified disk image.</p>
    #          <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>
    #    instead.</p>
    #          <p>This API action is not supported by the Command Line Interface (CLI). For
    #    information about using the Amazon EC2 CLI, which is deprecated, see
    #    <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2">Importing a VM to Amazon EC2</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p>
    #          <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportInstanceInput}.
    #
    # @option params [String] :description
    #   <p>A description for the instance being imported.</p>
    #
    # @option params [Array<DiskImage>] :disk_images
    #   <p>The disk image.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [ImportInstanceLaunchSpecification] :launch_specification
    #   <p>The launch specification.</p>
    #
    # @option params [String] :platform
    #   <p>The instance operating system.</p>
    #
    # @return [Types::ImportInstanceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_instance(
    #     description: 'Description',
    #     disk_images: [
    #       {
    #         description: 'Description',
    #         image: {
    #           bytes: 1, # required
    #           format: 'VMDK', # required - accepts ["VMDK", "RAW", "VHD"]
    #           import_manifest_url: 'ImportManifestUrl' # required
    #         },
    #         volume: {
    #           size: 1 # required
    #         }
    #       }
    #     ],
    #     dry_run: false,
    #     launch_specification: {
    #       additional_info: 'AdditionalInfo',
    #       architecture: 'i386', # accepts ["i386", "x86_64", "arm64", "x86_64_mac"]
    #       group_ids: [
    #         'member'
    #       ],
    #       group_names: [
    #         'member'
    #       ],
    #       instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #       monitoring: false,
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         affinity: 'Affinity',
    #         group_name: 'GroupName',
    #         partition_number: 1,
    #         host_id: 'HostId',
    #         tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #         spread_domain: 'SpreadDomain',
    #         host_resource_group_arn: 'HostResourceGroupArn'
    #       },
    #       private_ip_address: 'PrivateIpAddress',
    #       subnet_id: 'SubnetId',
    #       user_data: {
    #         data: 'Data'
    #       }
    #     },
    #     platform: 'Windows' # required - accepts ["Windows"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportInstanceOutput
    #   resp.data.conversion_task #=> Types::ConversionTask
    #   resp.data.conversion_task.conversion_task_id #=> String
    #   resp.data.conversion_task.expiration_time #=> String
    #   resp.data.conversion_task.import_instance #=> Types::ImportInstanceTaskDetails
    #   resp.data.conversion_task.import_instance.description #=> String
    #   resp.data.conversion_task.import_instance.instance_id #=> String
    #   resp.data.conversion_task.import_instance.platform #=> String, one of ["Windows"]
    #   resp.data.conversion_task.import_instance.volumes #=> Array<ImportInstanceVolumeDetailItem>
    #   resp.data.conversion_task.import_instance.volumes[0] #=> Types::ImportInstanceVolumeDetailItem
    #   resp.data.conversion_task.import_instance.volumes[0].availability_zone #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].bytes_converted #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].description #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_instance.volumes[0].image.checksum #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.conversion_task.import_instance.volumes[0].image.import_manifest_url #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.size #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].status #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].status_message #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.import_instance.volumes[0].volume.id #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume.size #=> Integer
    #   resp.data.conversion_task.import_volume #=> Types::ImportVolumeTaskDetails
    #   resp.data.conversion_task.import_volume.availability_zone #=> String
    #   resp.data.conversion_task.import_volume.bytes_converted #=> Integer
    #   resp.data.conversion_task.import_volume.description #=> String
    #   resp.data.conversion_task.import_volume.image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_volume.volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.conversion_task.status_message #=> String
    #   resp.data.conversion_task.tags #=> Array<Tag>
    #   resp.data.conversion_task.tags[0] #=> Types::Tag
    #   resp.data.conversion_task.tags[0].key #=> String
    #   resp.data.conversion_task.tags[0].value #=> String
    #
    def import_instance(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportInstanceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportInstanceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportInstance
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ImportInstance
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ImportInstance,
        params_class: Params::ImportInstanceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :import_instance
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Imports the public key from an RSA or ED25519 key pair that you created with a third-party tool.
    #         Compare this with <a>CreateKeyPair</a>, in which Amazon Web Services creates the key pair and gives the keys to you
    #         (Amazon Web Services keeps a copy of the public key). With ImportKeyPair, you create the key pair and give Amazon Web Services just the public key.
    #         The private key is never transferred between you and Amazon Web Services.</p>
    #          <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a>
    # 				in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportKeyPairInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :key_name
    #   <p>A unique name for the key pair.</p>
    #
    # @option params [String] :public_key_material
    #   <p>The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the imported key pair.</p>
    #
    # @return [Types::ImportKeyPairOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_key_pair(
    #     dry_run: false,
    #     key_name: 'KeyName', # required
    #     public_key_material: 'PublicKeyMaterial', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportKeyPairOutput
    #   resp.data.key_fingerprint #=> String
    #   resp.data.key_name #=> String
    #   resp.data.key_pair_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def import_key_pair(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportKeyPairInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportKeyPairInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportKeyPair
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ImportKeyPair
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ImportKeyPair,
        params_class: Params::ImportKeyPairOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :import_key_pair
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Imports a disk into an EBS snapshot.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-import-snapshot.html">Importing a disk as a snapshot using VM Import/Export</a> in the
    #    <i>VM Import/Export User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportSnapshotInput}.
    #
    # @option params [ClientData] :client_data
    #   <p>The client-specific data.</p>
    #
    # @option params [String] :client_token
    #   <p>Token to enable idempotency for VM import requests.</p>
    #
    # @option params [String] :description
    #   <p>The description string for the import snapshot task.</p>
    #
    # @option params [SnapshotDiskContainer] :disk_container
    #   <p>Information about the disk container.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :encrypted
    #   <p>Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is
    #      used unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :kms_key_id
    #   <p>An identifier for the symmetric KMS key to use when creating the
    #      encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this
    #      parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is
    #      specified, the <code>Encrypted</code> flag must also be set. </p>
    #            <p>The KMS key identifier may be provided in any of the following formats: </p>
    #            <ul>
    #               <li>
    #                  <p>Key ID</p>
    #               </li>
    #               <li>
    #                  <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p>
    #               </li>
    #               <li>
    #                  <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p>
    #               </li>
    #               <li>
    #                  <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p>
    #               </li>
    #            </ul>
    #            <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even
    #      though you provided an invalid identifier. This action will eventually report failure. </p>
    #            <p>The specified KMS key must exist in the Region that the snapshot is being copied to.</p>
    #            <p>Amazon EBS does not support asymmetric KMS keys.</p>
    #
    # @option params [String] :role_name
    #   <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the import snapshot task during creation.</p>
    #
    # @return [Types::ImportSnapshotOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_snapshot(
    #     client_data: {
    #       comment: 'Comment',
    #       upload_end: Time.now,
    #       upload_size: 1.0,
    #       upload_start: Time.now
    #     },
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     disk_container: {
    #       description: 'Description',
    #       format: 'Format',
    #       url: 'Url',
    #       user_bucket: {
    #         s3_bucket: 'S3Bucket',
    #         s3_key: 'S3Key'
    #       }
    #     },
    #     dry_run: false,
    #     encrypted: false,
    #     kms_key_id: 'KmsKeyId',
    #     role_name: 'RoleName',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportSnapshotOutput
    #   resp.data.description #=> String
    #   resp.data.import_task_id #=> String
    #   resp.data.snapshot_task_detail #=> Types::SnapshotTaskDetail
    #   resp.data.snapshot_task_detail.description #=> String
    #   resp.data.snapshot_task_detail.disk_image_size #=> Float
    #   resp.data.snapshot_task_detail.encrypted #=> Boolean
    #   resp.data.snapshot_task_detail.format #=> String
    #   resp.data.snapshot_task_detail.kms_key_id #=> String
    #   resp.data.snapshot_task_detail.progress #=> String
    #   resp.data.snapshot_task_detail.snapshot_id #=> String
    #   resp.data.snapshot_task_detail.status #=> String
    #   resp.data.snapshot_task_detail.status_message #=> String
    #   resp.data.snapshot_task_detail.url #=> String
    #   resp.data.snapshot_task_detail.user_bucket #=> Types::UserBucketDetails
    #   resp.data.snapshot_task_detail.user_bucket.s3_bucket #=> String
    #   resp.data.snapshot_task_detail.user_bucket.s3_key #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #
    def import_snapshot(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportSnapshotInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportSnapshotInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportSnapshot
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ImportSnapshot
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ImportSnapshot,
        params_class: Params::ImportSnapshotOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :import_snapshot
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates an import volume task using metadata from the specified disk image.</p>
    #          <p>This API action supports only single-volume VMs. To import multi-volume VMs, use
    #    <a>ImportImage</a> instead. To import a disk to a snapshot, use
    #    <a>ImportSnapshot</a> instead.</p>
    #          <p>This API action is not supported by the Command Line Interface (CLI). For
    #    information about using the Amazon EC2 CLI, which is deprecated, see <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#importing-your-volumes-into-amazon-ebs">Importing Disks to Amazon EBS</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p>
    #          <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ImportVolumeInput}.
    #
    # @option params [String] :availability_zone
    #   <p>The Availability Zone for the resulting EBS volume.</p>
    #
    # @option params [String] :description
    #   <p>A description of the volume.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [DiskImageDetail] :image
    #   <p>The disk image.</p>
    #
    # @option params [VolumeDetail] :volume
    #   <p>The volume size.</p>
    #
    # @return [Types::ImportVolumeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.import_volume(
    #     availability_zone: 'AvailabilityZone', # required
    #     description: 'Description',
    #     dry_run: false,
    #     image: {
    #       bytes: 1, # required
    #       format: 'VMDK', # required - accepts ["VMDK", "RAW", "VHD"]
    #       import_manifest_url: 'ImportManifestUrl' # required
    #     }, # required
    #     volume: {
    #       size: 1 # required
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ImportVolumeOutput
    #   resp.data.conversion_task #=> Types::ConversionTask
    #   resp.data.conversion_task.conversion_task_id #=> String
    #   resp.data.conversion_task.expiration_time #=> String
    #   resp.data.conversion_task.import_instance #=> Types::ImportInstanceTaskDetails
    #   resp.data.conversion_task.import_instance.description #=> String
    #   resp.data.conversion_task.import_instance.instance_id #=> String
    #   resp.data.conversion_task.import_instance.platform #=> String, one of ["Windows"]
    #   resp.data.conversion_task.import_instance.volumes #=> Array<ImportInstanceVolumeDetailItem>
    #   resp.data.conversion_task.import_instance.volumes[0] #=> Types::ImportInstanceVolumeDetailItem
    #   resp.data.conversion_task.import_instance.volumes[0].availability_zone #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].bytes_converted #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].description #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_instance.volumes[0].image.checksum #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.conversion_task.import_instance.volumes[0].image.import_manifest_url #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.size #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].status #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].status_message #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.import_instance.volumes[0].volume.id #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume.size #=> Integer
    #   resp.data.conversion_task.import_volume #=> Types::ImportVolumeTaskDetails
    #   resp.data.conversion_task.import_volume.availability_zone #=> String
    #   resp.data.conversion_task.import_volume.bytes_converted #=> Integer
    #   resp.data.conversion_task.import_volume.description #=> String
    #   resp.data.conversion_task.import_volume.image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_volume.volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.conversion_task.status_message #=> String
    #   resp.data.conversion_task.tags #=> Array<Tag>
    #   resp.data.conversion_task.tags[0] #=> Types::Tag
    #   resp.data.conversion_task.tags[0].key #=> String
    #   resp.data.conversion_task.tags[0].value #=> String
    #
    def import_volume(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ImportVolumeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ImportVolumeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ImportVolume
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ImportVolume
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ImportVolume,
        params_class: Params::ImportVolumeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :import_volume
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Lists one or more snapshots that are currently in the Recycle Bin.</p>
    #
    # @param [Hash] params
    #   See {Types::ListSnapshotsInRecycleBinInput}.
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Array<String>] :snapshot_ids
    #   <p>The IDs of the snapshots to list. Omit this parameter to list all of the
    #         snapshots that are in the Recycle Bin.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ListSnapshotsInRecycleBinOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_snapshots_in_recycle_bin(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     snapshot_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListSnapshotsInRecycleBinOutput
    #   resp.data.snapshots #=> Array<SnapshotRecycleBinInfo>
    #   resp.data.snapshots[0] #=> Types::SnapshotRecycleBinInfo
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].recycle_bin_enter_time #=> Time
    #   resp.data.snapshots[0].recycle_bin_exit_time #=> Time
    #   resp.data.snapshots[0].description #=> String
    #   resp.data.snapshots[0].volume_id #=> String
    #   resp.data.next_token #=> String
    #
    def list_snapshots_in_recycle_bin(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListSnapshotsInRecycleBinInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListSnapshotsInRecycleBinInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListSnapshotsInRecycleBin
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ListSnapshotsInRecycleBin
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ListSnapshotsInRecycleBin,
        params_class: Params::ListSnapshotsInRecycleBinOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :list_snapshots_in_recycle_bin
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies an attribute of the specified Elastic IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyAddressAttributeInput}.
    #
    # @option params [String] :allocation_id
    #   <p>[EC2-VPC] The allocation ID.</p>
    #
    # @option params [String] :domain_name
    #   <p>The domain name to modify for the IP address.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyAddressAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_address_attribute(
    #     allocation_id: 'AllocationId', # required
    #     domain_name: 'DomainName',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyAddressAttributeOutput
    #   resp.data.address #=> Types::AddressAttribute
    #   resp.data.address.public_ip #=> String
    #   resp.data.address.allocation_id #=> String
    #   resp.data.address.ptr_record #=> String
    #   resp.data.address.ptr_record_update #=> Types::PtrUpdateStatus
    #   resp.data.address.ptr_record_update.value #=> String
    #   resp.data.address.ptr_record_update.status #=> String
    #   resp.data.address.ptr_record_update.reason #=> String
    #
    def modify_address_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyAddressAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyAddressAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyAddressAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyAddressAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyAddressAttribute,
        params_class: Params::ModifyAddressAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_address_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Changes the opt-in status of the Local Zone and Wavelength Zone group for your
    #       account.</p>
    #          <p>Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">
    #   		DescribeAvailabilityZones</a> to view the value for <code>GroupName</code>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyAvailabilityZoneGroupInput}.
    #
    # @option params [String] :group_name
    #   <p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone
    #         group.</p>
    #
    # @option params [String] :opt_in_status
    #   <p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The
    #         only valid value is <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyAvailabilityZoneGroupOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_availability_zone_group(
    #     group_name: 'GroupName', # required
    #     opt_in_status: 'opted-in', # required - accepts ["opted-in", "not-opted-in"]
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyAvailabilityZoneGroupOutput
    #   resp.data.return #=> Boolean
    #
    def modify_availability_zone_group(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyAvailabilityZoneGroupInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyAvailabilityZoneGroupInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyAvailabilityZoneGroup
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyAvailabilityZoneGroup
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyAvailabilityZoneGroup,
        params_class: Params::ModifyAvailabilityZoneGroupOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_availability_zone_group
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You
    # 			cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings,
    # 			platform, Availability Zone, or instance eligibility. If you need to modify any of these
    # 			attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with
    # 			the required attributes.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyCapacityReservationInput}.
    #
    # @option params [String] :capacity_reservation_id
    #   <p>The ID of the Capacity Reservation.</p>
    #
    # @option params [Integer] :instance_count
    #   <p>The number of instances for which to reserve capacity. The number of instances can't be increased or
    #   		    	decreased by more than <code>1000</code> in a single request.</p>
    #
    # @option params [Time] :end_date
    #   <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
    #   			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
    #   				<code>expired</code> when it reaches its end date and time.</p>
    #   		       <p>The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify
    #   			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
    #   		       <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is
    #   				<code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is
    #   				<code>unlimited</code>.</p>
    #
    # @option params [String] :end_date_type
    #   <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
    #   			types:</p>
    #   		       <ul>
    #               <li>
    #                  <p>
    #                     <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not
    #   					provide an <code>EndDate</code> value if <code>EndDateType</code> is
    #   						<code>unlimited</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must
    #   					provide an <code>EndDate</code> value if <code>EndDateType</code> is
    #   						<code>limited</code>.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Boolean] :accept
    #   <p>Reserved. Capacity Reservations you have created are accepted by default.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :additional_info
    #   <p>Reserved for future use.</p>
    #
    # @return [Types::ModifyCapacityReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_capacity_reservation(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     instance_count: 1,
    #     end_date: Time.now,
    #     end_date_type: 'unlimited', # accepts ["unlimited", "limited"]
    #     accept: false,
    #     dry_run: false,
    #     additional_info: 'AdditionalInfo'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyCapacityReservationOutput
    #   resp.data.return #=> Boolean
    #
    def modify_capacity_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyCapacityReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyCapacityReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyCapacityReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyCapacityReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyCapacityReservation,
        params_class: Params::ModifyCapacityReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_capacity_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a Capacity Reservation Fleet.</p>
    # 		       <p>When you modify the total target capacity of a Capacity Reservation Fleet, the Fleet automatically
    # 			creates new Capacity Reservations, or modifies or cancels existing Capacity Reservations in the Fleet
    # 			to meet the new total target capacity. When you modify the end date for the Fleet, the end dates for
    # 			all of the individual Capacity Reservations in the Fleet are updated accordingly.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyCapacityReservationFleetInput}.
    #
    # @option params [String] :capacity_reservation_fleet_id
    #   <p>The ID of the Capacity Reservation Fleet to modify.</p>
    #
    # @option params [Integer] :total_target_capacity
    #   <p>The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value,
    #   			together with the instance type weights that you assign to each instance type used by the Fleet
    #   			determine the number of instances for which the Fleet reserves capacity. Both values are based on
    #   			units that make sense for your workload. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity">Total target capacity</a>
    #   			in the Amazon EC2 User Guide.</p>
    #
    # @option params [Time] :end_date
    #   <p>The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation
    #   			Fleet expires, its state changes to <code>expired</code> and all of the Capacity Reservations in the
    #   			Fleet expire.</p>	
    #   		       <p>The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you
    #   			specify <code>5/31/2019</code>, <code>13:30:55</code>, the Capacity Reservation Fleet is guaranteed
    #   			to expire between <code>13:30:55</code> and <code>14:30:55</code> on <code>5/31/2019</code>.</p>
    #   		       <p>You can't specify <b>EndDate</b> and <b>
    #   			RemoveEndDate</b> in the same request.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :remove_end_date
    #   <p>Indicates whether to remove the end date from the Capacity Reservation Fleet. If you remove the
    #   			end date, the Capacity Reservation Fleet does not expire and it remains active until you explicitly
    #   			cancel it using the <b>CancelCapacityReservationFleet</b> action.</p>
    #   		       <p>You can't specify <b>RemoveEndDate</b> and <b>
    #   			EndDate</b> in the same request.</p>
    #
    # @return [Types::ModifyCapacityReservationFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_capacity_reservation_fleet(
    #     capacity_reservation_fleet_id: 'CapacityReservationFleetId', # required
    #     total_target_capacity: 1,
    #     end_date: Time.now,
    #     dry_run: false,
    #     remove_end_date: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyCapacityReservationFleetOutput
    #   resp.data.return #=> Boolean
    #
    def modify_capacity_reservation_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyCapacityReservationFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyCapacityReservationFleetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyCapacityReservationFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyCapacityReservationFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyCapacityReservationFleet,
        params_class: Params::ModifyCapacityReservationFleetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_capacity_reservation_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyClientVpnEndpointInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint to modify.</p>
    #
    # @option params [String] :server_certificate_arn
    #   <p>The ARN of the server certificate to be used. The server certificate must be provisioned in
    #   			Certificate Manager (ACM).</p>
    #
    # @option params [ConnectionLogOptions] :connection_log_options
    #   <p>Information about the client connection logging options.</p>
    #   		       <p>If you enable client connection logging, data about client connections is sent to a
    #   			Cloudwatch Logs log stream. The following information is logged:</p>
    #   		       <ul>
    #               <li>
    #                  <p>Client connection requests</p>
    #               </li>
    #               <li>
    #                  <p>Client connection results (successful and unsuccessful)</p>
    #               </li>
    #               <li>
    #                  <p>Reasons for unsuccessful client connection requests</p>
    #               </li>
    #               <li>
    #                  <p>Client connection termination time</p>
    #               </li>
    #            </ul>
    #
    # @option params [DnsServersOptionsModifyStructure] :dns_servers
    #   <p>Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have
    #   			up to two DNS servers.</p>
    #
    # @option params [Integer] :vpn_port
    #   <p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
    #   	        <p>Valid Values: <code>443</code> | <code>1194</code>
    #            </p>
    #   	        <p>Default Value: <code>443</code>
    #            </p>
    #
    # @option params [String] :description
    #   <p>A brief description of the Client VPN endpoint.</p>
    #
    # @option params [Boolean] :split_tunnel
    #   <p>Indicates whether the VPN is split-tunnel.</p>
    #           <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel Client VPN endpoint</a> in the
    #           	<i>Client VPN Administrator Guide</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :security_group_ids
    #   <p>The IDs of one or more security groups to apply to the target network.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC to associate with the Client VPN endpoint.</p>
    #
    # @option params [String] :self_service_portal
    #   <p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>
    #
    # @option params [ClientConnectOptions] :client_connect_options
    #   <p>The options for managing connection authorization for new client connections.</p>
    #
    # @return [Types::ModifyClientVpnEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_client_vpn_endpoint(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     server_certificate_arn: 'ServerCertificateArn',
    #     connection_log_options: {
    #       enabled: false,
    #       cloudwatch_log_group: 'CloudwatchLogGroup',
    #       cloudwatch_log_stream: 'CloudwatchLogStream'
    #     },
    #     dns_servers: {
    #       custom_dns_servers: [
    #         'member'
    #       ],
    #       enabled: false
    #     },
    #     vpn_port: 1,
    #     description: 'Description',
    #     split_tunnel: false,
    #     dry_run: false,
    #     security_group_ids: [
    #       'member'
    #     ],
    #     vpc_id: 'VpcId',
    #     self_service_portal: 'enabled', # accepts ["enabled", "disabled"]
    #     client_connect_options: {
    #       enabled: false,
    #       lambda_function_arn: 'LambdaFunctionArn'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyClientVpnEndpointOutput
    #   resp.data.return #=> Boolean
    #
    def modify_client_vpn_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyClientVpnEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyClientVpnEndpointInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyClientVpnEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyClientVpnEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyClientVpnEndpoint,
        params_class: Params::ModifyClientVpnEndpointOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_client_vpn_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the default credit option for CPU usage of burstable performance instances.
    #             The default credit option is set at the account level per Amazon Web Services Region, and is specified
    #             per instance family. All new burstable performance instances in the account launch using
    #             the default credit option.</p>
    #         <p>
    #             <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which works at an Amazon Web Services Region
    #             level and modifies the credit option for each Availability Zone. All zones in a
    #             Region are updated within five minutes. But if instances are launched during this
    #             operation, they might not get the new credit option until the zone is updated. To verify
    #             whether the update has occurred, you can call <code>GetDefaultCreditSpecification</code> and check
    #             <code>DefaultCreditSpecification</code> for updates.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #             performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyDefaultCreditSpecificationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_family
    #   <p>The instance family.</p>
    #
    # @option params [String] :cpu_credits
    #   <p>The credit option for CPU usage of the instance family.</p>
    #           <p>Valid Values: <code>standard</code> | <code>unlimited</code>
    #            </p>
    #
    # @return [Types::ModifyDefaultCreditSpecificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_default_credit_specification(
    #     dry_run: false,
    #     instance_family: 't2', # required - accepts ["t2", "t3", "t3a", "t4g"]
    #     cpu_credits: 'CpuCredits' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyDefaultCreditSpecificationOutput
    #   resp.data.instance_family_credit_specification #=> Types::InstanceFamilyCreditSpecification
    #   resp.data.instance_family_credit_specification.instance_family #=> String, one of ["t2", "t3", "t3a", "t4g"]
    #   resp.data.instance_family_credit_specification.cpu_credits #=> String
    #
    def modify_default_credit_specification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyDefaultCreditSpecificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyDefaultCreditSpecificationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyDefaultCreditSpecification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyDefaultCreditSpecification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyDefaultCreditSpecification,
        params_class: Params::ModifyDefaultCreditSpecificationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_default_credit_specification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Changes the default KMS key for EBS encryption by default for your account in this Region.</p>
    #   	      <p>Amazon Web Services creates a unique Amazon Web Services managed KMS key in each Region for use with encryption by default. If
    #       you change the default KMS key to a symmetric customer managed KMS key, it is used instead of the Amazon Web Services
    #       managed KMS key. To reset the default KMS key to the Amazon Web Services managed KMS key for EBS, use <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric KMS keys.</p>
    #          <p>If you delete or disable the customer managed KMS key that you specified for use with
    #       encryption by default, your instances will fail to launch.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyEbsDefaultKmsKeyIdInput}.
    #
    # @option params [String] :kms_key_id
    #   <p>The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption.
    #         If this parameter is not specified, your KMS key for Amazon EBS is used. If <code>KmsKeyId</code> is
    #         specified, the encrypted state must be <code>true</code>.</p>
    #            <p>You can specify the KMS key using any of the following:</p>
    #            <ul>
    #               <li>
    #                  <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #               </li>
    #               <li>
    #                  <p>Key alias. For example, alias/ExampleAlias.</p>
    #               </li>
    #               <li>
    #                  <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
    #               </li>
    #               <li>
    #                  <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
    #               </li>
    #            </ul>
    #            <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,
    #         the action can appear to complete, but eventually fails.</p>
    #            <p>Amazon EBS does not support asymmetric KMS keys.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyEbsDefaultKmsKeyIdOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_ebs_default_kms_key_id(
    #     kms_key_id: 'KmsKeyId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyEbsDefaultKmsKeyIdOutput
    #   resp.data.kms_key_id #=> String
    #
    def modify_ebs_default_kms_key_id(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyEbsDefaultKmsKeyIdInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyEbsDefaultKmsKeyIdInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyEbsDefaultKmsKeyId
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyEbsDefaultKmsKeyId
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyEbsDefaultKmsKeyId,
        params_class: Params::ModifyEbsDefaultKmsKeyIdOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_ebs_default_kms_key_id
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified EC2 Fleet.</p>
    #          <p>You can only modify an EC2 Fleet request of type <code>maintain</code>.</p>
    #          <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p>
    #          <p>To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional
    #          Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation
    #          strategy is <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot Instance
    #          pool with the lowest price. If the allocation strategy is <code>diversified</code>, the
    #          EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy
    #          is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal
    #          capacity for the number of instances that are launching.</p>
    #          <p>To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open
    #          requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot
    #          Instances until the size of the fleet no longer exceeds the new target capacity. If the
    #          allocation strategy is <code>lowest-price</code>, the EC2 Fleet terminates the instances with
    #          the highest price per unit. If the allocation strategy is <code>capacity-optimized</code>,
    #          the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available
    #          Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the EC2 Fleet terminates
    #          instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep
    #          the fleet at its current size, but not replace any Spot Instances that are interrupted or
    #          that you terminate manually.</p>
    #          <p>If you are finished with your EC2 Fleet for now, but will use it again later, you can set the
    #          target capacity to 0.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyFleetInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :excess_capacity_termination_policy
    #   <p>Indicates whether running instances should be terminated if the total target capacity of
    #            the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>
    #
    # @option params [Array<FleetLaunchTemplateConfigRequest>] :launch_template_configs
    #   <p>The launch template and overrides.</p>
    #
    # @option params [String] :fleet_id
    #   <p>The ID of the EC2 Fleet.</p>
    #
    # @option params [TargetCapacitySpecificationRequest] :target_capacity_specification
    #   <p>The size of the EC2 Fleet.</p>
    #
    # @option params [String] :context
    #   <p>Reserved.</p>
    #
    # @return [Types::ModifyFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_fleet(
    #     dry_run: false,
    #     excess_capacity_termination_policy: 'no-termination', # accepts ["no-termination", "termination"]
    #     launch_template_configs: [
    #       {
    #         launch_template_specification: {
    #           launch_template_id: 'LaunchTemplateId',
    #           launch_template_name: 'LaunchTemplateName',
    #           version: 'Version'
    #         },
    #         overrides: [
    #           {
    #             instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #             max_price: 'MaxPrice',
    #             subnet_id: 'SubnetId',
    #             availability_zone: 'AvailabilityZone',
    #             weighted_capacity: 1.0,
    #             priority: 1.0,
    #             placement: {
    #               availability_zone: 'AvailabilityZone',
    #               affinity: 'Affinity',
    #               group_name: 'GroupName',
    #               partition_number: 1,
    #               host_id: 'HostId',
    #               tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #               spread_domain: 'SpreadDomain',
    #               host_resource_group_arn: 'HostResourceGroupArn'
    #             },
    #             instance_requirements: {
    #               v_cpu_count: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               memory_mi_b: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               cpu_manufacturers: [
    #                 'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #               ],
    #               memory_gi_b_per_v_cpu: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               excluded_instance_types: [
    #                 'member'
    #               ],
    #               instance_generations: [
    #                 'current' # accepts ["current", "previous"]
    #               ],
    #               spot_max_price_percentage_over_lowest_price: 1,
    #               on_demand_max_price_percentage_over_lowest_price: 1,
    #               bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #               burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #               require_hibernate_support: false,
    #               network_interface_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               local_storage: 'included', # accepts ["included", "required", "excluded"]
    #               local_storage_types: [
    #                 'hdd' # accepts ["hdd", "ssd"]
    #               ],
    #               total_local_storage_gb: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               baseline_ebs_bandwidth_mbps: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_types: [
    #                 'gpu' # accepts ["gpu", "fpga", "inference"]
    #               ],
    #               accelerator_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_manufacturers: [
    #                 'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #               ],
    #               accelerator_names: [
    #                 'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #               ],
    #               accelerator_total_memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               }
    #             }
    #           }
    #         ]
    #       }
    #     ],
    #     fleet_id: 'FleetId', # required
    #     target_capacity_specification: {
    #       total_target_capacity: 1, # required
    #       on_demand_target_capacity: 1,
    #       spot_target_capacity: 1,
    #       default_target_capacity_type: 'spot', # accepts ["spot", "on-demand"]
    #       target_capacity_unit_type: 'vcpu' # accepts ["vcpu", "memory-mib", "units"]
    #     },
    #     context: 'Context'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyFleetOutput
    #   resp.data.return #=> Boolean
    #
    def modify_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyFleetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyFleet,
        params_class: Params::ModifyFleetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyFpgaImageAttributeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :fpga_image_id
    #   <p>The ID of the AFI.</p>
    #
    # @option params [String] :attribute
    #   <p>The name of the attribute.</p>
    #
    # @option params [String] :operation_type
    #   <p>The operation type.</p>
    #
    # @option params [Array<String>] :user_ids
    #   <p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    #
    # @option params [Array<String>] :user_groups
    #   <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    #
    # @option params [Array<String>] :product_codes
    #   <p>The product codes. After you add a product code to an AFI, it can't be removed.
    #   		    This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    #
    # @option params [LoadPermissionModifications] :load_permission
    #   <p>The load permission for the AFI.</p>
    #
    # @option params [String] :description
    #   <p>A description for the AFI.</p>
    #
    # @option params [String] :name
    #   <p>A name for the AFI.</p>
    #
    # @return [Types::ModifyFpgaImageAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_fpga_image_attribute(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId', # required
    #     attribute: 'description', # accepts ["description", "name", "loadPermission", "productCodes"]
    #     operation_type: 'add', # accepts ["add", "remove"]
    #     user_ids: [
    #       'member'
    #     ],
    #     user_groups: [
    #       'member'
    #     ],
    #     product_codes: [
    #       'member'
    #     ],
    #     load_permission: {
    #       add: [
    #         {
    #           group: 'all', # accepts ["all"]
    #           user_id: 'UserId'
    #         }
    #       ],
    #     },
    #     description: 'Description',
    #     name: 'Name'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyFpgaImageAttributeOutput
    #   resp.data.fpga_image_attribute #=> Types::FpgaImageAttribute
    #   resp.data.fpga_image_attribute.fpga_image_id #=> String
    #   resp.data.fpga_image_attribute.name #=> String
    #   resp.data.fpga_image_attribute.description #=> String
    #   resp.data.fpga_image_attribute.load_permissions #=> Array<LoadPermission>
    #   resp.data.fpga_image_attribute.load_permissions[0] #=> Types::LoadPermission
    #   resp.data.fpga_image_attribute.load_permissions[0].user_id #=> String
    #   resp.data.fpga_image_attribute.load_permissions[0].group #=> String, one of ["all"]
    #   resp.data.fpga_image_attribute.product_codes #=> Array<ProductCode>
    #   resp.data.fpga_image_attribute.product_codes[0] #=> Types::ProductCode
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_id #=> String
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #
    def modify_fpga_image_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyFpgaImageAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyFpgaImageAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyFpgaImageAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyFpgaImageAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyFpgaImageAttribute,
        params_class: Params::ModifyFpgaImageAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_fpga_image_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled,
    #             any instances that you launch with a tenancy of <code>host</code> but without a specific host
    #         	ID are placed onto any available Dedicated Host in your account that has auto-placement enabled.
    #         	When auto-placement is disabled, you need to provide a host ID to have the instance launch onto
    #         	a specific host. If no host ID is provided, the instance is launched onto a suitable host with
    #         	auto-placement enabled.</p>
    #     	    <p>You can also use this API action to modify a Dedicated Host to support either multiple
    #     		instance types in an instance family, or to support a specific instance type only.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyHostsInput}.
    #
    # @option params [String] :auto_placement
    #   <p>Specify whether to enable or disable auto-placement.</p>
    #
    # @option params [Array<String>] :host_ids
    #   <p>The IDs of the Dedicated Hosts to modify.</p>
    #
    # @option params [String] :host_recovery
    #   <p>Indicates whether to enable or disable host recovery for the Dedicated Host. For more information,
    #   			see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html">
    #   				Host recovery</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [String] :instance_type
    #   <p>Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to
    #   			modify a Dedicated Host to support only a specific instance type.</p>
    #   		
    #   		       <p>If you want to modify a Dedicated Host to support multiple instance types in its current instance
    #   			family, omit this parameter and specify <b>InstanceFamily</b>
    #   			instead. You cannot specify <b>InstanceType</b> and
    #   			<b>InstanceFamily</b> in the same request.</p>
    #
    # @option params [String] :instance_family
    #   <p>Specifies the instance family to be supported by the Dedicated Host. Specify this parameter
    #   			to modify a Dedicated Host to support multiple instance types within its current
    #   			instance family.</p>
    #   		
    #   		       <p>If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter
    #   			and specify <b>InstanceType</b> instead. You cannot specify
    #   			<b>InstanceFamily</b> and <b>InstanceType</b>
    #   			in the same request.</p>
    #
    # @return [Types::ModifyHostsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_hosts(
    #     auto_placement: 'on', # accepts ["on", "off"]
    #     host_ids: [
    #       'member'
    #     ], # required
    #     host_recovery: 'on', # accepts ["on", "off"]
    #     instance_type: 'InstanceType',
    #     instance_family: 'InstanceFamily'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyHostsOutput
    #   resp.data.successful #=> Array<String>
    #   resp.data.successful[0] #=> String
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def modify_hosts(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyHostsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyHostsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyHosts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyHosts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyHosts,
        params_class: Params::ModifyHostsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_hosts
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the ID format for the specified resource on a per-Region basis. You can
    #             specify that resources should receive longer IDs (17-character IDs) when they are
    #             created.</p>
    #          <p>This request can only be used to modify longer ID settings for resource types that
    #             are within the opt-in period. Resources currently in their opt-in period include:
    #             <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #             <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #             <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #             <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
    #             | <code>network-acl-association</code> | <code>network-interface</code> |
    #             <code>network-interface-attachment</code> | <code>prefix-list</code> |
    #             <code>route-table</code> | <code>route-table-association</code> |
    #             <code>security-group</code> | <code>subnet</code> |
    #             <code>subnet-cidr-block-association</code> | <code>vpc</code> |
    #             <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    #          <p>This setting applies to the IAM user who makes the request; it does not apply to the
    #         entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user. If
    #         you're using this action as the root user, then these settings apply to the entire account,
    #         unless an IAM user explicitly overrides these settings for themselves. For more information,
    #         see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a>
    #         in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>Resources created with longer IDs are visible to all IAM roles and users, regardless
    #         of these settings and provided that they have permission to use the relevant
    #         <code>Describe</code> command for the resource type.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyIdFormatInput}.
    #
    # @option params [String] :resource
    #   <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #              <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #              <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #              <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
    #              | <code>network-acl-association</code> | <code>network-interface</code> |
    #              <code>network-interface-attachment</code> | <code>prefix-list</code> |
    #              <code>route-table</code> | <code>route-table-association</code> |
    #              <code>security-group</code> | <code>subnet</code> |
    #              <code>subnet-cidr-block-association</code> | <code>vpc</code> |
    #              <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    #            <p>Alternatively, use the <code>all-current</code> option to include all resource types that are
    #          currently within their opt-in period for longer IDs.</p>
    #
    # @option params [Boolean] :use_long_ids
    #   <p>Indicate whether the resource should use longer IDs (17-character IDs).</p>
    #
    # @return [Types::ModifyIdFormatOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_id_format(
    #     resource: 'Resource', # required
    #     use_long_ids: false # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyIdFormatOutput
    #
    def modify_id_format(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyIdFormatInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyIdFormatInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyIdFormat
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyIdFormat
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyIdFormat,
        params_class: Params::ModifyIdFormatOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_id_format
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root
    #        user for an account; or all IAM users, IAM roles, and the root user for an account. You can
    #        specify that resources should receive longer IDs (17-character IDs) when they are created. </p>
    #          <p>This request can only be used to modify longer ID settings for resource types that are
    #        within the opt-in period. Resources currently in their opt-in period include:
    #                 <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #                 <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #                 <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #                 <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
    #             | <code>network-acl-association</code> | <code>network-interface</code> |
    #                 <code>network-interface-attachment</code> | <code>prefix-list</code> |
    #                 <code>route-table</code> | <code>route-table-association</code> |
    #                 <code>security-group</code> | <code>subnet</code> |
    #                 <code>subnet-cidr-block-association</code> | <code>vpc</code> |
    #         <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
    #          <p>This setting applies to the principal specified in the request; it does not apply to the
    #       principal that makes the request. </p>
    #          <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these
    #       settings and provided that they have permission to use the relevant <code>Describe</code>
    #       command for the resource type.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyIdentityIdFormatInput}.
    #
    # @option params [String] :principal_arn
    #   <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify
    #          <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of
    #          the account.</p>
    #
    # @option params [String] :resource
    #   <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #             <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #             <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #             <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
    #             | <code>network-acl-association</code> | <code>network-interface</code> |
    #             <code>network-interface-attachment</code> | <code>prefix-list</code> |
    #             <code>route-table</code> | <code>route-table-association</code> |
    #             <code>security-group</code> | <code>subnet</code> |
    #             <code>subnet-cidr-block-association</code> | <code>vpc</code> |
    #             <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    #            <p>Alternatively, use the <code>all-current</code> option to include all resource types that are
    #             currently within their opt-in period for longer IDs.</p>
    #
    # @option params [Boolean] :use_long_ids
    #   <p>Indicates whether the resource should use longer IDs (17-character IDs)</p>
    #
    # @return [Types::ModifyIdentityIdFormatOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_identity_id_format(
    #     principal_arn: 'PrincipalArn', # required
    #     resource: 'Resource', # required
    #     use_long_ids: false # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyIdentityIdFormatOutput
    #
    def modify_identity_id_format(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyIdentityIdFormatInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyIdentityIdFormatInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyIdentityIdFormat
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyIdentityIdFormat
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyIdentityIdFormat,
        params_class: Params::ModifyIdentityIdFormatOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_identity_id_format
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time.
    #        You can use the <code>Attribute</code> parameter to specify the attribute or one of the following parameters:
    #        <code>Description</code> or <code>LaunchPermission</code>.</p>
    #    	     <p>Images with an Amazon Web Services Marketplace product code cannot be made public.</p>
    #          <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance
    #        and create an AMI from the instance.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyImageAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The name of the attribute to modify.</p>
    #            <p>Valid values: <code>description</code> | <code>launchPermission</code>
    #            </p>
    #
    # @option params [AttributeValue] :description
    #   <p>A new description for the AMI.</p>
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [LaunchPermissionModifications] :launch_permission
    #   <p>A new launch permission for the AMI.</p>
    #
    # @option params [String] :operation_type
    #   <p>The operation type.
    #          This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    #
    # @option params [Array<String>] :product_codes
    #   <p>Not supported.</p>
    #
    # @option params [Array<String>] :user_groups
    #   <p>The user groups.
    #          This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    #
    # @option params [Array<String>] :user_ids
    #   <p>The Amazon Web Services account IDs.
    #          This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    #
    # @option params [String] :value
    #   <p>The value of the attribute being modified.
    #          This parameter can be used only when the <code>Attribute</code> parameter is <code>description</code>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :organization_arns
    #   <p>The Amazon Resource Name (ARN) of an organization. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    #
    # @option params [Array<String>] :organizational_unit_arns
    #   <p>The Amazon Resource Name (ARN) of an organizational unit (OU). This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    #
    # @return [Types::ModifyImageAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_image_attribute(
    #     attribute: 'Attribute',
    #     description: {
    #       value: 'Value'
    #     },
    #     image_id: 'ImageId', # required
    #     launch_permission: {
    #       add: [
    #         {
    #           group: 'all', # accepts ["all"]
    #           user_id: 'UserId',
    #           organization_arn: 'OrganizationArn',
    #           organizational_unit_arn: 'OrganizationalUnitArn'
    #         }
    #       ],
    #     },
    #     operation_type: 'add', # accepts ["add", "remove"]
    #     product_codes: [
    #       'member'
    #     ],
    #     user_groups: [
    #       'member'
    #     ],
    #     user_ids: [
    #       'member'
    #     ],
    #     value: 'Value',
    #     dry_run: false,
    #     organization_arns: [
    #       'member'
    #     ],
    #     organizational_unit_arns: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyImageAttributeOutput
    #
    def modify_image_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyImageAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyImageAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyImageAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyImageAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyImageAttribute,
        params_class: Params::ModifyImageAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_image_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified attribute of the specified instance. You can specify only one
    #             attribute at a time.</p>
    #         <p>
    #             <b>Note: </b>Using this action to change the security groups
    #             associated with an elastic network interface (ENI) attached to an instance in a VPC can
    #             result in an error if the instance has more than one ENI. To change the security groups
    #             associated with an ENI attached to an instance that has multiple ENIs, we recommend that
    #             you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p>
    #         <p>To modify some attributes, the instance must be stopped. For more information, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modify a stopped instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstanceAttributeInput}.
    #
    # @option params [AttributeBooleanValue] :source_dest_check
    #   <p>Enable or disable source/destination checks, which ensure that the instance
    #               is either the source or the destination of any traffic that it receives.
    #               If the value is <code>true</code>, source/destination checks are enabled;
    #               otherwise, they are disabled. The default value is <code>true</code>.
    #               You must disable source/destination checks if the instance runs services
    #               such as network address translation, routing, or firewalls.</p>
    #
    # @option params [String] :attribute
    #   <p>The name of the attribute.</p>
    #
    # @option params [Array<InstanceBlockDeviceMappingSpecification>] :block_device_mappings
    #   <p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently
    #               attached. The volume must be owned by the caller. If no value is specified for
    #                   <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is
    #               deleted when the instance is terminated.</p>
    #           <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when
    #               you launch the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Update the block device mapping when launching an instance</a> in the
    #               <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [AttributeBooleanValue] :disable_api_termination
    #   <p>If the value is <code>true</code>, you can't terminate the instance using the Amazon
    #               EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot
    #               Instances.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [AttributeBooleanValue] :ebs_optimized
    #   <p>Specifies whether the instance is optimized for Amazon EBS I/O. This optimization
    #               provides dedicated throughput to Amazon EBS and an optimized configuration stack to
    #               provide optimal EBS I/O performance. This optimization isn't available with all instance
    #               types. Additional usage charges apply when using an EBS Optimized instance.</p>
    #
    # @option params [AttributeBooleanValue] :ena_support
    #   <p>Set to <code>true</code> to enable enhanced networking with ENA for the
    #               instance.</p>
    #           <p>This option is supported only for HVM instances. Specifying this option with a PV
    #               instance can make it unreachable.</p>
    #
    # @option params [Array<String>] :groups
    #   <p>[EC2-VPC] Replaces the security groups of the instance with the specified security groups.
    #               You must specify at least one security group, even if it's just the default security group for the VPC. You must
    #               specify the security group ID, not the security group name.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [AttributeValue] :instance_initiated_shutdown_behavior
    #   <p>Specifies whether an instance stops or terminates when you initiate shutdown from the
    #               instance (using the operating system command for system shutdown).</p>
    #
    # @option params [AttributeValue] :instance_type
    #   <p>Changes the instance type to the specified value. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
    #               types</a> in the <i>Amazon EC2 User Guide</i>. If the instance type is not valid,
    #               the error returned is <code>InvalidInstanceAttributeValue</code>.</p>
    #
    # @option params [AttributeValue] :kernel
    #   <p>Changes the instance's kernel to the specified value. We recommend that you use
    #               PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
    #
    # @option params [AttributeValue] :ramdisk
    #   <p>Changes the instance's RAM disk to the specified value. We recommend that you use
    #               PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
    #
    # @option params [AttributeValue] :sriov_net_support
    #   <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual
    #               Function interface for the instance.</p>
    #           <p>There is no way to disable enhanced networking with the Intel 82599 Virtual Function
    #               interface at this time.</p>
    #           <p>This option is supported only for HVM instances. Specifying this option with a PV
    #               instance can make it unreachable.</p>
    #
    # @option params [BlobAttributeValue] :user_data
    #   <p>Changes the instance's user data to the specified value. If you are using an Amazon Web Services SDK
    #               or command line tool, base64-encoding is performed for you, and you can load the text
    #               from a file. Otherwise, you must provide base64-encoded text.</p>
    #
    # @option params [String] :value
    #   <p>A new value for the attribute. Use only with the <code>kernel</code>,
    #                   <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or
    #                   <code>instanceInitiatedShutdownBehavior</code> attribute.</p>
    #
    # @return [Types::ModifyInstanceAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_attribute(
    #     source_dest_check: {
    #       value: false
    #     },
    #     attribute: 'instanceType', # accepts ["instanceType", "kernel", "ramdisk", "userData", "disableApiTermination", "instanceInitiatedShutdownBehavior", "rootDeviceName", "blockDeviceMapping", "productCodes", "sourceDestCheck", "groupSet", "ebsOptimized", "sriovNetSupport", "enaSupport", "enclaveOptions"]
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         ebs: {
    #           delete_on_termination: false,
    #           volume_id: 'VolumeId'
    #         },
    #         no_device: 'NoDevice',
    #         virtual_name: 'VirtualName'
    #       }
    #     ],
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ],
    #     instance_id: 'InstanceId', # required
    #     instance_initiated_shutdown_behavior: {
    #       value: 'Value'
    #     },
    #     user_data: {
    #       value: 'Value'
    #     },
    #     value: 'Value'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstanceAttributeOutput
    #
    def modify_instance_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstanceAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstanceAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstanceAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstanceAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstanceAttribute,
        params_class: Params::ModifyInstanceAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an
    # 			instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching
    # 			attributes, or run On-Demand Instance capacity.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstanceCapacityReservationAttributesInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance to be modified.</p>
    #
    # @option params [CapacityReservationSpecification] :capacity_reservation_specification
    #   <p>Information about the Capacity Reservation targeting option.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyInstanceCapacityReservationAttributesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_capacity_reservation_attributes(
    #     instance_id: 'InstanceId', # required
    #     capacity_reservation_specification: {
    #       capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #       capacity_reservation_target: {
    #         capacity_reservation_id: 'CapacityReservationId',
    #         capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #       }
    #     }, # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstanceCapacityReservationAttributesOutput
    #   resp.data.return #=> Boolean
    #
    def modify_instance_capacity_reservation_attributes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstanceCapacityReservationAttributesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstanceCapacityReservationAttributesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstanceCapacityReservationAttributes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstanceCapacityReservationAttributes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstanceCapacityReservationAttributes,
        params_class: Params::ModifyInstanceCapacityReservationAttributesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_capacity_reservation_attributes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the credit option for CPU usage on a running or stopped burstable performance
    #             instance. The credit options are <code>standard</code> and
    #             <code>unlimited</code>.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                 performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstanceCreditSpecificationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique, case-sensitive token that you provide to ensure idempotency of your
    #               modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #                   Idempotency</a>.</p>
    #
    # @option params [Array<InstanceCreditSpecificationRequest>] :instance_credit_specifications
    #   <p>Information about the credit option for CPU usage.</p>
    #
    # @return [Types::ModifyInstanceCreditSpecificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_credit_specification(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     instance_credit_specifications: [
    #       {
    #         instance_id: 'InstanceId',
    #         cpu_credits: 'CpuCredits'
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstanceCreditSpecificationOutput
    #   resp.data.successful_instance_credit_specifications #=> Array<SuccessfulInstanceCreditSpecificationItem>
    #   resp.data.successful_instance_credit_specifications[0] #=> Types::SuccessfulInstanceCreditSpecificationItem
    #   resp.data.successful_instance_credit_specifications[0].instance_id #=> String
    #   resp.data.unsuccessful_instance_credit_specifications #=> Array<UnsuccessfulInstanceCreditSpecificationItem>
    #   resp.data.unsuccessful_instance_credit_specifications[0] #=> Types::UnsuccessfulInstanceCreditSpecificationItem
    #   resp.data.unsuccessful_instance_credit_specifications[0].instance_id #=> String
    #   resp.data.unsuccessful_instance_credit_specifications[0].error #=> Types::UnsuccessfulInstanceCreditSpecificationItemError
    #   resp.data.unsuccessful_instance_credit_specifications[0].error.code #=> String, one of ["InvalidInstanceID.Malformed", "InvalidInstanceID.NotFound", "IncorrectInstanceState", "InstanceCreditSpecification.NotSupported"]
    #   resp.data.unsuccessful_instance_credit_specifications[0].error.message #=> String
    #
    def modify_instance_credit_specification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstanceCreditSpecificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstanceCreditSpecificationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstanceCreditSpecification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstanceCreditSpecification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstanceCreditSpecification,
        params_class: Params::ModifyInstanceCreditSpecificationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_credit_specification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the start time for a scheduled Amazon EC2 instance event.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstanceEventStartTimeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance with the scheduled event.</p>
    #
    # @option params [String] :instance_event_id
    #   <p>The ID of the event whose date and time you are modifying.</p>
    #
    # @option params [Time] :not_before
    #   <p>The new date and time when the event will take place.</p>
    #
    # @return [Types::ModifyInstanceEventStartTimeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_event_start_time(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     instance_event_id: 'InstanceEventId', # required
    #     not_before: Time.now # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstanceEventStartTimeOutput
    #   resp.data.event #=> Types::InstanceStatusEvent
    #   resp.data.event.instance_event_id #=> String
    #   resp.data.event.code #=> String, one of ["instance-reboot", "system-reboot", "system-maintenance", "instance-retirement", "instance-stop"]
    #   resp.data.event.description #=> String
    #   resp.data.event.not_after #=> Time
    #   resp.data.event.not_before #=> Time
    #   resp.data.event.not_before_deadline #=> Time
    #
    def modify_instance_event_start_time(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstanceEventStartTimeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstanceEventStartTimeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstanceEventStartTime
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstanceEventStartTime
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstanceEventStartTime,
        params_class: Params::ModifyInstanceEventStartTimeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_event_start_time
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified event window.</p>
    #          <p>You can define either a set of time ranges or a cron expression when modifying the event
    #          window, but not both.</p>
    #          <p>To modify the targets associated with the event window, use the <a>AssociateInstanceEventWindow</a> and <a>DisassociateInstanceEventWindow</a> API.</p>
    #          <p>If Amazon Web Services has already scheduled an event, modifying an event window won't change the time
    #          of the scheduled event.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstanceEventWindowInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :name
    #   <p>The name of the event window.</p>
    #
    # @option params [String] :instance_event_window_id
    #   <p>The ID of the event window.</p>
    #
    # @option params [Array<InstanceEventWindowTimeRangeRequest>] :time_ranges
    #   <p>The time ranges of the event window.</p>
    #
    # @option params [String] :cron_expression
    #   <p>The cron expression of the event window, for example, <code>* 0-4,20-23 * * 1,5</code>.</p>
    #            <p>Constraints:</p>
    #            <ul>
    #               <li>
    #                  <p>Only hour and day of the week values are supported.</p>
    #               </li>
    #               <li>
    #                  <p>For day of the week values, you can specify either integers <code>0</code> through
    #                     <code>6</code>, or alternative single values <code>SUN</code> through
    #                     <code>SAT</code>.</p>
    #               </li>
    #               <li>
    #                  <p>The minute, month, and year must be specified by <code>*</code>.</p>
    #               </li>
    #               <li>
    #                  <p>The hour value must be one or a multiple range, for example, <code>0-4</code> or
    #                     <code>0-4,20-23</code>.</p>
    #               </li>
    #               <li>
    #                  <p>Each hour range must be >= 2 hours, for example, <code>0-2</code> or
    #                     <code>20-23</code>.</p>
    #               </li>
    #               <li>
    #                  <p>The event window must be >= 4 hours. The combined total time ranges in the event
    #                  window must be >= 4 hours.</p>
    #               </li>
    #            </ul>
    #            <p>For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron</a> on the <i>Wikipedia
    #               website</i>.</p>
    #
    # @return [Types::ModifyInstanceEventWindowOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_event_window(
    #     dry_run: false,
    #     name: 'Name',
    #     instance_event_window_id: 'InstanceEventWindowId', # required
    #     time_ranges: [
    #       {
    #         start_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         start_hour: 1,
    #         end_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         end_hour: 1
    #       }
    #     ],
    #     cron_expression: 'CronExpression'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    #
    def modify_instance_event_window(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstanceEventWindowInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstanceEventWindowInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstanceEventWindow
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstanceEventWindow
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstanceEventWindow,
        params_class: Params::ModifyInstanceEventWindowOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_event_window
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modify the instance metadata parameters on a running or stopped instance. When you
    #             modify the parameters on a stopped instance, they are applied when the instance is
    #             started. When you modify the parameters on a running instance, the API responds with a
    #             state of “pending”. After the parameter modifications are successfully applied to the
    #             instance, the state of the modifications changes from “pending” to “applied” in
    #             subsequent describe-instances API calls. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>
    #           in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstanceMetadataOptionsInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :http_tokens
    #   <p>The state of token usage for your instance metadata requests. If the parameter is not
    #               specified in the request, the default state is <code>optional</code>.</p>
    #           <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
    #               with or without a signed token header on your request. If you retrieve the IAM role
    #               credentials without a token, the version 1.0 role credentials are returned. If you
    #               retrieve the IAM role credentials using a valid signed token, the version 2.0 role
    #               credentials are returned.</p>
    #           <p>If the state is <code>required</code>, you must send a signed token header with any
    #               instance metadata retrieval requests. In this state, retrieving the IAM role credential
    #               always returns the version 2.0 credentials; the version 1.0 credentials are not
    #               available.</p>
    #
    # @option params [Integer] :http_put_response_hop_limit
    #   <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
    #               number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained.</p>
    #           <p>Possible values: Integers from 1 to 64</p>
    #
    # @option params [String] :http_endpoint
    #   <p>Enables or disables the HTTP metadata endpoint on your instances. If
    #               this parameter is not specified, the existing state is maintained.</p>
    #           <p>If you specify a value of <code>disabled</code>, you cannot access your
    #               instance metadata.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is
    #               <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :http_protocol_ipv6
    #   <p>Enables or disables the IPv6 endpoint for the instance metadata service. This setting
    #               applies only if you have enabled the HTTP metadata endpoint.</p>
    #
    # @option params [String] :instance_metadata_tags
    #   <p>Set to <code>enabled</code> to allow access to instance tags from the instance
    #               metadata. Set to <code>disabled</code> to turn off access to instance tags from the
    #               instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with
    #                   instance tags using the instance metadata</a>.</p>
    #           <p>Default: <code>disabled</code>
    #            </p>
    #
    # @return [Types::ModifyInstanceMetadataOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_metadata_options(
    #     instance_id: 'InstanceId', # required
    #     http_tokens: 'optional', # accepts ["optional", "required"]
    #     http_put_response_hop_limit: 1,
    #     http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #     dry_run: false,
    #     http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #     instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstanceMetadataOptionsOutput
    #   resp.data.instance_id #=> String
    #   resp.data.instance_metadata_options #=> Types::InstanceMetadataOptionsResponse
    #   resp.data.instance_metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.instance_metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.instance_metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.instance_metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.instance_metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.instance_metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #
    def modify_instance_metadata_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstanceMetadataOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstanceMetadataOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstanceMetadataOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstanceMetadataOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstanceMetadataOptions,
        params_class: Params::ModifyInstanceMetadataOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_metadata_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the placement attributes for a specified instance. You can do the
    #             following:</p>
    #         <ul>
    #             <li>
    #                 <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
    #                         Host</a>. When affinity is set to <code>host</code> and the instance is
    #                     not associated with a specific Dedicated Host, the next time the instance is
    #                     launched, it is automatically associated with the host on which it lands. If the
    #                     instance is restarted or rebooted, this relationship persists.</p>
    #             </li>
    #             <li>
    #                 <p>Change the Dedicated Host with which an instance is associated.</p>
    #             </li>
    #             <li>
    #                 <p>Change the instance tenancy of an instance.</p>
    #             </li>
    #             <li>
    #                 <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement
    #                     group</a>.</p>
    #             </li>
    #          </ul>
    #         <p>At least one attribute for affinity, host ID, tenancy, or placement group name must
    #             be specified in the request. Affinity and tenancy can be modified in the same
    #             request.</p>
    #         <p>To modify the host ID, tenancy, placement group, or partition for an instance, the
    #             instance must be in the <code>stopped</code> state.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyInstancePlacementInput}.
    #
    # @option params [String] :affinity
    #   <p>The affinity setting for the instance.</p>
    #
    # @option params [String] :group_name
    #   <p>The name of the placement group in which to place the instance. For spread placement
    #               groups, the instance must have a tenancy of <code>default</code>. For cluster and
    #               partition placement groups, the instance must have a tenancy of <code>default</code> or
    #                   <code>dedicated</code>.</p>
    #           <p>To remove an instance from a placement group, specify an empty string
    #               ("").</p>
    #
    # @option params [String] :host_id
    #   <p>The ID of the Dedicated Host with which to associate the instance.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance that you are modifying.</p>
    #
    # @option params [String] :tenancy
    #   <p>The tenancy for the instance.</p>
    #
    #           <note>
    #               <p>For T3 instances, you can't change the tenancy from <code>dedicated</code>
    #               to <code>host</code>, or from <code>host</code> to <code>dedicated</code>.
    #               Attempting to make one of these unsupported tenancy changes results in the
    #               <code>InvalidTenancy</code> error code.</p>
    #            </note>
    #
    # @option params [Integer] :partition_number
    #   <p>The number of the partition in which to place the instance. Valid only if the
    #               placement group strategy is set to <code>partition</code>.</p>
    #
    # @option params [String] :host_resource_group_arn
    #   <p>The ARN of the host resource group in which to place the instance.</p>
    #
    # @return [Types::ModifyInstancePlacementOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_instance_placement(
    #     affinity: 'default', # accepts ["default", "host"]
    #     group_name: 'GroupName',
    #     host_id: 'HostId',
    #     instance_id: 'InstanceId', # required
    #     tenancy: 'dedicated', # accepts ["dedicated", "host"]
    #     partition_number: 1,
    #     host_resource_group_arn: 'HostResourceGroupArn'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyInstancePlacementOutput
    #   resp.data.return #=> Boolean
    #
    def modify_instance_placement(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyInstancePlacementInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyInstancePlacementInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyInstancePlacement
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyInstancePlacement
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyInstancePlacement,
        params_class: Params::ModifyInstancePlacementOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_instance_placement
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modify the configurations of an IPAM.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::ModifyIpamInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_id
    #   <p>The ID of the IPAM you want to modify.</p>
    #
    # @option params [String] :description
    #   <p>The description of the IPAM you want to modify.</p>
    #
    # @option params [Array<AddIpamOperatingRegion>] :add_operating_regions
    #   <p>Choose the operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
    #            discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    #            <p>For more information about operating Regions, see <a href="/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [Array<RemoveIpamOperatingRegion>] :remove_operating_regions
    #   <p>The operating Regions to remove.</p>
    #
    # @return [Types::ModifyIpamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_ipam(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     description: 'Description',
    #     add_operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     remove_operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyIpamOutput
    #   resp.data.ipam #=> Types::Ipam
    #   resp.data.ipam.owner_id #=> String
    #   resp.data.ipam.ipam_id #=> String
    #   resp.data.ipam.ipam_arn #=> String
    #   resp.data.ipam.ipam_region #=> String
    #   resp.data.ipam.public_default_scope_id #=> String
    #   resp.data.ipam.private_default_scope_id #=> String
    #   resp.data.ipam.scope_count #=> Integer
    #   resp.data.ipam.description #=> String
    #   resp.data.ipam.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam.operating_regions[0].region_name #=> String
    #   resp.data.ipam.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam.tags #=> Array<Tag>
    #   resp.data.ipam.tags[0] #=> Types::Tag
    #   resp.data.ipam.tags[0].key #=> String
    #   resp.data.ipam.tags[0].value #=> String
    #
    def modify_ipam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyIpamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyIpamInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyIpam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyIpam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyIpam,
        params_class: Params::ModifyIpamOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_ipam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modify the configurations of an IPAM pool.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/mod-pool-ipam.html">Modify a pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::ModifyIpamPoolInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool you want to modify.</p>
    #
    # @option params [String] :description
    #   <p>The description of the IPAM pool you want to modify.</p>
    #
    # @option params [Boolean] :auto_import
    #   <p>If true, IPAM will continuously look for resources within the CIDR range of this pool
    #            and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for
    #            these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import
    #            a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently
    #            marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM
    #            discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.
    #         </p>
    #            <p>A locale must be set on the pool for this feature to work.</p>
    #
    # @option params [Integer] :allocation_min_netmask_length
    #   <p>The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. Possible
    #            netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128. The minimum netmask
    #            length must be less than the maximum netmask length.</p>
    #
    # @option params [Integer] :allocation_max_netmask_length
    #   <p>The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. Possible
    #            netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.The maximum netmask
    #            length must be greater than the minimum netmask length.</p>
    #
    # @option params [Integer] :allocation_default_netmask_length
    #   <p>The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16.</p>
    #
    # @option params [Boolean] :clear_allocation_default_netmask_length
    #   <p>Clear the default netmask length allocation rule for this pool.</p>
    #
    # @option params [Array<RequestIpamResourceTag>] :add_allocation_resource_tags
    #   <p>Add tag allocation rules to a pool. For more information about allocation rules, see <a href="/vpc/latest/ipam/create-top-ipam.html">Create a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @option params [Array<RequestIpamResourceTag>] :remove_allocation_resource_tags
    #   <p>Remove tag allocation rules from a pool.</p>
    #
    # @return [Types::ModifyIpamPoolOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_ipam_pool(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     description: 'Description',
    #     auto_import: false,
    #     allocation_min_netmask_length: 1,
    #     allocation_max_netmask_length: 1,
    #     allocation_default_netmask_length: 1,
    #     clear_allocation_default_netmask_length: false,
    #     add_allocation_resource_tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ],
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyIpamPoolOutput
    #   resp.data.ipam_pool #=> Types::IpamPool
    #   resp.data.ipam_pool.owner_id #=> String
    #   resp.data.ipam_pool.ipam_pool_id #=> String
    #   resp.data.ipam_pool.source_ipam_pool_id #=> String
    #   resp.data.ipam_pool.ipam_pool_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pool.ipam_arn #=> String
    #   resp.data.ipam_pool.ipam_region #=> String
    #   resp.data.ipam_pool.locale #=> String
    #   resp.data.ipam_pool.pool_depth #=> Integer
    #   resp.data.ipam_pool.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_pool.state_message #=> String
    #   resp.data.ipam_pool.description #=> String
    #   resp.data.ipam_pool.auto_import #=> Boolean
    #   resp.data.ipam_pool.publicly_advertisable #=> Boolean
    #   resp.data.ipam_pool.address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pool.allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pool.allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pool.allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pool.allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pool.tags #=> Array<Tag>
    #   resp.data.ipam_pool.tags[0] #=> Types::Tag
    #   resp.data.ipam_pool.tags[0].key #=> String
    #   resp.data.ipam_pool.tags[0].value #=> String
    #   resp.data.ipam_pool.aws_service #=> String, one of ["ec2"]
    #
    def modify_ipam_pool(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyIpamPoolInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyIpamPoolInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyIpamPool
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyIpamPool
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyIpamPool,
        params_class: Params::ModifyIpamPoolOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_ipam_pool
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modify a resource CIDR. You can use this action to transfer resource CIDRs between scopes and ignore resource CIDRs that you do not want to manage. If set to false, the resource will not be tracked for overlap, it cannot be auto-imported into a pool, and it will be removed from any pool it has an allocation in.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/move-resource-ipam.html">Move resource CIDRs between scopes</a> and <a href="/vpc/latest/ipam/change-monitoring-state-ipam.html">Change the monitoring state of resource CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyIpamResourceCidrInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :resource_id
    #   <p>The ID of the resource you want to modify.</p>
    #
    # @option params [String] :resource_cidr
    #   <p>The CIDR of the resource you want to modify.</p>
    #
    # @option params [String] :resource_region
    #   <p>The Amazon Web Services Region of the resource you want to modify.</p>
    #
    # @option params [String] :current_ipam_scope_id
    #   <p>The ID of the current scope that the resource CIDR is in.</p>
    #
    # @option params [String] :destination_ipam_scope_id
    #   <p>The ID of the scope you want to transfer the resource CIDR to.</p>
    #
    # @option params [Boolean] :monitored
    #   <p>Determines if the resource is monitored by IPAM. If a resource is monitored, the resource is discovered by IPAM and you can view details about the resource’s CIDR.</p>
    #
    # @return [Types::ModifyIpamResourceCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_ipam_resource_cidr(
    #     dry_run: false,
    #     resource_id: 'ResourceId', # required
    #     resource_cidr: 'ResourceCidr', # required
    #     resource_region: 'ResourceRegion', # required
    #     current_ipam_scope_id: 'CurrentIpamScopeId', # required
    #     destination_ipam_scope_id: 'DestinationIpamScopeId',
    #     monitored: false # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyIpamResourceCidrOutput
    #   resp.data.ipam_resource_cidr #=> Types::IpamResourceCidr
    #   resp.data.ipam_resource_cidr.ipam_id #=> String
    #   resp.data.ipam_resource_cidr.ipam_scope_id #=> String
    #   resp.data.ipam_resource_cidr.ipam_pool_id #=> String
    #   resp.data.ipam_resource_cidr.resource_region #=> String
    #   resp.data.ipam_resource_cidr.resource_owner_id #=> String
    #   resp.data.ipam_resource_cidr.resource_id #=> String
    #   resp.data.ipam_resource_cidr.resource_name #=> String
    #   resp.data.ipam_resource_cidr.resource_cidr #=> String
    #   resp.data.ipam_resource_cidr.resource_type #=> String, one of ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool"]
    #   resp.data.ipam_resource_cidr.resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_resource_cidr.resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_resource_cidr.resource_tags[0].key #=> String
    #   resp.data.ipam_resource_cidr.resource_tags[0].value #=> String
    #   resp.data.ipam_resource_cidr.ip_usage #=> Float
    #   resp.data.ipam_resource_cidr.compliance_status #=> String, one of ["compliant", "noncompliant", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidr.management_state #=> String, one of ["managed", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidr.overlap_status #=> String, one of ["overlapping", "nonoverlapping", "ignored"]
    #   resp.data.ipam_resource_cidr.vpc_id #=> String
    #
    def modify_ipam_resource_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyIpamResourceCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyIpamResourceCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyIpamResourceCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyIpamResourceCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyIpamResourceCidr,
        params_class: Params::ModifyIpamResourceCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_ipam_resource_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modify an IPAM scope.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyIpamScopeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_scope_id
    #   <p>The ID of the scope you want to modify.</p>
    #
    # @option params [String] :description
    #   <p>The description of the scope you want to modify.</p>
    #
    # @return [Types::ModifyIpamScopeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_ipam_scope(
    #     dry_run: false,
    #     ipam_scope_id: 'IpamScopeId', # required
    #     description: 'Description'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyIpamScopeOutput
    #   resp.data.ipam_scope #=> Types::IpamScope
    #   resp.data.ipam_scope.owner_id #=> String
    #   resp.data.ipam_scope.ipam_scope_id #=> String
    #   resp.data.ipam_scope.ipam_scope_arn #=> String
    #   resp.data.ipam_scope.ipam_arn #=> String
    #   resp.data.ipam_scope.ipam_region #=> String
    #   resp.data.ipam_scope.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scope.is_default #=> Boolean
    #   resp.data.ipam_scope.description #=> String
    #   resp.data.ipam_scope.pool_count #=> Integer
    #   resp.data.ipam_scope.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.ipam_scope.tags #=> Array<Tag>
    #   resp.data.ipam_scope.tags[0] #=> Types::Tag
    #   resp.data.ipam_scope.tags[0].key #=> String
    #   resp.data.ipam_scope.tags[0].value #=> String
    #
    def modify_ipam_scope(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyIpamScopeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyIpamScopeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyIpamScope
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyIpamScope
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyIpamScope,
        params_class: Params::ModifyIpamScopeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_ipam_scope
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a launch template. You can specify which version of the launch template to
    #             set as the default version. When launching an instance, the default version applies when
    #             a launch template version is not specified.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyLaunchTemplateInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #                   Idempotency</a>.</p>
    #           <p>Constraint: Maximum 128 ASCII characters.</p>
    #
    # @option params [String] :launch_template_id
    #   <p>The ID of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [String] :launch_template_name
    #   <p>The name of the launch template. You must specify either the launch template ID or
    #               launch template name in the request.</p>
    #
    # @option params [String] :default_version
    #   <p>The version number of the launch template to set as the default version.</p>
    #
    # @return [Types::ModifyLaunchTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_launch_template(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     default_version: 'DefaultVersion'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyLaunchTemplateOutput
    #   resp.data.launch_template #=> Types::LaunchTemplate
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.create_time #=> Time
    #   resp.data.launch_template.created_by #=> String
    #   resp.data.launch_template.default_version_number #=> Integer
    #   resp.data.launch_template.latest_version_number #=> Integer
    #   resp.data.launch_template.tags #=> Array<Tag>
    #   resp.data.launch_template.tags[0] #=> Types::Tag
    #   resp.data.launch_template.tags[0].key #=> String
    #   resp.data.launch_template.tags[0].value #=> String
    #
    def modify_launch_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyLaunchTemplateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyLaunchTemplateInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyLaunchTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyLaunchTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyLaunchTemplate,
        params_class: Params::ModifyLaunchTemplateOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_launch_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified managed prefix list.</p>
    #         <p>Adding or removing entries in a prefix list creates a new version of the prefix list.
    #             Changing the name of the prefix list does not affect the version.</p>
    #         <p>If you specify a current version number that does not match the true current version
    #             number, the request fails.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyManagedPrefixListInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @option params [Integer] :current_version
    #   <p>The current version of the prefix list.</p>
    #
    # @option params [String] :prefix_list_name
    #   <p>A name for the prefix list.</p>
    #
    # @option params [Array<AddPrefixListEntry>] :add_entries
    #   <p>One or more entries to add to the prefix list.</p>
    #
    # @option params [Array<RemovePrefixListEntry>] :remove_entries
    #   <p>One or more entries to remove from the prefix list.</p>
    #
    # @option params [Integer] :max_entries
    #   <p>The maximum number of entries for the prefix list. You cannot modify the entries
    #               of a prefix list and modify the size of a prefix list at the same time.</p>
    #           <p>If any of the resources that reference the prefix list cannot support the new
    #               maximum size, the modify operation fails. Check the state message for the IDs of
    #               the first ten resources that do not support the new maximum size.</p>
    #
    # @return [Types::ModifyManagedPrefixListOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_managed_prefix_list(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     current_version: 1,
    #     prefix_list_name: 'PrefixListName',
    #     add_entries: [
    #       {
    #         cidr: 'Cidr', # required
    #         description: 'Description'
    #       }
    #     ],
    #     remove_entries: [
    #       {
    #         cidr: 'Cidr' # required
    #       }
    #     ],
    #     max_entries: 1
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyManagedPrefixListOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    #
    def modify_managed_prefix_list(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyManagedPrefixListInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyManagedPrefixListInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyManagedPrefixList
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyManagedPrefixList
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyManagedPrefixList,
        params_class: Params::ModifyManagedPrefixListOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_managed_prefix_list
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified network interface attribute. You can specify only one
    #             attribute at a time. You can use this action to attach and detach security groups from
    #             an existing EC2 instance.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyNetworkInterfaceAttributeInput}.
    #
    # @option params [NetworkInterfaceAttachmentChanges] :attachment
    #   <p>Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.</p>
    #
    # @option params [AttributeValue] :description
    #   <p>A description for the network interface.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :groups
    #   <p>Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @option params [AttributeBooleanValue] :source_dest_check
    #   <p>Enable or disable source/destination checks, which ensure that the instance
    #               is either the source or the destination of any traffic that it receives.
    #               If the value is <code>true</code>, source/destination checks are enabled;
    #               otherwise, they are disabled. The default value is <code>true</code>.
    #               You must disable source/destination checks if the instance runs services
    #               such as network address translation, routing, or firewalls.</p>
    #
    # @return [Types::ModifyNetworkInterfaceAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_network_interface_attribute(
    #     attachment: {
    #       attachment_id: 'AttachmentId',
    #       delete_on_termination: false
    #     },
    #     description: {
    #       value: 'Value'
    #     },
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ],
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     source_dest_check: {
    #       value: false
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyNetworkInterfaceAttributeOutput
    #
    def modify_network_interface_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyNetworkInterfaceAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyNetworkInterfaceAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyNetworkInterfaceAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyNetworkInterfaceAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyNetworkInterfaceAttribute,
        params_class: Params::ModifyNetworkInterfaceAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_network_interface_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the options for instance hostnames for the specified instance.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyPrivateDnsNameOptionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [String] :private_dns_hostname_type
    #   <p>The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be
    #               based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based
    #               on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance
    #               IPv4 address or the instance ID.</p>
    #
    # @option params [Boolean] :enable_resource_name_dns_a_record
    #   <p>Indicates whether to respond to DNS queries for instance hostnames with DNS A records.</p>
    #
    # @option params [Boolean] :enable_resource_name_dns_aaaa_record
    #   <p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.</p>
    #
    # @return [Types::ModifyPrivateDnsNameOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_private_dns_name_options(
    #     dry_run: false,
    #     instance_id: 'InstanceId',
    #     private_dns_hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #     enable_resource_name_dns_a_record: false,
    #     enable_resource_name_dns_aaaa_record: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyPrivateDnsNameOptionsOutput
    #   resp.data.return #=> Boolean
    #
    def modify_private_dns_name_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyPrivateDnsNameOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyPrivateDnsNameOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyPrivateDnsNameOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyPrivateDnsNameOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyPrivateDnsNameOptions,
        params_class: Params::ModifyPrivateDnsNameOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_private_dns_name_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the Availability Zone, instance count, instance type, or network platform
    #             (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be
    #             modified must be identical, except for Availability Zone, network platform, and instance
    #             type.</p>
    # 		       <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved
    # 				Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyReservedInstancesInput}.
    #
    # @option params [Array<String>] :reserved_instances_ids
    #   <p>The IDs of the Reserved Instances to modify.</p>
    #
    # @option params [String] :client_token
    #   <p>A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see
    #      		<a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [Array<ReservedInstancesConfiguration>] :target_configurations
    #   <p>The configuration settings for the Reserved Instances to modify.</p>
    #
    # @return [Types::ModifyReservedInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_reserved_instances(
    #     reserved_instances_ids: [
    #       'member'
    #     ], # required
    #     client_token: 'ClientToken',
    #     target_configurations: [
    #       {
    #         availability_zone: 'AvailabilityZone',
    #         instance_count: 1,
    #         instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #         platform: 'Platform',
    #         scope: 'Availability Zone' # accepts ["Availability Zone", "Region"]
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyReservedInstancesOutput
    #   resp.data.reserved_instances_modification_id #=> String
    #
    def modify_reserved_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyReservedInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyReservedInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyReservedInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyReservedInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyReservedInstances,
        params_class: Params::ModifyReservedInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_reserved_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the rules of a security group.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifySecurityGroupRulesInput}.
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group.</p>
    #
    # @option params [Array<SecurityGroupRuleUpdate>] :security_group_rules
    #   <p>Information about the security group properties to update.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifySecurityGroupRulesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_security_group_rules(
    #     group_id: 'GroupId', # required
    #     security_group_rules: [
    #       {
    #         security_group_rule_id: 'SecurityGroupRuleId',
    #         security_group_rule: {
    #           ip_protocol: 'IpProtocol',
    #           from_port: 1,
    #           to_port: 1,
    #           cidr_ipv4: 'CidrIpv4',
    #           cidr_ipv6: 'CidrIpv6',
    #           prefix_list_id: 'PrefixListId',
    #           referenced_group_id: 'ReferencedGroupId',
    #           description: 'Description'
    #         }
    #       }
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifySecurityGroupRulesOutput
    #   resp.data.return #=> Boolean
    #
    def modify_security_group_rules(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifySecurityGroupRulesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifySecurityGroupRulesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifySecurityGroupRules
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifySecurityGroupRules
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifySecurityGroupRules,
        params_class: Params::ModifySecurityGroupRulesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_security_group_rules
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Adds or removes permission settings for the specified snapshot. You may add or remove
    #       specified Amazon Web Services account IDs from a snapshot's list of create volume permissions, but you cannot
    #       do both in a single operation. If you need to both add and remove account IDs for a snapshot,
    #       you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.</p>
    #          <p>Encrypted snapshots and snapshots with Amazon Web Services Marketplace product codes cannot be made
    #       public. Snapshots encrypted with your default KMS key cannot be shared with other accounts.</p>
    #          <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifySnapshotAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    #
    # @option params [CreateVolumePermissionModifications] :create_volume_permission
    #   <p>A JSON representation of the snapshot attribute modification.</p>
    #
    # @option params [Array<String>] :group_names
    #   <p>The group to modify for the snapshot.</p>
    #
    # @option params [String] :operation_type
    #   <p>The type of operation to perform to the attribute.</p>
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the snapshot.</p>
    #
    # @option params [Array<String>] :user_ids
    #   <p>The account ID to modify for the snapshot.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifySnapshotAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_snapshot_attribute(
    #     attribute: 'productCodes', # accepts ["productCodes", "createVolumePermission"]
    #     create_volume_permission: {
    #       add: [
    #         {
    #           group: 'all', # accepts ["all"]
    #           user_id: 'UserId'
    #         }
    #       ],
    #     },
    #     group_names: [
    #       'member'
    #     ],
    #     operation_type: 'add', # accepts ["add", "remove"]
    #     snapshot_id: 'SnapshotId', # required
    #     user_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifySnapshotAttributeOutput
    #
    def modify_snapshot_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifySnapshotAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifySnapshotAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifySnapshotAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifySnapshotAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifySnapshotAttribute,
        params_class: Params::ModifySnapshotAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_snapshot_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Archives an Amazon EBS snapshot. When you archive a snapshot, it is converted to a full
    #       snapshot that includes all of the blocks of data that were written to the volume at the
    #       time the snapshot was created, and moved from the standard tier to the archive
    #       tier. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-archive.html">Archive Amazon EBS snapshots</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifySnapshotTierInput}.
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the snapshot.</p>
    #
    # @option params [String] :storage_tier
    #   <p>The name of the storage tier. You must specify <code>archive</code>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifySnapshotTierOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_snapshot_tier(
    #     snapshot_id: 'SnapshotId', # required
    #     storage_tier: 'archive', # accepts ["archive"]
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifySnapshotTierOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.tiering_start_time #=> Time
    #
    def modify_snapshot_tier(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifySnapshotTierInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifySnapshotTierInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifySnapshotTier
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifySnapshotTier
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifySnapshotTier,
        params_class: Params::ModifySnapshotTierOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_snapshot_tier
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified Spot Fleet request.</p>
    #         <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p>
    #         <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code>
    #             state.</p>
    #         <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the
    #             additional Spot Instances according to the allocation strategy for the Spot Fleet
    #             request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches
    #             instances using the Spot Instance pool with the lowest price. If the allocation strategy
    #             is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot
    #             Instance pools. If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet
    #             launches instances from Spot Instance pools with optimal capacity for the number of instances
    #             that are launching.</p>
    #         <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet
    #             cancels any open requests that exceed the new target capacity. You can request that the
    #             Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the
    #             new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot
    #             Fleet terminates the instances with the highest price per unit. If the allocation
    #             strategy is <code>capacityOptimized</code>, the Spot Fleet terminates the instances in
    #             the Spot Instance pools that have the least available Spot Instance capacity. If the allocation
    #             strategy is <code>diversified</code>, the Spot Fleet terminates instances across the
    #             Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet
    #             at its current size, but not replace any Spot Instances that are interrupted or that you
    #             terminate manually.</p>
    #         <p>If you are finished with your Spot Fleet for now, but will use it again later, you can
    #             set the target capacity to 0.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifySpotFleetRequestInput}.
    #
    # @option params [String] :excess_capacity_termination_policy
    #   <p>Indicates whether running Spot Instances should be terminated if the target capacity
    #               of the Spot Fleet request is decreased below the current size of the Spot Fleet.</p>
    #
    # @option params [Array<LaunchTemplateConfig>] :launch_template_configs
    #   <p>The launch template and overrides. You can only use this parameter if you specified a
    #               launch template (<code>LaunchTemplateConfigs</code>) in your Spot Fleet request. If you
    #               specified <code>LaunchSpecifications</code> in your Spot Fleet request, then omit this
    #               parameter.</p>
    #
    # @option params [String] :spot_fleet_request_id
    #   <p>The ID of the Spot Fleet request.</p>
    #
    # @option params [Integer] :target_capacity
    #   <p>The size of the fleet.</p>
    #
    # @option params [Integer] :on_demand_target_capacity
    #   <p>The number of On-Demand Instances in the fleet.</p>
    #
    # @option params [String] :context
    #   <p>Reserved.</p>
    #
    # @return [Types::ModifySpotFleetRequestOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_spot_fleet_request(
    #     excess_capacity_termination_policy: 'noTermination', # accepts ["noTermination", "default"]
    #     launch_template_configs: [
    #       {
    #         launch_template_specification: {
    #           launch_template_id: 'LaunchTemplateId',
    #           launch_template_name: 'LaunchTemplateName',
    #           version: 'Version'
    #         },
    #         overrides: [
    #           {
    #             instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #             spot_price: 'SpotPrice',
    #             subnet_id: 'SubnetId',
    #             availability_zone: 'AvailabilityZone',
    #             weighted_capacity: 1.0,
    #             priority: 1.0,
    #             instance_requirements: {
    #               v_cpu_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               cpu_manufacturers: [
    #                 'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #               ],
    #               memory_gi_b_per_v_cpu: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               excluded_instance_types: [
    #                 'member'
    #               ],
    #               instance_generations: [
    #                 'current' # accepts ["current", "previous"]
    #               ],
    #               spot_max_price_percentage_over_lowest_price: 1,
    #               on_demand_max_price_percentage_over_lowest_price: 1,
    #               bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #               burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #               require_hibernate_support: false,
    #               network_interface_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               local_storage: 'included', # accepts ["included", "required", "excluded"]
    #               local_storage_types: [
    #                 'hdd' # accepts ["hdd", "ssd"]
    #               ],
    #               total_local_storage_gb: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               baseline_ebs_bandwidth_mbps: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_types: [
    #                 'gpu' # accepts ["gpu", "fpga", "inference"]
    #               ],
    #               accelerator_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_manufacturers: [
    #                 'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #               ],
    #               accelerator_names: [
    #                 'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #               ],
    #               accelerator_total_memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               }
    #             }
    #           }
    #         ]
    #       }
    #     ],
    #     spot_fleet_request_id: 'SpotFleetRequestId', # required
    #     target_capacity: 1,
    #     on_demand_target_capacity: 1,
    #     context: 'Context'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifySpotFleetRequestOutput
    #   resp.data.return #=> Boolean
    #
    def modify_spot_fleet_request(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifySpotFleetRequestInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifySpotFleetRequestInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifySpotFleetRequest
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifySpotFleetRequest
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifySpotFleetRequest,
        params_class: Params::ModifySpotFleetRequestOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_spot_fleet_request
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a subnet attribute. You can only modify one attribute at a time.</p>
    # 	
    # 	        <p>Use this action to modify subnets on Amazon Web Services Outposts.</p>
    #         <ul>
    #             <li>
    #                 <p>To modify a subnet on an Outpost rack, set both
    #                         <code>MapCustomerOwnedIpOnLaunch</code> and
    #                         <code>CustomerOwnedIpv4Pool</code>. These two parameters act as a single
    #                     attribute.</p>
    #             </li>
    #             <li>
    #                 <p>To modify a subnet on an Outpost server, set either
    #                         <code>EnableLniAtDeviceIndex</code> or
    #                     <code>DisableLniAtDeviceIndex</code>.</p>
    #             </li>
    #          </ul>
    # 	
    # 	        <p>For more information about Amazon Web Services Outposts, see the following:</p>
    # 	
    # 	        <ul>
    #             <li>
    #                <p>
    #                   <a href="https://docs.aws.amazon.com/outposts/latest/userguide/how-servers-work.html">Outpost servers</a>
    #                </p>
    #             </li>
    #             <li>
    #                <p>
    #                   <a href="https://docs.aws.amazon.com/outposts/latest/userguide/how-racks-work.html">Outpost racks</a>
    #                </p>
    #             </li>
    #          </ul>
    #
    # @param [Hash] params
    #   See {Types::ModifySubnetAttributeInput}.
    #
    # @option params [AttributeBooleanValue] :assign_ipv6_address_on_creation
    #   <p>Specify <code>true</code> to indicate that network interfaces created in the
    #               specified subnet should be assigned an IPv6 address. This includes a network interface
    #               that's created when launching an instance into the subnet (the instance therefore
    #               receives an IPv6 address). </p>
    #           <p>If you enable the IPv6 addressing feature for your subnet, your network interface
    #               or instance only receives an IPv6 address if it's created using version
    #                   <code>2016-11-15</code> or later of the Amazon EC2 API.</p>
    #
    # @option params [AttributeBooleanValue] :map_public_ip_on_launch
    #   <p>Specify <code>true</code> to indicate that network interfaces attached to instances created in the
    #               specified subnet should be assigned a public IPv4 address.</p>
    #
    # @option params [String] :subnet_id
    #   <p>The ID of the subnet.</p>
    #
    # @option params [AttributeBooleanValue] :map_customer_owned_ip_on_launch
    #   <p>Specify <code>true</code> to indicate that network interfaces  attached to instances created in the
    #               specified subnet should be assigned a customer-owned IPv4 address.</p>
    #           <p>When this value is <code>true</code>, you must specify the customer-owned IP pool using <code>CustomerOwnedIpv4Pool</code>.</p>
    #
    # @option params [String] :customer_owned_ipv4_pool
    #   <p>The customer-owned IPv4 address pool associated with the subnet.</p>
    #           <p>You must set this value when you specify <code>true</code> for <code>MapCustomerOwnedIpOnLaunch</code>.</p>
    #
    # @option params [AttributeBooleanValue] :enable_dns64
    #   <p>Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet
    #               should return synthetic IPv6 addresses for IPv4-only destinations.</p>
    #
    # @option params [String] :private_dns_hostname_type_on_launch
    #   <p>The type of hostnames to assign to instances in the subnet at launch. For IPv4 only subnets, an
    #               instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance
    #               DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS
    #               names use the instance IPv4 address or the instance ID.</p>
    #
    # @option params [AttributeBooleanValue] :enable_resource_name_dns_a_record_on_launch
    #   <p>Indicates whether to respond to DNS queries for instance hostnames with DNS A records.</p>
    #
    # @option params [AttributeBooleanValue] :enable_resource_name_dns_aaaa_record_on_launch
    #   <p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.</p>
    #
    # @option params [Integer] :enable_lni_at_device_index
    #   <p>
    #               Indicates the device position for local network interfaces in this subnet. For example,
    #               <code>1</code> indicates local network interfaces in this subnet are the secondary
    #               network interface (eth1). A local network interface cannot be the primary network
    #               interface (eth0).
    #           </p>
    #
    # @option params [AttributeBooleanValue] :disable_lni_at_device_index
    #   <p>
    #               Specify <code>true</code> to indicate that local network interfaces at the current
    #               position should be disabled.
    #           </p>
    #
    # @return [Types::ModifySubnetAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_subnet_attribute(
    #     assign_ipv6_address_on_creation: {
    #       value: false
    #     },
    #     subnet_id: 'SubnetId', # required
    #     customer_owned_ipv4_pool: 'CustomerOwnedIpv4Pool',
    #     private_dns_hostname_type_on_launch: 'ip-name', # accepts ["ip-name", "resource-name"]
    #     enable_lni_at_device_index: 1,
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifySubnetAttributeOutput
    #
    def modify_subnet_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifySubnetAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifySubnetAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifySubnetAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifySubnetAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifySubnetAttribute,
        params_class: Params::ModifySubnetAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_subnet_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Allows or restricts mirroring network services.</p>
    #          <p> By default, Amazon DNS network services are not eligible for Traffic Mirror. Use <code>AddNetworkServices</code> to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored.
    #          When you no longer want to mirror network services, use <code>RemoveNetworkServices</code> to remove the network services from the Traffic Mirror filter.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::ModifyTrafficMirrorFilterNetworkServicesInput}.
    #
    # @option params [String] :traffic_mirror_filter_id
    #   <p>The ID of the Traffic Mirror filter.</p>
    #
    # @option params [Array<String>] :add_network_services
    #   <p>The network service, for example Amazon DNS, that you want to mirror.</p>
    #
    # @option params [Array<String>] :remove_network_services
    #   <p>The network service, for example Amazon DNS, that you no longer want to mirror.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyTrafficMirrorFilterNetworkServicesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_traffic_mirror_filter_network_services(
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     add_network_services: [
    #       'amazon-dns' # accepts ["amazon-dns"]
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyTrafficMirrorFilterNetworkServicesOutput
    #   resp.data.traffic_mirror_filter #=> Types::TrafficMirrorFilter
    #   resp.data.traffic_mirror_filter.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0] #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_number #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].protocol #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].description #=> String
    #   resp.data.traffic_mirror_filter.egress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.network_services #=> Array<String>
    #   resp.data.traffic_mirror_filter.network_services[0] #=> String, one of ["amazon-dns"]
    #   resp.data.traffic_mirror_filter.description #=> String
    #   resp.data.traffic_mirror_filter.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_filter.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_filter.tags[0].key #=> String
    #   resp.data.traffic_mirror_filter.tags[0].value #=> String
    #
    def modify_traffic_mirror_filter_network_services(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyTrafficMirrorFilterNetworkServicesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyTrafficMirrorFilterNetworkServicesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyTrafficMirrorFilterNetworkServices
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyTrafficMirrorFilterNetworkServices
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyTrafficMirrorFilterNetworkServices,
        params_class: Params::ModifyTrafficMirrorFilterNetworkServicesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_traffic_mirror_filter_network_services
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified Traffic Mirror rule.</p>
    #          <p>
    #             <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must both be an IPv4
    #          range or an IPv6 range.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyTrafficMirrorFilterRuleInput}.
    #
    # @option params [String] :traffic_mirror_filter_rule_id
    #   <p>The ID of the Traffic Mirror rule.</p>
    #
    # @option params [String] :traffic_direction
    #   <p>The type of traffic to assign to the rule.</p>
    #
    # @option params [Integer] :rule_number
    #   <p>The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
    #            direction. The rules are processed in ascending order by rule number.</p>
    #
    # @option params [String] :rule_action
    #   <p>The action to assign to the rule.</p>
    #
    # @option params [TrafficMirrorPortRangeRequest] :destination_port_range
    #   <p>The destination ports that are associated with the Traffic Mirror rule.</p>
    #
    # @option params [TrafficMirrorPortRangeRequest] :source_port_range
    #   <p>The port range to assign to the Traffic Mirror rule.</p>
    #
    # @option params [Integer] :protocol
    #   <p>The protocol, for example TCP, to assign to the Traffic Mirror rule.</p>
    #
    # @option params [String] :destination_cidr_block
    #   <p>The destination CIDR block to assign to the Traffic Mirror rule.</p>
    #
    # @option params [String] :source_cidr_block
    #   <p>The source CIDR block to assign to the Traffic Mirror rule.</p>
    #
    # @option params [String] :description
    #   <p>The description to assign to the Traffic Mirror rule.</p>
    #
    # @option params [Array<String>] :remove_fields
    #   <p>The properties that you want to remove from the Traffic Mirror filter rule.</p>
    #            <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyTrafficMirrorFilterRuleOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_traffic_mirror_filter_rule(
    #     traffic_mirror_filter_rule_id: 'TrafficMirrorFilterRuleId', # required
    #     traffic_direction: 'ingress', # accepts ["ingress", "egress"]
    #     rule_number: 1,
    #     rule_action: 'accept', # accepts ["accept", "reject"]
    #     destination_port_range: {
    #       from_port: 1,
    #       to_port: 1
    #     },
    #     protocol: 1,
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     source_cidr_block: 'SourceCidrBlock',
    #     description: 'Description',
    #     remove_fields: [
    #       'destination-port-range' # accepts ["destination-port-range", "source-port-range", "protocol", "description"]
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyTrafficMirrorFilterRuleOutput
    #   resp.data.traffic_mirror_filter_rule #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter_rule.rule_number #=> Integer
    #   resp.data.traffic_mirror_filter_rule.rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter_rule.protocol #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.description #=> String
    #
    def modify_traffic_mirror_filter_rule(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyTrafficMirrorFilterRuleInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyTrafficMirrorFilterRuleInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyTrafficMirrorFilterRule
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyTrafficMirrorFilterRule
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyTrafficMirrorFilterRule,
        params_class: Params::ModifyTrafficMirrorFilterRuleOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_traffic_mirror_filter_rule
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a Traffic Mirror session.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyTrafficMirrorSessionInput}.
    #
    # @option params [String] :traffic_mirror_session_id
    #   <p>The ID of the Traffic Mirror session.</p>
    #
    # @option params [String] :traffic_mirror_target_id
    #   <p>The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.</p>
    #
    # @option params [String] :traffic_mirror_filter_id
    #   <p>The ID of the Traffic Mirror filter.</p>
    #
    # @option params [Integer] :packet_length
    #   <p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.</p>
    #
    # @option params [Integer] :session_number
    #   <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p>
    #            <p>Valid values are 1-32766.</p>
    #
    # @option params [Integer] :virtual_network_id
    #   <p>The virtual network ID of the Traffic Mirror session.</p>
    #
    # @option params [String] :description
    #   <p>The description to assign to the Traffic Mirror session.</p>
    #
    # @option params [Array<String>] :remove_fields
    #   <p>The properties that you want to remove from the Traffic Mirror session.</p>
    #            <p>When you remove a property from a Traffic Mirror session, the property is set to the default.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyTrafficMirrorSessionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_traffic_mirror_session(
    #     traffic_mirror_session_id: 'TrafficMirrorSessionId', # required
    #     traffic_mirror_target_id: 'TrafficMirrorTargetId',
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId',
    #     packet_length: 1,
    #     session_number: 1,
    #     virtual_network_id: 1,
    #     description: 'Description',
    #     remove_fields: [
    #       'packet-length' # accepts ["packet-length", "description", "virtual-network-id"]
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyTrafficMirrorSessionOutput
    #   resp.data.traffic_mirror_session #=> Types::TrafficMirrorSession
    #   resp.data.traffic_mirror_session.traffic_mirror_session_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_session.network_interface_id #=> String
    #   resp.data.traffic_mirror_session.owner_id #=> String
    #   resp.data.traffic_mirror_session.packet_length #=> Integer
    #   resp.data.traffic_mirror_session.session_number #=> Integer
    #   resp.data.traffic_mirror_session.virtual_network_id #=> Integer
    #   resp.data.traffic_mirror_session.description #=> String
    #   resp.data.traffic_mirror_session.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_session.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_session.tags[0].key #=> String
    #   resp.data.traffic_mirror_session.tags[0].value #=> String
    #
    def modify_traffic_mirror_session(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyTrafficMirrorSessionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyTrafficMirrorSessionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyTrafficMirrorSession
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyTrafficMirrorSession
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyTrafficMirrorSession,
        params_class: Params::ModifyTrafficMirrorSessionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_traffic_mirror_session
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified transit gateway. When you modify a transit gateway, the modified options are applied to new transit gateway attachments only. Your existing transit gateway attachments are not modified.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyTransitGatewayInput}.
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [String] :description
    #   <p>The description for the transit gateway.</p>
    #
    # @option params [ModifyTransitGatewayOptions] :options
    #   <p>The options to modify.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyTransitGatewayOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_transit_gateway(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     description: 'Description',
    #     options: {
    #       add_transit_gateway_cidr_blocks: [
    #         'member'
    #       ],
    #       vpn_ecmp_support: 'enable', # accepts ["enable", "disable"]
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       auto_accept_shared_attachments: 'enable', # accepts ["enable", "disable"]
    #       default_route_table_association: 'enable', # accepts ["enable", "disable"]
    #       association_default_route_table_id: 'AssociationDefaultRouteTableId',
    #       default_route_table_propagation: 'enable', # accepts ["enable", "disable"]
    #       propagation_default_route_table_id: 'PropagationDefaultRouteTableId'
    #     },
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyTransitGatewayOutput
    #   resp.data.transit_gateway #=> Types::TransitGateway
    #   resp.data.transit_gateway.transit_gateway_id #=> String
    #   resp.data.transit_gateway.transit_gateway_arn #=> String
    #   resp.data.transit_gateway.state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateway.owner_id #=> String
    #   resp.data.transit_gateway.description #=> String
    #   resp.data.transit_gateway.creation_time #=> Time
    #   resp.data.transit_gateway.options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateway.options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway.options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.association_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.tags #=> Array<Tag>
    #   resp.data.transit_gateway.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway.tags[0].key #=> String
    #   resp.data.transit_gateway.tags[0].value #=> String
    #
    def modify_transit_gateway(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyTransitGatewayInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyTransitGatewayInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyTransitGateway
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyTransitGateway
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyTransitGateway,
        params_class: Params::ModifyTransitGatewayOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_transit_gateway
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a reference (route) to a prefix list in a specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyTransitGatewayPrefixListReferenceInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment to which traffic is routed.</p>
    #
    # @option params [Boolean] :blackhole
    #   <p>Indicates whether to drop traffic that matches this route.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyTransitGatewayPrefixListReferenceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_transit_gateway_prefix_list_reference(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     prefix_list_id: 'PrefixListId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyTransitGatewayPrefixListReferenceOutput
    #   resp.data.transit_gateway_prefix_list_reference #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_reference.blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_id #=> String
    #
    def modify_transit_gateway_prefix_list_reference(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyTransitGatewayPrefixListReferenceInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyTransitGatewayPrefixListReferenceInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyTransitGatewayPrefixListReference
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyTransitGatewayPrefixListReference
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyTransitGatewayPrefixListReference,
        params_class: Params::ModifyTransitGatewayPrefixListReferenceOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_transit_gateway_prefix_list_reference
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified VPC attachment.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyTransitGatewayVpcAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Array<String>] :add_subnet_ids
    #   <p>The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.</p>
    #
    # @option params [Array<String>] :remove_subnet_ids
    #   <p>The IDs of one or more subnets to remove.</p>
    #
    # @option params [ModifyTransitGatewayVpcAttachmentRequestOptions] :options
    #   <p>The new VPC attachment options.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyTransitGatewayVpcAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     add_subnet_ids: [
    #       'member'
    #     ],
    #     options: {
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       ipv6_support: 'enable', # accepts ["enable", "disable"]
    #       appliance_mode_support: 'enable' # accepts ["enable", "disable"]
    #     },
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    #
    def modify_transit_gateway_vpc_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyTransitGatewayVpcAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyTransitGatewayVpcAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyTransitGatewayVpcAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyTransitGatewayVpcAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyTransitGatewayVpcAttachment,
        params_class: Params::ModifyTransitGatewayVpcAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_transit_gateway_vpc_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>You can modify several parameters of an existing EBS volume, including volume size, volume
    #       type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance
    #       type, you might be able to apply these changes without stopping the instance or detaching the
    #       volume from it. For more information about modifying EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> (Linux instances)
    #       or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> (Windows instances).</p>
    #          <p>When you complete a resize operation on your volume, you need to extend the volume's
    #       file-system size to take advantage of the new storage capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extend a Linux file system</a> or
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extend a Windows file system</a>.</p>
    #          <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For
    #       information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a
    #       modification using <a>DescribeVolumesModifications</a>. For information
    #       about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a>.</p>
    #          <p>With previous-generation instance types, resizing an EBS volume might require detaching and
    #       reattaching the volume or stopping and restarting the instance.</p>
    #          <p>If you reach the maximum volume modification rate per volume limit, you must wait
    #       at least six hours before applying further modifications to the affected EBS volume.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVolumeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the volume.</p>
    #
    # @option params [Integer] :size
    #   <p>The target size of the volume, in GiB. The target volume size must be greater than or
    #         equal to the existing size of the volume.</p>
    #            <p>The following are the supported volumes sizes for each volume type:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>gp2</code> and <code>gp3</code>: 1-16,384</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>io1</code> and <code>io2</code>: 4-16,384</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>st1</code> and <code>sc1</code>: 125-16,384</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>standard</code>: 1-1,024</p>
    #               </li>
    #            </ul>
    #            <p>Default: The existing size is retained.</p>
    #
    # @option params [String] :volume_type
    #   <p>The target EBS volume type of the volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #            <p>Default: The existing type is retained.</p>
    #
    # @option params [Integer] :iops
    #   <p>The target IOPS rate of the volume. This parameter is valid only for <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes.</p>
    #            <p>The following are the supported values for each volume type:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>gp3</code>: 3,000-16,000 IOPS</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>io1</code>: 100-64,000 IOPS</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>io2</code>: 100-64,000 IOPS</p>
    #               </li>
    #            </ul>
    #            <p>Default: The existing value is retained if you keep the same volume type. If you change
    #         the volume type to <code>io1</code>, <code>io2</code>, or <code>gp3</code>, the default is 3,000.</p>
    #
    # @option params [Integer] :throughput
    #   <p>The target throughput of the volume, in MiB/s. This parameter is valid only for <code>gp3</code> volumes.
    #         The maximum value is 1,000.</p>
    #            <p>Default: The existing value is retained if the source and target volume type is <code>gp3</code>.
    #         Otherwise, the default value is 125.</p>
    #     	      <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>
    #
    # @option params [Boolean] :multi_attach_enabled
    #   <p>Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the
    #   		volume to up to 16 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">
    #   			Nitro-based instances</a> in the same Availability Zone. This parameter is
    #   		supported with <code>io1</code> and <code>io2</code> volumes only. For more information, see
    #   		<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html">
    #   			Amazon EBS Multi-Attach</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @return [Types::ModifyVolumeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_volume(
    #     dry_run: false,
    #     volume_id: 'VolumeId', # required
    #     size: 1,
    #     volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #     iops: 1,
    #     throughput: 1,
    #     multi_attach_enabled: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVolumeOutput
    #   resp.data.volume_modification #=> Types::VolumeModification
    #   resp.data.volume_modification.volume_id #=> String
    #   resp.data.volume_modification.modification_state #=> String, one of ["modifying", "optimizing", "completed", "failed"]
    #   resp.data.volume_modification.status_message #=> String
    #   resp.data.volume_modification.target_size #=> Integer
    #   resp.data.volume_modification.target_iops #=> Integer
    #   resp.data.volume_modification.target_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volume_modification.target_throughput #=> Integer
    #   resp.data.volume_modification.target_multi_attach_enabled #=> Boolean
    #   resp.data.volume_modification.original_size #=> Integer
    #   resp.data.volume_modification.original_iops #=> Integer
    #   resp.data.volume_modification.original_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volume_modification.original_throughput #=> Integer
    #   resp.data.volume_modification.original_multi_attach_enabled #=> Boolean
    #   resp.data.volume_modification.progress #=> Integer
    #   resp.data.volume_modification.start_time #=> Time
    #   resp.data.volume_modification.end_time #=> Time
    #
    def modify_volume(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVolumeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVolumeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVolume
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVolume
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVolume,
        params_class: Params::ModifyVolumeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_volume
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a volume attribute.</p>
    #          <p>By default, all I/O operations for the volume are suspended when the data on the volume is
    #       determined to be potentially inconsistent, to prevent undetectable, latent data corruption.
    #       The I/O access to the volume can be resumed by first enabling I/O access and then checking the
    #       data consistency on your volume.</p>
    #          <p>You can change the default behavior to resume I/O operations. We recommend that you change
    #       this only for boot volumes or for volumes that are stateless or disposable.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVolumeAttributeInput}.
    #
    # @option params [AttributeBooleanValue] :auto_enable_io
    #   <p>Indicates whether the volume should be auto-enabled for I/O operations.</p>
    #
    # @option params [String] :volume_id
    #   <p>The ID of the volume.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyVolumeAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_volume_attribute(
    #     auto_enable_io: {
    #       value: false
    #     },
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVolumeAttributeOutput
    #
    def modify_volume_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVolumeAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVolumeAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVolumeAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVolumeAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVolumeAttribute,
        params_class: Params::ModifyVolumeAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_volume_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the specified attribute of the specified VPC.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcAttributeInput}.
    #
    # @option params [AttributeBooleanValue] :enable_dns_hostnames
    #   <p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
    #            <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>
    #
    # @option params [AttributeBooleanValue] :enable_dns_support
    #   <p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to
    #   			the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP
    #   			address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon
    #   			provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is
    #   			not enabled.</p>
    #            <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @return [Types::ModifyVpcAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_attribute(
    #     enable_dns_hostnames: {
    #       value: false
    #     },
    #     vpc_id: 'VpcId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcAttributeOutput
    #
    def modify_vpc_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcAttribute,
        params_class: Params::ModifyVpcAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies attributes of a specified VPC endpoint. The attributes that you can modify
    #             depend on the type of VPC endpoint (interface, gateway, or Gateway Load Balancer). For more information, see
    #             <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC
    #                 Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcEndpointInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_endpoint_id
    #   <p>The ID of the endpoint.</p>
    #
    # @option params [Boolean] :reset_policy
    #   <p>(Gateway endpoint) Specify <code>true</code> to reset the policy document to the
    #               default policy. The default policy allows full access to the service.</p>
    #
    # @option params [String] :policy_document
    #   <p>(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must
    #               be in valid JSON format.</p>
    #
    # @option params [Array<String>] :add_route_table_ids
    #   <p>(Gateway endpoint) One or more route tables IDs to associate with the endpoint.</p>
    #
    # @option params [Array<String>] :remove_route_table_ids
    #   <p>(Gateway endpoint) One or more route table IDs to disassociate from the endpoint.</p>
    #
    # @option params [Array<String>] :add_subnet_ids
    #   <p>(Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.</p>
    #
    # @option params [Array<String>] :remove_subnet_ids
    #   <p>(Interface endpoint) One or more subnets IDs in which to remove the endpoint.</p>
    #
    # @option params [Array<String>] :add_security_group_ids
    #   <p>(Interface endpoint) One or more security group IDs to associate with the network interface.</p>
    #
    # @option params [Array<String>] :remove_security_group_ids
    #   <p>(Interface endpoint) One or more security group IDs to disassociate from the network interface.</p>
    #
    # @option params [Boolean] :private_dns_enabled
    #   <p>(Interface endpoint) Indicates whether a private hosted zone is associated with the
    #               VPC.</p>
    #
    # @return [Types::ModifyVpcEndpointOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_endpoint(
    #     dry_run: false,
    #     vpc_endpoint_id: 'VpcEndpointId', # required
    #     reset_policy: false,
    #     policy_document: 'PolicyDocument',
    #     add_route_table_ids: [
    #       'member'
    #     ],
    #     add_subnet_ids: [
    #       'member'
    #     ],
    #     add_security_group_ids: [
    #       'member'
    #     ],
    #     private_dns_enabled: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcEndpointOutput
    #   resp.data.return #=> Boolean
    #
    def modify_vpc_endpoint(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcEndpointInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcEndpointInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcEndpoint
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcEndpoint
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcEndpoint,
        params_class: Params::ModifyVpcEndpointOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_endpoint
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies a connection notification for VPC endpoint or VPC endpoint service. You
    #             can change the SNS topic for the notification, or the events for which to be notified. </p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcEndpointConnectionNotificationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :connection_notification_id
    #   <p>The ID of the notification.</p>
    #
    # @option params [String] :connection_notification_arn
    #   <p>The ARN for the SNS topic for the notification.</p>
    #
    # @option params [Array<String>] :connection_events
    #   <p>One or more events for the endpoint. Valid values are <code>Accept</code>,
    #                   <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    #
    # @return [Types::ModifyVpcEndpointConnectionNotificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_endpoint_connection_notification(
    #     dry_run: false,
    #     connection_notification_id: 'ConnectionNotificationId', # required
    #     connection_notification_arn: 'ConnectionNotificationArn',
    #     connection_events: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcEndpointConnectionNotificationOutput
    #   resp.data.return_value #=> Boolean
    #
    def modify_vpc_endpoint_connection_notification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcEndpointConnectionNotificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcEndpointConnectionNotificationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcEndpointConnectionNotification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcEndpointConnectionNotification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcEndpointConnectionNotification,
        params_class: Params::ModifyVpcEndpointConnectionNotificationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_endpoint_connection_notification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the attributes of your VPC endpoint service configuration. You can change the
    #             Network Load Balancers or Gateway Load Balancers for your service, and you can specify whether acceptance is
    #             required for requests to connect to your endpoint service through an interface VPC
    #             endpoint.</p>
    # 	        <p>If you set or modify the private DNS name, you must prove that you own the private DNS
    #             domain name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service
    #                 Private DNS Name Verification</a> in the
    #             <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcEndpointServiceConfigurationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the service.</p>
    #
    # @option params [String] :private_dns_name
    #   <p>(Interface endpoint configuration) The private DNS name to assign to the endpoint service.</p>
    #
    # @option params [Boolean] :remove_private_dns_name
    #   <p>(Interface endpoint configuration) Removes the private DNS name of the endpoint service.</p>
    #
    # @option params [Boolean] :acceptance_required
    #   <p>Indicates whether requests to create an endpoint to your service must be accepted.</p>
    #
    # @option params [Array<String>] :add_network_load_balancer_arns
    #   <p>The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service
    #               configuration.</p>
    #
    # @option params [Array<String>] :remove_network_load_balancer_arns
    #   <p>The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service
    #               configuration.</p>
    #
    # @option params [Array<String>] :add_gateway_load_balancer_arns
    #   <p>The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your service
    #               configuration.</p>
    #
    # @option params [Array<String>] :remove_gateway_load_balancer_arns
    #   <p>The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from your service
    #               configuration.</p>
    #
    # @return [Types::ModifyVpcEndpointServiceConfigurationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_endpoint_service_configuration(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     private_dns_name: 'PrivateDnsName',
    #     remove_private_dns_name: false,
    #     acceptance_required: false,
    #     add_network_load_balancer_arns: [
    #       'member'
    #     ],
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcEndpointServiceConfigurationOutput
    #   resp.data.return #=> Boolean
    #
    def modify_vpc_endpoint_service_configuration(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcEndpointServiceConfigurationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcEndpointServiceConfigurationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcEndpointServiceConfiguration
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcEndpointServiceConfiguration
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcEndpointServiceConfiguration,
        params_class: Params::ModifyVpcEndpointServiceConfigurationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_endpoint_service_configuration
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the payer responsibility for your VPC endpoint service.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcEndpointServicePayerResponsibilityInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the service.</p>
    #
    # @option params [String] :payer_responsibility
    #   <p>The entity that is responsible for the endpoint costs. The default is the endpoint owner.
    #               If you set the payer responsibility to the service owner, you cannot set it back to the
    #               endpoint owner.</p>
    #
    # @return [Types::ModifyVpcEndpointServicePayerResponsibilityOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_endpoint_service_payer_responsibility(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     payer_responsibility: 'ServiceOwner' # required - accepts ["ServiceOwner"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcEndpointServicePayerResponsibilityOutput
    #   resp.data.return_value #=> Boolean
    #
    def modify_vpc_endpoint_service_payer_responsibility(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcEndpointServicePayerResponsibilityInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcEndpointServicePayerResponsibilityInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcEndpointServicePayerResponsibility
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcEndpointServicePayerResponsibility
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcEndpointServicePayerResponsibility,
        params_class: Params::ModifyVpcEndpointServicePayerResponsibilityOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_endpoint_service_payer_responsibility
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the permissions for your <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC endpoint service</a>. You can add or remove permissions for service consumers (IAM users,
    # 	        IAM roles, and Amazon Web Services accounts) to connect to your endpoint service.</p>
    # 	        <p>If you grant permissions to all principals, the service is public. Any users who know the name of a
    # 	        public service can send a request to attach an endpoint. If the service does not require manual approval,
    # 	        attachments are automatically approved.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcEndpointServicePermissionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the service.</p>
    #
    # @option params [Array<String>] :add_allowed_principals
    #   <p>The Amazon Resource Names (ARN) of one or more principals.
    #   	        Permissions are granted to the principals in this list.
    #   	        To grant permissions to all principals, specify an asterisk (*).</p>
    #
    # @option params [Array<String>] :remove_allowed_principals
    #   <p>The Amazon Resource Names (ARN) of one or more principals.
    #   	        Permissions are revoked for principals in this list.</p>
    #
    # @return [Types::ModifyVpcEndpointServicePermissionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_endpoint_service_permissions(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     add_allowed_principals: [
    #       'member'
    #     ],
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcEndpointServicePermissionsOutput
    #   resp.data.return_value #=> Boolean
    #
    def modify_vpc_endpoint_service_permissions(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcEndpointServicePermissionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcEndpointServicePermissionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcEndpointServicePermissions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcEndpointServicePermissions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcEndpointServicePermissions,
        params_class: Params::ModifyVpcEndpointServicePermissionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_endpoint_service_permissions
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p>
    #          <ul>
    #             <li>
    #                <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p>
    #             </li>
    #             <li>
    #                <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p>
    #             </li>
    #             <li>
    #                <p>Enable/disable the ability to resolve public DNS hostnames to private IP
    #                     addresses when queried from instances in the peer VPC.</p>
    #             </li>
    #          </ul>
    #          <p>If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution
    #         for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP
    #         addresses in the peer VPC. This option is not available if the peered VPCs are in different
    #         different Amazon Web Services accounts or different Regions. For peered VPCs in different
    #         Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request
    #         to modify the peering connection options. For inter-region peering connections, you must use the
    #         Region for the requester VPC to modify the requester VPC peering options and the Region for the
    #         accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and
    #         the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcPeeringConnectionOptionsInput}.
    #
    # @option params [PeeringConnectionOptionsRequest] :accepter_peering_connection_options
    #   <p>The VPC peering connection options for the accepter VPC.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [PeeringConnectionOptionsRequest] :requester_peering_connection_options
    #   <p>The VPC peering connection options for the requester VPC.</p>
    #
    # @option params [String] :vpc_peering_connection_id
    #   <p>The ID of the VPC peering connection.</p>
    #
    # @return [Types::ModifyVpcPeeringConnectionOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_peering_connection_options(
    #     accepter_peering_connection_options: {
    #       allow_dns_resolution_from_remote_vpc: false,
    #       allow_egress_from_local_classic_link_to_remote_vpc: false,
    #       allow_egress_from_local_vpc_to_remote_classic_link: false
    #     },
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcPeeringConnectionOptionsOutput
    #   resp.data.accepter_peering_connection_options #=> Types::PeeringConnectionOptions
    #   resp.data.accepter_peering_connection_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.accepter_peering_connection_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.accepter_peering_connection_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.requester_peering_connection_options #=> Types::PeeringConnectionOptions
    #
    def modify_vpc_peering_connection_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcPeeringConnectionOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcPeeringConnectionOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcPeeringConnectionOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcPeeringConnectionOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcPeeringConnectionOptions,
        params_class: Params::ModifyVpcPeeringConnectionOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_peering_connection_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the instance tenancy attribute of the specified VPC. You can change the
    #             instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the
    #             instance tenancy attribute to <code>dedicated</code>.</p>
    #         <p>After you modify the tenancy of the VPC, any new instances that you launch into the
    #             VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch.
    #             The tenancy of any existing instances in the VPC is not affected.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the
    # 				<i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpcTenancyInput}.
    #
    # @option params [String] :vpc_id
    #   <p>The ID of the VPC.</p>
    #
    # @option params [String] :instance_tenancy
    #   <p>The instance tenancy attribute for the VPC. </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyVpcTenancyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpc_tenancy(
    #     vpc_id: 'VpcId', # required
    #     instance_tenancy: 'default', # required - accepts ["default"]
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpcTenancyOutput
    #   resp.data.return_value #=> Boolean
    #
    def modify_vpc_tenancy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpcTenancyInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpcTenancyInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpcTenancy
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpcTenancy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpcTenancy,
        params_class: Params::ModifyVpcTenancyOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpc_tenancy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the customer gateway or the target gateway of an Amazon Web Services Site-to-Site VPN connection. To
    #             modify the target gateway, the following migration options are available:</p>
    #         <ul>
    #             <li>
    #                 <p>An existing virtual private gateway to a new virtual private gateway</p>
    #             </li>
    #             <li>
    #                 <p>An existing virtual private gateway to a transit gateway</p>
    #             </li>
    #             <li>
    #                 <p>An existing transit gateway to a new transit gateway</p>
    #             </li>
    #             <li>
    #                 <p>An existing transit gateway to a virtual private gateway</p>
    #             </li>
    #          </ul>
    #         <p>Before you perform the migration to the new gateway, you must configure the new
    #             gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or
    #                 <a>CreateTransitGateway</a> to create a transit gateway.</p>
    #         <p>This step is required when you migrate from a virtual private gateway with static
    #             routes to a transit gateway. </p>
    #         <p>You must delete the static routes before you migrate to the new gateway.</p>
    #
    #         <p>Keep a copy of the static route before you delete it. You will need to add back these
    #             routes to the transit gateway after the VPN connection migration is complete.</p>
    #
    #         <p>After you migrate to the new gateway, you might need to modify your VPC route table.
    #             Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes
    #             described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">Update VPC route
    #                 tables</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    #         <p>When the new gateway is a transit gateway, modify the transit gateway route table to
    #             allow traffic between the VPC and the Amazon Web Services Site-to-Site VPN connection.
    #             Use <a>CreateTransitGatewayRoute</a> to add the routes.</p>
    #         <p> If you deleted VPN static routes, you must add the static routes to the transit
    #             gateway route table.</p>
    #         <p>After you perform this operation, the VPN endpoint's IP addresses on the Amazon Web Services side and the tunnel options remain intact. Your Amazon Web Services Site-to-Site VPN connection will
    #             be temporarily unavailable for a brief period while we provision the new
    #             endpoints.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpnConnectionInput}.
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the VPN connection.</p>
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of the transit gateway.</p>
    #
    # @option params [String] :customer_gateway_id
    #   <p>The ID of the customer gateway at your end of the VPN connection.</p>
    #
    # @option params [String] :vpn_gateway_id
    #   <p>The ID of the virtual private gateway at the Amazon Web Services side of the VPN
    #               connection.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyVpnConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpn_connection(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     transit_gateway_id: 'TransitGatewayId',
    #     customer_gateway_id: 'CustomerGatewayId',
    #     vpn_gateway_id: 'VpnGatewayId',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpnConnectionOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    #
    def modify_vpn_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpnConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpnConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpnConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpnConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpnConnection,
        params_class: Params::ModifyVpnConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpn_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the connection options for your Site-to-Site VPN connection.</p>
    #         <p>When you modify the VPN connection options, the VPN endpoint IP addresses on the
    #                 Amazon Web Services side do not change, and the tunnel options do not change. Your
    #             VPN connection will be temporarily unavailable for a brief period while the VPN
    #             connection is updated.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpnConnectionOptionsInput}.
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the Site-to-Site VPN connection. </p>
    #
    # @option params [String] :local_ipv4_network_cidr
    #   <p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    #           <p>Default: <code>0.0.0.0/0</code>
    #            </p>
    #
    # @option params [String] :remote_ipv4_network_cidr
    #   <p>The IPv4 CIDR on the Amazon Web Services side of the VPN connection.</p>
    #           <p>Default: <code>0.0.0.0/0</code>
    #            </p>
    #
    # @option params [String] :local_ipv6_network_cidr
    #   <p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
    #           <p>Default: <code>::/0</code>
    #            </p>
    #
    # @option params [String] :remote_ipv6_network_cidr
    #   <p>The IPv6 CIDR on the Amazon Web Services side of the VPN connection.</p>
    #           <p>Default: <code>::/0</code>
    #            </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyVpnConnectionOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpn_connection_options(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     local_ipv4_network_cidr: 'LocalIpv4NetworkCidr',
    #     remote_ipv4_network_cidr: 'RemoteIpv4NetworkCidr',
    #     local_ipv6_network_cidr: 'LocalIpv6NetworkCidr',
    #     remote_ipv6_network_cidr: 'RemoteIpv6NetworkCidr',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpnConnectionOptionsOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    #
    def modify_vpn_connection_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpnConnectionOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpnConnectionOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpnConnectionOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpnConnectionOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpnConnectionOptions,
        params_class: Params::ModifyVpnConnectionOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpn_connection_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the VPN tunnel endpoint certificate.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpnTunnelCertificateInput}.
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the Amazon Web Services Site-to-Site VPN connection.</p>
    #
    # @option params [String] :vpn_tunnel_outside_ip_address
    #   <p>The external IP address of the VPN tunnel.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyVpnTunnelCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpn_tunnel_certificate(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_tunnel_outside_ip_address: 'VpnTunnelOutsideIpAddress', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpnTunnelCertificateOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    #
    def modify_vpn_tunnel_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpnTunnelCertificateInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpnTunnelCertificateInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpnTunnelCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpnTunnelCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpnTunnelCertificate,
        params_class: Params::ModifyVpnTunnelCertificateOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpn_tunnel_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Modifies the options for a VPN tunnel in an Amazon Web Services Site-to-Site VPN connection. You can modify
    #             multiple options for a tunnel in a single request, but you can only modify one tunnel at
    #             a time. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site VPN tunnel options for your Site-to-Site VPN
    #                 connection</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ModifyVpnTunnelOptionsInput}.
    #
    # @option params [String] :vpn_connection_id
    #   <p>The ID of the Amazon Web Services Site-to-Site VPN connection.</p>
    #
    # @option params [String] :vpn_tunnel_outside_ip_address
    #   <p>The external IP address of the VPN tunnel.</p>
    #
    # @option params [ModifyVpnTunnelOptionsSpecification] :tunnel_options
    #   <p>The tunnel options to modify.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ModifyVpnTunnelOptionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.modify_vpn_tunnel_options(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_tunnel_outside_ip_address: 'VpnTunnelOutsideIpAddress', # required
    #     tunnel_options: {
    #       tunnel_inside_cidr: 'TunnelInsideCidr',
    #       tunnel_inside_ipv6_cidr: 'TunnelInsideIpv6Cidr',
    #       pre_shared_key: 'PreSharedKey',
    #       phase1_lifetime_seconds: 1,
    #       phase2_lifetime_seconds: 1,
    #       rekey_margin_time_seconds: 1,
    #       rekey_fuzz_percentage: 1,
    #       replay_window_size: 1,
    #       dpd_timeout_seconds: 1,
    #       dpd_timeout_action: 'DPDTimeoutAction',
    #       phase1_encryption_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase2_encryption_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase1_integrity_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase2_integrity_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase1_dh_group_numbers: [
    #         {
    #           value: 1
    #         }
    #       ],
    #       phase2_dh_group_numbers: [
    #         {
    #           value: 1
    #         }
    #       ],
    #       ike_versions: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       startup_action: 'StartupAction'
    #     }, # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ModifyVpnTunnelOptionsOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    #
    def modify_vpn_tunnel_options(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ModifyVpnTunnelOptionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ModifyVpnTunnelOptionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ModifyVpnTunnelOptions
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ModifyVpnTunnelOptions
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ModifyVpnTunnelOptions,
        params_class: Params::ModifyVpnTunnelOptionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :modify_vpn_tunnel_options
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is
    #             enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitor your instances using
    #                 CloudWatch</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #         <p>To disable detailed monitoring, see .</p>
    #
    # @param [Hash] params
    #   See {Types::MonitorInstancesInput}.
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The IDs of the instances.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::MonitorInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.monitor_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::MonitorInstancesOutput
    #   resp.data.instance_monitorings #=> Array<InstanceMonitoring>
    #   resp.data.instance_monitorings[0] #=> Types::InstanceMonitoring
    #   resp.data.instance_monitorings[0].instance_id #=> String
    #   resp.data.instance_monitorings[0].monitoring #=> Types::Monitoring
    #   resp.data.instance_monitorings[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    #
    def monitor_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::MonitorInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::MonitorInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::MonitorInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::MonitorInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::MonitorInstances,
        params_class: Params::MonitorInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :monitor_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The
    #       Elastic IP address must be allocated to your account for more than 24 hours, and it must not
    #       be associated with an instance. After the Elastic IP address is moved, it is no longer
    #       available for use in the EC2-Classic platform, unless you move it back using the
    #         <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was
    #       originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. </p>
    #
    # @param [Hash] params
    #   See {Types::MoveAddressToVpcInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :public_ip
    #   <p>The Elastic IP address.</p>
    #
    # @return [Types::MoveAddressToVpcOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.move_address_to_vpc(
    #     dry_run: false,
    #     public_ip: 'PublicIp' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::MoveAddressToVpcOutput
    #   resp.data.allocation_id #=> String
    #   resp.data.status #=> String, one of ["MoveInProgress", "InVpc", "InClassic"]
    #
    def move_address_to_vpc(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::MoveAddressToVpcInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::MoveAddressToVpcInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::MoveAddressToVpc
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::MoveAddressToVpc
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::MoveAddressToVpc,
        params_class: Params::MoveAddressToVpcOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :move_address_to_vpc
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Move an BYOIP IPv4 CIDR to IPAM from a public IPv4 pool.</p>
    #
    # @param [Hash] params
    #   See {Types::MoveByoipCidrToIpamInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :cidr
    #   <p>The BYOIP CIDR.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The IPAM pool ID.</p>
    #
    # @option params [String] :ipam_pool_owner
    #   <p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>
    #
    # @return [Types::MoveByoipCidrToIpamOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.move_byoip_cidr_to_ipam(
    #     dry_run: false,
    #     cidr: 'Cidr', # required
    #     ipam_pool_id: 'IpamPoolId', # required
    #     ipam_pool_owner: 'IpamPoolOwner' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::MoveByoipCidrToIpamOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #
    def move_byoip_cidr_to_ipam(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::MoveByoipCidrToIpamInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::MoveByoipCidrToIpamInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::MoveByoipCidrToIpam
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::MoveByoipCidrToIpam
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::MoveByoipCidrToIpam,
        params_class: Params::MoveByoipCidrToIpamOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :move_byoip_cidr_to_ipam
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services resources through bring your own IP
    #          addresses (BYOIP) and creates a corresponding address pool. After the address range is
    #          provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p>
    #          <p>Amazon Web Services verifies that you own the address range and are authorized to advertise it.
    #          You must ensure that the address range is registered to you and that you created an
    #          RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range.
    #          For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring your own IP addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>Provisioning an address range is an asynchronous operation, so the call returns immediately,
    #          but the address range is not ready to use until its status changes from <code>pending-provision</code>
    #          to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>.
    #          To allocate an Elastic IP address from your IPv4 address pool, use <a>AllocateAddress</a>
    #          with either the specific address from the address pool or the ID of the address pool.</p>
    #
    # @param [Hash] params
    #   See {Types::ProvisionByoipCidrInput}.
    #
    # @option params [String] :cidr
    #   <p>The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can
    #            specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've
    #            brought to this or another Region.</p>
    #
    # @option params [CidrAuthorizationContext] :cidr_authorization_context
    #   <p>A signed document that proves that you are authorized to bring the specified IP address
    #            range to Amazon using BYOIP.</p>
    #
    # @option params [Boolean] :publicly_advertisable
    #   <p>(IPv6 only) Indicate whether the address range will be publicly advertised to the
    #               internet.</p>
    #           <p>Default: true</p>
    #
    # @option params [String] :description
    #   <p>A description for the address range and the address pool.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :pool_tag_specifications
    #   <p>The tags to apply to the address pool.</p>
    #
    # @option params [Boolean] :multi_region
    #   <p>Reserved.</p>
    #
    # @return [Types::ProvisionByoipCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.provision_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     cidr_authorization_context: {
    #       message: 'Message', # required
    #       signature: 'Signature' # required
    #     },
    #     publicly_advertisable: false,
    #     description: 'Description',
    #     dry_run: false,
    #     pool_tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     multi_region: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ProvisionByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #
    def provision_byoip_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ProvisionByoipCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ProvisionByoipCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ProvisionByoipCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ProvisionByoipCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ProvisionByoipCidr,
        params_class: Params::ProvisionByoipCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :provision_byoip_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provision a CIDR to an IPAM pool. You can use thsi action to provision new CIDRs to a top-level pool or to transfer a CIDR from a top-level pool to a pool within it.</p>
    #          <p>For more information, see <a href="/vpc/latest/ipam/prov-cidr-ipam.html">Provision CIDRs to pools</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::ProvisionIpamPoolCidrInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool to which you want to assign a CIDR.</p>
    #
    # @option params [String] :cidr
    #   <p>The CIDR you want to assign to the IPAM pool.</p>
    #
    # @option params [IpamCidrAuthorizationContext] :cidr_authorization_context
    #   <p>A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.</p>
    #
    # @return [Types::ProvisionIpamPoolCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.provision_ipam_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr',
    #     cidr_authorization_context: {
    #       message: 'Message',
    #       signature: 'Signature'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ProvisionIpamPoolCidrOutput
    #   resp.data.ipam_pool_cidr #=> Types::IpamPoolCidr
    #   resp.data.ipam_pool_cidr.cidr #=> String
    #   resp.data.ipam_pool_cidr.state #=> String, one of ["pending-provision", "provisioned", "failed-provision", "pending-deprovision", "deprovisioned", "failed-deprovision", "pending-import", "failed-import"]
    #   resp.data.ipam_pool_cidr.failure_reason #=> Types::IpamPoolCidrFailureReason
    #   resp.data.ipam_pool_cidr.failure_reason.code #=> String, one of ["cidr-not-available"]
    #   resp.data.ipam_pool_cidr.failure_reason.message #=> String
    #
    def provision_ipam_pool_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ProvisionIpamPoolCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ProvisionIpamPoolCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ProvisionIpamPoolCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ProvisionIpamPoolCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ProvisionIpamPoolCidr,
        params_class: Params::ProvisionIpamPoolCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :provision_ipam_pool_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Provision a CIDR to a public IPv4 pool.</p>
    #          <p>For more information about IPAM, see <a href="/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::ProvisionPublicIpv4PoolCidrInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool you would like to use to allocate this CIDR.</p>
    #
    # @option params [String] :pool_id
    #   <p>The ID of the public IPv4 pool you would like to use for this CIDR.</p>
    #
    # @option params [Integer] :netmask_length
    #   <p>The netmask length of the CIDR you would like to allocate to the public IPv4 pool.</p>
    #
    # @return [Types::ProvisionPublicIpv4PoolCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.provision_public_ipv4_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     pool_id: 'PoolId', # required
    #     netmask_length: 1 # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ProvisionPublicIpv4PoolCidrOutput
    #   resp.data.pool_id #=> String
    #   resp.data.pool_address_range #=> Types::PublicIpv4PoolRange
    #   resp.data.pool_address_range.first_address #=> String
    #   resp.data.pool_address_range.last_address #=> String
    #   resp.data.pool_address_range.address_count #=> Integer
    #   resp.data.pool_address_range.available_address_count #=> Integer
    #
    def provision_public_ipv4_pool_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ProvisionPublicIpv4PoolCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ProvisionPublicIpv4PoolCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ProvisionPublicIpv4PoolCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ProvisionPublicIpv4PoolCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ProvisionPublicIpv4PoolCidr,
        params_class: Params::ProvisionPublicIpv4PoolCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :provision_public_ipv4_pool_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Purchase a reservation with configurations that match those of your Dedicated Host.
    #             You must have active Dedicated Hosts in your account before you purchase a reservation.
    #             This action results in the specified reservation being purchased and charged to your
    #             account.</p>
    #
    # @param [Hash] params
    #   See {Types::PurchaseHostReservationInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [String] :currency_code
    #   <p>The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>,
    #               and <code>totalHourlyPrice</code> amounts are specified. At this time, the only
    #               supported currency is <code>USD</code>.</p>
    #
    # @option params [Array<String>] :host_id_set
    #   <p>The IDs of the Dedicated Hosts with which the reservation will be associated.</p>
    #
    # @option params [String] :limit_price
    #   <p>The specified limit is checked against the total upfront cost of the reservation
    #               (calculated as the offering's upfront cost multiplied by the host count). If the total
    #               upfront cost is greater than the specified price limit, the request fails. This is used
    #               to ensure that the purchase does not exceed the expected upfront cost of the purchase.
    #               At this time, the only supported currency is <code>USD</code>. For example, to indicate
    #               a limit price of USD 100, specify 100.00.</p>
    #
    # @option params [String] :offering_id
    #   <p>The ID of the offering.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the Dedicated Host Reservation during purchase.</p>
    #
    # @return [Types::PurchaseHostReservationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.purchase_host_reservation(
    #     client_token: 'ClientToken',
    #     currency_code: 'USD', # accepts ["USD"]
    #     host_id_set: [
    #       'member'
    #     ], # required
    #     limit_price: 'LimitPrice',
    #     offering_id: 'OfferingId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PurchaseHostReservationOutput
    #   resp.data.client_token #=> String
    #   resp.data.currency_code #=> String, one of ["USD"]
    #   resp.data.purchase #=> Array<Purchase>
    #   resp.data.purchase[0] #=> Types::Purchase
    #   resp.data.purchase[0].currency_code #=> String, one of ["USD"]
    #   resp.data.purchase[0].duration #=> Integer
    #   resp.data.purchase[0].host_id_set #=> Array<String>
    #   resp.data.purchase[0].host_id_set[0] #=> String
    #   resp.data.purchase[0].host_reservation_id #=> String
    #   resp.data.purchase[0].hourly_price #=> String
    #   resp.data.purchase[0].instance_family #=> String
    #   resp.data.purchase[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.purchase[0].upfront_price #=> String
    #   resp.data.total_hourly_price #=> String
    #   resp.data.total_upfront_price #=> String
    #
    def purchase_host_reservation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PurchaseHostReservationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PurchaseHostReservationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PurchaseHostReservation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::PurchaseHostReservation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::PurchaseHostReservation,
        params_class: Params::PurchaseHostReservationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :purchase_host_reservation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower
    #        hourly rate compared to On-Demand instance pricing.</p>
    # 		       <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings
    # 			that match your specifications. After you've purchased a Reserved Instance, you can check for your
    # 			new Reserved Instance with <a>DescribeReservedInstances</a>.</p>
    #          <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a
    #       purchase time, the default is the current time.</p>
    #    	     <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and
    #    	   <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    #    	   in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::PurchaseReservedInstancesOfferingInput}.
    #
    # @option params [Integer] :instance_count
    #   <p>The number of Reserved Instances to purchase.</p>
    #
    # @option params [String] :reserved_instances_offering_id
    #   <p>The ID of the Reserved Instance offering to purchase.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [ReservedInstanceLimitPrice] :limit_price
    #   <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    #
    # @option params [Time] :purchase_time
    #   <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #
    # @return [Types::PurchaseReservedInstancesOfferingOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.purchase_reserved_instances_offering(
    #     instance_count: 1, # required
    #     reserved_instances_offering_id: 'ReservedInstancesOfferingId', # required
    #     dry_run: false,
    #     limit_price: {
    #       amount: 1.0,
    #       currency_code: 'USD' # accepts ["USD"]
    #     },
    #     purchase_time: Time.now
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PurchaseReservedInstancesOfferingOutput
    #   resp.data.reserved_instances_id #=> String
    #
    def purchase_reserved_instances_offering(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PurchaseReservedInstancesOfferingInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PurchaseReservedInstancesOfferingInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PurchaseReservedInstancesOffering
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::PurchaseReservedInstancesOffering
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::PurchaseReservedInstancesOffering,
        params_class: Params::PurchaseReservedInstancesOfferingOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :purchase_reserved_instances_offering
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Purchases the Scheduled Instances with the specified schedule.</p>
    #          <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term.
    #          Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a>
    #          to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance,
    #          you must call <a>RunScheduledInstances</a> during each scheduled time period.</p>
    #          <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
    #
    # @param [Hash] params
    #   See {Types::PurchaseScheduledInstancesInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that ensures the idempotency of the request.
    #            For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<PurchaseRequest>] :purchase_requests
    #   <p>The purchase requests.</p>
    #
    # @return [Types::PurchaseScheduledInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.purchase_scheduled_instances(
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     purchase_requests: [
    #       {
    #         instance_count: 1, # required
    #         purchase_token: 'PurchaseToken' # required
    #       }
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PurchaseScheduledInstancesOutput
    #   resp.data.scheduled_instance_set #=> Array<ScheduledInstance>
    #   resp.data.scheduled_instance_set[0] #=> Types::ScheduledInstance
    #   resp.data.scheduled_instance_set[0].availability_zone #=> String
    #   resp.data.scheduled_instance_set[0].create_date #=> Time
    #   resp.data.scheduled_instance_set[0].hourly_price #=> String
    #   resp.data.scheduled_instance_set[0].instance_count #=> Integer
    #   resp.data.scheduled_instance_set[0].instance_type #=> String
    #   resp.data.scheduled_instance_set[0].network_platform #=> String
    #   resp.data.scheduled_instance_set[0].next_slot_start_time #=> Time
    #   resp.data.scheduled_instance_set[0].platform #=> String
    #   resp.data.scheduled_instance_set[0].previous_slot_end_time #=> Time
    #   resp.data.scheduled_instance_set[0].recurrence #=> Types::ScheduledInstanceRecurrence
    #   resp.data.scheduled_instance_set[0].recurrence.frequency #=> String
    #   resp.data.scheduled_instance_set[0].recurrence.interval #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set #=> Array<Integer>
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set[0] #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_relative_to_end #=> Boolean
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_unit #=> String
    #   resp.data.scheduled_instance_set[0].scheduled_instance_id #=> String
    #   resp.data.scheduled_instance_set[0].slot_duration_in_hours #=> Integer
    #   resp.data.scheduled_instance_set[0].term_end_date #=> Time
    #   resp.data.scheduled_instance_set[0].term_start_date #=> Time
    #   resp.data.scheduled_instance_set[0].total_scheduled_instance_hours #=> Integer
    #
    def purchase_scheduled_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PurchaseScheduledInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PurchaseScheduledInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PurchaseScheduledInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::PurchaseScheduledInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::PurchaseScheduledInstances,
        params_class: Params::PurchaseScheduledInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :purchase_scheduled_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Requests a reboot of the specified instances. This operation is asynchronous; it only
    #             queues a request to reboot the specified instances. The operation succeeds if the
    #             instances are valid and belong to you. Requests to reboot terminated instances are
    #             ignored.</p>
    #         <p>If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a
    #             hard reboot.</p>
    #         <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Troubleshoot an unreachable
    #             instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RebootInstancesInput}.
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The instance IDs.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RebootInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reboot_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RebootInstancesOutput
    #
    def reboot_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RebootInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RebootInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RebootInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RebootInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RebootInstances,
        params_class: Params::RebootInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reboot_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete
    #       before you can launch an instance from the AMI. For more information about creating AMIs, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating your
    #         own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <note>
    #      	      <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers
    #          	the AMI in a single request, so you don't have to register the AMI yourself.</p>
    #          </note>
    #
    #          <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration.
    #        If you make changes to an image, deregister the previous image and register the new image.</p>
    #
    #          <p>
    #             <b>Register a snapshot of a root device volume</b>
    #          </p>
    #    	     <p>You can use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from
    #        a snapshot of a root device volume. You specify the snapshot using a block device mapping.
    #        You can't set the encryption state of the volume using the block device mapping. If the
    #        snapshot is encrypted, or encryption by default is enabled, the root volume of an instance
    #        launched from the AMI is encrypted.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot">Create a Linux AMI from a snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Use encryption with Amazon EBS-backed AMIs</a>
    #        in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    #    	     <p>
    #             <b>Amazon Web Services Marketplace product codes</b>
    #          </p>
    #    	     <p>If any snapshots have Amazon Web Services Marketplace product codes, they are copied to the new
    #       AMI.</p>
    #          <p>Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE
    #       Linux Enterprise Server (SLES), use the Amazon EC2 billing product code associated with an AMI to
    #       verify the subscription status for package updates. To create a new AMI for operating systems
    #       that require a billing product code, instead of registering the AMI, do the following to
    #       preserve the billing product code association:</p>
    #          <ol>
    #             <li>
    #                <p>Launch an instance from an existing AMI with that billing product code.</p>
    #             </li>
    #             <li>
    #                <p>Customize the instance.</p>
    #             </li>
    #             <li>
    #                <p>Create an AMI from the instance using <a>CreateImage</a>.</p>
    #             </li>
    #          </ol>
    #          <p>If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched
    #       from an AMI with a billing product code, make sure that the Reserved Instance has the matching
    #       billing product code. If you purchase a Reserved Instance without the matching billing product
    #       code, the Reserved Instance will not be applied to the On-Demand Instance. For information
    #       about how to obtain the platform details and billing information of an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understanding AMI
    #       	billing</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RegisterImageInput}.
    #
    # @option params [String] :image_location
    #   <p>The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the
    #      		<code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed
    #      		by Amazon EC2. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned ACLs</a> in the
    #      		<i>Amazon S3 Service Developer Guide</i>.</p>
    #
    # @option params [String] :architecture
    #   <p>The architecture of the AMI.</p>
    #      	     <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>.
    #           For instance store-backed AMIs, the architecture specified in the manifest file.</p>
    #
    # @option params [Array<BlockDeviceMapping>] :block_device_mappings
    #   <p>The block device mapping entries.</p>
    #      	     <p>If you specify an Amazon EBS volume using the ID of an Amazon EBS snapshot, you can't specify the encryption state of the volume.</p>
    #            <p>If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region
    #       	 of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost
    #       	 only. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
    #       	 	Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @option params [String] :description
    #   <p>A description for your AMI.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :ena_support
    #   <p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p>
    #            <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
    #
    # @option params [String] :kernel_id
    #   <p>The ID of the kernel.</p>
    #
    # @option params [String] :name
    #   <p>A name for your AMI.</p>
    #            <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    #
    # @option params [Array<String>] :billing_products
    #   <p>The billing product codes. Your account must be authorized to specify billing product codes. Otherwise,
    #        	you can use the Amazon Web Services Marketplace to bill for the use of an AMI.</p>
    #
    # @option params [String] :ramdisk_id
    #   <p>The ID of the RAM disk.</p>
    #
    # @option params [String] :root_device_name
    #   <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    #
    # @option params [String] :sriov_net_support
    #   <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p>
    #            <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p>
    #            <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
    #
    # @option params [String] :virtualization_type
    #   <p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p>
    #            <p>Default: <code>paravirtual</code>
    #            </p>
    #
    # @option params [String] :boot_mode
    #   <p>The boot mode of the AMI. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot modes</a> in the
    #           <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @return [Types::RegisterImageOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.register_image(
    #     image_location: 'ImageLocation',
    #     architecture: 'i386', # accepts ["i386", "x86_64", "arm64", "x86_64_mac"]
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         virtual_name: 'VirtualName',
    #         ebs: {
    #           delete_on_termination: false,
    #           iops: 1,
    #           snapshot_id: 'SnapshotId',
    #           volume_size: 1,
    #           volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #           kms_key_id: 'KmsKeyId',
    #           throughput: 1,
    #           outpost_arn: 'OutpostArn',
    #           encrypted: false
    #         },
    #         no_device: 'NoDevice'
    #       }
    #     ],
    #     description: 'Description',
    #     dry_run: false,
    #     ena_support: false,
    #     kernel_id: 'KernelId',
    #     name: 'Name', # required
    #     billing_products: [
    #       'member'
    #     ],
    #     ramdisk_id: 'RamdiskId',
    #     root_device_name: 'RootDeviceName',
    #     sriov_net_support: 'SriovNetSupport',
    #     virtualization_type: 'VirtualizationType',
    #     boot_mode: 'legacy-bios' # accepts ["legacy-bios", "uefi"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RegisterImageOutput
    #   resp.data.image_id #=> String
    #
    def register_image(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RegisterImageInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RegisterImageInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RegisterImage
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RegisterImage
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RegisterImage,
        params_class: Params::RegisterImageOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :register_image
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Registers a set of tag keys to include in scheduled event notifications for your resources.
    #    		</p>
    #          <p>To remove tags, use .</p>
    #
    # @param [Hash] params
    #   See {Types::RegisterInstanceEventNotificationAttributesInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [RegisterInstanceTagAttributeRequest] :instance_tag_attribute
    #   <p>Information about the tag keys to register.</p>
    #
    # @return [Types::RegisterInstanceEventNotificationAttributesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.register_instance_event_notification_attributes(
    #     dry_run: false,
    #     instance_tag_attribute: {
    #       include_all_tags_of_instance: false,
    #       instance_tag_keys: [
    #         'member'
    #       ]
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RegisterInstanceEventNotificationAttributesOutput
    #   resp.data.instance_tag_attribute #=> Types::InstanceTagNotificationAttribute
    #   resp.data.instance_tag_attribute.instance_tag_keys #=> Array<String>
    #   resp.data.instance_tag_attribute.instance_tag_keys[0] #=> String
    #   resp.data.instance_tag_attribute.include_all_tags_of_instance #=> Boolean
    #
    def register_instance_event_notification_attributes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RegisterInstanceEventNotificationAttributesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RegisterInstanceEventNotificationAttributesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RegisterInstanceEventNotificationAttributes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RegisterInstanceEventNotificationAttributes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RegisterInstanceEventNotificationAttributes,
        params_class: Params::RegisterInstanceEventNotificationAttributesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :register_instance_event_notification_attributes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Registers members (network interfaces) with the  transit gateway multicast group. A member is a network interface associated
    #             with a supported EC2 instance that receives multicast traffic. For information about
    #             supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
    #                 Consideration</a> in <i>Amazon VPC Transit Gateways</i>.</p>
    #         <p>After you add the members, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the members were added
    #             to the  transit gateway multicast group.</p>
    #
    # @param [Hash] params
    #   See {Types::RegisterTransitGatewayMulticastGroupMembersInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :group_ip_address
    #   <p>The IP address assigned to the  transit gateway multicast group.</p>
    #
    # @option params [Array<String>] :network_interface_ids
    #   <p>The group members' network interface IDs to register with the  transit gateway multicast group.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RegisterTransitGatewayMulticastGroupMembersOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.register_transit_gateway_multicast_group_members(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RegisterTransitGatewayMulticastGroupMembersOutput
    #   resp.data.registered_multicast_group_members #=> Types::TransitGatewayMulticastRegisteredGroupMembers
    #   resp.data.registered_multicast_group_members.transit_gateway_multicast_domain_id #=> String
    #   resp.data.registered_multicast_group_members.registered_network_interface_ids #=> Array<String>
    #   resp.data.registered_multicast_group_members.registered_network_interface_ids[0] #=> String
    #   resp.data.registered_multicast_group_members.group_ip_address #=> String
    #
    def register_transit_gateway_multicast_group_members(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RegisterTransitGatewayMulticastGroupMembersInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RegisterTransitGatewayMulticastGroupMembersInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RegisterTransitGatewayMulticastGroupMembers
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RegisterTransitGatewayMulticastGroupMembers
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RegisterTransitGatewayMulticastGroupMembers,
        params_class: Params::RegisterTransitGatewayMulticastGroupMembersOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :register_transit_gateway_multicast_group_members
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Registers sources (network interfaces) with the specified  transit gateway multicast group.</p>
    #         <p>A multicast source is a network interface attached to a supported instance that sends
    #             multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
    #                 Considerations</a> in <i>Amazon VPC Transit Gateways</i>.</p>
    #         <p>After you add the source, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the source was added to the multicast
    #             group.</p>
    #
    # @param [Hash] params
    #   See {Types::RegisterTransitGatewayMulticastGroupSourcesInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :group_ip_address
    #   <p>The IP address assigned to the  transit gateway multicast group.</p>
    #
    # @option params [Array<String>] :network_interface_ids
    #   <p>The group sources' network interface IDs to register with the  transit gateway multicast group.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RegisterTransitGatewayMulticastGroupSourcesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.register_transit_gateway_multicast_group_sources(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RegisterTransitGatewayMulticastGroupSourcesOutput
    #   resp.data.registered_multicast_group_sources #=> Types::TransitGatewayMulticastRegisteredGroupSources
    #   resp.data.registered_multicast_group_sources.transit_gateway_multicast_domain_id #=> String
    #   resp.data.registered_multicast_group_sources.registered_network_interface_ids #=> Array<String>
    #   resp.data.registered_multicast_group_sources.registered_network_interface_ids[0] #=> String
    #   resp.data.registered_multicast_group_sources.group_ip_address #=> String
    #
    def register_transit_gateway_multicast_group_sources(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RegisterTransitGatewayMulticastGroupSourcesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RegisterTransitGatewayMulticastGroupSourcesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RegisterTransitGatewayMulticastGroupSources
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RegisterTransitGatewayMulticastGroupSources
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RegisterTransitGatewayMulticastGroupSources,
        params_class: Params::RegisterTransitGatewayMulticastGroupSourcesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :register_transit_gateway_multicast_group_sources
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Rejects a request to associate cross-account subnets with a transit gateway multicast domain.</p>
    #
    # @param [Hash] params
    #   See {Types::RejectTransitGatewayMulticastDomainAssociationsInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the transit gateway attachment.</p>
    #
    # @option params [Array<String>] :subnet_ids
    #   <p>The IDs of the subnets to associate with the transit gateway multicast domain.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RejectTransitGatewayMulticastDomainAssociationsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reject_transit_gateway_multicast_domain_associations(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RejectTransitGatewayMulticastDomainAssociationsOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    #
    def reject_transit_gateway_multicast_domain_associations(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RejectTransitGatewayMulticastDomainAssociationsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RejectTransitGatewayMulticastDomainAssociationsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RejectTransitGatewayMulticastDomainAssociations
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RejectTransitGatewayMulticastDomainAssociations
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RejectTransitGatewayMulticastDomainAssociations,
        params_class: Params::RejectTransitGatewayMulticastDomainAssociationsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reject_transit_gateway_multicast_domain_associations
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Rejects a transit gateway peering attachment request.</p>
    #
    # @param [Hash] params
    #   See {Types::RejectTransitGatewayPeeringAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the transit gateway peering attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RejectTransitGatewayPeeringAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reject_transit_gateway_peering_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RejectTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    #
    def reject_transit_gateway_peering_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RejectTransitGatewayPeeringAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RejectTransitGatewayPeeringAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RejectTransitGatewayPeeringAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RejectTransitGatewayPeeringAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RejectTransitGatewayPeeringAttachment,
        params_class: Params::RejectTransitGatewayPeeringAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reject_transit_gateway_peering_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Rejects a request to attach a VPC to a transit gateway.</p>
    #          <p>The VPC attachment must be in the <code>pendingAcceptance</code> state.
    #          Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests.
    #          Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
    #
    # @param [Hash] params
    #   See {Types::RejectTransitGatewayVpcAttachmentInput}.
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RejectTransitGatewayVpcAttachmentOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reject_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RejectTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    #
    def reject_transit_gateway_vpc_attachment(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RejectTransitGatewayVpcAttachmentInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RejectTransitGatewayVpcAttachmentInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RejectTransitGatewayVpcAttachment
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RejectTransitGatewayVpcAttachment
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RejectTransitGatewayVpcAttachment,
        params_class: Params::RejectTransitGatewayVpcAttachmentOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reject_transit_gateway_vpc_attachment
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Rejects one or more VPC endpoint connection requests to your VPC endpoint
    #             service.</p>
    #
    # @param [Hash] params
    #   See {Types::RejectVpcEndpointConnectionsInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the service.</p>
    #
    # @option params [Array<String>] :vpc_endpoint_ids
    #   <p>The IDs of one or more VPC endpoints.</p>
    #
    # @return [Types::RejectVpcEndpointConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reject_vpc_endpoint_connections(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     vpc_endpoint_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RejectVpcEndpointConnectionsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def reject_vpc_endpoint_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RejectVpcEndpointConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RejectVpcEndpointConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RejectVpcEndpointConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RejectVpcEndpointConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RejectVpcEndpointConnections,
        params_class: Params::RejectVpcEndpointConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reject_vpc_endpoint_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Rejects a VPC peering connection request. The VPC peering connection must be in the
    # 				<code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request
    # 			to view your outstanding VPC peering connection requests. To delete an active VPC peering
    # 			connection, or to delete a VPC peering connection request that you initiated, use	<a>DeleteVpcPeeringConnection</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::RejectVpcPeeringConnectionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_peering_connection_id
    #   <p>The ID of the VPC peering connection.</p>
    #
    # @return [Types::RejectVpcPeeringConnectionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reject_vpc_peering_connection(
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RejectVpcPeeringConnectionOutput
    #   resp.data.return #=> Boolean
    #
    def reject_vpc_peering_connection(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RejectVpcPeeringConnectionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RejectVpcPeeringConnectionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RejectVpcPeeringConnection
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RejectVpcPeeringConnection
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RejectVpcPeeringConnection,
        params_class: Params::RejectVpcPeeringConnectionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reject_vpc_peering_connection
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Releases the specified Elastic IP address.</p>
    #          <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it
    # 				from any instance that it's associated with. To disassociate an Elastic IP address without
    # 				releasing it, use <a>DisassociateAddress</a>.</p>
    #          <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address
    # 			  before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p>
    #          <p>After releasing an Elastic IP address, it is released to the IP address pool.
    #         Be sure to update your DNS records and any servers or devices that communicate with the address.
    #         If you attempt to release an Elastic IP address that you already released, you'll get an
    #        <code>AuthFailure</code> error if the address is already allocated to another Amazon Web Services account.</p>
    #          <p>[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it.
    #         For more information, see <a>AllocateAddress</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ReleaseAddressInput}.
    #
    # @option params [String] :allocation_id
    #   <p>[EC2-VPC] The allocation ID. Required for EC2-VPC.</p>
    #
    # @option params [String] :public_ip
    #   <p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
    #
    # @option params [String] :network_border_group
    #   <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises
    #         IP addresses.</p>
    #            <p>If you provide an incorrect network border group, you receive an <code>InvalidAddress.NotFound</code> error.</p>
    #            <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you
    #         receive an <code>InvalidParameterCombination</code> error.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ReleaseAddressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.release_address(
    #     allocation_id: 'AllocationId',
    #     public_ip: 'PublicIp',
    #     network_border_group: 'NetworkBorderGroup',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReleaseAddressOutput
    #
    def release_address(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReleaseAddressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReleaseAddressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReleaseAddress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReleaseAddress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReleaseAddress,
        params_class: Params::ReleaseAddressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :release_address
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>When you no longer want to use an On-Demand Dedicated Host it can be released.
    #             On-Demand billing is stopped and the host goes into <code>released</code> state. The
    #             host ID of Dedicated Hosts that have been released can no longer be specified in another
    #             request, for example, to modify the host. You must stop or terminate all instances on a
    #             host before it can be released.</p>
    #         <p>When Dedicated Hosts are released, it may take some time for them to stop counting
    #             toward your limit and you may receive capacity errors when trying to allocate new
    #             Dedicated Hosts. Wait a few minutes and then try again.</p>
    #         <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
    #
    # @param [Hash] params
    #   See {Types::ReleaseHostsInput}.
    #
    # @option params [Array<String>] :host_ids
    #   <p>The IDs of the Dedicated Hosts to release.</p>
    #
    # @return [Types::ReleaseHostsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.release_hosts(
    #     host_ids: [
    #       'member'
    #     ] # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReleaseHostsOutput
    #   resp.data.successful #=> Array<String>
    #   resp.data.successful[0] #=> String
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    #
    def release_hosts(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReleaseHostsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReleaseHostsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReleaseHosts
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReleaseHosts
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReleaseHosts,
        params_class: Params::ReleaseHostsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :release_hosts
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Release an allocation within an IPAM pool. You can only use this action to release manual allocations. To remove an allocation for a resource without deleting the resource, set its monitored state to false using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyIpamResourceCidr.html">ModifyIpamResourceCidr</a>. For more information, see <a href="/vpc/latest/ipam/release-pool-alloc-ipam.html">Release an allocation</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #
    # @param [Hash] params
    #   See {Types::ReleaseIpamPoolAllocationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>A check for whether you have the required permissions for the action without actually making the request
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :ipam_pool_id
    #   <p>The ID of the IPAM pool which contains the allocation you want to release.</p>
    #
    # @option params [String] :cidr
    #   <p>The CIDR of the allocation you want to release.</p>
    #
    # @option params [String] :ipam_pool_allocation_id
    #   <p>The ID of the allocation.</p>
    #
    # @return [Types::ReleaseIpamPoolAllocationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.release_ipam_pool_allocation(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr', # required
    #     ipam_pool_allocation_id: 'IpamPoolAllocationId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReleaseIpamPoolAllocationOutput
    #   resp.data.success #=> Boolean
    #
    def release_ipam_pool_allocation(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReleaseIpamPoolAllocationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReleaseIpamPoolAllocationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReleaseIpamPoolAllocation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReleaseIpamPoolAllocation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReleaseIpamPoolAllocation,
        params_class: Params::ReleaseIpamPoolAllocationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :release_ipam_pool_allocation
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Replaces an IAM instance profile for the specified running instance. You can use
    #             this action to change the IAM instance profile that's associated with an instance
    #             without having to disassociate the existing IAM instance profile first.</p>
    #         <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
    #             ID.</p>
    #
    # @param [Hash] params
    #   See {Types::ReplaceIamInstanceProfileAssociationInput}.
    #
    # @option params [IamInstanceProfileSpecification] :iam_instance_profile
    #   <p>The IAM instance profile.</p>
    #
    # @option params [String] :association_id
    #   <p>The ID of the existing IAM instance profile association.</p>
    #
    # @return [Types::ReplaceIamInstanceProfileAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.replace_iam_instance_profile_association(
    #     iam_instance_profile: {
    #       arn: 'Arn',
    #       name: 'Name'
    #     }, # required
    #     association_id: 'AssociationId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReplaceIamInstanceProfileAssociationOutput
    #   resp.data.iam_instance_profile_association #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_association.association_id #=> String
    #   resp.data.iam_instance_profile_association.instance_id #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_association.iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_association.timestamp #=> Time
    #
    def replace_iam_instance_profile_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReplaceIamInstanceProfileAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReplaceIamInstanceProfileAssociationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReplaceIamInstanceProfileAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReplaceIamInstanceProfileAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReplaceIamInstanceProfileAssociation,
        params_class: Params::ReplaceIamInstanceProfileAssociationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :replace_iam_instance_profile_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Changes which network ACL a subnet is associated with. By default when you create a
    # 			subnet, it's automatically associated with the default network ACL. For more
    # 			information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
    # 			ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #         <p>This is an idempotent operation.</p>
    #
    # @param [Hash] params
    #   See {Types::ReplaceNetworkAclAssociationInput}.
    #
    # @option params [String] :association_id
    #   <p>The ID of the current association between the original network ACL and the subnet.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_acl_id
    #   <p>The ID of the new network ACL to associate with the subnet.</p>
    #
    # @return [Types::ReplaceNetworkAclAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.replace_network_acl_association(
    #     association_id: 'AssociationId', # required
    #     dry_run: false,
    #     network_acl_id: 'NetworkAclId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReplaceNetworkAclAssociationOutput
    #   resp.data.new_association_id #=> String
    #
    def replace_network_acl_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReplaceNetworkAclAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReplaceNetworkAclAssociationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReplaceNetworkAclAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReplaceNetworkAclAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReplaceNetworkAclAssociation,
        params_class: Params::ReplaceNetworkAclAssociationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :replace_network_acl_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ReplaceNetworkAclEntryInput}.
    #
    # @option params [String] :cidr_block
    #   <p>The IPv4 network range to allow or deny, in CIDR notation (for example
    #                   <code>172.16.0.0/24</code>).</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :egress
    #   <p>Indicates whether to replace the egress rule.</p>
    #   		       <p>Default: If no value is specified, we replace the ingress rule.</p>
    #
    # @option params [IcmpTypeCode] :icmp_type_code
    #   <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
    #   		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    #
    # @option params [String] :ipv6_cidr_block
    #   <p>The IPv6 network range to allow or deny, in CIDR notation (for example
    #                   <code>2001:bd8:1234:1a00::/64</code>).</p>
    #
    # @option params [String] :network_acl_id
    #   <p>The ID of the ACL.</p>
    #
    # @option params [PortRange] :port_range
    #   <p>TCP or UDP protocols: The range of ports the rule applies to.
    #   		        Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    #
    # @option params [String] :protocol
    #   <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a
    #              protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is
    #              allowed, regardless of any ports or ICMP types or codes that you specify. If you specify
    #              protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and
    #              codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6)
    #              and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    #
    # @option params [String] :rule_action
    #   <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    #
    # @option params [Integer] :rule_number
    #   <p>The rule number of the entry to replace.</p>
    #
    # @return [Types::ReplaceNetworkAclEntryOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.replace_network_acl_entry(
    #     cidr_block: 'CidrBlock',
    #     dry_run: false,
    #     egress: false, # required
    #     icmp_type_code: {
    #       code: 1,
    #       type: 1
    #     },
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     network_acl_id: 'NetworkAclId', # required
    #     port_range: {
    #       from: 1,
    #       to: 1
    #     },
    #     protocol: 'Protocol', # required
    #     rule_action: 'allow', # required - accepts ["allow", "deny"]
    #     rule_number: 1 # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReplaceNetworkAclEntryOutput
    #
    def replace_network_acl_entry(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReplaceNetworkAclEntryInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReplaceNetworkAclEntryInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReplaceNetworkAclEntry
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReplaceNetworkAclEntry
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReplaceNetworkAclEntry,
        params_class: Params::ReplaceNetworkAclEntryOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :replace_network_acl_entry
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Replaces an existing route within a route table in a VPC. You must provide only one of
    #             the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC
    #             peering connection, network interface, egress-only internet gateway, or transit
    #             gateway.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    #                 <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ReplaceRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The IPv4 CIDR address block used for the destination match. The value that you
    #   			provide must match the CIDR of an existing route in the table.</p>
    #
    # @option params [String] :destination_ipv6_cidr_block
    #   <p>The IPv6 CIDR address block used for the destination match. The value that you
    #   			provide must match the CIDR of an existing route in the table.</p>
    #
    # @option params [String] :destination_prefix_list_id
    #   <p>The ID of the prefix list for the route.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :vpc_endpoint_id
    #   <p>The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.</p>
    #
    # @option params [String] :egress_only_internet_gateway_id
    #   <p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>
    #
    # @option params [String] :gateway_id
    #   <p>The ID of an internet gateway or virtual private gateway.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of a NAT instance in your VPC.</p>
    #
    # @option params [Boolean] :local_target
    #   <p>Specifies whether to reset the local route to its default target (<code>local</code>).</p>
    #
    # @option params [String] :nat_gateway_id
    #   <p>[IPv4 traffic only] The ID of a NAT gateway.</p>
    #
    # @option params [String] :transit_gateway_id
    #   <p>The ID of a transit gateway.</p>
    #
    # @option params [String] :local_gateway_id
    #   <p>The ID of the local gateway.</p>
    #
    # @option params [String] :carrier_gateway_id
    #   <p>[IPv4 traffic only] The ID of a carrier gateway.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of a network interface.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @option params [String] :vpc_peering_connection_id
    #   <p>The ID of a VPC peering connection.</p>
    #
    # @option params [String] :core_network_arn
    #   <p>The Amazon Resource Name (ARN) of the core network.</p>
    #
    # @return [Types::ReplaceRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.replace_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     destination_ipv6_cidr_block: 'DestinationIpv6CidrBlock',
    #     destination_prefix_list_id: 'DestinationPrefixListId',
    #     dry_run: false,
    #     vpc_endpoint_id: 'VpcEndpointId',
    #     egress_only_internet_gateway_id: 'EgressOnlyInternetGatewayId',
    #     gateway_id: 'GatewayId',
    #     instance_id: 'InstanceId',
    #     local_target: false,
    #     nat_gateway_id: 'NatGatewayId',
    #     transit_gateway_id: 'TransitGatewayId',
    #     local_gateway_id: 'LocalGatewayId',
    #     carrier_gateway_id: 'CarrierGatewayId',
    #     network_interface_id: 'NetworkInterfaceId',
    #     route_table_id: 'RouteTableId', # required
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId',
    #     core_network_arn: 'CoreNetworkArn'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReplaceRouteOutput
    #
    def replace_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReplaceRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReplaceRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReplaceRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReplaceRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReplaceRoute,
        params_class: Params::ReplaceRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :replace_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation
    #         completes, the subnet or gateway uses the routes in the new route table. For more
    #         information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
    #         tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.</p>
    #
    # @param [Hash] params
    #   See {Types::ReplaceRouteTableAssociationInput}.
    #
    # @option params [String] :association_id
    #   <p>The association ID.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :route_table_id
    #   <p>The ID of the new route table to associate with the subnet.</p>
    #
    # @return [Types::ReplaceRouteTableAssociationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.replace_route_table_association(
    #     association_id: 'AssociationId', # required
    #     dry_run: false,
    #     route_table_id: 'RouteTableId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReplaceRouteTableAssociationOutput
    #   resp.data.new_association_id #=> String
    #   resp.data.association_state #=> Types::RouteTableAssociationState
    #   resp.data.association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.association_state.status_message #=> String
    #
    def replace_route_table_association(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReplaceRouteTableAssociationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReplaceRouteTableAssociationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReplaceRouteTableAssociation
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReplaceRouteTableAssociation
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReplaceRouteTableAssociation,
        params_class: Params::ReplaceRouteTableAssociationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :replace_route_table_association
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Replaces the specified route in the specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::ReplaceTransitGatewayRouteInput}.
    #
    # @option params [String] :destination_cidr_block
    #   <p>The CIDR range used for the destination match. Routing decisions are based on the most specific match.</p>
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the route table.</p>
    #
    # @option params [String] :transit_gateway_attachment_id
    #   <p>The ID of the attachment.</p>
    #
    # @option params [Boolean] :blackhole
    #   <p>Indicates whether traffic matching this route is to be dropped.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ReplaceTransitGatewayRouteOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.replace_transit_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReplaceTransitGatewayRouteOutput
    #   resp.data.route #=> Types::TransitGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.prefix_list_id #=> String
    #   resp.data.route.transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.route.transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.route.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #
    def replace_transit_gateway_route(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReplaceTransitGatewayRouteInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReplaceTransitGatewayRouteInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReplaceTransitGatewayRoute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReplaceTransitGatewayRoute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReplaceTransitGatewayRoute,
        params_class: Params::ReplaceTransitGatewayRouteOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :replace_transit_gateway_route
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Submits feedback about the status of an instance. The instance must be in the
    #                 <code>running</code> state. If your experience with the instance differs from the
    #             instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon
    #             EC2 collects this information to improve the accuracy of status checks.</p>
    #         <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ReportInstanceStatusInput}.
    #
    # @option params [String] :description
    #   <p>Descriptive text about the health state of your instance.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Time] :end_time
    #   <p>The time at which the reported instance health state ended.</p>
    #
    # @option params [Array<String>] :instances
    #   <p>The instances.</p>
    #
    # @option params [Array<String>] :reason_codes
    #   <p>The reason codes that describe the health state of your instance.</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                       <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>unresponsive</code>: My instance is unresponsive.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>not-accepting-credentials</code>: My instance is not accepting my
    #                       credentials.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>password-not-available</code>: A password is not available for my
    #                       instance.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>performance-network</code>: My instance is experiencing performance
    #                       problems that I believe are network related.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>performance-instance-store</code>: My instance is experiencing performance
    #                       problems that I believe are related to the instance stores.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>performance-ebs-volume</code>: My instance is experiencing performance
    #                       problems that I believe are related to an EBS volume.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>performance-other</code>: My instance is experiencing performance
    #                       problems.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                       <code>other</code>: [explain using the description parameter]</p>
    #               </li>
    #            </ul>
    #
    # @option params [Time] :start_time
    #   <p>The time at which the reported instance health state began.</p>
    #
    # @option params [String] :status
    #   <p>The status of all instances listed.</p>
    #
    # @return [Types::ReportInstanceStatusOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.report_instance_status(
    #     description: 'Description',
    #     dry_run: false,
    #     end_time: Time.now,
    #     instances: [
    #       'member'
    #     ], # required
    #     reason_codes: [
    #       'instance-stuck-in-state' # accepts ["instance-stuck-in-state", "unresponsive", "not-accepting-credentials", "password-not-available", "performance-network", "performance-instance-store", "performance-ebs-volume", "performance-other", "other"]
    #     ], # required
    #     start_time: Time.now,
    #     status: 'ok' # required - accepts ["ok", "impaired"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ReportInstanceStatusOutput
    #
    def report_instance_status(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ReportInstanceStatusInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ReportInstanceStatusInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ReportInstanceStatus
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ReportInstanceStatus
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ReportInstanceStatus,
        params_class: Params::ReportInstanceStatusOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :report_instance_status
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Spot Fleet request.</p>
    #         <p>The Spot Fleet request specifies the total target capacity and the On-Demand target
    #             capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand
    #             capacity, and launches the difference as Spot capacity.</p>
    #         <p>You can submit a single request that includes multiple launch specifications that vary
    #             by instance type, AMI, Availability Zone, or subnet.</p>
    #         <p>By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the
    #             price per unit is the lowest. Each launch specification can include its own instance
    #             weighting that reflects the value of the instance type to your application
    #             workload.</p>
    #         <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity
    #             across the Spot pools included in its launch specifications. By ensuring that the Spot
    #             Instances in your Spot Fleet are in different Spot pools, you can improve the
    #             availability of your fleet.</p>
    #         <p>You can specify tags for the Spot Fleet request and instances launched by the fleet.
    #             You cannot tag other resource types in a Spot Fleet request because only the
    #                 <code>spot-fleet-request</code> and <code>instance</code> resource types are
    #             supported.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet requests</a>
    #             in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RequestSpotFleetInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [SpotFleetRequestConfigData] :spot_fleet_request_config
    #   <p>The configuration for the Spot Fleet request.</p>
    #
    # @return [Types::RequestSpotFleetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.request_spot_fleet(
    #     dry_run: false,
    #     spot_fleet_request_config: {
    #       allocation_strategy: 'lowestPrice', # accepts ["lowestPrice", "diversified", "capacityOptimized", "capacityOptimizedPrioritized"]
    #       on_demand_allocation_strategy: 'lowestPrice', # accepts ["lowestPrice", "prioritized"]
    #       spot_maintenance_strategies: {
    #         capacity_rebalance: {
    #           replacement_strategy: 'launch', # accepts ["launch", "launch-before-terminate"]
    #           termination_delay: 1
    #         }
    #       },
    #       client_token: 'ClientToken',
    #       excess_capacity_termination_policy: 'noTermination', # accepts ["noTermination", "default"]
    #       fulfilled_capacity: 1.0,
    #       on_demand_fulfilled_capacity: 1.0,
    #       iam_fleet_role: 'IamFleetRole', # required
    #       launch_specifications: [
    #         {
    #           security_groups: [
    #             {
    #               group_name: 'GroupName',
    #               group_id: 'GroupId'
    #             }
    #           ],
    #           addressing_type: 'AddressingType',
    #           block_device_mappings: [
    #             {
    #               device_name: 'DeviceName',
    #               virtual_name: 'VirtualName',
    #               ebs: {
    #                 delete_on_termination: false,
    #                 iops: 1,
    #                 snapshot_id: 'SnapshotId',
    #                 volume_size: 1,
    #                 volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #                 kms_key_id: 'KmsKeyId',
    #                 throughput: 1,
    #                 outpost_arn: 'OutpostArn',
    #                 encrypted: false
    #               },
    #               no_device: 'NoDevice'
    #             }
    #           ],
    #           ebs_optimized: false,
    #           iam_instance_profile: {
    #             arn: 'Arn',
    #             name: 'Name'
    #           },
    #           image_id: 'ImageId',
    #           instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #           kernel_id: 'KernelId',
    #           key_name: 'KeyName',
    #           monitoring: {
    #             enabled: false
    #           },
    #           network_interfaces: [
    #             {
    #               associate_public_ip_address: false,
    #               delete_on_termination: false,
    #               description: 'Description',
    #               device_index: 1,
    #               groups: [
    #                 'member'
    #               ],
    #               ipv6_address_count: 1,
    #               ipv6_addresses: [
    #                 {
    #                   ipv6_address: 'Ipv6Address'
    #                 }
    #               ],
    #               network_interface_id: 'NetworkInterfaceId',
    #               private_ip_address: 'PrivateIpAddress',
    #               private_ip_addresses: [
    #                 {
    #                   primary: false,
    #                   private_ip_address: 'PrivateIpAddress'
    #                 }
    #               ],
    #               secondary_private_ip_address_count: 1,
    #               subnet_id: 'SubnetId',
    #               associate_carrier_ip_address: false,
    #               interface_type: 'InterfaceType',
    #               network_card_index: 1,
    #               ipv4_prefixes: [
    #                 {
    #                   ipv4_prefix: 'Ipv4Prefix'
    #                 }
    #               ],
    #               ipv4_prefix_count: 1,
    #               ipv6_prefixes: [
    #                 {
    #                   ipv6_prefix: 'Ipv6Prefix'
    #                 }
    #               ],
    #               ipv6_prefix_count: 1
    #             }
    #           ],
    #           placement: {
    #             availability_zone: 'AvailabilityZone',
    #             group_name: 'GroupName',
    #             tenancy: 'default' # accepts ["default", "dedicated", "host"]
    #           },
    #           ramdisk_id: 'RamdiskId',
    #           spot_price: 'SpotPrice',
    #           subnet_id: 'SubnetId',
    #           user_data: 'UserData',
    #           weighted_capacity: 1.0,
    #           tag_specifications: [
    #             {
    #               resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #               tags: [
    #                 {
    #                   key: 'Key',
    #                   value: 'Value'
    #                 }
    #               ]
    #             }
    #           ],
    #           instance_requirements: {
    #             v_cpu_count: {
    #               min: 1,
    #               max: 1
    #             },
    #             memory_mi_b: {
    #               min: 1,
    #               max: 1
    #             },
    #             cpu_manufacturers: [
    #               'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #             ],
    #             memory_gi_b_per_v_cpu: {
    #               min: 1.0,
    #               max: 1.0
    #             },
    #             excluded_instance_types: [
    #               'member'
    #             ],
    #             instance_generations: [
    #               'current' # accepts ["current", "previous"]
    #             ],
    #             spot_max_price_percentage_over_lowest_price: 1,
    #             on_demand_max_price_percentage_over_lowest_price: 1,
    #             bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #             burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #             require_hibernate_support: false,
    #             network_interface_count: {
    #               min: 1,
    #               max: 1
    #             },
    #             local_storage: 'included', # accepts ["included", "required", "excluded"]
    #             local_storage_types: [
    #               'hdd' # accepts ["hdd", "ssd"]
    #             ],
    #             total_local_storage_gb: {
    #               min: 1.0,
    #               max: 1.0
    #             },
    #             baseline_ebs_bandwidth_mbps: {
    #               min: 1,
    #               max: 1
    #             },
    #             accelerator_types: [
    #               'gpu' # accepts ["gpu", "fpga", "inference"]
    #             ],
    #             accelerator_count: {
    #               min: 1,
    #               max: 1
    #             },
    #             accelerator_manufacturers: [
    #               'nvidia' # accepts ["nvidia", "amd", "amazon-web-services", "xilinx"]
    #             ],
    #             accelerator_names: [
    #               'a100' # accepts ["a100", "v100", "k80", "t4", "m60", "radeon-pro-v520", "vu9p"]
    #             ],
    #             accelerator_total_memory_mi_b: {
    #               min: 1,
    #               max: 1
    #             }
    #           }
    #         }
    #       ],
    #       launch_template_configs: [
    #         {
    #           launch_template_specification: {
    #             launch_template_id: 'LaunchTemplateId',
    #             launch_template_name: 'LaunchTemplateName',
    #             version: 'Version'
    #           },
    #           overrides: [
    #             {
    #               instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #               spot_price: 'SpotPrice',
    #               subnet_id: 'SubnetId',
    #               availability_zone: 'AvailabilityZone',
    #               weighted_capacity: 1.0,
    #               priority: 1.0,
    #             }
    #           ]
    #         }
    #       ],
    #       spot_price: 'SpotPrice',
    #       target_capacity: 1, # required
    #       on_demand_target_capacity: 1,
    #       on_demand_max_total_price: 'OnDemandMaxTotalPrice',
    #       spot_max_total_price: 'SpotMaxTotalPrice',
    #       terminate_instances_with_expiration: false,
    #       type: 'request', # accepts ["request", "maintain", "instant"]
    #       valid_from: Time.now,
    #       valid_until: Time.now,
    #       replace_unhealthy_instances: false,
    #       instance_interruption_behavior: 'hibernate', # accepts ["hibernate", "stop", "terminate"]
    #       load_balancers_config: {
    #         classic_load_balancers_config: {
    #           classic_load_balancers: [
    #             {
    #               name: 'Name'
    #             }
    #           ]
    #         },
    #         target_groups_config: {
    #           target_groups: [
    #             {
    #               arn: 'Arn'
    #             }
    #           ]
    #         }
    #       },
    #       instance_pools_to_use_count: 1,
    #       context: 'Context',
    #       target_capacity_unit_type: 'vcpu', # accepts ["vcpu", "memory-mib", "units"]
    #       tag_specifications: [
    #         {
    #           resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         }
    #       ]
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RequestSpotFleetOutput
    #   resp.data.spot_fleet_request_id #=> String
    #
    def request_spot_fleet(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RequestSpotFleetInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RequestSpotFleetInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RequestSpotFleet
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RequestSpotFleet
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RequestSpotFleet,
        params_class: Params::RequestSpotFleetOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :request_spot_fleet
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Creates a Spot Instance request.</p>
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance requests</a> in
    #             the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RequestSpotInstancesInput}.
    #
    # @option params [String] :availability_zone_group
    #   <p>The user-specified name for a logical grouping of requests.</p>
    #           <p>When you specify an Availability Zone group in a Spot Instance request, all Spot
    #               Instances in the request are launched in the same Availability Zone. Instance proximity
    #               is maintained with this parameter, but the choice of Availability Zone is not. The group
    #               applies only to requests for Spot Instances of the same instance type. Any additional
    #               Spot Instance requests that are specified with the same Availability Zone group name are
    #               launched in that same Availability Zone, as long as at least one instance from the group
    #               is still active.</p>
    #           <p>If there is no active instance running in the Availability Zone group that you specify
    #               for a new Spot Instance request (all instances are terminated, the request is expired,
    #               or the maximum price you specified falls below current Spot price), then Amazon EC2 launches
    #               the instance in any Availability Zone where the constraint can be met. Consequently, the
    #               subsequent set of Spot Instances could be placed in a different zone from the original
    #               request, even if you specified the same Availability Zone group.</p>
    #           <p>Default: Instances are launched in any available Availability Zone.</p>
    #
    # @option params [Integer] :block_duration_minutes
    #   <p>Deprecated.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    #               request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure
    #                   Idempotency</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually
    #               making the request, and provides an error response. If you have the required
    #               permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
    #                   <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :instance_count
    #   <p>The maximum number of Spot Instances to launch.</p>
    #           <p>Default: 1</p>
    #
    # @option params [String] :launch_group
    #   <p>The instance launch group. Launch groups are Spot Instances that launch together and
    #               terminate together.</p>
    #           <p>Default: Instances are launched and terminated individually</p>
    #
    # @option params [RequestSpotLaunchSpecification] :launch_specification
    #   <p>The launch specification.</p>
    #
    # @option params [String] :spot_price
    #   <p>The maximum price per hour that you are willing to pay for a Spot Instance. The
    #               default is the On-Demand price.</p>
    #
    # @option params [String] :type
    #   <p>The Spot Instance request type.</p>
    #           <p>Default: <code>one-time</code>
    #           </p>
    #
    # @option params [Time] :valid_from
    #   <p>The start date of the request. If this is a one-time request, the request becomes
    #               active at this date and time and remains active until all instances launch, the request
    #               expires, or the request is canceled. If the request is persistent, the request becomes
    #               active at this date and time and remains active until it expires or is canceled.</p>
    #           <p>The specified start date and time cannot be equal to the current date and time. You
    #               must specify a start date and time that occurs after the current date and time.</p>
    #
    # @option params [Time] :valid_until
    #   <p>The end date of the request, in UTC format
    #                   (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #           <ul>
    #               <li>
    #                   <p>For a persistent request, the request remains active until the
    #                           <code>ValidUntil</code> date and time is reached. Otherwise, the request
    #                       remains active until you cancel it. </p>
    #               </li>
    #               <li>
    #                   <p>For a one-time request, the request remains active until all instances launch,
    #                       the request is canceled, or the <code>ValidUntil</code> date and time is
    #                       reached. By default, the request is valid for 7 days from the date the request
    #                       was created.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The key-value pair for tagging the Spot Instance request on creation. The value for
    #                   <code>ResourceType</code> must be <code>spot-instances-request</code>, otherwise the
    #               Spot Instance request fails. To tag the Spot Instance request after it has been created,
    #               see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>. </p>
    #
    # @option params [String] :instance_interruption_behavior
    #   <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    #
    # @return [Types::RequestSpotInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.request_spot_instances(
    #     availability_zone_group: 'AvailabilityZoneGroup',
    #     block_duration_minutes: 1,
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     instance_count: 1,
    #     launch_group: 'LaunchGroup',
    #     launch_specification: {
    #       security_group_ids: [
    #         'member'
    #       ],
    #       security_groups: [
    #         'member'
    #       ],
    #       addressing_type: 'AddressingType',
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           virtual_name: 'VirtualName',
    #           ebs: {
    #             delete_on_termination: false,
    #             iops: 1,
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #             kms_key_id: 'KmsKeyId',
    #             throughput: 1,
    #             outpost_arn: 'OutpostArn',
    #             encrypted: false
    #           },
    #           no_device: 'NoDevice'
    #         }
    #       ],
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       image_id: 'ImageId',
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #       kernel_id: 'KernelId',
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false # required
    #       },
    #       network_interfaces: [
    #         {
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_addresses: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId',
    #           associate_carrier_ip_address: false,
    #           interface_type: 'InterfaceType',
    #           network_card_index: 1,
    #           ipv4_prefixes: [
    #             {
    #               ipv4_prefix: 'Ipv4Prefix'
    #             }
    #           ],
    #           ipv4_prefix_count: 1,
    #           ipv6_prefixes: [
    #             {
    #               ipv6_prefix: 'Ipv6Prefix'
    #             }
    #           ],
    #           ipv6_prefix_count: 1
    #         }
    #       ],
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         group_name: 'GroupName',
    #         tenancy: 'default' # accepts ["default", "dedicated", "host"]
    #       },
    #       ramdisk_id: 'RamdiskId',
    #       subnet_id: 'SubnetId',
    #       user_data: 'UserData'
    #     },
    #     spot_price: 'SpotPrice',
    #     type: 'one-time', # accepts ["one-time", "persistent"]
    #     valid_from: Time.now,
    #     valid_until: Time.now,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RequestSpotInstancesOutput
    #   resp.data.spot_instance_requests #=> Array<SpotInstanceRequest>
    #   resp.data.spot_instance_requests[0] #=> Types::SpotInstanceRequest
    #   resp.data.spot_instance_requests[0].actual_block_hourly_price #=> String
    #   resp.data.spot_instance_requests[0].availability_zone_group #=> String
    #   resp.data.spot_instance_requests[0].block_duration_minutes #=> Integer
    #   resp.data.spot_instance_requests[0].create_time #=> Time
    #   resp.data.spot_instance_requests[0].fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_instance_requests[0].fault.code #=> String
    #   resp.data.spot_instance_requests[0].fault.message #=> String
    #   resp.data.spot_instance_requests[0].instance_id #=> String
    #   resp.data.spot_instance_requests[0].launch_group #=> String
    #   resp.data.spot_instance_requests[0].launch_specification #=> Types::LaunchSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.user_data #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups #=> Array<GroupIdentifier>
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0] #=> Types::GroupIdentifier
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.addressing_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].device_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].virtual_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].no_device #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.ebs_optimized #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile #=> Types::IamInstanceProfileSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.image_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.spot_instance_requests[0].launch_specification.kernel_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.key_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces #=> Array<InstanceNetworkInterfaceSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0] #=> Types::InstanceNetworkInterfaceSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].description #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].device_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups #=> Array<String>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups[0] #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_interface_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].interface_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.placement #=> Types::SpotPlacement
    #   resp.data.spot_instance_requests[0].launch_specification.placement.availability_zone #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.spot_instance_requests[0].launch_specification.ramdisk_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring #=> Types::RunInstancesMonitoringEnabled
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring.enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launched_availability_zone #=> String
    #   resp.data.spot_instance_requests[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.spot_instance_requests[0].spot_instance_request_id #=> String
    #   resp.data.spot_instance_requests[0].spot_price #=> String
    #   resp.data.spot_instance_requests[0].state #=> String, one of ["open", "active", "closed", "cancelled", "failed"]
    #   resp.data.spot_instance_requests[0].status #=> Types::SpotInstanceStatus
    #   resp.data.spot_instance_requests[0].status.code #=> String
    #   resp.data.spot_instance_requests[0].status.message #=> String
    #   resp.data.spot_instance_requests[0].status.update_time #=> Time
    #   resp.data.spot_instance_requests[0].tags #=> Array<Tag>
    #   resp.data.spot_instance_requests[0].tags[0] #=> Types::Tag
    #   resp.data.spot_instance_requests[0].tags[0].key #=> String
    #   resp.data.spot_instance_requests[0].tags[0].value #=> String
    #   resp.data.spot_instance_requests[0].type #=> String, one of ["one-time", "persistent"]
    #   resp.data.spot_instance_requests[0].valid_from #=> Time
    #   resp.data.spot_instance_requests[0].valid_until #=> Time
    #   resp.data.spot_instance_requests[0].instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #
    def request_spot_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RequestSpotInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RequestSpotInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RequestSpotInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RequestSpotInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RequestSpotInstances,
        params_class: Params::RequestSpotInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :request_spot_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets the attribute of the specified IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetAddressAttributeInput}.
    #
    # @option params [String] :allocation_id
    #   <p>[EC2-VPC] The allocation ID.</p>
    #
    # @option params [String] :attribute
    #   <p>The attribute of the IP address.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ResetAddressAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_address_attribute(
    #     allocation_id: 'AllocationId', # required
    #     attribute: 'domain-name', # required - accepts ["domain-name"]
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetAddressAttributeOutput
    #   resp.data.address #=> Types::AddressAttribute
    #   resp.data.address.public_ip #=> String
    #   resp.data.address.allocation_id #=> String
    #   resp.data.address.ptr_record #=> String
    #   resp.data.address.ptr_record_update #=> Types::PtrUpdateStatus
    #   resp.data.address.ptr_record_update.value #=> String
    #   resp.data.address.ptr_record_update.status #=> String
    #   resp.data.address.ptr_record_update.reason #=> String
    #
    def reset_address_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetAddressAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetAddressAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetAddressAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetAddressAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetAddressAttribute,
        params_class: Params::ResetAddressAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_address_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets the default KMS key for EBS encryption for your account in this Region
    #       to the Amazon Web Services managed KMS key for EBS.</p>
    #          <p>After resetting the default KMS key to the Amazon Web Services managed KMS key, you can continue to encrypt by a
    #       customer managed KMS key by specifying it when you create the volume. For more information, see
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetEbsDefaultKmsKeyIdInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ResetEbsDefaultKmsKeyIdOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_ebs_default_kms_key_id(
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetEbsDefaultKmsKeyIdOutput
    #   resp.data.kms_key_id #=> String
    #
    def reset_ebs_default_kms_key_id(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetEbsDefaultKmsKeyIdInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetEbsDefaultKmsKeyIdInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetEbsDefaultKmsKeyId
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetEbsDefaultKmsKeyId
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetEbsDefaultKmsKeyId,
        params_class: Params::ResetEbsDefaultKmsKeyIdOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_ebs_default_kms_key_id
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value.
    # 		    You can only reset the load permission attribute.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetFpgaImageAttributeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :fpga_image_id
    #   <p>The ID of the AFI.</p>
    #
    # @option params [String] :attribute
    #   <p>The attribute.</p>
    #
    # @return [Types::ResetFpgaImageAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_fpga_image_attribute(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId', # required
    #     attribute: 'loadPermission' # accepts ["loadPermission"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetFpgaImageAttributeOutput
    #   resp.data.return #=> Boolean
    #
    def reset_fpga_image_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetFpgaImageAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetFpgaImageAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetFpgaImageAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetFpgaImageAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetFpgaImageAttribute,
        params_class: Params::ResetFpgaImageAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_fpga_image_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets an attribute of an AMI to its default value.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetImageAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The attribute to reset (currently you can only reset the launch permission attribute).</p>
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #          and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #          Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ResetImageAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_image_attribute(
    #     attribute: 'launchPermission', # required - accepts ["launchPermission"]
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetImageAttributeOutput
    #
    def reset_image_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetImageAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetImageAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetImageAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetImageAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetImageAttribute,
        params_class: Params::ResetImageAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_image_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets an attribute of an instance to its default value. To reset the
    #                 <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped
    #             state. To reset the <code>sourceDestCheck</code>, the instance can be either running or
    #             stopped.</p>
    #         <p>The <code>sourceDestCheck</code> attribute controls whether source/destination
    #             checking is enabled. The default value is <code>true</code>, which means checking is
    #             enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For
    #             more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the
    #                 <i>Amazon VPC User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetInstanceAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The attribute to reset.</p>
    #           <important>
    #               <p>You can only reset the following attributes: <code>kernel</code> |
    #                       <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance
    #                   attribute, use <a>ModifyInstanceAttribute</a>.</p>
    #           </important>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @return [Types::ResetInstanceAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_instance_attribute(
    #     attribute: 'instanceType', # required - accepts ["instanceType", "kernel", "ramdisk", "userData", "disableApiTermination", "instanceInitiatedShutdownBehavior", "rootDeviceName", "blockDeviceMapping", "productCodes", "sourceDestCheck", "groupSet", "ebsOptimized", "sriovNetSupport", "enaSupport", "enclaveOptions"]
    #     dry_run: false,
    #     instance_id: 'InstanceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetInstanceAttributeOutput
    #
    def reset_instance_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetInstanceAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetInstanceAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetInstanceAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetInstanceAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetInstanceAttribute,
        params_class: Params::ResetInstanceAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_instance_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetNetworkInterfaceAttributeInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #               and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #               Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @option params [String] :source_dest_check
    #   <p>The source/destination checking attribute. Resets the value to <code>true</code>.</p>
    #
    # @return [Types::ResetNetworkInterfaceAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_network_interface_attribute(
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     source_dest_check: 'SourceDestCheck'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetNetworkInterfaceAttributeOutput
    #
    def reset_network_interface_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetNetworkInterfaceAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetNetworkInterfaceAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetNetworkInterfaceAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetNetworkInterfaceAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetNetworkInterfaceAttribute,
        params_class: Params::ResetNetworkInterfaceAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_network_interface_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Resets permission settings for the specified snapshot.</p>
    #          <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::ResetSnapshotAttributeInput}.
    #
    # @option params [String] :attribute
    #   <p>The attribute to reset. Currently, only the attribute for permission to create volumes can
    #         be reset.</p>
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the snapshot.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::ResetSnapshotAttributeOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.reset_snapshot_attribute(
    #     attribute: 'productCodes', # required - accepts ["productCodes", "createVolumePermission"]
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ResetSnapshotAttributeOutput
    #
    def reset_snapshot_attribute(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ResetSnapshotAttributeInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ResetSnapshotAttributeInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ResetSnapshotAttribute
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::ResetSnapshotAttribute
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::ResetSnapshotAttribute,
        params_class: Params::ResetSnapshotAttributeOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :reset_snapshot_attribute
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
    #
    # @param [Hash] params
    #   See {Types::RestoreAddressToClassicInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :public_ip
    #   <p>The Elastic IP address.</p>
    #
    # @return [Types::RestoreAddressToClassicOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.restore_address_to_classic(
    #     dry_run: false,
    #     public_ip: 'PublicIp' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RestoreAddressToClassicOutput
    #   resp.data.public_ip #=> String
    #   resp.data.status #=> String, one of ["MoveInProgress", "InVpc", "InClassic"]
    #
    def restore_address_to_classic(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RestoreAddressToClassicInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RestoreAddressToClassicInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RestoreAddressToClassic
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RestoreAddressToClassic
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RestoreAddressToClassic,
        params_class: Params::RestoreAddressToClassicOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :restore_address_to_classic
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Restores the entries from a previous version of a managed prefix list to a new version of the prefix list.</p>
    #
    # @param [Hash] params
    #   See {Types::RestoreManagedPrefixListVersionInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :prefix_list_id
    #   <p>The ID of the prefix list.</p>
    #
    # @option params [Integer] :previous_version
    #   <p>The version to restore.</p>
    #
    # @option params [Integer] :current_version
    #   <p>The current version number for the prefix list.</p>
    #
    # @return [Types::RestoreManagedPrefixListVersionOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.restore_managed_prefix_list_version(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     previous_version: 1, # required
    #     current_version: 1 # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RestoreManagedPrefixListVersionOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    #
    def restore_managed_prefix_list_version(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RestoreManagedPrefixListVersionInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RestoreManagedPrefixListVersionInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RestoreManagedPrefixListVersion
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RestoreManagedPrefixListVersion
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RestoreManagedPrefixListVersion,
        params_class: Params::RestoreManagedPrefixListVersionOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :restore_managed_prefix_list_version
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Restores a snapshot from the Recycle Bin. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin-working-with-snaps.html#recycle-bin-restore-snaps">Restore
    #       snapshots from the Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RestoreSnapshotFromRecycleBinInput}.
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the snapshot to restore.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RestoreSnapshotFromRecycleBinOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.restore_snapshot_from_recycle_bin(
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RestoreSnapshotFromRecycleBinOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.outpost_arn #=> String
    #   resp.data.description #=> String
    #   resp.data.encrypted #=> Boolean
    #   resp.data.owner_id #=> String
    #   resp.data.progress #=> String
    #   resp.data.start_time #=> Time
    #   resp.data.state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.volume_id #=> String
    #   resp.data.volume_size #=> Integer
    #
    def restore_snapshot_from_recycle_bin(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RestoreSnapshotFromRecycleBinInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RestoreSnapshotFromRecycleBinInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RestoreSnapshotFromRecycleBin
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RestoreSnapshotFromRecycleBin
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RestoreSnapshotFromRecycleBin,
        params_class: Params::RestoreSnapshotFromRecycleBinOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :restore_snapshot_from_recycle_bin
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Restores an archived Amazon EBS snapshot for use temporarily or permanently, or modifies the restore
    #       period or restore type for a snapshot that was previously temporarily restored.</p>
    #
    #          <p>For more information see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-snapshot-archiving.html#restore-archived-snapshot">
    #       Restore an archived snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-snapshot-archiving.html#modify-temp-restore-period">
    #         modify the restore period or restore type for a temporarily restored snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RestoreSnapshotTierInput}.
    #
    # @option params [String] :snapshot_id
    #   <p>The ID of the snapshot to restore.</p>
    #
    # @option params [Integer] :temporary_restore_days
    #   <p>Specifies the number of days for which to temporarily restore an archived snapshot.
    #         Required for temporary restores only. The snapshot will be automatically re-archived
    #         after this period.</p>
    #            <p>To temporarily restore an archived snapshot, specify the number of days and omit
    #         the <b>PermanentRestore</b> parameter or set it to
    #         <code>false</code>.</p>
    #
    # @option params [Boolean] :permanent_restore
    #   <p>Indicates whether to permanently restore an archived snapshot. To permanently restore
    #         an archived snapshot, specify <code>true</code> and omit the
    #         <b>RestoreSnapshotTierRequest$TemporaryRestoreDays</b> parameter.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RestoreSnapshotTierOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.restore_snapshot_tier(
    #     snapshot_id: 'SnapshotId', # required
    #     temporary_restore_days: 1,
    #     permanent_restore: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RestoreSnapshotTierOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.restore_start_time #=> Time
    #   resp.data.restore_duration #=> Integer
    #   resp.data.is_permanent_restore #=> Boolean
    #
    def restore_snapshot_tier(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RestoreSnapshotTierInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RestoreSnapshotTierInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RestoreSnapshotTier
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RestoreSnapshotTier
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RestoreSnapshotTier,
        params_class: Params::RestoreSnapshotTierOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :restore_snapshot_tier
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Removes an ingress authorization rule from a Client VPN endpoint. </p>
    #
    # @param [Hash] params
    #   See {Types::RevokeClientVpnIngressInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint with which the authorization rule is associated.</p>
    #
    # @option params [String] :target_network_cidr
    #   <p>The IPv4 address range, in CIDR notation, of the network for which access is being removed.</p>
    #
    # @option params [String] :access_group_id
    #   <p>The ID of the Active Directory group for which to revoke access. </p>
    #
    # @option params [Boolean] :revoke_all_groups
    #   <p>Indicates whether access should be revoked for all clients.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::RevokeClientVpnIngressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.revoke_client_vpn_ingress(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     target_network_cidr: 'TargetNetworkCidr', # required
    #     access_group_id: 'AccessGroupId',
    #     revoke_all_groups: false,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RevokeClientVpnIngressOutput
    #   resp.data.status #=> Types::ClientVpnAuthorizationRuleStatus
    #   resp.data.status.code #=> String, one of ["authorizing", "active", "failed", "revoking"]
    #   resp.data.status.message #=> String
    #
    def revoke_client_vpn_ingress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RevokeClientVpnIngressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RevokeClientVpnIngressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RevokeClientVpnIngress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RevokeClientVpnIngress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RevokeClientVpnIngress,
        params_class: Params::RevokeClientVpnIngressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :revoke_client_vpn_ingress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>[VPC only] Removes the specified outbound (egress) rules from a security group for EC2-VPC.
    #        This action does not apply to security groups for use in EC2-Classic.</p>
    #
    #          <p>You can specify rules using either rule IDs or security group rule properties. If you use
    #          rule properties, the values that you specify (for example, ports) must match the existing rule's
    #          values exactly. Each rule has a protocol, from and to ports, and destination (CIDR range,
    #          security group, or prefix list). For the TCP and UDP protocols, you must also specify the
    #          destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type
    #          and code. If the security group rule has a description, you do not need to specify the description
    #          to revoke the rule.</p>
    #          <p>[Default VPC] If the values you specify do not match the existing rule's values, no error is
    #          returned, and the output describes the security group rules that were not revoked.</p>
    #          <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p>
    #
    #          <p>Rule changes are propagated to instances within the security group as quickly as possible. However,
    #          a small delay might occur.</p>
    #
    # @param [Hash] params
    #   See {Types::RevokeSecurityGroupEgressInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group.</p>
    #
    # @option params [Array<IpPermission>] :ip_permissions
    #   <p>The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.</p>
    #
    # @option params [Array<String>] :security_group_rule_ids
    #   <p>The IDs of the security group rules.</p>
    #
    # @option params [String] :cidr_ip
    #   <p>Not supported. Use a set of IP permissions to specify the CIDR.</p>
    #
    # @option params [Integer] :from_port
    #   <p>Not supported. Use a set of IP permissions to specify the port.</p>
    #
    # @option params [String] :ip_protocol
    #   <p>Not supported. Use a set of IP permissions to specify the protocol name or
    #               number.</p>
    #
    # @option params [Integer] :to_port
    #   <p>Not supported. Use a set of IP permissions to specify the port.</p>
    #
    # @option params [String] :source_security_group_name
    #   <p>Not supported. Use a set of IP permissions to specify a
    #              destination security group.</p>
    #
    # @option params [String] :source_security_group_owner_id
    #   <p>Not supported. Use a set of IP permissions to specify a destination security
    #               group.</p>
    #
    # @return [Types::RevokeSecurityGroupEgressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.revoke_security_group_egress(
    #     dry_run: false,
    #     group_id: 'GroupId', # required
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_rule_ids: [
    #       'member'
    #     ],
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     ip_protocol: 'IpProtocol',
    #     to_port: 1,
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RevokeSecurityGroupEgressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.unknown_ip_permissions #=> Array<IpPermission>
    #   resp.data.unknown_ip_permissions[0] #=> Types::IpPermission
    #   resp.data.unknown_ip_permissions[0].from_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].ip_protocol #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges #=> Array<IpRange>
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0] #=> Types::IpRange
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].cidr_ip #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges #=> Array<Ipv6Range>
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0] #=> Types::Ipv6Range
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].cidr_ipv6 #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids #=> Array<PrefixListId>
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0] #=> Types::PrefixListId
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].prefix_list_id #=> String
    #   resp.data.unknown_ip_permissions[0].to_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    #
    def revoke_security_group_egress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RevokeSecurityGroupEgressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RevokeSecurityGroupEgressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RevokeSecurityGroupEgress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RevokeSecurityGroupEgress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RevokeSecurityGroupEgress,
        params_class: Params::RevokeSecurityGroupEgressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :revoke_security_group_egress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Removes the specified inbound (ingress) rules from a security group.</p>
    #
    #          <p>You can specify rules using either rule IDs or security group rule properties. If you use
    #            rule properties, the values that you specify (for example, ports) must match the existing rule's
    #            values exactly. Each rule has a protocol, from and to ports, and source (CIDR range,
    #            security group, or prefix list). For the TCP and UDP protocols, you must also specify the
    #            destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type
    #            and code. If the security group rule has a description, you do not need to specify the description
    #            to revoke the rule.</p>
    #          <p>[EC2-Classic, default VPC] If the values you specify do not match the existing rule's values, no error is
    #            returned, and the output describes the security group rules that were not revoked.</p>
    #          <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p>
    #
    #          <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
    #
    # @param [Hash] params
    #   See {Types::RevokeSecurityGroupIngressInput}.
    #
    # @option params [String] :cidr_ip
    #   <p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>
    #
    # @option params [Integer] :from_port
    #   <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number,
    #           use <code>-1</code> to specify all ICMP types.</p>
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group. You must specify either the security group ID or the
    #              security group name in the request. For security groups in a nondefault VPC, you must
    #              specify the security group ID.</p>
    #
    # @option params [String] :group_name
    #   <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
    #              security group ID or the security group name in the request.</p>
    #
    # @option params [Array<IpPermission>] :ip_permissions
    #   <p>The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.</p>
    #
    # @option params [String] :ip_protocol
    #   <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number
    #           (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>).
    #           Use <code>-1</code> to specify all.</p>
    #
    # @option params [String] :source_security_group_name
    #   <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
    #
    # @option params [String] :source_security_group_owner_id
    #   <p>[EC2-Classic] The Amazon Web Services account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
    #
    # @option params [Integer] :to_port
    #   <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number,
    #           use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<String>] :security_group_rule_ids
    #   <p>The IDs of the security group rules.</p>
    #
    # @return [Types::RevokeSecurityGroupIngressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.revoke_security_group_ingress(
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     ip_protocol: 'IpProtocol',
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId',
    #     to_port: 1,
    #     dry_run: false,
    #     security_group_rule_ids: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RevokeSecurityGroupIngressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.unknown_ip_permissions #=> Array<IpPermission>
    #   resp.data.unknown_ip_permissions[0] #=> Types::IpPermission
    #   resp.data.unknown_ip_permissions[0].from_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].ip_protocol #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges #=> Array<IpRange>
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0] #=> Types::IpRange
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].cidr_ip #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges #=> Array<Ipv6Range>
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0] #=> Types::Ipv6Range
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].cidr_ipv6 #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids #=> Array<PrefixListId>
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0] #=> Types::PrefixListId
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].prefix_list_id #=> String
    #   resp.data.unknown_ip_permissions[0].to_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    #
    def revoke_security_group_ingress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RevokeSecurityGroupIngressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RevokeSecurityGroupIngressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RevokeSecurityGroupIngress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RevokeSecurityGroupIngress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RevokeSecurityGroupIngress,
        params_class: Params::RevokeSecurityGroupIngressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :revoke_security_group_ingress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Launches the specified number of instances using an AMI for which you have
    #             permissions.</p>
    #         <p>You can specify a number of options, or leave the default options. The following rules
    #             apply:</p>
    #         <ul>
    #             <li>
    #                 <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from
    #                     your default VPC for you. If you don't have a default VPC, you must specify a
    #                     subnet ID in the request.</p>
    #             </li>
    #             <li>
    #                 <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for
    #                     you.</p>
    #             </li>
    #             <li>
    #                 <p>Some instance types must be launched into a VPC. If you do not have a default
    #                     VPC, or if you do not specify a subnet ID, the request fails. For more
    #                     information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance types available only in a VPC</a>.</p>
    #             </li>
    #             <li>
    #                 <p>[EC2-VPC] All instances have a network interface with a primary private IPv4
    #                     address. If you don't specify this address, we choose one from the IPv4 range of
    #                     your subnet.</p>
    #             </li>
    #             <li>
    #                 <p>Not all instance types support IPv6 addresses. For more information, see
    #                         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
    #                     types</a>.</p>
    #             </li>
    #             <li>
    #                 <p>If you don't specify a security group ID, we use the default security group.
    #                     For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security
    #                         groups</a>.</p>
    #             </li>
    #             <li>
    #                 <p>If any of the AMIs have a product code attached for which the user has not
    #                     subscribed, the request fails.</p>
    #             </li>
    #          </ul>
    #         <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>,
    #             which is a resource that contains the parameters to launch an instance. When you launch
    #             an instance using <a>RunInstances</a>, you can specify the launch template
    #             instead of specifying the launch parameters.</p>
    #         <p>To ensure faster instance launches, break up large requests into smaller batches. For
    #             example, create five separate launch requests for 100 instances each instead of one
    #             launch request for 500 instances.</p>
    #         <p>An instance is ready for you to use when it's in the <code>running</code> state. You
    #             can check the state of your instance using <a>DescribeInstances</a>. You can
    #             tag instances and EBS volumes during launch, after launch, or both. For more
    #             information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2
    #                 resources</a>.</p>
    #         <p>Linux instances have access to the public key of the key pair at boot. You can use
    #             this key to provide secure access to the instance. Amazon EC2 public images use this
    #             feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
    #                 pairs</a>.</p>
    #         <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What to do if
    #                 an instance immediately terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting connecting to your instance</a>.</p>
    #
    # @param [Hash] params
    #   See {Types::RunInstancesInput}.
    #
    # @option params [Array<BlockDeviceMapping>] :block_device_mappings
    #   <p>The block device mapping, which defines the EBS volumes and instance store
    #               volumes to attach to the instance at launch. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block device mappings</a>
    #               in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [String] :image_id
    #   <p>The ID of the AMI. An AMI ID is required to launch an instance and must be
    #           	specified here or in a launch template.</p>
    #
    # @option params [String] :instance_type
    #   <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the
    #                   <i>Amazon EC2 User Guide</i>.</p>
    #           <p>Default: <code>m1.small</code>
    #            </p>
    #
    # @option params [Integer] :ipv6_address_count
    #   <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network
    #               interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You
    #               cannot specify this option and the option to assign specific IPv6 addresses in the same
    #               request. You can specify this option if you've specified a minimum number of instances
    #               to launch.</p>
    #           <p>You cannot specify this option and the network interfaces option in the same
    #               request.</p>
    #
    # @option params [Array<InstanceIpv6Address>] :ipv6_addresses
    #   <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the
    #               primary network interface. You cannot specify this option and the option to assign a
    #               number of IPv6 addresses in the same request. You cannot specify this option if you've
    #               specified a minimum number of instances to launch.</p>
    #           <p>You cannot specify this option and the network interfaces option in the same
    #               request.</p>
    #
    # @option params [String] :kernel_id
    #   <p>The ID of the kernel.</p>
    #           <important>
    #               <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
    #                   information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the
    #                       <i>Amazon EC2 User Guide</i>.</p>
    #           </important>
    #
    # @option params [String] :key_name
    #   <p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or
    #                   <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p>
    #           <important>
    #               <p>If you do not specify a key pair, you can't connect to the instance unless you
    #                   choose an AMI that is configured to allow users another way to log in.</p>
    #           </important>
    #
    # @option params [Integer] :max_count
    #   <p>The maximum number of instances to launch. If you specify more instances than Amazon
    #               EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible
    #               number of instances above <code>MinCount</code>.</p>
    #           <p>Constraints: Between 1 and the maximum number you're allowed for the specified
    #               instance type. For more information about the default limits, and how to request an
    #               increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I
    #                   run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
    #
    # @option params [Integer] :min_count
    #   <p>The minimum number of instances to launch. If you specify a minimum that is more
    #               instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2
    #               launches no instances.</p>
    #           <p>Constraints: Between 1 and the maximum number you're allowed for the specified
    #               instance type. For more information about the default limits, and how to request an
    #               increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I
    #                   run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
    #
    # @option params [RunInstancesMonitoringEnabled] :monitoring
    #   <p>Specifies whether detailed monitoring is enabled for the instance.</p>
    #
    # @option params [Placement] :placement
    #   <p>The placement for the instance.</p>
    #
    # @option params [String] :ramdisk_id
    #   <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch.
    #               Check the kernel requirements for information about whether you need to specify a RAM
    #               disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the
    #               kernel ID.</p>
    #           <important>
    #               <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
    #                   information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">PV-GRUB</a> in the
    #                       <i>Amazon EC2 User Guide</i>.</p>
    #           </important>
    #
    # @option params [Array<String>] :security_group_ids
    #   <p>The IDs of the security groups. You can create a security group using
    #   	<a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p>
    #           <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    #
    # @option params [Array<String>] :security_groups
    #   <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you
    #               must use security group IDs instead.</p>
    #           <p>If you specify a network interface, you must specify any security groups as part of
    #               the network interface.</p>
    #           <p>Default: Amazon EC2 uses the default security group.</p>
    #
    # @option params [String] :subnet_id
    #   <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p>
    #           <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
    #
    # @option params [String] :user_data
    #   <p>The user data to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Run commands
    #                   on your Linux instance at launch</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html">Run commands on your Windows instance at launch</a>. If you are using a command line tool,
    #               base64-encoding is performed for you, and you can load the text from a file. Otherwise,
    #               you must provide base64-encoded text. User data is limited to 16 KB.</p>
    #
    # @option params [String] :additional_info
    #   <p>Reserved.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
    #               request. If you do not specify a client token, a randomly generated token is used for the
    #               request to ensure idempotency.</p>
    #
    #               <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
    #                   Idempotency</a>.</p>
    #           <p>Constraints: Maximum 64 ASCII characters</p>
    #
    # @option params [Boolean] :disable_api_termination
    #   <p>If you set this parameter to <code>true</code>, you can't terminate the instance using
    #               the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch,
    #               use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>.
    #               Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to
    #                   <code>terminate</code>, you can terminate the instance by running the shutdown
    #               command from the instance.</p>
    #           <p>Default: <code>false</code>
    #           </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :ebs_optimized
    #   <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
    #               provides dedicated throughput to Amazon EBS and an optimized configuration stack to
    #               provide optimal Amazon EBS I/O performance. This optimization isn't available with all
    #               instance types. Additional usage charges apply when using an EBS-optimized
    #               instance.</p>
    #           <p>Default: <code>false</code>
    #           </p>
    #
    # @option params [IamInstanceProfileSpecification] :iam_instance_profile
    #   <p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>
    #
    # @option params [String] :instance_initiated_shutdown_behavior
    #   <p>Indicates whether an instance stops or terminates when you initiate shutdown from the
    #               instance (using the operating system command for system shutdown).</p>
    #           <p>Default: <code>stop</code>
    #           </p>
    #
    # @option params [Array<InstanceNetworkInterfaceSpecification>] :network_interfaces
    #   <p>The network interfaces to associate with the instance. If you specify a network interface,
    #               you must specify any security groups and subnets as part of the network interface.</p>
    #
    # @option params [String] :private_ip_address
    #   <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address
    #               range of the subnet.</p>
    #           <p>Only one private IP address can be designated as primary. You can't specify this
    #               option if you've specified the option to designate a private IP address as the primary
    #               IP address in a network interface specification. You cannot specify this option if
    #               you're launching more than one instance in the request.</p>
    #           <p>You cannot specify this option and the network interfaces option in the same
    #               request.</p>
    #
    # @option params [Array<ElasticGpuSpecification>] :elastic_gpu_specification
    #   <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that
    #               you can attach to your Windows instance to accelerate the graphics performance of your
    #               applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon EC2 Elastic
    #                   GPUs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [Array<ElasticInferenceAccelerator>] :elastic_inference_accelerators
    #   <p>An elastic inference accelerator to associate with the instance. Elastic inference
    #               accelerators are a resource you can attach to your Amazon EC2 instances to accelerate
    #               your Deep Learning (DL) inference workloads.</p>
    #           <p>You cannot specify accelerators from different generations in the same request.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply to the resources during launch. You can only tag instances and
    #               volumes on launch. The specified tags are applied to all instances or volumes that are
    #               created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    #
    # @option params [LaunchTemplateSpecification] :launch_template
    #   <p>The launch template to use to launch the instances. Any parameters that you specify in
    #                   <a>RunInstances</a> override the same parameters in the launch template.
    #               You can specify either the name or ID of a launch template, but not both.</p>
    #
    # @option params [InstanceMarketOptionsRequest] :instance_market_options
    #   <p>The market (purchasing) option for the instances.</p>
    #           <p>For <a>RunInstances</a>, persistent Spot Instance requests are
    #               only supported when <b>InstanceInterruptionBehavior</b> is set
    #               to either <code>hibernate</code> or <code>stop</code>.</p>
    #
    # @option params [CreditSpecificationRequest] :credit_specification
    #   <p>The credit option for CPU usage of the burstable performance instance. Valid values
    #               are <code>standard</code> and <code>unlimited</code>. To change this attribute after
    #               launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html">
    #                   ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                   performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #           <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a
    #               instances)</p>
    #
    #           <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is
    #               supported.</p>
    #
    # @option params [CpuOptionsRequest] :cpu_options
    #   <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @option params [CapacityReservationSpecification] :capacity_reservation_specification
    #   <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the
    #               instance's Capacity Reservation preference defaults to <code>open</code>, which enables
    #               it to run in any open Capacity Reservation that has matching attributes (instance type,
    #               platform, Availability Zone).</p>
    #
    # @option params [HibernationOptionsRequest] :hibernation_options
    #   <p>Indicates whether an instance is enabled for hibernation. For more information, see
    #                   <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
    #                   your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #           <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.</p>
    #
    # @option params [Array<LicenseConfigurationRequest>] :license_specifications
    #   <p>The license configurations.</p>
    #
    # @option params [InstanceMetadataOptionsRequest] :metadata_options
    #   <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>.</p>
    #
    # @option params [EnclaveOptionsRequest] :enclave_options
    #   <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information,
    #   			see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html">
    #   			    What is Amazon Web Services Nitro Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>		
    #   	        <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>
    #
    # @option params [PrivateDnsNameOptionsRequest] :private_dns_name_options
    #   <p>The options for the instance hostname. The default values are inherited from the subnet.</p>
    #
    # @return [Types::RunInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.run_instances(
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         virtual_name: 'VirtualName',
    #         ebs: {
    #           delete_on_termination: false,
    #           iops: 1,
    #           snapshot_id: 'SnapshotId',
    #           volume_size: 1,
    #           volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #           kms_key_id: 'KmsKeyId',
    #           throughput: 1,
    #           outpost_arn: 'OutpostArn',
    #           encrypted: false
    #         },
    #         no_device: 'NoDevice'
    #       }
    #     ],
    #     image_id: 'ImageId',
    #     instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #     ipv6_address_count: 1,
    #     ipv6_addresses: [
    #       {
    #         ipv6_address: 'Ipv6Address'
    #       }
    #     ],
    #     kernel_id: 'KernelId',
    #     key_name: 'KeyName',
    #     max_count: 1, # required
    #     min_count: 1, # required
    #     monitoring: {
    #       enabled: false # required
    #     },
    #     placement: {
    #       availability_zone: 'AvailabilityZone',
    #       affinity: 'Affinity',
    #       group_name: 'GroupName',
    #       partition_number: 1,
    #       host_id: 'HostId',
    #       tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #       spread_domain: 'SpreadDomain',
    #       host_resource_group_arn: 'HostResourceGroupArn'
    #     },
    #     ramdisk_id: 'RamdiskId',
    #     security_group_ids: [
    #       'member'
    #     ],
    #     security_groups: [
    #       'member'
    #     ],
    #     subnet_id: 'SubnetId',
    #     user_data: 'UserData',
    #     additional_info: 'AdditionalInfo',
    #     client_token: 'ClientToken',
    #     disable_api_termination: false,
    #     dry_run: false,
    #     ebs_optimized: false,
    #     iam_instance_profile: {
    #       arn: 'Arn',
    #       name: 'Name'
    #     },
    #     instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #     network_interfaces: [
    #       {
    #         associate_public_ip_address: false,
    #         delete_on_termination: false,
    #         description: 'Description',
    #         device_index: 1,
    #         ipv6_address_count: 1,
    #         network_interface_id: 'NetworkInterfaceId',
    #         private_ip_address: 'PrivateIpAddress',
    #         private_ip_addresses: [
    #           {
    #             primary: false,
    #             private_ip_address: 'PrivateIpAddress'
    #           }
    #         ],
    #         secondary_private_ip_address_count: 1,
    #         subnet_id: 'SubnetId',
    #         associate_carrier_ip_address: false,
    #         interface_type: 'InterfaceType',
    #         network_card_index: 1,
    #         ipv4_prefixes: [
    #           {
    #             ipv4_prefix: 'Ipv4Prefix'
    #           }
    #         ],
    #         ipv4_prefix_count: 1,
    #         ipv6_prefixes: [
    #           {
    #             ipv6_prefix: 'Ipv6Prefix'
    #           }
    #         ],
    #         ipv6_prefix_count: 1
    #       }
    #     ],
    #     private_ip_address: 'PrivateIpAddress',
    #     elastic_gpu_specification: [
    #       {
    #         type: 'Type' # required
    #       }
    #     ],
    #     elastic_inference_accelerators: [
    #       {
    #         type: 'Type', # required
    #         count: 1
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     launch_template: {
    #       launch_template_id: 'LaunchTemplateId',
    #       launch_template_name: 'LaunchTemplateName',
    #       version: 'Version'
    #     },
    #     instance_market_options: {
    #       market_type: 'spot', # accepts ["spot"]
    #       spot_options: {
    #         max_price: 'MaxPrice',
    #         spot_instance_type: 'one-time', # accepts ["one-time", "persistent"]
    #         block_duration_minutes: 1,
    #         valid_until: Time.now,
    #         instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #       }
    #     },
    #     credit_specification: {
    #       cpu_credits: 'CpuCredits' # required
    #     },
    #     cpu_options: {
    #       core_count: 1,
    #       threads_per_core: 1
    #     },
    #     capacity_reservation_specification: {
    #       capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #       capacity_reservation_target: {
    #         capacity_reservation_id: 'CapacityReservationId',
    #         capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #       }
    #     },
    #     hibernation_options: {
    #       configured: false
    #     },
    #     license_specifications: [
    #       {
    #         license_configuration_arn: 'LicenseConfigurationArn'
    #       }
    #     ],
    #     metadata_options: {
    #       http_tokens: 'optional', # accepts ["optional", "required"]
    #       http_put_response_hop_limit: 1,
    #       http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #       http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #       instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #     },
    #     enclave_options: {
    #       enabled: false
    #     },
    #     private_dns_name_options: {
    #       hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #       enable_resource_name_dns_a_record: false,
    #       enable_resource_name_dns_aaaa_record: false
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RunInstancesOutput
    #   resp.data.groups #=> Array<GroupIdentifier>
    #   resp.data.groups[0] #=> Types::GroupIdentifier
    #   resp.data.groups[0].group_name #=> String
    #   resp.data.groups[0].group_id #=> String
    #   resp.data.instances #=> Array<Instance>
    #   resp.data.instances[0] #=> Types::Instance
    #   resp.data.instances[0].ami_launch_index #=> Integer
    #   resp.data.instances[0].image_id #=> String
    #   resp.data.instances[0].instance_id #=> String
    #   resp.data.instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal"]
    #   resp.data.instances[0].kernel_id #=> String
    #   resp.data.instances[0].key_name #=> String
    #   resp.data.instances[0].launch_time #=> Time
    #   resp.data.instances[0].monitoring #=> Types::Monitoring
    #   resp.data.instances[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    #   resp.data.instances[0].placement #=> Types::Placement
    #   resp.data.instances[0].placement.availability_zone #=> String
    #   resp.data.instances[0].placement.affinity #=> String
    #   resp.data.instances[0].placement.group_name #=> String
    #   resp.data.instances[0].placement.partition_number #=> Integer
    #   resp.data.instances[0].placement.host_id #=> String
    #   resp.data.instances[0].placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.instances[0].placement.spread_domain #=> String
    #   resp.data.instances[0].placement.host_resource_group_arn #=> String
    #   resp.data.instances[0].platform #=> String, one of ["Windows"]
    #   resp.data.instances[0].private_dns_name #=> String
    #   resp.data.instances[0].private_ip_address #=> String
    #   resp.data.instances[0].product_codes #=> Array<ProductCode>
    #   resp.data.instances[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.instances[0].product_codes[0].product_code_id #=> String
    #   resp.data.instances[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.instances[0].public_dns_name #=> String
    #   resp.data.instances[0].public_ip_address #=> String
    #   resp.data.instances[0].ramdisk_id #=> String
    #   resp.data.instances[0].state #=> Types::InstanceState
    #   resp.data.instances[0].state.code #=> Integer
    #   resp.data.instances[0].state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.instances[0].state_transition_reason #=> String
    #   resp.data.instances[0].subnet_id #=> String
    #   resp.data.instances[0].vpc_id #=> String
    #   resp.data.instances[0].architecture #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac"]
    #   resp.data.instances[0].block_device_mappings #=> Array<InstanceBlockDeviceMapping>
    #   resp.data.instances[0].block_device_mappings[0] #=> Types::InstanceBlockDeviceMapping
    #   resp.data.instances[0].block_device_mappings[0].device_name #=> String
    #   resp.data.instances[0].block_device_mappings[0].ebs #=> Types::EbsInstanceBlockDevice
    #   resp.data.instances[0].block_device_mappings[0].ebs.attach_time #=> Time
    #   resp.data.instances[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.instances[0].block_device_mappings[0].ebs.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.instances[0].block_device_mappings[0].ebs.volume_id #=> String
    #   resp.data.instances[0].client_token #=> String
    #   resp.data.instances[0].ebs_optimized #=> Boolean
    #   resp.data.instances[0].ena_support #=> Boolean
    #   resp.data.instances[0].hypervisor #=> String, one of ["ovm", "xen"]
    #   resp.data.instances[0].iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.instances[0].iam_instance_profile.arn #=> String
    #   resp.data.instances[0].iam_instance_profile.id #=> String
    #   resp.data.instances[0].instance_lifecycle #=> String, one of ["spot", "scheduled"]
    #   resp.data.instances[0].elastic_gpu_associations #=> Array<ElasticGpuAssociation>
    #   resp.data.instances[0].elastic_gpu_associations[0] #=> Types::ElasticGpuAssociation
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_id #=> String
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_association_id #=> String
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_association_state #=> String
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_association_time #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations #=> Array<ElasticInferenceAcceleratorAssociation>
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0] #=> Types::ElasticInferenceAcceleratorAssociation
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_arn #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_id #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_state #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_time #=> Time
    #   resp.data.instances[0].network_interfaces #=> Array<InstanceNetworkInterface>
    #   resp.data.instances[0].network_interfaces[0] #=> Types::InstanceNetworkInterface
    #   resp.data.instances[0].network_interfaces[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.instances[0].network_interfaces[0].association.carrier_ip #=> String
    #   resp.data.instances[0].network_interfaces[0].association.customer_owned_ip #=> String
    #   resp.data.instances[0].network_interfaces[0].association.ip_owner_id #=> String
    #   resp.data.instances[0].network_interfaces[0].association.public_dns_name #=> String
    #   resp.data.instances[0].network_interfaces[0].association.public_ip #=> String
    #   resp.data.instances[0].network_interfaces[0].attachment #=> Types::InstanceNetworkInterfaceAttachment
    #   resp.data.instances[0].network_interfaces[0].attachment.attach_time #=> Time
    #   resp.data.instances[0].network_interfaces[0].attachment.attachment_id #=> String
    #   resp.data.instances[0].network_interfaces[0].attachment.delete_on_termination #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].attachment.device_index #=> Integer
    #   resp.data.instances[0].network_interfaces[0].attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.instances[0].network_interfaces[0].attachment.network_card_index #=> Integer
    #   resp.data.instances[0].network_interfaces[0].description #=> String
    #   resp.data.instances[0].network_interfaces[0].groups #=> Array<GroupIdentifier>
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.instances[0].network_interfaces[0].mac_address #=> String
    #   resp.data.instances[0].network_interfaces[0].network_interface_id #=> String
    #   resp.data.instances[0].network_interfaces[0].owner_id #=> String
    #   resp.data.instances[0].network_interfaces[0].private_dns_name #=> String
    #   resp.data.instances[0].network_interfaces[0].private_ip_address #=> String
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses #=> Array<InstancePrivateIpAddress>
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0] #=> Types::InstancePrivateIpAddress
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.instances[0].network_interfaces[0].source_dest_check #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.instances[0].network_interfaces[0].subnet_id #=> String
    #   resp.data.instances[0].network_interfaces[0].vpc_id #=> String
    #   resp.data.instances[0].network_interfaces[0].interface_type #=> String
    #   resp.data.instances[0].network_interfaces[0].ipv4_prefixes #=> Array<InstanceIpv4Prefix>
    #   resp.data.instances[0].network_interfaces[0].ipv4_prefixes[0] #=> Types::InstanceIpv4Prefix
    #   resp.data.instances[0].network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.instances[0].network_interfaces[0].ipv6_prefixes #=> Array<InstanceIpv6Prefix>
    #   resp.data.instances[0].network_interfaces[0].ipv6_prefixes[0] #=> Types::InstanceIpv6Prefix
    #   resp.data.instances[0].network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.instances[0].outpost_arn #=> String
    #   resp.data.instances[0].root_device_name #=> String
    #   resp.data.instances[0].root_device_type #=> String, one of ["ebs", "instance-store"]
    #   resp.data.instances[0].security_groups #=> Array<GroupIdentifier>
    #   resp.data.instances[0].source_dest_check #=> Boolean
    #   resp.data.instances[0].spot_instance_request_id #=> String
    #   resp.data.instances[0].sriov_net_support #=> String
    #   resp.data.instances[0].state_reason #=> Types::StateReason
    #   resp.data.instances[0].state_reason.code #=> String
    #   resp.data.instances[0].state_reason.message #=> String
    #   resp.data.instances[0].tags #=> Array<Tag>
    #   resp.data.instances[0].tags[0] #=> Types::Tag
    #   resp.data.instances[0].tags[0].key #=> String
    #   resp.data.instances[0].tags[0].value #=> String
    #   resp.data.instances[0].virtualization_type #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.instances[0].cpu_options #=> Types::CpuOptions
    #   resp.data.instances[0].cpu_options.core_count #=> Integer
    #   resp.data.instances[0].cpu_options.threads_per_core #=> Integer
    #   resp.data.instances[0].capacity_reservation_id #=> String
    #   resp.data.instances[0].capacity_reservation_specification #=> Types::CapacityReservationSpecificationResponse
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.instances[0].hibernation_options #=> Types::HibernationOptions
    #   resp.data.instances[0].hibernation_options.configured #=> Boolean
    #   resp.data.instances[0].licenses #=> Array<LicenseConfiguration>
    #   resp.data.instances[0].licenses[0] #=> Types::LicenseConfiguration
    #   resp.data.instances[0].licenses[0].license_configuration_arn #=> String
    #   resp.data.instances[0].metadata_options #=> Types::InstanceMetadataOptionsResponse
    #   resp.data.instances[0].metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.instances[0].metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.instances[0].metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.instances[0].metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.instances[0].metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.instances[0].metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.instances[0].enclave_options #=> Types::EnclaveOptions
    #   resp.data.instances[0].enclave_options.enabled #=> Boolean
    #   resp.data.instances[0].boot_mode #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.instances[0].platform_details #=> String
    #   resp.data.instances[0].usage_operation #=> String
    #   resp.data.instances[0].usage_operation_update_time #=> Time
    #   resp.data.instances[0].private_dns_name_options #=> Types::PrivateDnsNameOptionsResponse
    #   resp.data.instances[0].private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.instances[0].private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.instances[0].private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.instances[0].ipv6_address #=> String
    #   resp.data.owner_id #=> String
    #   resp.data.requester_id #=> String
    #   resp.data.reservation_id #=> String
    #
    def run_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RunInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RunInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RunInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RunInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RunInstances,
        params_class: Params::RunInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :run_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Launches the specified Scheduled Instances.</p>
    #          <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p>
    #          <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance,
    #          but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends,
    #          you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a>
    #          in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::RunScheduledInstancesInput}.
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that ensures the idempotency of the request.
    #            For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Integer] :instance_count
    #   <p>The number of instances.</p>
    #            <p>Default: 1</p>
    #
    # @option params [ScheduledInstancesLaunchSpecification] :launch_specification
    #   <p>The launch specification. You must match the instance type, Availability Zone,
    #            network, and platform of the schedule that you purchased.</p>
    #
    # @option params [String] :scheduled_instance_id
    #   <p>The Scheduled Instance ID.</p>
    #
    # @return [Types::RunScheduledInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.run_scheduled_instances(
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     instance_count: 1,
    #     launch_specification: {
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           ebs: {
    #             delete_on_termination: false,
    #             encrypted: false,
    #             iops: 1,
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'VolumeType'
    #           },
    #           no_device: 'NoDevice',
    #           virtual_name: 'VirtualName'
    #         }
    #       ],
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       image_id: 'ImageId', # required
    #       instance_type: 'InstanceType',
    #       kernel_id: 'KernelId',
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false
    #       },
    #       network_interfaces: [
    #         {
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_address_configs: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId'
    #         }
    #       ],
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         group_name: 'GroupName'
    #       },
    #       ramdisk_id: 'RamdiskId',
    #       subnet_id: 'SubnetId',
    #       user_data: 'UserData'
    #     }, # required
    #     scheduled_instance_id: 'ScheduledInstanceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::RunScheduledInstancesOutput
    #   resp.data.instance_id_set #=> Array<String>
    #   resp.data.instance_id_set[0] #=> String
    #
    def run_scheduled_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::RunScheduledInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::RunScheduledInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::RunScheduledInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::RunScheduledInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::RunScheduledInstances,
        params_class: Params::RunScheduledInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :run_scheduled_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Searches for routes in the specified local gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::SearchLocalGatewayRoutesInput}.
    #
    # @option params [String] :local_gateway_route_table_id
    #   <p>The ID of the local gateway route table.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters.</p>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::SearchLocalGatewayRoutesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.search_local_gateway_routes(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SearchLocalGatewayRoutesOutput
    #   resp.data.routes #=> Array<LocalGatewayRoute>
    #   resp.data.routes[0] #=> Types::LocalGatewayRoute
    #   resp.data.routes[0].destination_cidr_block #=> String
    #   resp.data.routes[0].local_gateway_virtual_interface_group_id #=> String
    #   resp.data.routes[0].type #=> String, one of ["static", "propagated"]
    #   resp.data.routes[0].state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.routes[0].local_gateway_route_table_id #=> String
    #   resp.data.routes[0].local_gateway_route_table_arn #=> String
    #   resp.data.routes[0].owner_id #=> String
    #   resp.data.next_token #=> String
    #
    def search_local_gateway_routes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SearchLocalGatewayRoutesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SearchLocalGatewayRoutesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SearchLocalGatewayRoutes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::SearchLocalGatewayRoutes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::SearchLocalGatewayRoutes,
        params_class: Params::SearchLocalGatewayRoutesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :search_local_gateway_routes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Searches one or more  transit gateway multicast groups and returns the group membership information.</p>
    #
    # @param [Hash] params
    #   See {Types::SearchTransitGatewayMulticastGroupsInput}.
    #
    # @option params [String] :transit_gateway_multicast_domain_id
    #   <p>The ID of the transit gateway multicast domain.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #           <ul>
    #               <li>
    #                   <p>
    #                     <code>group-ip-address</code> - The IP address of the  transit gateway multicast group.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>is-group-member</code> - The resource is a group member. Valid values are <code>true</code> | <code>false</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>is-group-source</code> - The resource is a group source. Valid values are <code>true</code> | <code>false</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>member-type</code> - The member type. Valid values are <code>igmp</code> | <code>static</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>resource-id</code> - The ID of the resource.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>resource-type</code> - The type of resource. Valid values are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>tgw-peering</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>source-type</code> - The source type. Valid values are <code>igmp</code> | <code>static</code>.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>subnet-id</code> - The ID of the subnet.</p>
    #               </li>
    #               <li>
    #                   <p>
    #                     <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of results to return with a single call.
    #   	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    #
    # @option params [String] :next_token
    #   <p>The token for the next page of results.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::SearchTransitGatewayMulticastGroupsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.search_transit_gateway_multicast_groups(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SearchTransitGatewayMulticastGroupsOutput
    #   resp.data.multicast_groups #=> Array<TransitGatewayMulticastGroup>
    #   resp.data.multicast_groups[0] #=> Types::TransitGatewayMulticastGroup
    #   resp.data.multicast_groups[0].group_ip_address #=> String
    #   resp.data.multicast_groups[0].transit_gateway_attachment_id #=> String
    #   resp.data.multicast_groups[0].subnet_id #=> String
    #   resp.data.multicast_groups[0].resource_id #=> String
    #   resp.data.multicast_groups[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.multicast_groups[0].resource_owner_id #=> String
    #   resp.data.multicast_groups[0].network_interface_id #=> String
    #   resp.data.multicast_groups[0].group_member #=> Boolean
    #   resp.data.multicast_groups[0].group_source #=> Boolean
    #   resp.data.multicast_groups[0].member_type #=> String, one of ["static", "igmp"]
    #   resp.data.multicast_groups[0].source_type #=> String, one of ["static", "igmp"]
    #   resp.data.next_token #=> String
    #
    def search_transit_gateway_multicast_groups(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SearchTransitGatewayMulticastGroupsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SearchTransitGatewayMulticastGroupsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SearchTransitGatewayMulticastGroups
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::SearchTransitGatewayMulticastGroups
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::SearchTransitGatewayMulticastGroups,
        params_class: Params::SearchTransitGatewayMulticastGroupsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :search_transit_gateway_multicast_groups
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Searches for routes in the specified transit gateway route table.</p>
    #
    # @param [Hash] params
    #   See {Types::SearchTransitGatewayRoutesInput}.
    #
    # @option params [String] :transit_gateway_route_table_id
    #   <p>The ID of the transit gateway route table.</p>
    #
    # @option params [Array<Filter>] :filters
    #   <p>One or more filters. The possible values are:</p>
    #            <ul>
    #               <li>
    #                  <p>
    #                     <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>attachment.resource-type</code> - The attachment resource type. Valid values
    #                       are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> |
    #                           <code>peering</code> | <code>connect</code>.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>prefix-list-id</code> - The ID of the prefix list.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.exact-match</code> - The exact match of the specified filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p>
    #               </li>
    #               <li>
    #                  <p>
    #                     <code>type</code> - The type of route (<code>propagated</code> |
    #                     <code>static</code>).</p>
    #               </li>
    #            </ul>
    #
    # @option params [Integer] :max_results
    #   <p>The maximum number of routes to return.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::SearchTransitGatewayRoutesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.search_transit_gateway_routes(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ], # required
    #     max_results: 1,
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SearchTransitGatewayRoutesOutput
    #   resp.data.routes #=> Array<TransitGatewayRoute>
    #   resp.data.routes[0] #=> Types::TransitGatewayRoute
    #   resp.data.routes[0].destination_cidr_block #=> String
    #   resp.data.routes[0].prefix_list_id #=> String
    #   resp.data.routes[0].transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.routes[0].transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.routes[0].transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.routes[0].transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.routes[0].transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.routes[0].type #=> String, one of ["static", "propagated"]
    #   resp.data.routes[0].state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.additional_routes_available #=> Boolean
    #
    def search_transit_gateway_routes(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SearchTransitGatewayRoutesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SearchTransitGatewayRoutesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SearchTransitGatewayRoutes
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::SearchTransitGatewayRoutes
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::SearchTransitGatewayRoutes,
        params_class: Params::SearchTransitGatewayRoutesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :search_transit_gateway_routes
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a
    # 			<i>kernel panic</i> (on Linux instances), or a
    # 			<i>blue screen</i>/<i>stop error</i> (on Windows
    # 			instances). For instances based on Intel and AMD processors, the interrupt is
    # 			received as a <i>non-maskable interrupt</i> (NMI).</p>
    # 		
    # 		       <p>In general, the operating system crashes and reboots when a kernel panic or stop
    # 			error is triggered. The operating system can also be configured to perform diagnostic
    # 			tasks, such as generating a memory dump file, loading a secondary kernel, or
    # 			obtaining a call trace.</p>
    # 		
    # 		       <p>Before sending a diagnostic interrupt to your instance, ensure that its operating
    # 			system is configured to perform the required diagnostic tasks.</p>
    # 		
    # 		       <p>For more information about configuring your operating system to generate a crash dump
    # 			when a kernel panic or stop error occurs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send a diagnostic interrupt (for advanced users)</a> (Linux instances) or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send a diagnostic interrupt (for advanced users)</a> (Windows instances).</p>
    #
    # @param [Hash] params
    #   See {Types::SendDiagnosticInterruptInput}.
    #
    # @option params [String] :instance_id
    #   <p>The ID of the instance.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::SendDiagnosticInterruptOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.send_diagnostic_interrupt(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::SendDiagnosticInterruptOutput
    #
    def send_diagnostic_interrupt(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::SendDiagnosticInterruptInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::SendDiagnosticInterruptInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::SendDiagnosticInterrupt
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::SendDiagnosticInterrupt
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::SendDiagnosticInterrupt,
        params_class: Params::SendDiagnosticInterruptOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :send_diagnostic_interrupt
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p>
    #         <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and
    #             started. When an instance is stopped, the compute resources are released and you are not
    #             billed for instance usage. However, your root partition Amazon EBS volume remains and
    #             continues to persist your data, and you are charged for Amazon EBS volume usage. You can
    #             restart your instance at any time. Every time you start your instance, Amazon EC2
    #             charges a one-minute minimum for instance usage, and thereafter charges per second for
    #             instance usage.</p>
    #         <p>Before stopping an instance, make sure it is in a state from which it can be
    #             restarted. Stopping an instance does not preserve data stored in RAM.</p>
    #         <p>Performing this operation on an instance that uses an instance store as its root
    #             device returns an error.</p>
    #
    #         <p>If you attempt to start a T3 instance with <code>host</code> tenancy and the <code>unlimted</code>
    #             CPU credit option, the request fails. The <code>unlimited</code> CPU credit option is not
    #             supported on Dedicated Hosts. Before you start the instance, either change its CPU credit
    #             option to <code>standard</code>, or change its tenancy to <code>default</code> or <code>dedicated</code>.</p>
    #
    #         <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start your instance</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::StartInstancesInput}.
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The IDs of the instances.</p>
    #
    # @option params [String] :additional_info
    #   <p>Reserved.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::StartInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     additional_info: 'AdditionalInfo',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartInstancesOutput
    #   resp.data.starting_instances #=> Array<InstanceStateChange>
    #   resp.data.starting_instances[0] #=> Types::InstanceStateChange
    #   resp.data.starting_instances[0].current_state #=> Types::InstanceState
    #   resp.data.starting_instances[0].current_state.code #=> Integer
    #   resp.data.starting_instances[0].current_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.starting_instances[0].instance_id #=> String
    #   resp.data.starting_instances[0].previous_state #=> Types::InstanceState
    #
    def start_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StartInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::StartInstances,
        params_class: Params::StartInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :start_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts analyzing the specified Network Access Scope.</p>
    #
    # @param [Hash] params
    #   See {Types::StartNetworkInsightsAccessScopeAnalysisInput}.
    #
    # @option params [String] :network_insights_access_scope_id
    #   <p>The ID of the Network Access Scope.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,
    #      see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::StartNetworkInsightsAccessScopeAnalysisOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_network_insights_access_scope_analysis(
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId', # required
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartNetworkInsightsAccessScopeAnalysisOutput
    #   resp.data.network_insights_access_scope_analysis #=> Types::NetworkInsightsAccessScopeAnalysis
    #   resp.data.network_insights_access_scope_analysis.network_insights_access_scope_analysis_id #=> String
    #   resp.data.network_insights_access_scope_analysis.network_insights_access_scope_analysis_arn #=> String
    #   resp.data.network_insights_access_scope_analysis.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_analysis.status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_access_scope_analysis.status_message #=> String
    #   resp.data.network_insights_access_scope_analysis.warning_message #=> String
    #   resp.data.network_insights_access_scope_analysis.start_date #=> Time
    #   resp.data.network_insights_access_scope_analysis.end_date #=> Time
    #   resp.data.network_insights_access_scope_analysis.findings_found #=> String, one of ["true", "false", "unknown"]
    #   resp.data.network_insights_access_scope_analysis.analyzed_eni_count #=> Integer
    #   resp.data.network_insights_access_scope_analysis.tags #=> Array<Tag>
    #   resp.data.network_insights_access_scope_analysis.tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scope_analysis.tags[0].key #=> String
    #   resp.data.network_insights_access_scope_analysis.tags[0].value #=> String
    #
    def start_network_insights_access_scope_analysis(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartNetworkInsightsAccessScopeAnalysisInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartNetworkInsightsAccessScopeAnalysisInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartNetworkInsightsAccessScopeAnalysis
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StartNetworkInsightsAccessScopeAnalysis
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::StartNetworkInsightsAccessScopeAnalysis,
        params_class: Params::StartNetworkInsightsAccessScopeAnalysisOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :start_network_insights_access_scope_analysis
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Starts analyzing the specified path. If the path is reachable, the
    #          operation returns the shortest feasible path.</p>
    #
    # @param [Hash] params
    #   See {Types::StartNetworkInsightsAnalysisInput}.
    #
    # @option params [String] :network_insights_path_id
    #   <p>The ID of the path.</p>
    #
    # @option params [Array<String>] :filter_in_arns
    #   <p>The Amazon Resource Names (ARN) of the resources that the path must traverse.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Array<TagSpecification>] :tag_specifications
    #   <p>The tags to apply.</p>
    #
    # @option params [String] :client_token
    #   <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,
    #      see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #
    # @return [Types::StartNetworkInsightsAnalysisOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_network_insights_analysis(
    #     network_insights_path_id: 'NetworkInsightsPathId', # required
    #     filter_in_arns: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-route-table", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-service", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartNetworkInsightsAnalysisOutput
    #   resp.data.network_insights_analysis #=> Types::NetworkInsightsAnalysis
    #   resp.data.network_insights_analysis.network_insights_analysis_id #=> String
    #   resp.data.network_insights_analysis.network_insights_analysis_arn #=> String
    #   resp.data.network_insights_analysis.network_insights_path_id #=> String
    #   resp.data.network_insights_analysis.filter_in_arns #=> Array<String>
    #   resp.data.network_insights_analysis.filter_in_arns[0] #=> String
    #   resp.data.network_insights_analysis.start_date #=> Time
    #   resp.data.network_insights_analysis.status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_analysis.status_message #=> String
    #   resp.data.network_insights_analysis.warning_message #=> String
    #   resp.data.network_insights_analysis.network_path_found #=> Boolean
    #   resp.data.network_insights_analysis.forward_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analysis.forward_path_components[0] #=> Types::PathComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].sequence_number #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.egress #=> Boolean
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.port_range.from #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.port_range.to #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.rule_action #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.rule_number #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to.id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to.arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to.name #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.destination_addresses #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.destination_addresses[0] #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.destination_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.source_addresses #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.source_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].inbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.destination_cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.destination_prefix_list_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.egress_only_internet_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.instance_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.nat_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.network_interface_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.origin #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.transit_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.vpc_peering_connection_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.direction #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.security_group_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.prefix_list_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.return_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analysis.explanations #=> Array<Explanation>
    #   resp.data.network_insights_analysis.explanations[0] #=> Types::Explanation
    #   resp.data.network_insights_analysis.explanations[0].acl #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analysis.explanations[0].address #=> String
    #   resp.data.network_insights_analysis.explanations[0].addresses #=> Array<String>
    #   resp.data.network_insights_analysis.explanations[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].availability_zones #=> Array<String>
    #   resp.data.network_insights_analysis.explanations[0].availability_zones[0] #=> String
    #   resp.data.network_insights_analysis.explanations[0].cidrs #=> Array<String>
    #   resp.data.network_insights_analysis.explanations[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].customer_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].destination #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].direction #=> String
    #   resp.data.network_insights_analysis.explanations[0].explanation_code #=> String
    #   resp.data.network_insights_analysis.explanations[0].ingress_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].internet_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_arn #=> String
    #   resp.data.network_insights_analysis.explanations[0].classic_load_balancer_listener #=> Types::AnalysisLoadBalancerListener
    #   resp.data.network_insights_analysis.explanations[0].classic_load_balancer_listener.load_balancer_port #=> Integer
    #   resp.data.network_insights_analysis.explanations[0].classic_load_balancer_listener.instance_port #=> Integer
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_listener_port #=> Integer
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target #=> Types::AnalysisLoadBalancerTarget
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target.address #=> String
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target.availability_zone #=> String
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target.instance #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target.port #=> Integer
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analysis.explanations[0].load_balancer_target_port #=> Integer
    #   resp.data.network_insights_analysis.explanations[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].missing_component #=> String
    #   resp.data.network_insights_analysis.explanations[0].nat_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].network_interface #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].packet_field #=> String
    #   resp.data.network_insights_analysis.explanations[0].vpc_peering_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].port #=> Integer
    #   resp.data.network_insights_analysis.explanations[0].port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analysis.explanations[0].prefix_list #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].protocols #=> Array<String>
    #   resp.data.network_insights_analysis.explanations[0].protocols[0] #=> String
    #   resp.data.network_insights_analysis.explanations[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analysis.explanations[0].route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].security_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analysis.explanations[0].security_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analysis.explanations[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].state #=> String
    #   resp.data.network_insights_analysis.explanations[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].subnet_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].vpc_endpoint #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].vpn_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.explanations[0].vpn_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.alternate_path_hints #=> Array<AlternatePathHint>
    #   resp.data.network_insights_analysis.alternate_path_hints[0] #=> Types::AlternatePathHint
    #   resp.data.network_insights_analysis.alternate_path_hints[0].component_id #=> String
    #   resp.data.network_insights_analysis.alternate_path_hints[0].component_arn #=> String
    #   resp.data.network_insights_analysis.tags #=> Array<Tag>
    #   resp.data.network_insights_analysis.tags[0] #=> Types::Tag
    #   resp.data.network_insights_analysis.tags[0].key #=> String
    #   resp.data.network_insights_analysis.tags[0].value #=> String
    #
    def start_network_insights_analysis(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartNetworkInsightsAnalysisInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartNetworkInsightsAnalysisInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartNetworkInsightsAnalysis
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StartNetworkInsightsAnalysis
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::StartNetworkInsightsAnalysis,
        params_class: Params::StartNetworkInsightsAnalysisOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :start_network_insights_analysis
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Initiates the verification process to prove that the service provider owns the private
    #             DNS name domain for the endpoint service.</p>
    #         <p>The service provider must successfully perform the verification before the consumer can use the name to access the service.</p>
    #         <p>Before the service provider runs this command, they must add a record to the DNS server. For more information, see  <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html#add-dns-txt-record">Adding a TXT Record to Your Domain's DNS Server </a> in the <i>Amazon VPC User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::StartVpcEndpointServicePrivateDnsVerificationInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :service_id
    #   <p>The ID of the endpoint service.</p>
    #
    # @return [Types::StartVpcEndpointServicePrivateDnsVerificationOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.start_vpc_endpoint_service_private_dns_verification(
    #     dry_run: false,
    #     service_id: 'ServiceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StartVpcEndpointServicePrivateDnsVerificationOutput
    #   resp.data.return_value #=> Boolean
    #
    def start_vpc_endpoint_service_private_dns_verification(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StartVpcEndpointServicePrivateDnsVerificationInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StartVpcEndpointServicePrivateDnsVerificationInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StartVpcEndpointServicePrivateDnsVerification
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StartVpcEndpointServicePrivateDnsVerification
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::StartVpcEndpointServicePrivateDnsVerification,
        params_class: Params::StartVpcEndpointServicePrivateDnsVerificationOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :start_vpc_endpoint_service_private_dns_verification
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops an Amazon EBS-backed instance.</p>
    #         <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for
    #                 hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
    #                 prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #         <p>We don't charge usage for a stopped instance, or data transfer fees; however, your
    #             root partition Amazon EBS volume remains and continues to persist your data, and you are
    #             charged for Amazon EBS volume usage. Every time you start your instance, Amazon EC2
    #             charges a one-minute minimum for instance usage, and thereafter charges per second for
    #             instance usage.</p>
    #         <p>You can't stop or hibernate instance store-backed instances. You can't use the Stop
    #             action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate
    #             Spot Instances when they are interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating interrupted Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #         <p>When you stop or hibernate an instance, we shut it down. You can restart your instance
    #             at any time. Before stopping or hibernating an instance, make sure it is in a state from
    #             which it can be restarted. Stopping an instance does not preserve data stored in RAM,
    #             but hibernating an instance does preserve data stored in RAM. If an instance cannot
    #             hibernate successfully, a normal shutdown occurs.</p>
    #         <p>Stopping and hibernating an instance is different to rebooting or terminating it. For
    #             example, when you stop or hibernate an instance, the root device and any other devices
    #             attached to the instance persist. When you terminate an instance, the root device and
    #             any other devices attached during the instance launch are automatically deleted. For
    #             more information about the differences between rebooting, stopping, hibernating, and
    #             terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    #         <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If
    #             your instance appears stuck in the stopping state after a period of time, there may be
    #             an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshoot
    #                 stopping your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::StopInstancesInput}.
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The IDs of the instances.</p>
    #
    # @option params [Boolean] :hibernate
    #   <p>Hibernates the instance if the instance was enabled for hibernation at launch. If the
    #               instance cannot hibernate successfully, a normal shutdown occurs. For more information,
    #               see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
    #                   your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #           <p> Default: <code>false</code>
    #            </p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [Boolean] :force
    #   <p>Forces the instances to stop. The instances do not have an opportunity to flush file
    #               system caches or file system metadata. If you use this option, you must perform file
    #               system check and repair procedures. This option is not recommended for Windows
    #               instances.</p>
    #           <p>Default: <code>false</code>
    #           </p>
    #
    # @return [Types::StopInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.stop_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     hibernate: false,
    #     dry_run: false,
    #     force: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::StopInstancesOutput
    #   resp.data.stopping_instances #=> Array<InstanceStateChange>
    #   resp.data.stopping_instances[0] #=> Types::InstanceStateChange
    #   resp.data.stopping_instances[0].current_state #=> Types::InstanceState
    #   resp.data.stopping_instances[0].current_state.code #=> Integer
    #   resp.data.stopping_instances[0].current_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.stopping_instances[0].instance_id #=> String
    #   resp.data.stopping_instances[0].previous_state #=> Types::InstanceState
    #
    def stop_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::StopInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::StopInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::StopInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::StopInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::StopInstances,
        params_class: Params::StopInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :stop_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.</p>
    #
    # @param [Hash] params
    #   See {Types::TerminateClientVpnConnectionsInput}.
    #
    # @option params [String] :client_vpn_endpoint_id
    #   <p>The ID of the Client VPN endpoint to which the client is connected.</p>
    #
    # @option params [String] :connection_id
    #   <p>The ID of the client connection to be terminated.</p>
    #
    # @option params [String] :username
    #   <p>The name of the user who initiated the connection. Use this option to terminate all active connections for
    #   			the specified user. This option can only be used if the user has established up to five connections.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::TerminateClientVpnConnectionsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.terminate_client_vpn_connections(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     connection_id: 'ConnectionId',
    #     username: 'Username',
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::TerminateClientVpnConnectionsOutput
    #   resp.data.client_vpn_endpoint_id #=> String
    #   resp.data.username #=> String
    #   resp.data.connection_statuses #=> Array<TerminateConnectionStatus>
    #   resp.data.connection_statuses[0] #=> Types::TerminateConnectionStatus
    #   resp.data.connection_statuses[0].connection_id #=> String
    #   resp.data.connection_statuses[0].previous_status #=> Types::ClientVpnConnectionStatus
    #   resp.data.connection_statuses[0].previous_status.code #=> String, one of ["active", "failed-to-terminate", "terminating", "terminated"]
    #   resp.data.connection_statuses[0].previous_status.message #=> String
    #   resp.data.connection_statuses[0].current_status #=> Types::ClientVpnConnectionStatus
    #
    def terminate_client_vpn_connections(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::TerminateClientVpnConnectionsInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::TerminateClientVpnConnectionsInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::TerminateClientVpnConnections
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::TerminateClientVpnConnections
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::TerminateClientVpnConnections,
        params_class: Params::TerminateClientVpnConnectionsOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :terminate_client_vpn_connections
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Shuts down the specified instances. This operation is idempotent; if you terminate an
    #             instance more than once, each call succeeds. </p>
    #
    #         <p>If you specify multiple instances and the request fails (for example, because of a
    #             single incorrect instance ID), none of the instances are terminated.</p>
    #
    #         <p>If you terminate multiple instances across multiple Availability Zones, and one or more
    #             of the specified instances are enabled for termination protection, the request fails with
    #             the following results:</p>
    #         <ul>
    #             <li>
    #                 <p>The specified instances that are in the same Availability Zone as the protected
    #                     instance are not terminated.</p>
    #             </li>
    #             <li>
    #                 <p>The specified instances that are in different Availability Zones, where no other
    #                     specified instances are protected, are successfully terminated.</p>
    #             </li>
    #          </ul>
    #
    #         <p>For example, say you have the following instances:</p>
    #         <ul>
    #             <li>
    #                 <p>Instance A: <code>us-east-1a</code>; Not protected</p>
    #             </li>
    #             <li>
    #                 <p>Instance B: <code>us-east-1a</code>; Not protected</p>
    #             </li>
    #             <li>
    #                 <p>Instance C: <code>us-east-1b</code>; Protected</p>
    #             </li>
    #             <li>
    #                 <p>Instance D: <code>us-east-1b</code>; not protected</p>
    #             </li>
    #          </ul>
    #         <p>If you attempt to terminate all of these instances in the same request, the request reports
    #             failure with the following results:</p>
    #         <ul>
    #             <li>
    #                 <p>Instance A and Instance B are successfully terminated because none of the specified
    #                     instances in <code>us-east-1a</code> are enabled for termination protection.</p>
    #             </li>
    #             <li>
    #                 <p>Instance C and Instance D fail to terminate because at least one of the specified
    #                     instances in <code>us-east-1b</code> (Instance C) is enabled for termination protection.</p>
    #             </li>
    #          </ul>
    #
    #
    #         <p>Terminated instances remain visible after termination (for approximately one
    #             hour).</p>
    #         <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance
    #             launched. Volumes attached after instance launch continue running.</p>
    #         <p>You can stop, start, and terminate EBS-backed instances. You can only terminate
    #             instance store-backed instances. What happens to an instance differs if you stop it or
    #             terminate it. For example, when you stop an instance, the root device and any other
    #             devices attached to the instance persist. When you terminate an instance, any attached
    #             EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set
    #             to <code>true</code> are automatically deleted. For more information about the
    #             differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    #         <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting terminating your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::TerminateInstancesInput}.
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The IDs of the instances.</p>
    #           <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into
    #               smaller batches.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::TerminateInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.terminate_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::TerminateInstancesOutput
    #   resp.data.terminating_instances #=> Array<InstanceStateChange>
    #   resp.data.terminating_instances[0] #=> Types::InstanceStateChange
    #   resp.data.terminating_instances[0].current_state #=> Types::InstanceState
    #   resp.data.terminating_instances[0].current_state.code #=> Integer
    #   resp.data.terminating_instances[0].current_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.terminating_instances[0].instance_id #=> String
    #   resp.data.terminating_instances[0].previous_state #=> Types::InstanceState
    #
    def terminate_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::TerminateInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::TerminateInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::TerminateInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::TerminateInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::TerminateInstances,
        params_class: Params::TerminateInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :terminate_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from a network interface.</p>
    #
    # @param [Hash] params
    #   See {Types::UnassignIpv6AddressesInput}.
    #
    # @option params [Array<String>] :ipv6_addresses
    #   <p>The IPv6 addresses to unassign from the network interface.</p>
    #
    # @option params [Array<String>] :ipv6_prefixes
    #   <p>One or more IPv6 prefixes to unassign from the network interface.</p>
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @return [Types::UnassignIpv6AddressesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.unassign_ipv6_addresses(
    #     ipv6_addresses: [
    #       'member'
    #     ],
    #     ipv6_prefixes: [
    #       'member'
    #     ],
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UnassignIpv6AddressesOutput
    #   resp.data.network_interface_id #=> String
    #   resp.data.unassigned_ipv6_addresses #=> Array<String>
    #   resp.data.unassigned_ipv6_addresses[0] #=> String
    #   resp.data.unassigned_ipv6_prefixes #=> Array<String>
    #   resp.data.unassigned_ipv6_prefixes[0] #=> String
    #
    def unassign_ipv6_addresses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UnassignIpv6AddressesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UnassignIpv6AddressesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UnassignIpv6Addresses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UnassignIpv6Addresses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::UnassignIpv6Addresses,
        params_class: Params::UnassignIpv6AddressesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :unassign_ipv6_addresses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Unassigns one or more secondary private IP addresses, or IPv4 Prefix Delegation prefixes from a network interface.</p>
    #
    # @param [Hash] params
    #   See {Types::UnassignPrivateIpAddressesInput}.
    #
    # @option params [String] :network_interface_id
    #   <p>The ID of the network interface.</p>
    #
    # @option params [Array<String>] :private_ip_addresses
    #   <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
    #
    # @option params [Array<String>] :ipv4_prefixes
    #   <p>The IPv4 prefixes to unassign from  the network interface.</p>
    #
    # @return [Types::UnassignPrivateIpAddressesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.unassign_private_ip_addresses(
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     private_ip_addresses: [
    #       'member'
    #     ],
    #     ipv4_prefixes: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UnassignPrivateIpAddressesOutput
    #
    def unassign_private_ip_addresses(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UnassignPrivateIpAddressesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UnassignPrivateIpAddressesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UnassignPrivateIpAddresses
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UnassignPrivateIpAddresses
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::UnassignPrivateIpAddresses,
        params_class: Params::UnassignPrivateIpAddressesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :unassign_private_ip_addresses
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring
    #             your instances and volumes</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #
    # @param [Hash] params
    #   See {Types::UnmonitorInstancesInput}.
    #
    # @option params [Array<String>] :instance_ids
    #   <p>The IDs of the instances.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::UnmonitorInstancesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.unmonitor_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UnmonitorInstancesOutput
    #   resp.data.instance_monitorings #=> Array<InstanceMonitoring>
    #   resp.data.instance_monitorings[0] #=> Types::InstanceMonitoring
    #   resp.data.instance_monitorings[0].instance_id #=> String
    #   resp.data.instance_monitorings[0].monitoring #=> Types::Monitoring
    #   resp.data.instance_monitorings[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    #
    def unmonitor_instances(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UnmonitorInstancesInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UnmonitorInstancesInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UnmonitorInstances
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UnmonitorInstances
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::UnmonitorInstances,
        params_class: Params::UnmonitorInstancesOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :unmonitor_instances
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>[VPC only] Updates the description of an egress (outbound) security group rule. You
    # 			can replace an existing description, or add a description to a rule that did not have one
    # 			previously. You can remove a description for a security group rule by omitting the
    # 			description parameter in the request.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateSecurityGroupRuleDescriptionsEgressInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group. You must specify either the security group ID or the
    #   			security group name in the request. For security groups in a nondefault VPC, you must
    #   			specify the security group ID.</p>
    #
    # @option params [String] :group_name
    #   <p>[Default VPC] The name of the security group. You must specify either the security group
    #   			ID or the security group name in the request.</p>
    #
    # @option params [Array<IpPermission>] :ip_permissions
    #   <p>The IP permissions for the security group rule. You must specify either the IP permissions
    #   		    or the description.</p>
    #
    # @option params [Array<SecurityGroupRuleDescription>] :security_group_rule_descriptions
    #   <p>The description for the egress security group rules. You must specify either the
    #               description or the IP permissions.</p>
    #
    # @return [Types::UpdateSecurityGroupRuleDescriptionsEgressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_security_group_rule_descriptions_egress(
    #     dry_run: false,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_rule_descriptions: [
    #       {
    #         security_group_rule_id: 'SecurityGroupRuleId',
    #         description: 'Description'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateSecurityGroupRuleDescriptionsEgressOutput
    #   resp.data.return #=> Boolean
    #
    def update_security_group_rule_descriptions_egress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateSecurityGroupRuleDescriptionsEgressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateSecurityGroupRuleDescriptionsEgressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateSecurityGroupRuleDescriptionsEgress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateSecurityGroupRuleDescriptionsEgress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::UpdateSecurityGroupRuleDescriptionsEgress,
        params_class: Params::UpdateSecurityGroupRuleDescriptionsEgressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :update_security_group_rule_descriptions_egress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Updates the description of an ingress (inbound) security group rule. You can replace an
    # 			existing description, or add a description to a rule that did not have one previously.
    # 		    You can remove a description for a security group rule by omitting the description
    # 		    parameter in the request.</p>
    #
    # @param [Hash] params
    #   See {Types::UpdateSecurityGroupRuleDescriptionsIngressInput}.
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @option params [String] :group_id
    #   <p>The ID of the security group. You must specify either the security group ID or the
    #   			security group name in the request. For security groups in a nondefault VPC, you must
    #   			specify the security group ID.</p>
    #
    # @option params [String] :group_name
    #   <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
    #   			security group ID or the security group name in the request.</p>
    #
    # @option params [Array<IpPermission>] :ip_permissions
    #   <p>The IP permissions for the security group rule. You must specify either IP permissions
    #   		    or a description.</p>
    #
    # @option params [Array<SecurityGroupRuleDescription>] :security_group_rule_descriptions
    #   <p>[VPC only] The description for the ingress security group rules. You must specify either
    #               a description or IP permissions.</p>
    #
    # @return [Types::UpdateSecurityGroupRuleDescriptionsIngressOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_security_group_rule_descriptions_ingress(
    #     dry_run: false,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_rule_descriptions: [
    #       {
    #         security_group_rule_id: 'SecurityGroupRuleId',
    #         description: 'Description'
    #       }
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateSecurityGroupRuleDescriptionsIngressOutput
    #   resp.data.return #=> Boolean
    #
    def update_security_group_rule_descriptions_ingress(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateSecurityGroupRuleDescriptionsIngressInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateSecurityGroupRuleDescriptionsIngressInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateSecurityGroupRuleDescriptionsIngress
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::UpdateSecurityGroupRuleDescriptionsIngress
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::UpdateSecurityGroupRuleDescriptionsIngress,
        params_class: Params::UpdateSecurityGroupRuleDescriptionsIngressOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :update_security_group_rule_descriptions_ingress
        )
      )
      raise resp.error if resp.error
      resp
    end

    # <p>Stops advertising an address range that is provisioned as an address pool.</p>
    #          <p>You can perform this operation at most once every 10 seconds, even if you specify different
    #          address ranges each time.</p>
    #          <p>It can take a few minutes before traffic to the specified addresses stops routing to Amazon Web Services
    #           because of BGP propagation delays.</p>
    #
    # @param [Hash] params
    #   See {Types::WithdrawByoipCidrInput}.
    #
    # @option params [String] :cidr
    #   <p>The address range, in CIDR notation.</p>
    #
    # @option params [Boolean] :dry_run
    #   <p>Checks whether you have the required permissions for the action, without actually making the request,
    #      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>.
    #      Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #
    # @return [Types::WithdrawByoipCidrOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.withdraw_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     dry_run: false
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::WithdrawByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #
    def withdraw_byoip_cidr(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::WithdrawByoipCidrInput.build(params)
      response_body = StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::WithdrawByoipCidrInput,
        validate_input: options.fetch(:validate_input, @validate_input)
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::WithdrawByoipCidr
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: []),
        data_parser: Parsers::WithdrawByoipCidr
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: options.fetch(:stub_responses, @stub_responses),
        client: Hearth::HTTP::Client.new(logger: @logger, http_wire_trace: options.fetch(:http_wire_trace, @http_wire_trace)),
        stub_class: Stubs::WithdrawByoipCidr,
        params_class: Params::WithdrawByoipCidrOutput,
        stubs: options.fetch(:stubs, @stubs)
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @logger,
          operation_name: :withdraw_byoip_cidr
        )
      )
      raise resp.error if resp.error
      resp
    end

    private

    def apply_middleware(middleware_stack, middleware)
      Client.middleware.apply(middleware_stack)
      @middleware.apply(middleware_stack)
      Hearth::MiddlewareBuilder.new(middleware).apply(middleware_stack)
    end

    def output_stream(options = {}, &block)
      return options[:output_stream] if options[:output_stream]
      return Hearth::BlockIO.new(block) if block

      StringIO.new
    end
  end
end
