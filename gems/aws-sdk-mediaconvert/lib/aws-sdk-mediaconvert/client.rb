# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require 'stringio'

require_relative 'middleware/request_id'

module AWS::SDK::MediaConvert
  # An API client for MediaConvert
  # See {#initialize} for a full list of supported configuration options
  # AWS Elemental MediaConvert
  #
  class Client
    include Hearth::ClientStubs

    @middleware = Hearth::MiddlewareBuilder.new

    def self.middleware
      @middleware
    end

    # @param [Config] config
    #   An instance of {Config}
    #
    def initialize(config = AWS::SDK::MediaConvert::Config.new, options = {})
      @config = config
      @middleware = Hearth::MiddlewareBuilder.new(options[:middleware])
      @stubs = Hearth::Stubbing::Stubs.new
      @retry_quota = Hearth::Retry::RetryQuota.new
      @client_rate_limiter = Hearth::Retry::ClientRateLimiter.new
    end

    # Associates an AWS Certificate Manager (ACM) Amazon Resource Name (ARN) with AWS Elemental MediaConvert.
    #
    # @param [Hash] params
    #   See {Types::AssociateCertificateInput}.
    #
    # @option params [String] :arn
    #   The ARN of the ACM certificate that you want to associate with your MediaConvert resource.
    #
    # @return [Types::AssociateCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.associate_certificate(
    #     arn: 'Arn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::AssociateCertificateOutput
    #
    def associate_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::AssociateCertificateInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::AssociateCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::AssociateCertificate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::AssociateCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::AssociateCertificate,
        stubs: @stubs,
        params_class: Params::AssociateCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :associate_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Permanently cancel a job. Once you have canceled a job, you can't start it again.
    #
    # @param [Hash] params
    #   See {Types::CancelJobInput}.
    #
    # @option params [String] :id
    #   The Job ID of the job to be cancelled.
    #
    # @return [Types::CancelJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.cancel_job(
    #     id: 'Id' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CancelJobOutput
    #
    def cancel_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CancelJobInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CancelJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CancelJob
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 202, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::CancelJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CancelJob,
        stubs: @stubs,
        params_class: Params::CancelJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :cancel_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Create a new transcoding job. For information about jobs and job settings, see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    #
    # @param [Hash] params
    #   See {Types::CreateJobInput}.
    #
    # @option params [AccelerationSettings] :acceleration_settings
    #   Optional. Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    #
    # @option params [String] :billing_tags_source
    #   Optional. Choose a tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up. Any transcoding outputs that don't have an associated tag will appear in your billing report unsorted. If you don't choose a valid value for this field, your job outputs will appear on the billing report unsorted.
    #
    # @option params [String] :client_request_token
    #   Optional. Idempotency token for CreateJob operation.
    #
    # @option params [Array<HopDestination>] :hop_destinations
    #   Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    #
    # @option params [String] :job_template
    #   Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.
    #
    # @option params [Integer] :priority
    #   Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    #
    # @option params [String] :queue
    #   Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.
    #
    # @option params [String] :role
    #   Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
    #
    # @option params [JobSettings] :settings
    #   JobSettings contains all the transcode settings for a job.
    #
    # @option params [String] :simulate_reserved_queue
    #   Optional. Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
    #
    # @option params [String] :status_update_interval
    #   Optional. Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    #
    # @option params [Hash<String, String>] :tags
    #   Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.  Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.
    #
    # @option params [Hash<String, String>] :user_metadata
    #   Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.  Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.
    #
    # @return [Types::CreateJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_job(
    #     acceleration_settings: {
    #       mode: 'DISABLED' # required - accepts ["DISABLED", "ENABLED", "PREFERRED"]
    #     },
    #     billing_tags_source: 'QUEUE', # accepts ["QUEUE", "PRESET", "JOB_TEMPLATE", "JOB"]
    #     client_request_token: 'ClientRequestToken',
    #     hop_destinations: [
    #       {
    #         priority: 1,
    #         queue: 'Queue',
    #         wait_minutes: 1
    #       }
    #     ],
    #     job_template: 'JobTemplate',
    #     priority: 1,
    #     queue: 'Queue',
    #     role: 'Role', # required
    #     settings: {
    #       ad_avail_offset: 1,
    #       avail_blanking: {
    #         avail_blanking_image: 'AvailBlankingImage'
    #       },
    #       esam: {
    #         manifest_confirm_condition_notification: {
    #           mcc_xml: 'MccXml'
    #         },
    #         response_signal_preroll: 1,
    #         signal_processing_notification: {
    #           scc_xml: 'SccXml'
    #         }
    #       },
    #       extended_data_services: {
    #         copy_protection_action: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "STRIP"]
    #         vchip_action: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "STRIP"]
    #       },
    #       inputs: [
    #         {
    #           audio_selector_groups: {
    #             'key' => {
    #               audio_selector_names: [
    #                 'member'
    #               ]
    #             }
    #           },
    #           audio_selectors: {
    #             'key' => {
    #               custom_language_code: 'CustomLanguageCode',
    #               default_selection: 'DEFAULT', # accepts ["DEFAULT", "NOT_DEFAULT"]
    #               external_audio_file_input: 'ExternalAudioFileInput',
    #               hls_rendition_group_settings: {
    #                 rendition_group_id: 'RenditionGroupId',
    #                 rendition_language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                 rendition_name: 'RenditionName'
    #               },
    #               language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #               offset: 1,
    #               pids: [
    #                 1
    #               ],
    #               program_selection: 1,
    #               remix_settings: {
    #                 channel_mapping: {
    #                   output_channels: [
    #                     {
    #                       input_channels: [
    #                         1
    #                       ],
    #                       input_channels_fine_tune: [
    #                         1.0
    #                       ]
    #                     }
    #                   ]
    #                 },
    #                 channels_in: 1,
    #                 channels_out: 1
    #               },
    #               selector_type: 'PID', # accepts ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #             }
    #           },
    #           caption_selectors: {
    #             'key' => {
    #               custom_language_code: 'CustomLanguageCode',
    #               language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #               source_settings: {
    #                 ancillary_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   source_ancillary_channel_number: 1,
    #                   terminate_captions: 'END_OF_INPUT' # accepts ["END_OF_INPUT", "DISABLED"]
    #                 },
    #                 dvb_sub_source_settings: {
    #                   pid: 1
    #                 },
    #                 embedded_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   source608_channel_number: 1,
    #                   source608_track_number: 1,
    #                   terminate_captions: 'END_OF_INPUT' # accepts ["END_OF_INPUT", "DISABLED"]
    #                 },
    #                 file_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   framerate: {
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1
    #                   },
    #                   source_file: 'SourceFile',
    #                   time_delta: 1,
    #                   time_delta_units: 'SECONDS' # accepts ["SECONDS", "MILLISECONDS"]
    #                 },
    #                 source_type: 'ANCILLARY', # accepts ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #                 teletext_source_settings: {
    #                   page_number: 'PageNumber'
    #                 },
    #                 track_source_settings: {
    #                   track_number: 1
    #                 },
    #                 webvtt_hls_source_settings: {
    #                   rendition_group_id: 'RenditionGroupId',
    #                   rendition_language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   rendition_name: 'RenditionName'
    #                 }
    #               }
    #             }
    #           },
    #           crop: {
    #             height: 1,
    #             width: 1,
    #             x: 1,
    #             y: 1
    #           },
    #           deblock_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #           decryption_settings: {
    #             decryption_mode: 'AES_CTR', # accepts ["AES_CTR", "AES_CBC", "AES_GCM"]
    #             encrypted_decryption_key: 'EncryptedDecryptionKey',
    #             initialization_vector: 'InitializationVector',
    #             kms_key_region: 'KmsKeyRegion'
    #           },
    #           denoise_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #           dolby_vision_metadata_xml: 'DolbyVisionMetadataXml',
    #           file_input: 'FileInput',
    #           filter_enable: 'AUTO', # accepts ["AUTO", "DISABLE", "FORCE"]
    #           filter_strength: 1,
    #           image_inserter: {
    #             insertable_images: [
    #               {
    #                 duration: 1,
    #                 fade_in: 1,
    #                 fade_out: 1,
    #                 height: 1,
    #                 image_inserter_input: 'ImageInserterInput',
    #                 image_x: 1,
    #                 image_y: 1,
    #                 layer: 1,
    #                 opacity: 1,
    #                 start_time: 'StartTime',
    #                 width: 1
    #               }
    #             ]
    #           },
    #           input_clippings: [
    #             {
    #               end_timecode: 'EndTimecode',
    #               start_timecode: 'StartTimecode'
    #             }
    #           ],
    #           input_scan_type: 'AUTO', # accepts ["AUTO", "PSF"]
    #           program_number: 1,
    #           psi_control: 'IGNORE_PSI', # accepts ["IGNORE_PSI", "USE_PSI"]
    #           supplemental_imps: [
    #             'member'
    #           ],
    #           timecode_source: 'EMBEDDED', # accepts ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #           timecode_start: 'TimecodeStart',
    #           video_generator: {
    #             duration: 1
    #           },
    #           video_selector: {
    #             alpha_behavior: 'DISCARD', # accepts ["DISCARD", "REMAP_TO_LUMA"]
    #             color_space: 'FOLLOW', # accepts ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #             color_space_usage: 'FORCE', # accepts ["FORCE", "FALLBACK"]
    #             embedded_timecode_override: 'NONE', # accepts ["NONE", "USE_MDPM"]
    #             hdr10_metadata: {
    #               blue_primary_x: 1,
    #               blue_primary_y: 1,
    #               green_primary_x: 1,
    #               green_primary_y: 1,
    #               max_content_light_level: 1,
    #               max_frame_average_light_level: 1,
    #               max_luminance: 1,
    #               min_luminance: 1,
    #               red_primary_x: 1,
    #               red_primary_y: 1,
    #               white_point_x: 1,
    #               white_point_y: 1
    #             },
    #             pad_video: 'DISABLED', # accepts ["DISABLED", "BLACK"]
    #             pid: 1,
    #             program_number: 1,
    #             rotate: 'DEGREE_0', # accepts ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #             sample_range: 'FOLLOW' # accepts ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #           }
    #         }
    #       ],
    #       kantar_watermark: {
    #         channel_name: 'ChannelName',
    #         content_reference: 'ContentReference',
    #         credentials_secret_name: 'CredentialsSecretName',
    #         file_offset: 1.0,
    #         kantar_license_id: 1,
    #         kantar_server_url: 'KantarServerUrl',
    #         log_destination: 'LogDestination',
    #         metadata3: 'Metadata3',
    #         metadata4: 'Metadata4',
    #         metadata5: 'Metadata5',
    #         metadata6: 'Metadata6',
    #         metadata7: 'Metadata7',
    #         metadata8: 'Metadata8'
    #       },
    #       motion_image_inserter: {
    #         framerate: {
    #           framerate_denominator: 1,
    #           framerate_numerator: 1
    #         },
    #         input: 'Input',
    #         insertion_mode: 'MOV', # accepts ["MOV", "PNG"]
    #         offset: {
    #           image_x: 1,
    #           image_y: 1
    #         },
    #         playback: 'ONCE', # accepts ["ONCE", "REPEAT"]
    #         start_time: 'StartTime'
    #       },
    #       nielsen_configuration: {
    #         breakout_code: 1,
    #         distributor_id: 'DistributorId'
    #       },
    #       nielsen_non_linear_watermark: {
    #         active_watermark_process: 'NAES2_AND_NW', # accepts ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #         adi_filename: 'AdiFilename',
    #         asset_id: 'AssetId',
    #         asset_name: 'AssetName',
    #         cbet_source_id: 'CbetSourceId',
    #         episode_id: 'EpisodeId',
    #         metadata_destination: 'MetadataDestination',
    #         source_id: 1,
    #         source_watermark_status: 'CLEAN', # accepts ["CLEAN", "WATERMARKED"]
    #         tic_server_url: 'TicServerUrl',
    #         unique_tic_per_audio_track: 'RESERVE_UNIQUE_TICS_PER_TRACK' # accepts ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #       },
    #       output_groups: [
    #         {
    #           automated_encoding_settings: {
    #             abr_settings: {
    #               max_abr_bitrate: 1,
    #               max_renditions: 1,
    #               min_abr_bitrate: 1,
    #               rules: [
    #                 {
    #                   allowed_renditions: [
    #                     {
    #                       height: 1,
    #                       required: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       width: 1
    #                     }
    #                   ],
    #                   force_include_renditions: [
    #                     {
    #                       height: 1,
    #                       width: 1
    #                     }
    #                   ],
    #                   min_bottom_rendition_size: {
    #                     height: 1,
    #                     width: 1
    #                   },
    #                   min_top_rendition_size: {
    #                     height: 1,
    #                     width: 1
    #                   },
    #                   type: 'MIN_TOP_RENDITION_SIZE' # accepts ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #                 }
    #               ]
    #             }
    #           },
    #           custom_name: 'CustomName',
    #           name: 'Name',
    #           output_group_settings: {
    #             cmaf_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               base_url: 'BaseUrl',
    #               client_cache: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               codec_specification: 'RFC_6381', # accepts ["RFC_6381", "RFC_4281"]
    #               destination: 'Destination',
    #               destination_settings: {
    #                 s3_settings: {
    #                   access_control: {
    #                     canned_acl: 'PUBLIC_READ' # accepts ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #                   },
    #                   encryption: {
    #                     encryption_type: 'SERVER_SIDE_ENCRYPTION_S3', # accepts ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #                     kms_encryption_context: 'KmsEncryptionContext',
    #                     kms_key_arn: 'KmsKeyArn'
    #                   }
    #                 }
    #               },
    #               encryption: {
    #                 constant_initialization_vector: 'ConstantInitializationVector',
    #                 encryption_method: 'SAMPLE_AES', # accepts ["SAMPLE_AES", "AES_CTR"]
    #                 initialization_vector_in_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                 speke_key_provider: {
    #                   certificate_arn: 'CertificateArn',
    #                   dash_signaled_system_ids: [
    #                     'member'
    #                   ],
    #                   resource_id: 'ResourceId',
    #                   url: 'Url'
    #                 },
    #                 static_key_provider: {
    #                   key_format: 'KeyFormat',
    #                   key_format_versions: 'KeyFormatVersions',
    #                   static_key_value: 'StaticKeyValue',
    #                   url: 'Url'
    #                 },
    #                 type: 'SPEKE' # accepts ["SPEKE", "STATIC_KEY"]
    #               },
    #               fragment_length: 1,
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               manifest_compression: 'GZIP', # accepts ["GZIP", "NONE"]
    #               manifest_duration_format: 'FLOATING_POINT', # accepts ["FLOATING_POINT", "INTEGER"]
    #               min_buffer_time: 1,
    #               min_final_segment_length: 1.0,
    #               mpd_profile: 'MAIN_PROFILE', # accepts ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #               pts_offset_handling_for_b_frames: 'ZERO_BASED', # accepts ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               stream_inf_resolution: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               target_duration_compatibility_mode: 'LEGACY', # accepts ["LEGACY", "SPEC_COMPLIANT"]
    #               write_dash_manifest: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               write_hls_manifest: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               write_segment_timeline_in_representation: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             dash_iso_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_channel_config_scheme_id_uri: 'MPEG_CHANNEL_CONFIGURATION', # accepts ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #               base_url: 'BaseUrl',
    #               destination: 'Destination',
    #               encryption: {
    #                 playback_device_compatibility: 'CENC_V1', # accepts ["CENC_V1", "UNENCRYPTED_SEI"]
    #                 speke_key_provider: {
    #                   certificate_arn: 'CertificateArn',
    #                   resource_id: 'ResourceId',
    #                   system_ids: [
    #                     'member'
    #                   ],
    #                   url: 'Url'
    #                 }
    #               },
    #               fragment_length: 1,
    #               hbbtv_compliance: 'HBBTV_1_5', # accepts ["HBBTV_1_5", "NONE"]
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               min_buffer_time: 1,
    #               min_final_segment_length: 1.0,
    #               mpd_profile: 'MAIN_PROFILE', # accepts ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #               pts_offset_handling_for_b_frames: 'ZERO_BASED', # accepts ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               write_segment_timeline_in_representation: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             file_group_settings: {
    #               destination: 'Destination',
    #             },
    #             hls_group_settings: {
    #               ad_markers: [
    #                 'ELEMENTAL' # accepts ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #               ],
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_only_header: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               base_url: 'BaseUrl',
    #               caption_language_mappings: [
    #                 {
    #                   caption_channel: 1,
    #                   custom_language_code: 'CustomLanguageCode',
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_description: 'LanguageDescription'
    #                 }
    #               ],
    #               caption_language_setting: 'INSERT', # accepts ["INSERT", "OMIT", "NONE"]
    #               caption_segment_length_control: 'LARGE_SEGMENTS', # accepts ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #               client_cache: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               codec_specification: 'RFC_6381', # accepts ["RFC_6381", "RFC_4281"]
    #               destination: 'Destination',
    #               directory_structure: 'SINGLE_DIRECTORY', # accepts ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #               encryption: {
    #                 constant_initialization_vector: 'ConstantInitializationVector',
    #                 encryption_method: 'AES128', # accepts ["AES128", "SAMPLE_AES"]
    #                 initialization_vector_in_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                 offline_encrypted: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                 type: 'SPEKE' # accepts ["SPEKE", "STATIC_KEY"]
    #               },
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               manifest_compression: 'GZIP', # accepts ["GZIP", "NONE"]
    #               manifest_duration_format: 'FLOATING_POINT', # accepts ["FLOATING_POINT", "INTEGER"]
    #               min_final_segment_length: 1.0,
    #               min_segment_length: 1,
    #               output_selection: 'MANIFESTS_AND_SEGMENTS', # accepts ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #               program_date_time: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               program_date_time_period: 1,
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               segments_per_subdirectory: 1,
    #               stream_inf_resolution: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               target_duration_compatibility_mode: 'LEGACY', # accepts ["LEGACY", "SPEC_COMPLIANT"]
    #               timed_metadata_id3_frame: 'NONE', # accepts ["NONE", "PRIV", "TDRL"]
    #               timed_metadata_id3_period: 1,
    #               timestamp_delta_milliseconds: 1
    #             },
    #             ms_smooth_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_deduplication: 'COMBINE_DUPLICATE_STREAMS', # accepts ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #               destination: 'Destination',
    #               encryption: {
    #               },
    #               fragment_length: 1,
    #               fragment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               manifest_encoding: 'UTF8' # accepts ["UTF8", "UTF16"]
    #             },
    #             type: 'HLS_GROUP_SETTINGS' # accepts ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #           },
    #           outputs: [
    #             {
    #               audio_descriptions: [
    #                 {
    #                   audio_channel_tagging_settings: {
    #                     channel_tag: 'L' # accepts ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #                   },
    #                   audio_normalization_settings: {
    #                     algorithm: 'ITU_BS_1770_1', # accepts ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #                     algorithm_control: 'CORRECT_AUDIO', # accepts ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #                     correction_gate_level: 1,
    #                     loudness_logging: 'LOG', # accepts ["LOG", "DONT_LOG"]
    #                     peak_calculation: 'TRUE_PEAK', # accepts ["TRUE_PEAK", "NONE"]
    #                     target_lkfs: 1.0
    #                   },
    #                   audio_source_name: 'AudioSourceName',
    #                   audio_type: 1,
    #                   audio_type_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                   codec_settings: {
    #                     aac_settings: {
    #                       audio_description_broadcaster_mix: 'BROADCASTER_MIXED_AD', # accepts ["BROADCASTER_MIXED_AD", "NORMAL"]
    #                       bitrate: 1,
    #                       codec_profile: 'LC', # accepts ["LC", "HEV1", "HEV2"]
    #                       coding_mode: 'AD_RECEIVER_MIX', # accepts ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #                       rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #                       raw_format: 'LATM_LOAS', # accepts ["LATM_LOAS", "NONE"]
    #                       sample_rate: 1,
    #                       specification: 'MPEG2', # accepts ["MPEG2", "MPEG4"]
    #                       vbr_quality: 'LOW' # accepts ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #                     },
    #                     ac3_settings: {
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #                       coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #                       dialnorm: 1,
    #                       dynamic_range_compression_line: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #                       dynamic_range_compression_profile: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "NONE"]
    #                       dynamic_range_compression_rf: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #                       lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                       sample_rate: 1
    #                     },
    #                     aiff_settings: {
    #                       bit_depth: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     codec: 'AAC', # accepts ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #                     eac3_atmos_settings: {
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN"]
    #                       coding_mode: 'CODING_MODE_AUTO', # accepts ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #                       dialogue_intelligence: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       downmix_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #                       dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #                       lo_ro_center_mix_level: 1.0,
    #                       lo_ro_surround_mix_level: 1.0,
    #                       lt_rt_center_mix_level: 1.0,
    #                       lt_rt_surround_mix_level: 1.0,
    #                       metering_mode: 'LEQ_A', # accepts ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #                       sample_rate: 1,
    #                       speech_threshold: 1,
    #                       stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #                       surround_ex_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                     },
    #                     eac3_settings: {
    #                       attenuation_control: 'ATTENUATE_3_DB', # accepts ["ATTENUATE_3_DB", "NONE"]
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #                       coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #                       dc_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       dialnorm: 1,
    #                       dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       lfe_control: 'LFE', # accepts ["LFE", "NO_LFE"]
    #                       lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       lo_ro_center_mix_level: 1.0,
    #                       lo_ro_surround_mix_level: 1.0,
    #                       lt_rt_center_mix_level: 1.0,
    #                       lt_rt_surround_mix_level: 1.0,
    #                       metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                       passthrough_control: 'WHEN_POSSIBLE', # accepts ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #                       phase_control: 'SHIFT_90_DEGREES', # accepts ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #                       sample_rate: 1,
    #                       stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #                       surround_ex_mode: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                       surround_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                     },
    #                     mp2_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     mp3_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #                       sample_rate: 1,
    #                       vbr_quality: 1
    #                     },
    #                     opus_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     vorbis_settings: {
    #                       channels: 1,
    #                       sample_rate: 1,
    #                       vbr_quality: 1
    #                     },
    #                     wav_settings: {
    #                       bit_depth: 1,
    #                       channels: 1,
    #                       format: 'RIFF', # accepts ["RIFF", "RF64"]
    #                       sample_rate: 1
    #                     }
    #                   },
    #                   custom_language_code: 'CustomLanguageCode',
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_code_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                   stream_name: 'StreamName'
    #                 }
    #               ],
    #               caption_descriptions: [
    #                 {
    #                   caption_selector_name: 'CaptionSelectorName',
    #                   custom_language_code: 'CustomLanguageCode',
    #                   destination_settings: {
    #                     burnin_destination_settings: {
    #                       alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #                       apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #                       background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       background_opacity: 1,
    #                       fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #                       font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #                       font_opacity: 1,
    #                       font_resolution: 1,
    #                       font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #                       font_size: 1,
    #                       hex_font_color: 'HexFontColor',
    #                       outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #                       outline_size: 1,
    #                       shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       shadow_opacity: 1,
    #                       shadow_x_offset: 1,
    #                       shadow_y_offset: 1,
    #                       style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #                       x_position: 1,
    #                       y_position: 1
    #                     },
    #                     destination_type: 'BURN_IN', # accepts ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #                     dvb_sub_destination_settings: {
    #                       alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #                       apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #                       background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       background_opacity: 1,
    #                       dds_handling: 'NONE', # accepts ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #                       dds_x_coordinate: 1,
    #                       dds_y_coordinate: 1,
    #                       fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #                       font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #                       font_opacity: 1,
    #                       font_resolution: 1,
    #                       font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #                       font_size: 1,
    #                       height: 1,
    #                       hex_font_color: 'HexFontColor',
    #                       outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #                       outline_size: 1,
    #                       shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       shadow_opacity: 1,
    #                       shadow_x_offset: 1,
    #                       shadow_y_offset: 1,
    #                       style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       subtitling_type: 'HEARING_IMPAIRED', # accepts ["HEARING_IMPAIRED", "STANDARD"]
    #                       teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #                       width: 1,
    #                       x_position: 1,
    #                       y_position: 1
    #                     },
    #                     embedded_destination_settings: {
    #                       destination608_channel_number: 1,
    #                       destination708_service_number: 1
    #                     },
    #                     imsc_destination_settings: {
    #                       accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     scc_destination_settings: {
    #                       framerate: 'FRAMERATE_23_97' # accepts ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #                     },
    #                     srt_destination_settings: {
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     teletext_destination_settings: {
    #                       page_number: 'PageNumber',
    #                       page_types: [
    #                         'PAGE_TYPE_INITIAL' # accepts ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #                       ]
    #                     },
    #                     ttml_destination_settings: {
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     webvtt_destination_settings: {
    #                       accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED", "STRICT"]
    #                     }
    #                   },
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_description: 'LanguageDescription'
    #                 }
    #               ],
    #               container_settings: {
    #                 cmfc_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_group_id: 'AudioGroupId',
    #                   audio_rendition_sets: 'AudioRenditionSets',
    #                   audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #                   descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #                   i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #                 },
    #                 container: 'F4V', # accepts ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #                 f4v_settings: {
    #                   moov_placement: 'PROGRESSIVE_DOWNLOAD' # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #                 },
    #                 m2ts_settings: {
    #                   audio_buffer_model: 'DVB', # accepts ["DVB", "ATSC"]
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_frames_per_pes: 1,
    #                   audio_pids: [
    #                     1
    #                   ],
    #                   bitrate: 1,
    #                   buffer_model: 'MULTIPLEX', # accepts ["MULTIPLEX", "NONE"]
    #                   data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #                   dvb_nit_settings: {
    #                     network_id: 1,
    #                     network_name: 'NetworkName',
    #                     nit_interval: 1
    #                   },
    #                   dvb_sdt_settings: {
    #                     output_sdt: 'SDT_FOLLOW', # accepts ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #                     sdt_interval: 1,
    #                     service_name: 'ServiceName',
    #                     service_provider_name: 'ServiceProviderName'
    #                   },
    #                   dvb_tdt_settings: {
    #                     tdt_interval: 1
    #                   },
    #                   dvb_teletext_pid: 1,
    #                   ebp_audio_interval: 'VIDEO_AND_FIXED_INTERVALS', # accepts ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #                   ebp_placement: 'VIDEO_AND_AUDIO_PIDS', # accepts ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #                   es_rate_in_pes: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   force_ts_video_ebp_order: 'FORCE', # accepts ["FORCE", "DEFAULT"]
    #                   fragment_time: 1.0,
    #                   klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   max_pcr_interval: 1,
    #                   min_ebp_interval: 1,
    #                   nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   null_packet_bitrate: 1.0,
    #                   pat_interval: 1,
    #                   pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #                   pcr_pid: 1,
    #                   pmt_interval: 1,
    #                   pmt_pid: 1,
    #                   private_metadata_pid: 1,
    #                   program_number: 1,
    #                   rate_mode: 'VBR', # accepts ["VBR", "CBR"]
    #                   scte35_esam: {
    #                     scte35_esam_pid: 1
    #                   },
    #                   scte35_pid: 1,
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   segmentation_markers: 'NONE', # accepts ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #                   segmentation_style: 'MAINTAIN_CADENCE', # accepts ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #                   segmentation_time: 1.0,
    #                   timed_metadata_pid: 1,
    #                   transport_stream_id: 1,
    #                   video_pid: 1
    #                 },
    #                 m3u8_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_frames_per_pes: 1,
    #                   data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #                   max_pcr_interval: 1,
    #                   nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   pat_interval: 1,
    #                   pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #                   pcr_pid: 1,
    #                   pmt_interval: 1,
    #                   pmt_pid: 1,
    #                   private_metadata_pid: 1,
    #                   program_number: 1,
    #                   scte35_pid: 1,
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata_pid: 1,
    #                   transport_stream_id: 1,
    #                   video_pid: 1
    #                 },
    #                 mov_settings: {
    #                   clap_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   mpeg2_four_cc_control: 'XDCAM', # accepts ["XDCAM", "MPEG"]
    #                   padding_control: 'OMNEON', # accepts ["OMNEON", "NONE"]
    #                   reference: 'SELF_CONTAINED' # accepts ["SELF_CONTAINED", "EXTERNAL"]
    #                 },
    #                 mp4_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   ctts_version: 1,
    #                   free_space_box: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   moov_placement: 'PROGRESSIVE_DOWNLOAD', # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #                   mp4_major_brand: 'Mp4MajorBrand'
    #                 },
    #                 mpd_settings: {
    #                   accessibility_caption_hints: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   caption_container_type: 'RAW', # accepts ["RAW", "FRAGMENTED_MP4"]
    #                   klv_metadata: 'NONE', # accepts ["NONE", "PASSTHROUGH"]
    #                   scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #                 },
    #                 mxf_settings: {
    #                   afd_signaling: 'NO_COPY', # accepts ["NO_COPY", "COPY_FROM_VIDEO"]
    #                   profile: 'D_10', # accepts ["D_10", "XDCAM", "OP1A", "XAVC"]
    #                   xavc_profile_settings: {
    #                     duration_mode: 'ALLOW_ANY_DURATION', # accepts ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #                     max_anc_data_size: 1
    #                   }
    #                 }
    #               },
    #               extension: 'Extension',
    #               name_modifier: 'NameModifier',
    #               output_settings: {
    #                 hls_settings: {
    #                   audio_group_id: 'AudioGroupId',
    #                   audio_only_container: 'AUTOMATIC', # accepts ["AUTOMATIC", "M2TS"]
    #                   audio_rendition_sets: 'AudioRenditionSets',
    #                   audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #                   descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #                   i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   segment_modifier: 'SegmentModifier'
    #                 }
    #               },
    #               preset: 'Preset',
    #               video_description: {
    #                 afd_signaling: 'NONE', # accepts ["NONE", "AUTO", "FIXED"]
    #                 anti_alias: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                 codec_settings: {
    #                   av1_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     bit_depth: 'BIT_8', # accepts ["BIT_8", "BIT_10"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     max_bitrate: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     qvbr_settings: {
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'QVBR', # accepts ["QVBR"]
    #                     slices: 1,
    #                     spatial_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   avc_intra_settings: {
    #                     avc_intra_class: 'CLASS_50', # accepts ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #                     avc_intra_uhd_settings: {
    #                       quality_tuning_level: 'SINGLE_PASS' # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #                     },
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                   },
    #                   codec: 'AV1', # accepts ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #                   frame_capture_settings: {
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     max_captures: 1,
    #                     quality: 1
    #                   },
    #                   h264_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #                     codec_profile: 'BASELINE', # accepts ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     entropy_encoding: 'CABAC', # accepts ["CABAC", "CAVLC"]
    #                     field_encoding: 'PAFF', # accepts ["PAFF", "FORCE_FIELD", "MBAFF"]
    #                     flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     number_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                     qvbr_settings: {
    #                       max_average_bitrate: 1,
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #                     repeat_pps: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #                     slices: 1,
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     syntax: 'DEFAULT', # accepts ["DEFAULT", "RP2027"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     unregistered_sei_timecode: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   h265_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #                     alternate_transfer_function_sei: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #                     codec_profile: 'MAIN_MAIN', # accepts ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     number_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                     qvbr_settings: {
    #                       max_average_bitrate: 1,
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #                     sample_adaptive_offset_filter_mode: 'DEFAULT', # accepts ["DEFAULT", "ADAPTIVE", "OFF"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #                     slices: 1,
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     temporal_ids: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     tiles: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     unregistered_sei_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     write_mp4_packaging_type: 'HVC1' # accepts ["HVC1", "HEV1"]
    #                   },
    #                   mpeg2_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #                     codec_profile: 'MAIN', # accepts ["MAIN", "PROFILE_422"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     intra_dc_precision: 'AUTO', # accepts ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     syntax: 'DEFAULT', # accepts ["DEFAULT", "D_10"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   prores_settings: {
    #                     chroma_sampling: 'PRESERVE_444_SAMPLING', # accepts ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #                     codec_profile: 'APPLE_PRORES_422', # accepts ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                   },
    #                   vc3_settings: {
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'INTERLACED', # accepts ["INTERLACED", "PROGRESSIVE"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE', # accepts ["NONE", "HARD"]
    #                     vc3_class: 'CLASS_145_8BIT' # accepts ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #                   },
    #                   vp8_settings: {
    #                     bitrate: 1,
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     hrd_buffer_size: 1,
    #                     max_bitrate: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #                     rate_control_mode: 'VBR' # accepts ["VBR"]
    #                   },
    #                   vp9_settings: {
    #                     bitrate: 1,
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     hrd_buffer_size: 1,
    #                     max_bitrate: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #                     rate_control_mode: 'VBR' # accepts ["VBR"]
    #                   },
    #                   xavc_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     entropy_encoding: 'AUTO', # accepts ["AUTO", "CABAC", "CAVLC"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     profile: 'XAVC_HD_INTRA_CBG', # accepts ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     xavc4k_intra_cbg_profile_settings: {
    #                       xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #                     },
    #                     xavc4k_intra_vbr_profile_settings: {
    #                       xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #                     },
    #                     xavc4k_profile_settings: {
    #                       bitrate_class: 'BITRATE_CLASS_100', # accepts ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #                       codec_profile: 'HIGH', # accepts ["HIGH", "HIGH_422"]
    #                       flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_closed_cadence: 1,
    #                       hrd_buffer_size: 1,
    #                       quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                       slices: 1
    #                     },
    #                     xavc_hd_intra_cbg_profile_settings: {
    #                       xavc_class: 'CLASS_50' # accepts ["CLASS_50", "CLASS_100", "CLASS_200"]
    #                     },
    #                     xavc_hd_profile_settings: {
    #                       bitrate_class: 'BITRATE_CLASS_25', # accepts ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #                       flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_closed_cadence: 1,
    #                       hrd_buffer_size: 1,
    #                       interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                       quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                       slices: 1,
    #                       telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                     }
    #                   }
    #                 },
    #                 color_metadata: 'IGNORE', # accepts ["IGNORE", "INSERT"]
    #                 drop_frame_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                 fixed_afd: 1,
    #                 height: 1,
    #                 respond_to_afd: 'NONE', # accepts ["NONE", "RESPOND", "PASSTHROUGH"]
    #                 scaling_behavior: 'DEFAULT', # accepts ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #                 sharpness: 1,
    #                 timecode_insertion: 'DISABLED', # accepts ["DISABLED", "PIC_TIMING_SEI"]
    #                 video_preprocessors: {
    #                   color_corrector: {
    #                     brightness: 1,
    #                     color_space_conversion: 'NONE', # accepts ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #                     contrast: 1,
    #                     hue: 1,
    #                     sample_range_conversion: 'LIMITED_RANGE_SQUEEZE', # accepts ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #                     saturation: 1
    #                   },
    #                   deinterlacer: {
    #                     algorithm: 'INTERPOLATE', # accepts ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #                     control: 'FORCE_ALL_FRAMES', # accepts ["FORCE_ALL_FRAMES", "NORMAL"]
    #                     mode: 'DEINTERLACE' # accepts ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #                   },
    #                   dolby_vision: {
    #                     l6_metadata: {
    #                       max_cll: 1,
    #                       max_fall: 1
    #                     },
    #                     l6_mode: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #                     mapping: 'HDR10_NOMAP', # accepts ["HDR10_NOMAP", "HDR10_1000"]
    #                     profile: 'PROFILE_5' # accepts ["PROFILE_5", "PROFILE_8_1"]
    #                   },
    #                   hdr10_plus: {
    #                     mastering_monitor_nits: 1,
    #                     target_monitor_nits: 1
    #                   },
    #                   noise_reducer: {
    #                     filter: 'BILATERAL', # accepts ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #                     filter_settings: {
    #                       strength: 1
    #                     },
    #                     spatial_filter_settings: {
    #                       post_filter_sharpen_strength: 1,
    #                       speed: 1,
    #                       strength: 1
    #                     },
    #                     temporal_filter_settings: {
    #                       aggressive_mode: 1,
    #                       post_temporal_sharpening: 'DISABLED', # accepts ["DISABLED", "ENABLED", "AUTO"]
    #                       post_temporal_sharpening_strength: 'LOW', # accepts ["LOW", "MEDIUM", "HIGH"]
    #                       speed: 1,
    #                       strength: 1
    #                     }
    #                   },
    #                   partner_watermarking: {
    #                     nexguard_file_marker_settings: {
    #                       license: 'License',
    #                       payload: 1,
    #                       preset: 'Preset',
    #                       strength: 'LIGHTEST' # accepts ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #                     }
    #                   },
    #                   timecode_burnin: {
    #                     font_size: 1,
    #                     position: 'TOP_CENTER', # accepts ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #                     prefix: 'Prefix'
    #                   }
    #                 },
    #                 width: 1
    #               }
    #             }
    #           ]
    #         }
    #       ],
    #       timecode_config: {
    #         anchor: 'Anchor',
    #         source: 'EMBEDDED', # accepts ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #         start: 'Start',
    #         timestamp_offset: 'TimestampOffset'
    #       },
    #       timed_metadata_insertion: {
    #         id3_insertions: [
    #           {
    #             id3: 'Id3',
    #             timecode: 'Timecode'
    #           }
    #         ]
    #       }
    #     }, # required
    #     simulate_reserved_queue: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #     status_update_interval: 'SECONDS_10', # accepts ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #     tags: {
    #       'key' => 'value'
    #     },
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateJobOutput
    #   resp.data.job #=> Types::Job
    #   resp.data.job.acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.job.acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.job.acceleration_status #=> String, one of ["NOT_APPLICABLE", "IN_PROGRESS", "ACCELERATED", "NOT_ACCELERATED"]
    #   resp.data.job.arn #=> String
    #   resp.data.job.billing_tags_source #=> String, one of ["QUEUE", "PRESET", "JOB_TEMPLATE", "JOB"]
    #   resp.data.job.created_at #=> Time
    #   resp.data.job.current_phase #=> String, one of ["PROBING", "TRANSCODING", "UPLOADING"]
    #   resp.data.job.error_code #=> Integer
    #   resp.data.job.error_message #=> String
    #   resp.data.job.hop_destinations #=> Array<HopDestination>
    #   resp.data.job.hop_destinations[0] #=> Types::HopDestination
    #   resp.data.job.hop_destinations[0].priority #=> Integer
    #   resp.data.job.hop_destinations[0].queue #=> String
    #   resp.data.job.hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.job.id #=> String
    #   resp.data.job.job_percent_complete #=> Integer
    #   resp.data.job.job_template #=> String
    #   resp.data.job.messages #=> Types::JobMessages
    #   resp.data.job.messages.info #=> Array<String>
    #   resp.data.job.messages.info[0] #=> String
    #   resp.data.job.messages.warning #=> Array<String>
    #   resp.data.job.output_group_details #=> Array<OutputGroupDetail>
    #   resp.data.job.output_group_details[0] #=> Types::OutputGroupDetail
    #   resp.data.job.output_group_details[0].output_details #=> Array<OutputDetail>
    #   resp.data.job.output_group_details[0].output_details[0] #=> Types::OutputDetail
    #   resp.data.job.output_group_details[0].output_details[0].duration_in_ms #=> Integer
    #   resp.data.job.output_group_details[0].output_details[0].video_details #=> Types::VideoDetail
    #   resp.data.job.output_group_details[0].output_details[0].video_details.height_in_px #=> Integer
    #   resp.data.job.output_group_details[0].output_details[0].video_details.width_in_px #=> Integer
    #   resp.data.job.priority #=> Integer
    #   resp.data.job.queue #=> String
    #   resp.data.job.queue_transitions #=> Array<QueueTransition>
    #   resp.data.job.queue_transitions[0] #=> Types::QueueTransition
    #   resp.data.job.queue_transitions[0].destination_queue #=> String
    #   resp.data.job.queue_transitions[0].source_queue #=> String
    #   resp.data.job.queue_transitions[0].timestamp #=> Time
    #   resp.data.job.retry_count #=> Integer
    #   resp.data.job.role #=> String
    #   resp.data.job.settings #=> Types::JobSettings
    #   resp.data.job.settings.ad_avail_offset #=> Integer
    #   resp.data.job.settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.job.settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.job.settings.esam #=> Types::EsamSettings
    #   resp.data.job.settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.job.settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.job.settings.esam.response_signal_preroll #=> Integer
    #   resp.data.job.settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.job.settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.job.settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.job.settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job.settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job.settings.inputs #=> Array<Input>
    #   resp.data.job.settings.inputs[0] #=> Types::Input
    #   resp.data.job.settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.job.settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.job.settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.job.settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.job.settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.job.settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.job.settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.job.settings.inputs[0].crop.height #=> Integer
    #   resp.data.job.settings.inputs[0].crop.width #=> Integer
    #   resp.data.job.settings.inputs[0].crop.x #=> Integer
    #   resp.data.job.settings.inputs[0].crop.y #=> Integer
    #   resp.data.job.settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.inputs[0].decryption_settings #=> Types::InputDecryptionSettings
    #   resp.data.job.settings.inputs[0].decryption_settings.decryption_mode #=> String, one of ["AES_CTR", "AES_CBC", "AES_GCM"]
    #   resp.data.job.settings.inputs[0].decryption_settings.encrypted_decryption_key #=> String
    #   resp.data.job.settings.inputs[0].decryption_settings.initialization_vector #=> String
    #   resp.data.job.settings.inputs[0].decryption_settings.kms_key_region #=> String
    #   resp.data.job.settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.job.settings.inputs[0].file_input #=> String
    #   resp.data.job.settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.job.settings.inputs[0].filter_strength #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.job.settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.job.settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.job.settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.job.settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.job.settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.job.settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.job.settings.inputs[0].program_number #=> Integer
    #   resp.data.job.settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.job.settings.inputs[0].supplemental_imps #=> Array<String>
    #   resp.data.job.settings.inputs[0].supplemental_imps[0] #=> String
    #   resp.data.job.settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job.settings.inputs[0].timecode_start #=> String
    #   resp.data.job.settings.inputs[0].video_generator #=> Types::InputVideoGenerator
    #   resp.data.job.settings.inputs[0].video_generator.duration #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.job.settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.job.settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.job.settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.job.settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.job.settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.job.settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.job.settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.job.settings.kantar_watermark.channel_name #=> String
    #   resp.data.job.settings.kantar_watermark.content_reference #=> String
    #   resp.data.job.settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.job.settings.kantar_watermark.file_offset #=> Float
    #   resp.data.job.settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.job.settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.job.settings.kantar_watermark.log_destination #=> String
    #   resp.data.job.settings.kantar_watermark.metadata3 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata4 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata5 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata6 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata7 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata8 #=> String
    #   resp.data.job.settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.job.settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.job.settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.job.settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.job.settings.motion_image_inserter.input #=> String
    #   resp.data.job.settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.job.settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.job.settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.job.settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.job.settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.job.settings.motion_image_inserter.start_time #=> String
    #   resp.data.job.settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.job.settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.job.settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.job.settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.job.settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.job.settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.job.settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.job.settings.output_groups #=> Array<OutputGroup>
    #   resp.data.job.settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.job.settings.output_groups[0].custom_name #=> String
    #   resp.data.job.settings.output_groups[0].name #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.job.settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.job.settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.job.settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.job.settings.timecode_config.anchor #=> String
    #   resp.data.job.settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job.settings.timecode_config.start #=> String
    #   resp.data.job.settings.timecode_config.timestamp_offset #=> String
    #   resp.data.job.settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.job.simulate_reserved_queue #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.status #=> String, one of ["SUBMITTED", "PROGRESSING", "COMPLETE", "CANCELED", "ERROR"]
    #   resp.data.job.status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.job.timing #=> Types::Timing
    #   resp.data.job.timing.finish_time #=> Time
    #   resp.data.job.timing.start_time #=> Time
    #   resp.data.job.timing.submit_time #=> Time
    #   resp.data.job.user_metadata #=> Hash<String, String>
    #   resp.data.job.user_metadata['key'] #=> String
    #
    def create_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateJobInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateJob
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::CreateJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateJob,
        stubs: @stubs,
        params_class: Params::CreateJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Create a new job template. For information about job templates see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    #
    # @param [Hash] params
    #   See {Types::CreateJobTemplateInput}.
    #
    # @option params [AccelerationSettings] :acceleration_settings
    #   Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    #
    # @option params [String] :category
    #   Optional. A category for the job template you are creating
    #
    # @option params [String] :description
    #   Optional. A description of the job template you are creating.
    #
    # @option params [Array<HopDestination>] :hop_destinations
    #   Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    #
    # @option params [String] :name
    #   The name of the job template you are creating.
    #
    # @option params [Integer] :priority
    #   Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    #
    # @option params [String] :queue
    #   Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    #
    # @option params [JobTemplateSettings] :settings
    #   JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    #
    # @option params [String] :status_update_interval
    #   Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    #
    # @option params [Hash<String, String>] :tags
    #   The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    #
    # @return [Types::CreateJobTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_job_template(
    #     acceleration_settings: {
    #       mode: 'DISABLED' # required - accepts ["DISABLED", "ENABLED", "PREFERRED"]
    #     },
    #     category: 'Category',
    #     description: 'Description',
    #     hop_destinations: [
    #       {
    #         priority: 1,
    #         queue: 'Queue',
    #         wait_minutes: 1
    #       }
    #     ],
    #     name: 'Name', # required
    #     priority: 1,
    #     queue: 'Queue',
    #     settings: {
    #       ad_avail_offset: 1,
    #       avail_blanking: {
    #         avail_blanking_image: 'AvailBlankingImage'
    #       },
    #       esam: {
    #         manifest_confirm_condition_notification: {
    #           mcc_xml: 'MccXml'
    #         },
    #         response_signal_preroll: 1,
    #         signal_processing_notification: {
    #           scc_xml: 'SccXml'
    #         }
    #       },
    #       extended_data_services: {
    #         copy_protection_action: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "STRIP"]
    #         vchip_action: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "STRIP"]
    #       },
    #       inputs: [
    #         {
    #           audio_selector_groups: {
    #             'key' => {
    #               audio_selector_names: [
    #                 'member'
    #               ]
    #             }
    #           },
    #           audio_selectors: {
    #             'key' => {
    #               custom_language_code: 'CustomLanguageCode',
    #               default_selection: 'DEFAULT', # accepts ["DEFAULT", "NOT_DEFAULT"]
    #               external_audio_file_input: 'ExternalAudioFileInput',
    #               hls_rendition_group_settings: {
    #                 rendition_group_id: 'RenditionGroupId',
    #                 rendition_language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                 rendition_name: 'RenditionName'
    #               },
    #               language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #               offset: 1,
    #               pids: [
    #                 1
    #               ],
    #               program_selection: 1,
    #               remix_settings: {
    #                 channel_mapping: {
    #                   output_channels: [
    #                     {
    #                       input_channels: [
    #                         1
    #                       ],
    #                       input_channels_fine_tune: [
    #                         1.0
    #                       ]
    #                     }
    #                   ]
    #                 },
    #                 channels_in: 1,
    #                 channels_out: 1
    #               },
    #               selector_type: 'PID', # accepts ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #             }
    #           },
    #           caption_selectors: {
    #             'key' => {
    #               custom_language_code: 'CustomLanguageCode',
    #               language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #               source_settings: {
    #                 ancillary_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   source_ancillary_channel_number: 1,
    #                   terminate_captions: 'END_OF_INPUT' # accepts ["END_OF_INPUT", "DISABLED"]
    #                 },
    #                 dvb_sub_source_settings: {
    #                   pid: 1
    #                 },
    #                 embedded_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   source608_channel_number: 1,
    #                   source608_track_number: 1,
    #                   terminate_captions: 'END_OF_INPUT' # accepts ["END_OF_INPUT", "DISABLED"]
    #                 },
    #                 file_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   framerate: {
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1
    #                   },
    #                   source_file: 'SourceFile',
    #                   time_delta: 1,
    #                   time_delta_units: 'SECONDS' # accepts ["SECONDS", "MILLISECONDS"]
    #                 },
    #                 source_type: 'ANCILLARY', # accepts ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #                 teletext_source_settings: {
    #                   page_number: 'PageNumber'
    #                 },
    #                 track_source_settings: {
    #                   track_number: 1
    #                 },
    #                 webvtt_hls_source_settings: {
    #                   rendition_group_id: 'RenditionGroupId',
    #                   rendition_language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   rendition_name: 'RenditionName'
    #                 }
    #               }
    #             }
    #           },
    #           crop: {
    #             height: 1,
    #             width: 1,
    #             x: 1,
    #             y: 1
    #           },
    #           deblock_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #           denoise_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #           dolby_vision_metadata_xml: 'DolbyVisionMetadataXml',
    #           filter_enable: 'AUTO', # accepts ["AUTO", "DISABLE", "FORCE"]
    #           filter_strength: 1,
    #           image_inserter: {
    #             insertable_images: [
    #               {
    #                 duration: 1,
    #                 fade_in: 1,
    #                 fade_out: 1,
    #                 height: 1,
    #                 image_inserter_input: 'ImageInserterInput',
    #                 image_x: 1,
    #                 image_y: 1,
    #                 layer: 1,
    #                 opacity: 1,
    #                 start_time: 'StartTime',
    #                 width: 1
    #               }
    #             ]
    #           },
    #           input_clippings: [
    #             {
    #               end_timecode: 'EndTimecode',
    #               start_timecode: 'StartTimecode'
    #             }
    #           ],
    #           input_scan_type: 'AUTO', # accepts ["AUTO", "PSF"]
    #           program_number: 1,
    #           psi_control: 'IGNORE_PSI', # accepts ["IGNORE_PSI", "USE_PSI"]
    #           timecode_source: 'EMBEDDED', # accepts ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #           timecode_start: 'TimecodeStart',
    #           video_selector: {
    #             alpha_behavior: 'DISCARD', # accepts ["DISCARD", "REMAP_TO_LUMA"]
    #             color_space: 'FOLLOW', # accepts ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #             color_space_usage: 'FORCE', # accepts ["FORCE", "FALLBACK"]
    #             embedded_timecode_override: 'NONE', # accepts ["NONE", "USE_MDPM"]
    #             hdr10_metadata: {
    #               blue_primary_x: 1,
    #               blue_primary_y: 1,
    #               green_primary_x: 1,
    #               green_primary_y: 1,
    #               max_content_light_level: 1,
    #               max_frame_average_light_level: 1,
    #               max_luminance: 1,
    #               min_luminance: 1,
    #               red_primary_x: 1,
    #               red_primary_y: 1,
    #               white_point_x: 1,
    #               white_point_y: 1
    #             },
    #             pad_video: 'DISABLED', # accepts ["DISABLED", "BLACK"]
    #             pid: 1,
    #             program_number: 1,
    #             rotate: 'DEGREE_0', # accepts ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #             sample_range: 'FOLLOW' # accepts ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #           }
    #         }
    #       ],
    #       kantar_watermark: {
    #         channel_name: 'ChannelName',
    #         content_reference: 'ContentReference',
    #         credentials_secret_name: 'CredentialsSecretName',
    #         file_offset: 1.0,
    #         kantar_license_id: 1,
    #         kantar_server_url: 'KantarServerUrl',
    #         log_destination: 'LogDestination',
    #         metadata3: 'Metadata3',
    #         metadata4: 'Metadata4',
    #         metadata5: 'Metadata5',
    #         metadata6: 'Metadata6',
    #         metadata7: 'Metadata7',
    #         metadata8: 'Metadata8'
    #       },
    #       motion_image_inserter: {
    #         framerate: {
    #           framerate_denominator: 1,
    #           framerate_numerator: 1
    #         },
    #         input: 'Input',
    #         insertion_mode: 'MOV', # accepts ["MOV", "PNG"]
    #         offset: {
    #           image_x: 1,
    #           image_y: 1
    #         },
    #         playback: 'ONCE', # accepts ["ONCE", "REPEAT"]
    #         start_time: 'StartTime'
    #       },
    #       nielsen_configuration: {
    #         breakout_code: 1,
    #         distributor_id: 'DistributorId'
    #       },
    #       nielsen_non_linear_watermark: {
    #         active_watermark_process: 'NAES2_AND_NW', # accepts ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #         adi_filename: 'AdiFilename',
    #         asset_id: 'AssetId',
    #         asset_name: 'AssetName',
    #         cbet_source_id: 'CbetSourceId',
    #         episode_id: 'EpisodeId',
    #         metadata_destination: 'MetadataDestination',
    #         source_id: 1,
    #         source_watermark_status: 'CLEAN', # accepts ["CLEAN", "WATERMARKED"]
    #         tic_server_url: 'TicServerUrl',
    #         unique_tic_per_audio_track: 'RESERVE_UNIQUE_TICS_PER_TRACK' # accepts ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #       },
    #       output_groups: [
    #         {
    #           automated_encoding_settings: {
    #             abr_settings: {
    #               max_abr_bitrate: 1,
    #               max_renditions: 1,
    #               min_abr_bitrate: 1,
    #               rules: [
    #                 {
    #                   allowed_renditions: [
    #                     {
    #                       height: 1,
    #                       required: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       width: 1
    #                     }
    #                   ],
    #                   force_include_renditions: [
    #                     {
    #                       height: 1,
    #                       width: 1
    #                     }
    #                   ],
    #                   min_bottom_rendition_size: {
    #                     height: 1,
    #                     width: 1
    #                   },
    #                   min_top_rendition_size: {
    #                     height: 1,
    #                     width: 1
    #                   },
    #                   type: 'MIN_TOP_RENDITION_SIZE' # accepts ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #                 }
    #               ]
    #             }
    #           },
    #           custom_name: 'CustomName',
    #           name: 'Name',
    #           output_group_settings: {
    #             cmaf_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               base_url: 'BaseUrl',
    #               client_cache: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               codec_specification: 'RFC_6381', # accepts ["RFC_6381", "RFC_4281"]
    #               destination: 'Destination',
    #               destination_settings: {
    #                 s3_settings: {
    #                   access_control: {
    #                     canned_acl: 'PUBLIC_READ' # accepts ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #                   },
    #                   encryption: {
    #                     encryption_type: 'SERVER_SIDE_ENCRYPTION_S3', # accepts ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #                     kms_encryption_context: 'KmsEncryptionContext',
    #                     kms_key_arn: 'KmsKeyArn'
    #                   }
    #                 }
    #               },
    #               encryption: {
    #                 constant_initialization_vector: 'ConstantInitializationVector',
    #                 encryption_method: 'SAMPLE_AES', # accepts ["SAMPLE_AES", "AES_CTR"]
    #                 initialization_vector_in_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                 speke_key_provider: {
    #                   certificate_arn: 'CertificateArn',
    #                   dash_signaled_system_ids: [
    #                     'member'
    #                   ],
    #                   resource_id: 'ResourceId',
    #                   url: 'Url'
    #                 },
    #                 static_key_provider: {
    #                   key_format: 'KeyFormat',
    #                   key_format_versions: 'KeyFormatVersions',
    #                   static_key_value: 'StaticKeyValue',
    #                   url: 'Url'
    #                 },
    #                 type: 'SPEKE' # accepts ["SPEKE", "STATIC_KEY"]
    #               },
    #               fragment_length: 1,
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               manifest_compression: 'GZIP', # accepts ["GZIP", "NONE"]
    #               manifest_duration_format: 'FLOATING_POINT', # accepts ["FLOATING_POINT", "INTEGER"]
    #               min_buffer_time: 1,
    #               min_final_segment_length: 1.0,
    #               mpd_profile: 'MAIN_PROFILE', # accepts ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #               pts_offset_handling_for_b_frames: 'ZERO_BASED', # accepts ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               stream_inf_resolution: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               target_duration_compatibility_mode: 'LEGACY', # accepts ["LEGACY", "SPEC_COMPLIANT"]
    #               write_dash_manifest: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               write_hls_manifest: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               write_segment_timeline_in_representation: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             dash_iso_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_channel_config_scheme_id_uri: 'MPEG_CHANNEL_CONFIGURATION', # accepts ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #               base_url: 'BaseUrl',
    #               destination: 'Destination',
    #               encryption: {
    #                 playback_device_compatibility: 'CENC_V1', # accepts ["CENC_V1", "UNENCRYPTED_SEI"]
    #                 speke_key_provider: {
    #                   certificate_arn: 'CertificateArn',
    #                   resource_id: 'ResourceId',
    #                   system_ids: [
    #                     'member'
    #                   ],
    #                   url: 'Url'
    #                 }
    #               },
    #               fragment_length: 1,
    #               hbbtv_compliance: 'HBBTV_1_5', # accepts ["HBBTV_1_5", "NONE"]
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               min_buffer_time: 1,
    #               min_final_segment_length: 1.0,
    #               mpd_profile: 'MAIN_PROFILE', # accepts ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #               pts_offset_handling_for_b_frames: 'ZERO_BASED', # accepts ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               write_segment_timeline_in_representation: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             file_group_settings: {
    #               destination: 'Destination',
    #             },
    #             hls_group_settings: {
    #               ad_markers: [
    #                 'ELEMENTAL' # accepts ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #               ],
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_only_header: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               base_url: 'BaseUrl',
    #               caption_language_mappings: [
    #                 {
    #                   caption_channel: 1,
    #                   custom_language_code: 'CustomLanguageCode',
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_description: 'LanguageDescription'
    #                 }
    #               ],
    #               caption_language_setting: 'INSERT', # accepts ["INSERT", "OMIT", "NONE"]
    #               caption_segment_length_control: 'LARGE_SEGMENTS', # accepts ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #               client_cache: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               codec_specification: 'RFC_6381', # accepts ["RFC_6381", "RFC_4281"]
    #               destination: 'Destination',
    #               directory_structure: 'SINGLE_DIRECTORY', # accepts ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #               encryption: {
    #                 constant_initialization_vector: 'ConstantInitializationVector',
    #                 encryption_method: 'AES128', # accepts ["AES128", "SAMPLE_AES"]
    #                 initialization_vector_in_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                 offline_encrypted: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                 type: 'SPEKE' # accepts ["SPEKE", "STATIC_KEY"]
    #               },
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               manifest_compression: 'GZIP', # accepts ["GZIP", "NONE"]
    #               manifest_duration_format: 'FLOATING_POINT', # accepts ["FLOATING_POINT", "INTEGER"]
    #               min_final_segment_length: 1.0,
    #               min_segment_length: 1,
    #               output_selection: 'MANIFESTS_AND_SEGMENTS', # accepts ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #               program_date_time: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               program_date_time_period: 1,
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               segments_per_subdirectory: 1,
    #               stream_inf_resolution: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               target_duration_compatibility_mode: 'LEGACY', # accepts ["LEGACY", "SPEC_COMPLIANT"]
    #               timed_metadata_id3_frame: 'NONE', # accepts ["NONE", "PRIV", "TDRL"]
    #               timed_metadata_id3_period: 1,
    #               timestamp_delta_milliseconds: 1
    #             },
    #             ms_smooth_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_deduplication: 'COMBINE_DUPLICATE_STREAMS', # accepts ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #               destination: 'Destination',
    #               encryption: {
    #               },
    #               fragment_length: 1,
    #               fragment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               manifest_encoding: 'UTF8' # accepts ["UTF8", "UTF16"]
    #             },
    #             type: 'HLS_GROUP_SETTINGS' # accepts ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #           },
    #           outputs: [
    #             {
    #               audio_descriptions: [
    #                 {
    #                   audio_channel_tagging_settings: {
    #                     channel_tag: 'L' # accepts ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #                   },
    #                   audio_normalization_settings: {
    #                     algorithm: 'ITU_BS_1770_1', # accepts ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #                     algorithm_control: 'CORRECT_AUDIO', # accepts ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #                     correction_gate_level: 1,
    #                     loudness_logging: 'LOG', # accepts ["LOG", "DONT_LOG"]
    #                     peak_calculation: 'TRUE_PEAK', # accepts ["TRUE_PEAK", "NONE"]
    #                     target_lkfs: 1.0
    #                   },
    #                   audio_source_name: 'AudioSourceName',
    #                   audio_type: 1,
    #                   audio_type_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                   codec_settings: {
    #                     aac_settings: {
    #                       audio_description_broadcaster_mix: 'BROADCASTER_MIXED_AD', # accepts ["BROADCASTER_MIXED_AD", "NORMAL"]
    #                       bitrate: 1,
    #                       codec_profile: 'LC', # accepts ["LC", "HEV1", "HEV2"]
    #                       coding_mode: 'AD_RECEIVER_MIX', # accepts ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #                       rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #                       raw_format: 'LATM_LOAS', # accepts ["LATM_LOAS", "NONE"]
    #                       sample_rate: 1,
    #                       specification: 'MPEG2', # accepts ["MPEG2", "MPEG4"]
    #                       vbr_quality: 'LOW' # accepts ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #                     },
    #                     ac3_settings: {
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #                       coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #                       dialnorm: 1,
    #                       dynamic_range_compression_line: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #                       dynamic_range_compression_profile: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "NONE"]
    #                       dynamic_range_compression_rf: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #                       lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                       sample_rate: 1
    #                     },
    #                     aiff_settings: {
    #                       bit_depth: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     codec: 'AAC', # accepts ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #                     eac3_atmos_settings: {
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN"]
    #                       coding_mode: 'CODING_MODE_AUTO', # accepts ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #                       dialogue_intelligence: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       downmix_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #                       dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #                       lo_ro_center_mix_level: 1.0,
    #                       lo_ro_surround_mix_level: 1.0,
    #                       lt_rt_center_mix_level: 1.0,
    #                       lt_rt_surround_mix_level: 1.0,
    #                       metering_mode: 'LEQ_A', # accepts ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #                       sample_rate: 1,
    #                       speech_threshold: 1,
    #                       stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #                       surround_ex_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                     },
    #                     eac3_settings: {
    #                       attenuation_control: 'ATTENUATE_3_DB', # accepts ["ATTENUATE_3_DB", "NONE"]
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #                       coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #                       dc_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       dialnorm: 1,
    #                       dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       lfe_control: 'LFE', # accepts ["LFE", "NO_LFE"]
    #                       lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       lo_ro_center_mix_level: 1.0,
    #                       lo_ro_surround_mix_level: 1.0,
    #                       lt_rt_center_mix_level: 1.0,
    #                       lt_rt_surround_mix_level: 1.0,
    #                       metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                       passthrough_control: 'WHEN_POSSIBLE', # accepts ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #                       phase_control: 'SHIFT_90_DEGREES', # accepts ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #                       sample_rate: 1,
    #                       stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #                       surround_ex_mode: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                       surround_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                     },
    #                     mp2_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     mp3_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #                       sample_rate: 1,
    #                       vbr_quality: 1
    #                     },
    #                     opus_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     vorbis_settings: {
    #                       channels: 1,
    #                       sample_rate: 1,
    #                       vbr_quality: 1
    #                     },
    #                     wav_settings: {
    #                       bit_depth: 1,
    #                       channels: 1,
    #                       format: 'RIFF', # accepts ["RIFF", "RF64"]
    #                       sample_rate: 1
    #                     }
    #                   },
    #                   custom_language_code: 'CustomLanguageCode',
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_code_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                   stream_name: 'StreamName'
    #                 }
    #               ],
    #               caption_descriptions: [
    #                 {
    #                   caption_selector_name: 'CaptionSelectorName',
    #                   custom_language_code: 'CustomLanguageCode',
    #                   destination_settings: {
    #                     burnin_destination_settings: {
    #                       alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #                       apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #                       background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       background_opacity: 1,
    #                       fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #                       font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #                       font_opacity: 1,
    #                       font_resolution: 1,
    #                       font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #                       font_size: 1,
    #                       hex_font_color: 'HexFontColor',
    #                       outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #                       outline_size: 1,
    #                       shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       shadow_opacity: 1,
    #                       shadow_x_offset: 1,
    #                       shadow_y_offset: 1,
    #                       style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #                       x_position: 1,
    #                       y_position: 1
    #                     },
    #                     destination_type: 'BURN_IN', # accepts ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #                     dvb_sub_destination_settings: {
    #                       alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #                       apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #                       background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       background_opacity: 1,
    #                       dds_handling: 'NONE', # accepts ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #                       dds_x_coordinate: 1,
    #                       dds_y_coordinate: 1,
    #                       fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #                       font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #                       font_opacity: 1,
    #                       font_resolution: 1,
    #                       font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #                       font_size: 1,
    #                       height: 1,
    #                       hex_font_color: 'HexFontColor',
    #                       outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #                       outline_size: 1,
    #                       shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       shadow_opacity: 1,
    #                       shadow_x_offset: 1,
    #                       shadow_y_offset: 1,
    #                       style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       subtitling_type: 'HEARING_IMPAIRED', # accepts ["HEARING_IMPAIRED", "STANDARD"]
    #                       teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #                       width: 1,
    #                       x_position: 1,
    #                       y_position: 1
    #                     },
    #                     embedded_destination_settings: {
    #                       destination608_channel_number: 1,
    #                       destination708_service_number: 1
    #                     },
    #                     imsc_destination_settings: {
    #                       accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     scc_destination_settings: {
    #                       framerate: 'FRAMERATE_23_97' # accepts ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #                     },
    #                     srt_destination_settings: {
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     teletext_destination_settings: {
    #                       page_number: 'PageNumber',
    #                       page_types: [
    #                         'PAGE_TYPE_INITIAL' # accepts ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #                       ]
    #                     },
    #                     ttml_destination_settings: {
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     webvtt_destination_settings: {
    #                       accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED", "STRICT"]
    #                     }
    #                   },
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_description: 'LanguageDescription'
    #                 }
    #               ],
    #               container_settings: {
    #                 cmfc_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_group_id: 'AudioGroupId',
    #                   audio_rendition_sets: 'AudioRenditionSets',
    #                   audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #                   descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #                   i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #                 },
    #                 container: 'F4V', # accepts ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #                 f4v_settings: {
    #                   moov_placement: 'PROGRESSIVE_DOWNLOAD' # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #                 },
    #                 m2ts_settings: {
    #                   audio_buffer_model: 'DVB', # accepts ["DVB", "ATSC"]
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_frames_per_pes: 1,
    #                   audio_pids: [
    #                     1
    #                   ],
    #                   bitrate: 1,
    #                   buffer_model: 'MULTIPLEX', # accepts ["MULTIPLEX", "NONE"]
    #                   data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #                   dvb_nit_settings: {
    #                     network_id: 1,
    #                     network_name: 'NetworkName',
    #                     nit_interval: 1
    #                   },
    #                   dvb_sdt_settings: {
    #                     output_sdt: 'SDT_FOLLOW', # accepts ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #                     sdt_interval: 1,
    #                     service_name: 'ServiceName',
    #                     service_provider_name: 'ServiceProviderName'
    #                   },
    #                   dvb_tdt_settings: {
    #                     tdt_interval: 1
    #                   },
    #                   dvb_teletext_pid: 1,
    #                   ebp_audio_interval: 'VIDEO_AND_FIXED_INTERVALS', # accepts ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #                   ebp_placement: 'VIDEO_AND_AUDIO_PIDS', # accepts ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #                   es_rate_in_pes: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   force_ts_video_ebp_order: 'FORCE', # accepts ["FORCE", "DEFAULT"]
    #                   fragment_time: 1.0,
    #                   klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   max_pcr_interval: 1,
    #                   min_ebp_interval: 1,
    #                   nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   null_packet_bitrate: 1.0,
    #                   pat_interval: 1,
    #                   pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #                   pcr_pid: 1,
    #                   pmt_interval: 1,
    #                   pmt_pid: 1,
    #                   private_metadata_pid: 1,
    #                   program_number: 1,
    #                   rate_mode: 'VBR', # accepts ["VBR", "CBR"]
    #                   scte35_esam: {
    #                     scte35_esam_pid: 1
    #                   },
    #                   scte35_pid: 1,
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   segmentation_markers: 'NONE', # accepts ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #                   segmentation_style: 'MAINTAIN_CADENCE', # accepts ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #                   segmentation_time: 1.0,
    #                   timed_metadata_pid: 1,
    #                   transport_stream_id: 1,
    #                   video_pid: 1
    #                 },
    #                 m3u8_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_frames_per_pes: 1,
    #                   data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #                   max_pcr_interval: 1,
    #                   nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   pat_interval: 1,
    #                   pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #                   pcr_pid: 1,
    #                   pmt_interval: 1,
    #                   pmt_pid: 1,
    #                   private_metadata_pid: 1,
    #                   program_number: 1,
    #                   scte35_pid: 1,
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata_pid: 1,
    #                   transport_stream_id: 1,
    #                   video_pid: 1
    #                 },
    #                 mov_settings: {
    #                   clap_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   mpeg2_four_cc_control: 'XDCAM', # accepts ["XDCAM", "MPEG"]
    #                   padding_control: 'OMNEON', # accepts ["OMNEON", "NONE"]
    #                   reference: 'SELF_CONTAINED' # accepts ["SELF_CONTAINED", "EXTERNAL"]
    #                 },
    #                 mp4_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   ctts_version: 1,
    #                   free_space_box: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   moov_placement: 'PROGRESSIVE_DOWNLOAD', # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #                   mp4_major_brand: 'Mp4MajorBrand'
    #                 },
    #                 mpd_settings: {
    #                   accessibility_caption_hints: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   caption_container_type: 'RAW', # accepts ["RAW", "FRAGMENTED_MP4"]
    #                   klv_metadata: 'NONE', # accepts ["NONE", "PASSTHROUGH"]
    #                   scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #                 },
    #                 mxf_settings: {
    #                   afd_signaling: 'NO_COPY', # accepts ["NO_COPY", "COPY_FROM_VIDEO"]
    #                   profile: 'D_10', # accepts ["D_10", "XDCAM", "OP1A", "XAVC"]
    #                   xavc_profile_settings: {
    #                     duration_mode: 'ALLOW_ANY_DURATION', # accepts ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #                     max_anc_data_size: 1
    #                   }
    #                 }
    #               },
    #               extension: 'Extension',
    #               name_modifier: 'NameModifier',
    #               output_settings: {
    #                 hls_settings: {
    #                   audio_group_id: 'AudioGroupId',
    #                   audio_only_container: 'AUTOMATIC', # accepts ["AUTOMATIC", "M2TS"]
    #                   audio_rendition_sets: 'AudioRenditionSets',
    #                   audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #                   descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #                   i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   segment_modifier: 'SegmentModifier'
    #                 }
    #               },
    #               preset: 'Preset',
    #               video_description: {
    #                 afd_signaling: 'NONE', # accepts ["NONE", "AUTO", "FIXED"]
    #                 anti_alias: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                 codec_settings: {
    #                   av1_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     bit_depth: 'BIT_8', # accepts ["BIT_8", "BIT_10"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     max_bitrate: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     qvbr_settings: {
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'QVBR', # accepts ["QVBR"]
    #                     slices: 1,
    #                     spatial_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   avc_intra_settings: {
    #                     avc_intra_class: 'CLASS_50', # accepts ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #                     avc_intra_uhd_settings: {
    #                       quality_tuning_level: 'SINGLE_PASS' # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #                     },
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                   },
    #                   codec: 'AV1', # accepts ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #                   frame_capture_settings: {
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     max_captures: 1,
    #                     quality: 1
    #                   },
    #                   h264_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #                     codec_profile: 'BASELINE', # accepts ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     entropy_encoding: 'CABAC', # accepts ["CABAC", "CAVLC"]
    #                     field_encoding: 'PAFF', # accepts ["PAFF", "FORCE_FIELD", "MBAFF"]
    #                     flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     number_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                     qvbr_settings: {
    #                       max_average_bitrate: 1,
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #                     repeat_pps: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #                     slices: 1,
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     syntax: 'DEFAULT', # accepts ["DEFAULT", "RP2027"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     unregistered_sei_timecode: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   h265_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #                     alternate_transfer_function_sei: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #                     codec_profile: 'MAIN_MAIN', # accepts ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     number_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                     qvbr_settings: {
    #                       max_average_bitrate: 1,
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #                     sample_adaptive_offset_filter_mode: 'DEFAULT', # accepts ["DEFAULT", "ADAPTIVE", "OFF"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #                     slices: 1,
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     temporal_ids: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     tiles: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     unregistered_sei_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     write_mp4_packaging_type: 'HVC1' # accepts ["HVC1", "HEV1"]
    #                   },
    #                   mpeg2_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #                     codec_profile: 'MAIN', # accepts ["MAIN", "PROFILE_422"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     intra_dc_precision: 'AUTO', # accepts ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     syntax: 'DEFAULT', # accepts ["DEFAULT", "D_10"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   prores_settings: {
    #                     chroma_sampling: 'PRESERVE_444_SAMPLING', # accepts ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #                     codec_profile: 'APPLE_PRORES_422', # accepts ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                   },
    #                   vc3_settings: {
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'INTERLACED', # accepts ["INTERLACED", "PROGRESSIVE"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE', # accepts ["NONE", "HARD"]
    #                     vc3_class: 'CLASS_145_8BIT' # accepts ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #                   },
    #                   vp8_settings: {
    #                     bitrate: 1,
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     hrd_buffer_size: 1,
    #                     max_bitrate: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #                     rate_control_mode: 'VBR' # accepts ["VBR"]
    #                   },
    #                   vp9_settings: {
    #                     bitrate: 1,
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     hrd_buffer_size: 1,
    #                     max_bitrate: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #                     rate_control_mode: 'VBR' # accepts ["VBR"]
    #                   },
    #                   xavc_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     entropy_encoding: 'AUTO', # accepts ["AUTO", "CABAC", "CAVLC"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     profile: 'XAVC_HD_INTRA_CBG', # accepts ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     xavc4k_intra_cbg_profile_settings: {
    #                       xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #                     },
    #                     xavc4k_intra_vbr_profile_settings: {
    #                       xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #                     },
    #                     xavc4k_profile_settings: {
    #                       bitrate_class: 'BITRATE_CLASS_100', # accepts ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #                       codec_profile: 'HIGH', # accepts ["HIGH", "HIGH_422"]
    #                       flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_closed_cadence: 1,
    #                       hrd_buffer_size: 1,
    #                       quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                       slices: 1
    #                     },
    #                     xavc_hd_intra_cbg_profile_settings: {
    #                       xavc_class: 'CLASS_50' # accepts ["CLASS_50", "CLASS_100", "CLASS_200"]
    #                     },
    #                     xavc_hd_profile_settings: {
    #                       bitrate_class: 'BITRATE_CLASS_25', # accepts ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #                       flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_closed_cadence: 1,
    #                       hrd_buffer_size: 1,
    #                       interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                       quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                       slices: 1,
    #                       telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                     }
    #                   }
    #                 },
    #                 color_metadata: 'IGNORE', # accepts ["IGNORE", "INSERT"]
    #                 drop_frame_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                 fixed_afd: 1,
    #                 height: 1,
    #                 respond_to_afd: 'NONE', # accepts ["NONE", "RESPOND", "PASSTHROUGH"]
    #                 scaling_behavior: 'DEFAULT', # accepts ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #                 sharpness: 1,
    #                 timecode_insertion: 'DISABLED', # accepts ["DISABLED", "PIC_TIMING_SEI"]
    #                 video_preprocessors: {
    #                   color_corrector: {
    #                     brightness: 1,
    #                     color_space_conversion: 'NONE', # accepts ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #                     contrast: 1,
    #                     hue: 1,
    #                     sample_range_conversion: 'LIMITED_RANGE_SQUEEZE', # accepts ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #                     saturation: 1
    #                   },
    #                   deinterlacer: {
    #                     algorithm: 'INTERPOLATE', # accepts ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #                     control: 'FORCE_ALL_FRAMES', # accepts ["FORCE_ALL_FRAMES", "NORMAL"]
    #                     mode: 'DEINTERLACE' # accepts ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #                   },
    #                   dolby_vision: {
    #                     l6_metadata: {
    #                       max_cll: 1,
    #                       max_fall: 1
    #                     },
    #                     l6_mode: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #                     mapping: 'HDR10_NOMAP', # accepts ["HDR10_NOMAP", "HDR10_1000"]
    #                     profile: 'PROFILE_5' # accepts ["PROFILE_5", "PROFILE_8_1"]
    #                   },
    #                   hdr10_plus: {
    #                     mastering_monitor_nits: 1,
    #                     target_monitor_nits: 1
    #                   },
    #                   noise_reducer: {
    #                     filter: 'BILATERAL', # accepts ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #                     filter_settings: {
    #                       strength: 1
    #                     },
    #                     spatial_filter_settings: {
    #                       post_filter_sharpen_strength: 1,
    #                       speed: 1,
    #                       strength: 1
    #                     },
    #                     temporal_filter_settings: {
    #                       aggressive_mode: 1,
    #                       post_temporal_sharpening: 'DISABLED', # accepts ["DISABLED", "ENABLED", "AUTO"]
    #                       post_temporal_sharpening_strength: 'LOW', # accepts ["LOW", "MEDIUM", "HIGH"]
    #                       speed: 1,
    #                       strength: 1
    #                     }
    #                   },
    #                   partner_watermarking: {
    #                     nexguard_file_marker_settings: {
    #                       license: 'License',
    #                       payload: 1,
    #                       preset: 'Preset',
    #                       strength: 'LIGHTEST' # accepts ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #                     }
    #                   },
    #                   timecode_burnin: {
    #                     font_size: 1,
    #                     position: 'TOP_CENTER', # accepts ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #                     prefix: 'Prefix'
    #                   }
    #                 },
    #                 width: 1
    #               }
    #             }
    #           ]
    #         }
    #       ],
    #       timecode_config: {
    #         anchor: 'Anchor',
    #         source: 'EMBEDDED', # accepts ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #         start: 'Start',
    #         timestamp_offset: 'TimestampOffset'
    #       },
    #       timed_metadata_insertion: {
    #         id3_insertions: [
    #           {
    #             id3: 'Id3',
    #             timecode: 'Timecode'
    #           }
    #         ]
    #       }
    #     }, # required
    #     status_update_interval: 'SECONDS_10', # accepts ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #     tags: {
    #       'key' => 'value'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateJobTemplateOutput
    #   resp.data.job_template #=> Types::JobTemplate
    #   resp.data.job_template.acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.job_template.acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.job_template.arn #=> String
    #   resp.data.job_template.category #=> String
    #   resp.data.job_template.created_at #=> Time
    #   resp.data.job_template.description #=> String
    #   resp.data.job_template.hop_destinations #=> Array<HopDestination>
    #   resp.data.job_template.hop_destinations[0] #=> Types::HopDestination
    #   resp.data.job_template.hop_destinations[0].priority #=> Integer
    #   resp.data.job_template.hop_destinations[0].queue #=> String
    #   resp.data.job_template.hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.job_template.last_updated #=> Time
    #   resp.data.job_template.name #=> String
    #   resp.data.job_template.priority #=> Integer
    #   resp.data.job_template.queue #=> String
    #   resp.data.job_template.settings #=> Types::JobTemplateSettings
    #   resp.data.job_template.settings.ad_avail_offset #=> Integer
    #   resp.data.job_template.settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.job_template.settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.job_template.settings.esam #=> Types::EsamSettings
    #   resp.data.job_template.settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.job_template.settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.job_template.settings.esam.response_signal_preroll #=> Integer
    #   resp.data.job_template.settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.job_template.settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.job_template.settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.job_template.settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_template.settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_template.settings.inputs #=> Array<InputTemplate>
    #   resp.data.job_template.settings.inputs[0] #=> Types::InputTemplate
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.job_template.settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.job_template.settings.inputs[0].crop.height #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.width #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.x #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.y #=> Integer
    #   resp.data.job_template.settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.job_template.settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.job_template.settings.inputs[0].filter_strength #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.job_template.settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.job_template.settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.job_template.settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.job_template.settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.job_template.settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.job_template.settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.job_template.settings.inputs[0].program_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.job_template.settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_template.settings.inputs[0].timecode_start #=> String
    #   resp.data.job_template.settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.job_template.settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.job_template.settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.job_template.settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.job_template.settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.job_template.settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.job_template.settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.job_template.settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.job_template.settings.kantar_watermark.channel_name #=> String
    #   resp.data.job_template.settings.kantar_watermark.content_reference #=> String
    #   resp.data.job_template.settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.job_template.settings.kantar_watermark.file_offset #=> Float
    #   resp.data.job_template.settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.job_template.settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.job_template.settings.kantar_watermark.log_destination #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata3 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata4 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata5 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata6 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata7 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata8 #=> String
    #   resp.data.job_template.settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.job_template.settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.job_template.settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.input #=> String
    #   resp.data.job_template.settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.job_template.settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.job_template.settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.job_template.settings.motion_image_inserter.start_time #=> String
    #   resp.data.job_template.settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.job_template.settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.job_template.settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.job_template.settings.output_groups #=> Array<OutputGroup>
    #   resp.data.job_template.settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.job_template.settings.output_groups[0].custom_name #=> String
    #   resp.data.job_template.settings.output_groups[0].name #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.job_template.settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.job_template.settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.job_template.settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.job_template.settings.timecode_config.anchor #=> String
    #   resp.data.job_template.settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_template.settings.timecode_config.start #=> String
    #   resp.data.job_template.settings.timecode_config.timestamp_offset #=> String
    #   resp.data.job_template.settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.job_template.status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.job_template.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def create_job_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateJobTemplateInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateJobTemplateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateJobTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::CreateJobTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateJobTemplate,
        stubs: @stubs,
        params_class: Params::CreateJobTemplateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_job_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Create a new preset. For information about job templates see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    #
    # @param [Hash] params
    #   See {Types::CreatePresetInput}.
    #
    # @option params [String] :category
    #   Optional. A category for the preset you are creating.
    #
    # @option params [String] :description
    #   Optional. A description of the preset you are creating.
    #
    # @option params [String] :name
    #   The name of the preset you are creating.
    #
    # @option params [PresetSettings] :settings
    #   Settings for preset
    #
    # @option params [Hash<String, String>] :tags
    #   The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    #
    # @return [Types::CreatePresetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_preset(
    #     category: 'Category',
    #     description: 'Description',
    #     name: 'Name', # required
    #     settings: {
    #       audio_descriptions: [
    #         {
    #           audio_channel_tagging_settings: {
    #             channel_tag: 'L' # accepts ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #           },
    #           audio_normalization_settings: {
    #             algorithm: 'ITU_BS_1770_1', # accepts ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #             algorithm_control: 'CORRECT_AUDIO', # accepts ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #             correction_gate_level: 1,
    #             loudness_logging: 'LOG', # accepts ["LOG", "DONT_LOG"]
    #             peak_calculation: 'TRUE_PEAK', # accepts ["TRUE_PEAK", "NONE"]
    #             target_lkfs: 1.0
    #           },
    #           audio_source_name: 'AudioSourceName',
    #           audio_type: 1,
    #           audio_type_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #           codec_settings: {
    #             aac_settings: {
    #               audio_description_broadcaster_mix: 'BROADCASTER_MIXED_AD', # accepts ["BROADCASTER_MIXED_AD", "NORMAL"]
    #               bitrate: 1,
    #               codec_profile: 'LC', # accepts ["LC", "HEV1", "HEV2"]
    #               coding_mode: 'AD_RECEIVER_MIX', # accepts ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #               rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #               raw_format: 'LATM_LOAS', # accepts ["LATM_LOAS", "NONE"]
    #               sample_rate: 1,
    #               specification: 'MPEG2', # accepts ["MPEG2", "MPEG4"]
    #               vbr_quality: 'LOW' # accepts ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #             },
    #             ac3_settings: {
    #               bitrate: 1,
    #               bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #               coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #               dialnorm: 1,
    #               dynamic_range_compression_line: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #               dynamic_range_compression_profile: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "NONE"]
    #               dynamic_range_compression_rf: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #               lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #               sample_rate: 1
    #             },
    #             aiff_settings: {
    #               bit_depth: 1,
    #               channels: 1,
    #               sample_rate: 1
    #             },
    #             codec: 'AAC', # accepts ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #             eac3_atmos_settings: {
    #               bitrate: 1,
    #               bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN"]
    #               coding_mode: 'CODING_MODE_AUTO', # accepts ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #               dialogue_intelligence: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               downmix_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #               dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               dynamic_range_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #               lo_ro_center_mix_level: 1.0,
    #               lo_ro_surround_mix_level: 1.0,
    #               lt_rt_center_mix_level: 1.0,
    #               lt_rt_surround_mix_level: 1.0,
    #               metering_mode: 'LEQ_A', # accepts ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #               sample_rate: 1,
    #               speech_threshold: 1,
    #               stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #               surround_ex_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #             },
    #             eac3_settings: {
    #               attenuation_control: 'ATTENUATE_3_DB', # accepts ["ATTENUATE_3_DB", "NONE"]
    #               bitrate: 1,
    #               bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #               coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #               dc_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               dialnorm: 1,
    #               dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               lfe_control: 'LFE', # accepts ["LFE", "NO_LFE"]
    #               lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               lo_ro_center_mix_level: 1.0,
    #               lo_ro_surround_mix_level: 1.0,
    #               lt_rt_center_mix_level: 1.0,
    #               lt_rt_surround_mix_level: 1.0,
    #               metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #               passthrough_control: 'WHEN_POSSIBLE', # accepts ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #               phase_control: 'SHIFT_90_DEGREES', # accepts ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #               sample_rate: 1,
    #               stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #               surround_ex_mode: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #               surround_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #             },
    #             mp2_settings: {
    #               bitrate: 1,
    #               channels: 1,
    #               sample_rate: 1
    #             },
    #             mp3_settings: {
    #               bitrate: 1,
    #               channels: 1,
    #               rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #               sample_rate: 1,
    #               vbr_quality: 1
    #             },
    #             opus_settings: {
    #               bitrate: 1,
    #               channels: 1,
    #               sample_rate: 1
    #             },
    #             vorbis_settings: {
    #               channels: 1,
    #               sample_rate: 1,
    #               vbr_quality: 1
    #             },
    #             wav_settings: {
    #               bit_depth: 1,
    #               channels: 1,
    #               format: 'RIFF', # accepts ["RIFF", "RF64"]
    #               sample_rate: 1
    #             }
    #           },
    #           custom_language_code: 'CustomLanguageCode',
    #           language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #           language_code_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #           remix_settings: {
    #             channel_mapping: {
    #               output_channels: [
    #                 {
    #                   input_channels: [
    #                     1
    #                   ],
    #                   input_channels_fine_tune: [
    #                     1.0
    #                   ]
    #                 }
    #               ]
    #             },
    #             channels_in: 1,
    #             channels_out: 1
    #           },
    #           stream_name: 'StreamName'
    #         }
    #       ],
    #       caption_descriptions: [
    #         {
    #           custom_language_code: 'CustomLanguageCode',
    #           destination_settings: {
    #             burnin_destination_settings: {
    #               alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #               apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #               background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               background_opacity: 1,
    #               fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #               font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #               font_opacity: 1,
    #               font_resolution: 1,
    #               font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #               font_size: 1,
    #               hex_font_color: 'HexFontColor',
    #               outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #               outline_size: 1,
    #               shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               shadow_opacity: 1,
    #               shadow_x_offset: 1,
    #               shadow_y_offset: 1,
    #               style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #               x_position: 1,
    #               y_position: 1
    #             },
    #             destination_type: 'BURN_IN', # accepts ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #             dvb_sub_destination_settings: {
    #               alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #               apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #               background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               background_opacity: 1,
    #               dds_handling: 'NONE', # accepts ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #               dds_x_coordinate: 1,
    #               dds_y_coordinate: 1,
    #               fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #               font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #               font_opacity: 1,
    #               font_resolution: 1,
    #               font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #               font_size: 1,
    #               height: 1,
    #               hex_font_color: 'HexFontColor',
    #               outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #               outline_size: 1,
    #               shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               shadow_opacity: 1,
    #               shadow_x_offset: 1,
    #               shadow_y_offset: 1,
    #               style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               subtitling_type: 'HEARING_IMPAIRED', # accepts ["HEARING_IMPAIRED", "STANDARD"]
    #               teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #               width: 1,
    #               x_position: 1,
    #               y_position: 1
    #             },
    #             embedded_destination_settings: {
    #               destination608_channel_number: 1,
    #               destination708_service_number: 1
    #             },
    #             imsc_destination_settings: {
    #               accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             scc_destination_settings: {
    #               framerate: 'FRAMERATE_23_97' # accepts ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #             },
    #             srt_destination_settings: {
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             teletext_destination_settings: {
    #               page_number: 'PageNumber',
    #               page_types: [
    #                 'PAGE_TYPE_INITIAL' # accepts ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #               ]
    #             },
    #             ttml_destination_settings: {
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             webvtt_destination_settings: {
    #               accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED", "STRICT"]
    #             }
    #           },
    #           language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #           language_description: 'LanguageDescription'
    #         }
    #       ],
    #       container_settings: {
    #         cmfc_settings: {
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           audio_group_id: 'AudioGroupId',
    #           audio_rendition_sets: 'AudioRenditionSets',
    #           audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #           descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #           i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #         },
    #         container: 'F4V', # accepts ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #         f4v_settings: {
    #           moov_placement: 'PROGRESSIVE_DOWNLOAD' # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #         },
    #         m2ts_settings: {
    #           audio_buffer_model: 'DVB', # accepts ["DVB", "ATSC"]
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           audio_frames_per_pes: 1,
    #           audio_pids: [
    #             1
    #           ],
    #           bitrate: 1,
    #           buffer_model: 'MULTIPLEX', # accepts ["MULTIPLEX", "NONE"]
    #           data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #           dvb_nit_settings: {
    #             network_id: 1,
    #             network_name: 'NetworkName',
    #             nit_interval: 1
    #           },
    #           dvb_sdt_settings: {
    #             output_sdt: 'SDT_FOLLOW', # accepts ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #             sdt_interval: 1,
    #             service_name: 'ServiceName',
    #             service_provider_name: 'ServiceProviderName'
    #           },
    #           dvb_tdt_settings: {
    #             tdt_interval: 1
    #           },
    #           dvb_teletext_pid: 1,
    #           ebp_audio_interval: 'VIDEO_AND_FIXED_INTERVALS', # accepts ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #           ebp_placement: 'VIDEO_AND_AUDIO_PIDS', # accepts ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #           es_rate_in_pes: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           force_ts_video_ebp_order: 'FORCE', # accepts ["FORCE", "DEFAULT"]
    #           fragment_time: 1.0,
    #           klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           max_pcr_interval: 1,
    #           min_ebp_interval: 1,
    #           nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #           null_packet_bitrate: 1.0,
    #           pat_interval: 1,
    #           pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #           pcr_pid: 1,
    #           pmt_interval: 1,
    #           pmt_pid: 1,
    #           private_metadata_pid: 1,
    #           program_number: 1,
    #           rate_mode: 'VBR', # accepts ["VBR", "CBR"]
    #           scte35_esam: {
    #             scte35_esam_pid: 1
    #           },
    #           scte35_pid: 1,
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           segmentation_markers: 'NONE', # accepts ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #           segmentation_style: 'MAINTAIN_CADENCE', # accepts ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #           segmentation_time: 1.0,
    #           timed_metadata_pid: 1,
    #           transport_stream_id: 1,
    #           video_pid: 1
    #         },
    #         m3u8_settings: {
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           audio_frames_per_pes: 1,
    #           data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #           max_pcr_interval: 1,
    #           nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #           pat_interval: 1,
    #           pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #           pcr_pid: 1,
    #           pmt_interval: 1,
    #           pmt_pid: 1,
    #           private_metadata_pid: 1,
    #           program_number: 1,
    #           scte35_pid: 1,
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata_pid: 1,
    #           transport_stream_id: 1,
    #           video_pid: 1
    #         },
    #         mov_settings: {
    #           clap_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           mpeg2_four_cc_control: 'XDCAM', # accepts ["XDCAM", "MPEG"]
    #           padding_control: 'OMNEON', # accepts ["OMNEON", "NONE"]
    #           reference: 'SELF_CONTAINED' # accepts ["SELF_CONTAINED", "EXTERNAL"]
    #         },
    #         mp4_settings: {
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           ctts_version: 1,
    #           free_space_box: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           moov_placement: 'PROGRESSIVE_DOWNLOAD', # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #           mp4_major_brand: 'Mp4MajorBrand'
    #         },
    #         mpd_settings: {
    #           accessibility_caption_hints: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           caption_container_type: 'RAW', # accepts ["RAW", "FRAGMENTED_MP4"]
    #           klv_metadata: 'NONE', # accepts ["NONE", "PASSTHROUGH"]
    #           scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #         },
    #         mxf_settings: {
    #           afd_signaling: 'NO_COPY', # accepts ["NO_COPY", "COPY_FROM_VIDEO"]
    #           profile: 'D_10', # accepts ["D_10", "XDCAM", "OP1A", "XAVC"]
    #           xavc_profile_settings: {
    #             duration_mode: 'ALLOW_ANY_DURATION', # accepts ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #             max_anc_data_size: 1
    #           }
    #         }
    #       },
    #       video_description: {
    #         afd_signaling: 'NONE', # accepts ["NONE", "AUTO", "FIXED"]
    #         anti_alias: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #         codec_settings: {
    #           av1_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #             bit_depth: 'BIT_8', # accepts ["BIT_8", "BIT_10"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_size: 1.0,
    #             max_bitrate: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             qvbr_settings: {
    #               qvbr_quality_level: 1,
    #               qvbr_quality_level_fine_tune: 1.0
    #             },
    #             rate_control_mode: 'QVBR', # accepts ["QVBR"]
    #             slices: 1,
    #             spatial_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #           },
    #           avc_intra_settings: {
    #             avc_intra_class: 'CLASS_50', # accepts ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #             avc_intra_uhd_settings: {
    #               quality_tuning_level: 'SINGLE_PASS' # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #             },
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE' # accepts ["NONE", "HARD"]
    #           },
    #           codec: 'AV1', # accepts ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #           frame_capture_settings: {
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             max_captures: 1,
    #             quality: 1
    #           },
    #           h264_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #             bitrate: 1,
    #             codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #             codec_profile: 'BASELINE', # accepts ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #             dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #             entropy_encoding: 'CABAC', # accepts ["CABAC", "CAVLC"]
    #             field_encoding: 'PAFF', # accepts ["PAFF", "FORCE_FIELD", "MBAFF"]
    #             flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             gop_closed_cadence: 1,
    #             gop_size: 1.0,
    #             gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #             hrd_buffer_initial_fill_percentage: 1,
    #             hrd_buffer_size: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             max_bitrate: 1,
    #             min_i_interval: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             number_reference_frames: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #             qvbr_settings: {
    #               max_average_bitrate: 1,
    #               qvbr_quality_level: 1,
    #               qvbr_quality_level_fine_tune: 1.0
    #             },
    #             rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #             repeat_pps: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #             slices: 1,
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             softness: 1,
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             syntax: 'DEFAULT', # accepts ["DEFAULT", "RP2027"]
    #             telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #             temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             unregistered_sei_timecode: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #           },
    #           h265_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #             alternate_transfer_function_sei: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             bitrate: 1,
    #             codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #             codec_profile: 'MAIN_MAIN', # accepts ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #             dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #             flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             gop_closed_cadence: 1,
    #             gop_size: 1.0,
    #             gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #             hrd_buffer_initial_fill_percentage: 1,
    #             hrd_buffer_size: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             max_bitrate: 1,
    #             min_i_interval: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             number_reference_frames: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #             qvbr_settings: {
    #               max_average_bitrate: 1,
    #               qvbr_quality_level: 1,
    #               qvbr_quality_level_fine_tune: 1.0
    #             },
    #             rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #             sample_adaptive_offset_filter_mode: 'DEFAULT', # accepts ["DEFAULT", "ADAPTIVE", "OFF"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #             slices: 1,
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #             temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             temporal_ids: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             tiles: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             unregistered_sei_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             write_mp4_packaging_type: 'HVC1' # accepts ["HVC1", "HEV1"]
    #           },
    #           mpeg2_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH"]
    #             bitrate: 1,
    #             codec_level: 'AUTO', # accepts ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #             codec_profile: 'MAIN', # accepts ["MAIN", "PROFILE_422"]
    #             dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_closed_cadence: 1,
    #             gop_size: 1.0,
    #             gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS"]
    #             hrd_buffer_initial_fill_percentage: 1,
    #             hrd_buffer_size: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             intra_dc_precision: 'AUTO', # accepts ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #             max_bitrate: 1,
    #             min_i_interval: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #             rate_control_mode: 'VBR', # accepts ["VBR", "CBR"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             softness: 1,
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             syntax: 'DEFAULT', # accepts ["DEFAULT", "D_10"]
    #             telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #             temporal_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #           },
    #           prores_settings: {
    #             chroma_sampling: 'PRESERVE_444_SAMPLING', # accepts ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #             codec_profile: 'APPLE_PRORES_422', # accepts ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE' # accepts ["NONE", "HARD"]
    #           },
    #           vc3_settings: {
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             interlace_mode: 'INTERLACED', # accepts ["INTERLACED", "PROGRESSIVE"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE', # accepts ["NONE", "HARD"]
    #             vc3_class: 'CLASS_145_8BIT' # accepts ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #           },
    #           vp8_settings: {
    #             bitrate: 1,
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_size: 1.0,
    #             hrd_buffer_size: 1,
    #             max_bitrate: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #             rate_control_mode: 'VBR' # accepts ["VBR"]
    #           },
    #           vp9_settings: {
    #             bitrate: 1,
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_size: 1.0,
    #             hrd_buffer_size: 1,
    #             max_bitrate: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #             rate_control_mode: 'VBR' # accepts ["VBR"]
    #           },
    #           xavc_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #             entropy_encoding: 'AUTO', # accepts ["AUTO", "CABAC", "CAVLC"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             profile: 'XAVC_HD_INTRA_CBG', # accepts ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             softness: 1,
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             xavc4k_intra_cbg_profile_settings: {
    #               xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #             },
    #             xavc4k_intra_vbr_profile_settings: {
    #               xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #             },
    #             xavc4k_profile_settings: {
    #               bitrate_class: 'BITRATE_CLASS_100', # accepts ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #               codec_profile: 'HIGH', # accepts ["HIGH", "HIGH_422"]
    #               flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_closed_cadence: 1,
    #               hrd_buffer_size: 1,
    #               quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #               slices: 1
    #             },
    #             xavc_hd_intra_cbg_profile_settings: {
    #               xavc_class: 'CLASS_50' # accepts ["CLASS_50", "CLASS_100", "CLASS_200"]
    #             },
    #             xavc_hd_profile_settings: {
    #               bitrate_class: 'BITRATE_CLASS_25', # accepts ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #               flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_closed_cadence: 1,
    #               hrd_buffer_size: 1,
    #               interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #               quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #               slices: 1,
    #               telecine: 'NONE' # accepts ["NONE", "HARD"]
    #             }
    #           }
    #         },
    #         color_metadata: 'IGNORE', # accepts ["IGNORE", "INSERT"]
    #         crop: {
    #           height: 1,
    #           width: 1,
    #           x: 1,
    #           y: 1
    #         },
    #         drop_frame_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #         fixed_afd: 1,
    #         height: 1,
    #         respond_to_afd: 'NONE', # accepts ["NONE", "RESPOND", "PASSTHROUGH"]
    #         scaling_behavior: 'DEFAULT', # accepts ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #         sharpness: 1,
    #         timecode_insertion: 'DISABLED', # accepts ["DISABLED", "PIC_TIMING_SEI"]
    #         video_preprocessors: {
    #           color_corrector: {
    #             brightness: 1,
    #             color_space_conversion: 'NONE', # accepts ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #             contrast: 1,
    #             hdr10_metadata: {
    #               blue_primary_x: 1,
    #               blue_primary_y: 1,
    #               green_primary_x: 1,
    #               green_primary_y: 1,
    #               max_content_light_level: 1,
    #               max_frame_average_light_level: 1,
    #               max_luminance: 1,
    #               min_luminance: 1,
    #               red_primary_x: 1,
    #               red_primary_y: 1,
    #               white_point_x: 1,
    #               white_point_y: 1
    #             },
    #             hue: 1,
    #             sample_range_conversion: 'LIMITED_RANGE_SQUEEZE', # accepts ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #             saturation: 1
    #           },
    #           deinterlacer: {
    #             algorithm: 'INTERPOLATE', # accepts ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #             control: 'FORCE_ALL_FRAMES', # accepts ["FORCE_ALL_FRAMES", "NORMAL"]
    #             mode: 'DEINTERLACE' # accepts ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #           },
    #           dolby_vision: {
    #             l6_metadata: {
    #               max_cll: 1,
    #               max_fall: 1
    #             },
    #             l6_mode: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #             mapping: 'HDR10_NOMAP', # accepts ["HDR10_NOMAP", "HDR10_1000"]
    #             profile: 'PROFILE_5' # accepts ["PROFILE_5", "PROFILE_8_1"]
    #           },
    #           hdr10_plus: {
    #             mastering_monitor_nits: 1,
    #             target_monitor_nits: 1
    #           },
    #           image_inserter: {
    #             insertable_images: [
    #               {
    #                 duration: 1,
    #                 fade_in: 1,
    #                 fade_out: 1,
    #                 height: 1,
    #                 image_inserter_input: 'ImageInserterInput',
    #                 image_x: 1,
    #                 image_y: 1,
    #                 layer: 1,
    #                 opacity: 1,
    #                 start_time: 'StartTime',
    #                 width: 1
    #               }
    #             ]
    #           },
    #           noise_reducer: {
    #             filter: 'BILATERAL', # accepts ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #             filter_settings: {
    #               strength: 1
    #             },
    #             spatial_filter_settings: {
    #               post_filter_sharpen_strength: 1,
    #               speed: 1,
    #               strength: 1
    #             },
    #             temporal_filter_settings: {
    #               aggressive_mode: 1,
    #               post_temporal_sharpening: 'DISABLED', # accepts ["DISABLED", "ENABLED", "AUTO"]
    #               post_temporal_sharpening_strength: 'LOW', # accepts ["LOW", "MEDIUM", "HIGH"]
    #               speed: 1,
    #               strength: 1
    #             }
    #           },
    #           partner_watermarking: {
    #             nexguard_file_marker_settings: {
    #               license: 'License',
    #               payload: 1,
    #               preset: 'Preset',
    #               strength: 'LIGHTEST' # accepts ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #             }
    #           },
    #           timecode_burnin: {
    #             font_size: 1,
    #             position: 'TOP_CENTER', # accepts ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #             prefix: 'Prefix'
    #           }
    #         },
    #         width: 1
    #       }
    #     }, # required
    #     tags: {
    #       'key' => 'value'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreatePresetOutput
    #   resp.data.preset #=> Types::Preset
    #   resp.data.preset.arn #=> String
    #   resp.data.preset.category #=> String
    #   resp.data.preset.created_at #=> Time
    #   resp.data.preset.description #=> String
    #   resp.data.preset.last_updated #=> Time
    #   resp.data.preset.name #=> String
    #   resp.data.preset.settings #=> Types::PresetSettings
    #   resp.data.preset.settings.audio_descriptions #=> Array<AudioDescription>
    #   resp.data.preset.settings.audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.preset.settings.audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.preset.settings.audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].audio_source_name #=> String
    #   resp.data.preset.settings.audio_descriptions[0].audio_type #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].custom_language_code #=> String
    #   resp.data.preset.settings.audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.preset.settings.audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channels_in #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channels_out #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].stream_name #=> String
    #   resp.data.preset.settings.caption_descriptions #=> Array<CaptionDescriptionPreset>
    #   resp.data.preset.settings.caption_descriptions[0] #=> Types::CaptionDescriptionPreset
    #   resp.data.preset.settings.caption_descriptions[0].custom_language_code #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.preset.settings.caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.preset.settings.caption_descriptions[0].language_description #=> String
    #   resp.data.preset.settings.container_settings #=> Types::ContainerSettings
    #   resp.data.preset.settings.container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.preset.settings.container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.preset.settings.container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.preset.settings.container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.preset.settings.container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.preset.settings.container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.preset.settings.container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.preset.settings.container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.preset.settings.container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.preset.settings.container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.preset.settings.container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.preset.settings.container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.preset.settings.container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.preset.settings.container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.preset.settings.container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.preset.settings.container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.preset.settings.container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.preset.settings.container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.preset.settings.video_description #=> Types::VideoDescription
    #   resp.data.preset.settings.video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.preset.settings.video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.preset.settings.video_description.crop #=> Types::Rectangle
    #   resp.data.preset.settings.video_description.crop.height #=> Integer
    #   resp.data.preset.settings.video_description.crop.width #=> Integer
    #   resp.data.preset.settings.video_description.crop.x #=> Integer
    #   resp.data.preset.settings.video_description.crop.y #=> Integer
    #   resp.data.preset.settings.video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.fixed_afd #=> Integer
    #   resp.data.preset.settings.video_description.height #=> Integer
    #   resp.data.preset.settings.video_description.position #=> Types::Rectangle
    #   resp.data.preset.settings.video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.preset.settings.video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.preset.settings.video_description.sharpness #=> Integer
    #   resp.data.preset.settings.video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.preset.settings.video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.preset.settings.video_description.width #=> Integer
    #   resp.data.preset.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def create_preset(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreatePresetInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreatePresetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreatePreset
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::CreatePreset
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreatePreset,
        stubs: @stubs,
        params_class: Params::CreatePresetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_preset
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Create a new transcoding queue. For information about queues, see Working With Queues in the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html
    #
    # @param [Hash] params
    #   See {Types::CreateQueueInput}.
    #
    # @option params [String] :description
    #   Optional. A description of the queue that you are creating.
    #
    # @option params [String] :name
    #   The name of the queue that you are creating.
    #
    # @option params [String] :pricing_plan
    #   Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment. When you use the API to create a queue, the default is on-demand.
    #
    # @option params [ReservationPlanSettings] :reservation_plan_settings
    #   Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    #
    # @option params [String] :status
    #   Initial state of the queue. If you create a paused queue, then jobs in that queue won't begin.
    #
    # @option params [Hash<String, String>] :tags
    #   The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    #
    # @return [Types::CreateQueueOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.create_queue(
    #     description: 'Description',
    #     name: 'Name', # required
    #     pricing_plan: 'ON_DEMAND', # accepts ["ON_DEMAND", "RESERVED"]
    #     reservation_plan_settings: {
    #       commitment: 'ONE_YEAR', # required - accepts ["ONE_YEAR"]
    #       renewal_type: 'AUTO_RENEW', # required - accepts ["AUTO_RENEW", "EXPIRE"]
    #       reserved_slots: 1 # required
    #     },
    #     status: 'ACTIVE', # accepts ["ACTIVE", "PAUSED"]
    #     tags: {
    #       'key' => 'value'
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::CreateQueueOutput
    #   resp.data.queue #=> Types::Queue
    #   resp.data.queue.arn #=> String
    #   resp.data.queue.created_at #=> Time
    #   resp.data.queue.description #=> String
    #   resp.data.queue.last_updated #=> Time
    #   resp.data.queue.name #=> String
    #   resp.data.queue.pricing_plan #=> String, one of ["ON_DEMAND", "RESERVED"]
    #   resp.data.queue.progressing_jobs_count #=> Integer
    #   resp.data.queue.reservation_plan #=> Types::ReservationPlan
    #   resp.data.queue.reservation_plan.commitment #=> String, one of ["ONE_YEAR"]
    #   resp.data.queue.reservation_plan.expires_at #=> Time
    #   resp.data.queue.reservation_plan.purchased_at #=> Time
    #   resp.data.queue.reservation_plan.renewal_type #=> String, one of ["AUTO_RENEW", "EXPIRE"]
    #   resp.data.queue.reservation_plan.reserved_slots #=> Integer
    #   resp.data.queue.reservation_plan.status #=> String, one of ["ACTIVE", "EXPIRED"]
    #   resp.data.queue.status #=> String, one of ["ACTIVE", "PAUSED"]
    #   resp.data.queue.submitted_jobs_count #=> Integer
    #   resp.data.queue.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def create_queue(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::CreateQueueInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::CreateQueueInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::CreateQueue
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 201, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::CreateQueue
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::CreateQueue,
        stubs: @stubs,
        params_class: Params::CreateQueueOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :create_queue
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Permanently delete a job template you have created.
    #
    # @param [Hash] params
    #   See {Types::DeleteJobTemplateInput}.
    #
    # @option params [String] :name
    #   The name of the job template to be deleted.
    #
    # @return [Types::DeleteJobTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_job_template(
    #     name: 'Name' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteJobTemplateOutput
    #
    def delete_job_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteJobTemplateInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteJobTemplateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteJobTemplate
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 202, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::DeleteJobTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteJobTemplate,
        stubs: @stubs,
        params_class: Params::DeleteJobTemplateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_job_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Permanently delete a policy that you created.
    #
    # @param [Hash] params
    #   See {Types::DeletePolicyInput}.
    #
    # @return [Types::DeletePolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_policy()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeletePolicyOutput
    #
    def delete_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeletePolicyInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeletePolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeletePolicy
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::DeletePolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeletePolicy,
        stubs: @stubs,
        params_class: Params::DeletePolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Permanently delete a preset you have created.
    #
    # @param [Hash] params
    #   See {Types::DeletePresetInput}.
    #
    # @option params [String] :name
    #   The name of the preset to be deleted.
    #
    # @return [Types::DeletePresetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_preset(
    #     name: 'Name' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeletePresetOutput
    #
    def delete_preset(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeletePresetInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeletePresetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeletePreset
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 202, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::DeletePreset
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeletePreset,
        stubs: @stubs,
        params_class: Params::DeletePresetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_preset
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Permanently delete a queue you have created.
    #
    # @param [Hash] params
    #   See {Types::DeleteQueueInput}.
    #
    # @option params [String] :name
    #   The name of the queue that you want to delete.
    #
    # @return [Types::DeleteQueueOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.delete_queue(
    #     name: 'Name' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DeleteQueueOutput
    #
    def delete_queue(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DeleteQueueInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DeleteQueueInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DeleteQueue
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 202, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::DeleteQueue
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DeleteQueue,
        stubs: @stubs,
        params_class: Params::DeleteQueueOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :delete_queue
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Send an request with an empty body to the regional API endpoint to get your account API endpoint.
    #
    # @param [Hash] params
    #   See {Types::DescribeEndpointsInput}.
    #
    # @option params [Integer] :max_results
    #   Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    #
    # @option params [String] :mode
    #   Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    #
    # @option params [String] :next_token
    #   Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    #
    # @return [Types::DescribeEndpointsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.describe_endpoints(
    #     max_results: 1,
    #     mode: 'DEFAULT', # accepts ["DEFAULT", "GET_ONLY"]
    #     next_token: 'NextToken'
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DescribeEndpointsOutput
    #   resp.data.endpoints #=> Array<Endpoint>
    #   resp.data.endpoints[0] #=> Types::Endpoint
    #   resp.data.endpoints[0].url #=> String
    #   resp.data.next_token #=> String
    #
    def describe_endpoints(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DescribeEndpointsInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DescribeEndpointsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DescribeEndpoints
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::DescribeEndpoints
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DescribeEndpoints,
        stubs: @stubs,
        params_class: Params::DescribeEndpointsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :describe_endpoints
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Removes an association between the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate and an AWS Elemental MediaConvert resource.
    #
    # @param [Hash] params
    #   See {Types::DisassociateCertificateInput}.
    #
    # @option params [String] :arn
    #   The ARN of the ACM certificate that you want to disassociate from your MediaConvert resource.
    #
    # @return [Types::DisassociateCertificateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.disassociate_certificate(
    #     arn: 'Arn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::DisassociateCertificateOutput
    #
    def disassociate_certificate(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::DisassociateCertificateInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::DisassociateCertificateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::DisassociateCertificate
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 202, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::DisassociateCertificate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::DisassociateCertificate,
        stubs: @stubs,
        params_class: Params::DisassociateCertificateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :disassociate_certificate
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve the JSON for a specific completed transcoding job.
    #
    # @param [Hash] params
    #   See {Types::GetJobInput}.
    #
    # @option params [String] :id
    #   the job ID of the job.
    #
    # @return [Types::GetJobOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_job(
    #     id: 'Id' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetJobOutput
    #   resp.data.job #=> Types::Job
    #   resp.data.job.acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.job.acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.job.acceleration_status #=> String, one of ["NOT_APPLICABLE", "IN_PROGRESS", "ACCELERATED", "NOT_ACCELERATED"]
    #   resp.data.job.arn #=> String
    #   resp.data.job.billing_tags_source #=> String, one of ["QUEUE", "PRESET", "JOB_TEMPLATE", "JOB"]
    #   resp.data.job.created_at #=> Time
    #   resp.data.job.current_phase #=> String, one of ["PROBING", "TRANSCODING", "UPLOADING"]
    #   resp.data.job.error_code #=> Integer
    #   resp.data.job.error_message #=> String
    #   resp.data.job.hop_destinations #=> Array<HopDestination>
    #   resp.data.job.hop_destinations[0] #=> Types::HopDestination
    #   resp.data.job.hop_destinations[0].priority #=> Integer
    #   resp.data.job.hop_destinations[0].queue #=> String
    #   resp.data.job.hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.job.id #=> String
    #   resp.data.job.job_percent_complete #=> Integer
    #   resp.data.job.job_template #=> String
    #   resp.data.job.messages #=> Types::JobMessages
    #   resp.data.job.messages.info #=> Array<String>
    #   resp.data.job.messages.info[0] #=> String
    #   resp.data.job.messages.warning #=> Array<String>
    #   resp.data.job.output_group_details #=> Array<OutputGroupDetail>
    #   resp.data.job.output_group_details[0] #=> Types::OutputGroupDetail
    #   resp.data.job.output_group_details[0].output_details #=> Array<OutputDetail>
    #   resp.data.job.output_group_details[0].output_details[0] #=> Types::OutputDetail
    #   resp.data.job.output_group_details[0].output_details[0].duration_in_ms #=> Integer
    #   resp.data.job.output_group_details[0].output_details[0].video_details #=> Types::VideoDetail
    #   resp.data.job.output_group_details[0].output_details[0].video_details.height_in_px #=> Integer
    #   resp.data.job.output_group_details[0].output_details[0].video_details.width_in_px #=> Integer
    #   resp.data.job.priority #=> Integer
    #   resp.data.job.queue #=> String
    #   resp.data.job.queue_transitions #=> Array<QueueTransition>
    #   resp.data.job.queue_transitions[0] #=> Types::QueueTransition
    #   resp.data.job.queue_transitions[0].destination_queue #=> String
    #   resp.data.job.queue_transitions[0].source_queue #=> String
    #   resp.data.job.queue_transitions[0].timestamp #=> Time
    #   resp.data.job.retry_count #=> Integer
    #   resp.data.job.role #=> String
    #   resp.data.job.settings #=> Types::JobSettings
    #   resp.data.job.settings.ad_avail_offset #=> Integer
    #   resp.data.job.settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.job.settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.job.settings.esam #=> Types::EsamSettings
    #   resp.data.job.settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.job.settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.job.settings.esam.response_signal_preroll #=> Integer
    #   resp.data.job.settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.job.settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.job.settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.job.settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job.settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job.settings.inputs #=> Array<Input>
    #   resp.data.job.settings.inputs[0] #=> Types::Input
    #   resp.data.job.settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.job.settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.job.settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.job.settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.job.settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.job.settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.job.settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.job.settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.job.settings.inputs[0].crop.height #=> Integer
    #   resp.data.job.settings.inputs[0].crop.width #=> Integer
    #   resp.data.job.settings.inputs[0].crop.x #=> Integer
    #   resp.data.job.settings.inputs[0].crop.y #=> Integer
    #   resp.data.job.settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.inputs[0].decryption_settings #=> Types::InputDecryptionSettings
    #   resp.data.job.settings.inputs[0].decryption_settings.decryption_mode #=> String, one of ["AES_CTR", "AES_CBC", "AES_GCM"]
    #   resp.data.job.settings.inputs[0].decryption_settings.encrypted_decryption_key #=> String
    #   resp.data.job.settings.inputs[0].decryption_settings.initialization_vector #=> String
    #   resp.data.job.settings.inputs[0].decryption_settings.kms_key_region #=> String
    #   resp.data.job.settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.job.settings.inputs[0].file_input #=> String
    #   resp.data.job.settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.job.settings.inputs[0].filter_strength #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.job.settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.job.settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.job.settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.job.settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.job.settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.job.settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.job.settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.job.settings.inputs[0].program_number #=> Integer
    #   resp.data.job.settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.job.settings.inputs[0].supplemental_imps #=> Array<String>
    #   resp.data.job.settings.inputs[0].supplemental_imps[0] #=> String
    #   resp.data.job.settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job.settings.inputs[0].timecode_start #=> String
    #   resp.data.job.settings.inputs[0].video_generator #=> Types::InputVideoGenerator
    #   resp.data.job.settings.inputs[0].video_generator.duration #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.job.settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.job.settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.job.settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.job.settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.job.settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.job.settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.job.settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.job.settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.job.settings.kantar_watermark.channel_name #=> String
    #   resp.data.job.settings.kantar_watermark.content_reference #=> String
    #   resp.data.job.settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.job.settings.kantar_watermark.file_offset #=> Float
    #   resp.data.job.settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.job.settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.job.settings.kantar_watermark.log_destination #=> String
    #   resp.data.job.settings.kantar_watermark.metadata3 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata4 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata5 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata6 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata7 #=> String
    #   resp.data.job.settings.kantar_watermark.metadata8 #=> String
    #   resp.data.job.settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.job.settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.job.settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.job.settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.job.settings.motion_image_inserter.input #=> String
    #   resp.data.job.settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.job.settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.job.settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.job.settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.job.settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.job.settings.motion_image_inserter.start_time #=> String
    #   resp.data.job.settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.job.settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.job.settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.job.settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.job.settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.job.settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.job.settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.job.settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.job.settings.output_groups #=> Array<OutputGroup>
    #   resp.data.job.settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.job.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.job.settings.output_groups[0].custom_name #=> String
    #   resp.data.job.settings.output_groups[0].name #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.job.settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.job.settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.job.settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job.settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.job.settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.job.settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.job.settings.timecode_config.anchor #=> String
    #   resp.data.job.settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job.settings.timecode_config.start #=> String
    #   resp.data.job.settings.timecode_config.timestamp_offset #=> String
    #   resp.data.job.settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.job.settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.job.simulate_reserved_queue #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job.status #=> String, one of ["SUBMITTED", "PROGRESSING", "COMPLETE", "CANCELED", "ERROR"]
    #   resp.data.job.status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.job.timing #=> Types::Timing
    #   resp.data.job.timing.finish_time #=> Time
    #   resp.data.job.timing.start_time #=> Time
    #   resp.data.job.timing.submit_time #=> Time
    #   resp.data.job.user_metadata #=> Hash<String, String>
    #   resp.data.job.user_metadata['key'] #=> String
    #
    def get_job(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetJobInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetJobInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetJob
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::GetJob
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetJob,
        stubs: @stubs,
        params_class: Params::GetJobOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_job
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve the JSON for a specific job template.
    #
    # @param [Hash] params
    #   See {Types::GetJobTemplateInput}.
    #
    # @option params [String] :name
    #   The name of the job template.
    #
    # @return [Types::GetJobTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_job_template(
    #     name: 'Name' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetJobTemplateOutput
    #   resp.data.job_template #=> Types::JobTemplate
    #   resp.data.job_template.acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.job_template.acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.job_template.arn #=> String
    #   resp.data.job_template.category #=> String
    #   resp.data.job_template.created_at #=> Time
    #   resp.data.job_template.description #=> String
    #   resp.data.job_template.hop_destinations #=> Array<HopDestination>
    #   resp.data.job_template.hop_destinations[0] #=> Types::HopDestination
    #   resp.data.job_template.hop_destinations[0].priority #=> Integer
    #   resp.data.job_template.hop_destinations[0].queue #=> String
    #   resp.data.job_template.hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.job_template.last_updated #=> Time
    #   resp.data.job_template.name #=> String
    #   resp.data.job_template.priority #=> Integer
    #   resp.data.job_template.queue #=> String
    #   resp.data.job_template.settings #=> Types::JobTemplateSettings
    #   resp.data.job_template.settings.ad_avail_offset #=> Integer
    #   resp.data.job_template.settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.job_template.settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.job_template.settings.esam #=> Types::EsamSettings
    #   resp.data.job_template.settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.job_template.settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.job_template.settings.esam.response_signal_preroll #=> Integer
    #   resp.data.job_template.settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.job_template.settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.job_template.settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.job_template.settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_template.settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_template.settings.inputs #=> Array<InputTemplate>
    #   resp.data.job_template.settings.inputs[0] #=> Types::InputTemplate
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.job_template.settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.job_template.settings.inputs[0].crop.height #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.width #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.x #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.y #=> Integer
    #   resp.data.job_template.settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.job_template.settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.job_template.settings.inputs[0].filter_strength #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.job_template.settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.job_template.settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.job_template.settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.job_template.settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.job_template.settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.job_template.settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.job_template.settings.inputs[0].program_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.job_template.settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_template.settings.inputs[0].timecode_start #=> String
    #   resp.data.job_template.settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.job_template.settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.job_template.settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.job_template.settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.job_template.settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.job_template.settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.job_template.settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.job_template.settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.job_template.settings.kantar_watermark.channel_name #=> String
    #   resp.data.job_template.settings.kantar_watermark.content_reference #=> String
    #   resp.data.job_template.settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.job_template.settings.kantar_watermark.file_offset #=> Float
    #   resp.data.job_template.settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.job_template.settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.job_template.settings.kantar_watermark.log_destination #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata3 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata4 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata5 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata6 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata7 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata8 #=> String
    #   resp.data.job_template.settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.job_template.settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.job_template.settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.input #=> String
    #   resp.data.job_template.settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.job_template.settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.job_template.settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.job_template.settings.motion_image_inserter.start_time #=> String
    #   resp.data.job_template.settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.job_template.settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.job_template.settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.job_template.settings.output_groups #=> Array<OutputGroup>
    #   resp.data.job_template.settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.job_template.settings.output_groups[0].custom_name #=> String
    #   resp.data.job_template.settings.output_groups[0].name #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.job_template.settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.job_template.settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.job_template.settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.job_template.settings.timecode_config.anchor #=> String
    #   resp.data.job_template.settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_template.settings.timecode_config.start #=> String
    #   resp.data.job_template.settings.timecode_config.timestamp_offset #=> String
    #   resp.data.job_template.settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.job_template.status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.job_template.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def get_job_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetJobTemplateInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetJobTemplateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetJobTemplate
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::GetJobTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetJobTemplate,
        stubs: @stubs,
        params_class: Params::GetJobTemplateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_job_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve the JSON for your policy.
    #
    # @param [Hash] params
    #   See {Types::GetPolicyInput}.
    #
    # @return [Types::GetPolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_policy()
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetPolicyOutput
    #   resp.data.policy #=> Types::Policy
    #   resp.data.policy.http_inputs #=> String, one of ["ALLOWED", "DISALLOWED"]
    #   resp.data.policy.https_inputs #=> String, one of ["ALLOWED", "DISALLOWED"]
    #   resp.data.policy.s3_inputs #=> String, one of ["ALLOWED", "DISALLOWED"]
    #
    def get_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetPolicyInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetPolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetPolicy
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::GetPolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetPolicy,
        stubs: @stubs,
        params_class: Params::GetPolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve the JSON for a specific preset.
    #
    # @param [Hash] params
    #   See {Types::GetPresetInput}.
    #
    # @option params [String] :name
    #   The name of the preset.
    #
    # @return [Types::GetPresetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_preset(
    #     name: 'Name' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetPresetOutput
    #   resp.data.preset #=> Types::Preset
    #   resp.data.preset.arn #=> String
    #   resp.data.preset.category #=> String
    #   resp.data.preset.created_at #=> Time
    #   resp.data.preset.description #=> String
    #   resp.data.preset.last_updated #=> Time
    #   resp.data.preset.name #=> String
    #   resp.data.preset.settings #=> Types::PresetSettings
    #   resp.data.preset.settings.audio_descriptions #=> Array<AudioDescription>
    #   resp.data.preset.settings.audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.preset.settings.audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.preset.settings.audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].audio_source_name #=> String
    #   resp.data.preset.settings.audio_descriptions[0].audio_type #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].custom_language_code #=> String
    #   resp.data.preset.settings.audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.preset.settings.audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channels_in #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channels_out #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].stream_name #=> String
    #   resp.data.preset.settings.caption_descriptions #=> Array<CaptionDescriptionPreset>
    #   resp.data.preset.settings.caption_descriptions[0] #=> Types::CaptionDescriptionPreset
    #   resp.data.preset.settings.caption_descriptions[0].custom_language_code #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.preset.settings.caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.preset.settings.caption_descriptions[0].language_description #=> String
    #   resp.data.preset.settings.container_settings #=> Types::ContainerSettings
    #   resp.data.preset.settings.container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.preset.settings.container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.preset.settings.container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.preset.settings.container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.preset.settings.container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.preset.settings.container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.preset.settings.container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.preset.settings.container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.preset.settings.container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.preset.settings.container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.preset.settings.container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.preset.settings.container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.preset.settings.container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.preset.settings.container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.preset.settings.container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.preset.settings.container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.preset.settings.container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.preset.settings.container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.preset.settings.video_description #=> Types::VideoDescription
    #   resp.data.preset.settings.video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.preset.settings.video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.preset.settings.video_description.crop #=> Types::Rectangle
    #   resp.data.preset.settings.video_description.crop.height #=> Integer
    #   resp.data.preset.settings.video_description.crop.width #=> Integer
    #   resp.data.preset.settings.video_description.crop.x #=> Integer
    #   resp.data.preset.settings.video_description.crop.y #=> Integer
    #   resp.data.preset.settings.video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.fixed_afd #=> Integer
    #   resp.data.preset.settings.video_description.height #=> Integer
    #   resp.data.preset.settings.video_description.position #=> Types::Rectangle
    #   resp.data.preset.settings.video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.preset.settings.video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.preset.settings.video_description.sharpness #=> Integer
    #   resp.data.preset.settings.video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.preset.settings.video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.preset.settings.video_description.width #=> Integer
    #   resp.data.preset.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def get_preset(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetPresetInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetPresetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetPreset
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::GetPreset
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetPreset,
        stubs: @stubs,
        params_class: Params::GetPresetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_preset
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve the JSON for a specific queue.
    #
    # @param [Hash] params
    #   See {Types::GetQueueInput}.
    #
    # @option params [String] :name
    #   The name of the queue that you want information about.
    #
    # @return [Types::GetQueueOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.get_queue(
    #     name: 'Name' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::GetQueueOutput
    #   resp.data.queue #=> Types::Queue
    #   resp.data.queue.arn #=> String
    #   resp.data.queue.created_at #=> Time
    #   resp.data.queue.description #=> String
    #   resp.data.queue.last_updated #=> Time
    #   resp.data.queue.name #=> String
    #   resp.data.queue.pricing_plan #=> String, one of ["ON_DEMAND", "RESERVED"]
    #   resp.data.queue.progressing_jobs_count #=> Integer
    #   resp.data.queue.reservation_plan #=> Types::ReservationPlan
    #   resp.data.queue.reservation_plan.commitment #=> String, one of ["ONE_YEAR"]
    #   resp.data.queue.reservation_plan.expires_at #=> Time
    #   resp.data.queue.reservation_plan.purchased_at #=> Time
    #   resp.data.queue.reservation_plan.renewal_type #=> String, one of ["AUTO_RENEW", "EXPIRE"]
    #   resp.data.queue.reservation_plan.reserved_slots #=> Integer
    #   resp.data.queue.reservation_plan.status #=> String, one of ["ACTIVE", "EXPIRED"]
    #   resp.data.queue.status #=> String, one of ["ACTIVE", "PAUSED"]
    #   resp.data.queue.submitted_jobs_count #=> Integer
    #   resp.data.queue.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def get_queue(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::GetQueueInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::GetQueueInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::GetQueue
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::GetQueue
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::GetQueue,
        stubs: @stubs,
        params_class: Params::GetQueueOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :get_queue
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve a JSON array of up to twenty of your job templates. This will return the templates themselves, not just a list of them. To retrieve the next twenty templates, use the nextToken string returned with the array
    #
    # @param [Hash] params
    #   See {Types::ListJobTemplatesInput}.
    #
    # @option params [String] :category
    #   Optionally, specify a job template category to limit responses to only job templates from that category.
    #
    # @option params [String] :list_by
    #   Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    #
    # @option params [Integer] :max_results
    #   Optional. Number of job templates, up to twenty, that will be returned at one time.
    #
    # @option params [String] :next_token
    #   Use this string, provided with the response to a previous request, to request the next batch of job templates.
    #
    # @option params [String] :order
    #   Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    #
    # @return [Types::ListJobTemplatesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_job_templates(
    #     category: 'Category',
    #     list_by: 'NAME', # accepts ["NAME", "CREATION_DATE", "SYSTEM"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     order: 'ASCENDING' # accepts ["ASCENDING", "DESCENDING"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListJobTemplatesOutput
    #   resp.data.job_templates #=> Array<JobTemplate>
    #   resp.data.job_templates[0] #=> Types::JobTemplate
    #   resp.data.job_templates[0].acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.job_templates[0].acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.job_templates[0].arn #=> String
    #   resp.data.job_templates[0].category #=> String
    #   resp.data.job_templates[0].created_at #=> Time
    #   resp.data.job_templates[0].description #=> String
    #   resp.data.job_templates[0].hop_destinations #=> Array<HopDestination>
    #   resp.data.job_templates[0].hop_destinations[0] #=> Types::HopDestination
    #   resp.data.job_templates[0].hop_destinations[0].priority #=> Integer
    #   resp.data.job_templates[0].hop_destinations[0].queue #=> String
    #   resp.data.job_templates[0].hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.job_templates[0].last_updated #=> Time
    #   resp.data.job_templates[0].name #=> String
    #   resp.data.job_templates[0].priority #=> Integer
    #   resp.data.job_templates[0].queue #=> String
    #   resp.data.job_templates[0].settings #=> Types::JobTemplateSettings
    #   resp.data.job_templates[0].settings.ad_avail_offset #=> Integer
    #   resp.data.job_templates[0].settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.job_templates[0].settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.job_templates[0].settings.esam #=> Types::EsamSettings
    #   resp.data.job_templates[0].settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.job_templates[0].settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.job_templates[0].settings.esam.response_signal_preroll #=> Integer
    #   resp.data.job_templates[0].settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.job_templates[0].settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.job_templates[0].settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.job_templates[0].settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_templates[0].settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_templates[0].settings.inputs #=> Array<InputTemplate>
    #   resp.data.job_templates[0].settings.inputs[0] #=> Types::InputTemplate
    #   resp.data.job_templates[0].settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.job_templates[0].settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.job_templates[0].settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.job_templates[0].settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.job_templates[0].settings.inputs[0].crop.height #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].crop.width #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].crop.x #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].crop.y #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.job_templates[0].settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.job_templates[0].settings.inputs[0].filter_strength #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.job_templates[0].settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.job_templates[0].settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.job_templates[0].settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.job_templates[0].settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.job_templates[0].settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.job_templates[0].settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.job_templates[0].settings.inputs[0].program_number #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.job_templates[0].settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_templates[0].settings.inputs[0].timecode_start #=> String
    #   resp.data.job_templates[0].settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.job_templates[0].settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.job_templates[0].settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.job_templates[0].settings.kantar_watermark.channel_name #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.content_reference #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.file_offset #=> Float
    #   resp.data.job_templates[0].settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.job_templates[0].settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.log_destination #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.metadata3 #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.metadata4 #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.metadata5 #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.metadata6 #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.metadata7 #=> String
    #   resp.data.job_templates[0].settings.kantar_watermark.metadata8 #=> String
    #   resp.data.job_templates[0].settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.job_templates[0].settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.job_templates[0].settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.motion_image_inserter.input #=> String
    #   resp.data.job_templates[0].settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.job_templates[0].settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.job_templates[0].settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.job_templates[0].settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.job_templates[0].settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.job_templates[0].settings.motion_image_inserter.start_time #=> String
    #   resp.data.job_templates[0].settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.job_templates[0].settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.job_templates[0].settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.job_templates[0].settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.job_templates[0].settings.output_groups #=> Array<OutputGroup>
    #   resp.data.job_templates[0].settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.job_templates[0].settings.output_groups[0].custom_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.job_templates[0].settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.job_templates[0].settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.job_templates[0].settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.job_templates[0].settings.timecode_config.anchor #=> String
    #   resp.data.job_templates[0].settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_templates[0].settings.timecode_config.start #=> String
    #   resp.data.job_templates[0].settings.timecode_config.timestamp_offset #=> String
    #   resp.data.job_templates[0].settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.job_templates[0].settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.job_templates[0].settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.job_templates[0].settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.job_templates[0].settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.job_templates[0].status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.job_templates[0].type #=> String, one of ["SYSTEM", "CUSTOM"]
    #   resp.data.next_token #=> String
    #
    def list_job_templates(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListJobTemplatesInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListJobTemplatesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListJobTemplates
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::ListJobTemplates
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListJobTemplates,
        stubs: @stubs,
        params_class: Params::ListJobTemplatesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_job_templates
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve a JSON array of up to twenty of your most recently created jobs. This array includes in-process, completed, and errored jobs. This will return the jobs themselves, not just a list of the jobs. To retrieve the twenty next most recent jobs, use the nextToken string returned with the array.
    #
    # @param [Hash] params
    #   See {Types::ListJobsInput}.
    #
    # @option params [Integer] :max_results
    #   Optional. Number of jobs, up to twenty, that will be returned at one time.
    #
    # @option params [String] :next_token
    #   Optional. Use this string, provided with the response to a previous request, to request the next batch of jobs.
    #
    # @option params [String] :order
    #   Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    #
    # @option params [String] :queue
    #   Optional. Provide a queue name to get back only jobs from that queue.
    #
    # @option params [String] :status
    #   Optional. A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    #
    # @return [Types::ListJobsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_jobs(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     order: 'ASCENDING', # accepts ["ASCENDING", "DESCENDING"]
    #     queue: 'Queue',
    #     status: 'SUBMITTED' # accepts ["SUBMITTED", "PROGRESSING", "COMPLETE", "CANCELED", "ERROR"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListJobsOutput
    #   resp.data.jobs #=> Array<Job>
    #   resp.data.jobs[0] #=> Types::Job
    #   resp.data.jobs[0].acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.jobs[0].acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.jobs[0].acceleration_status #=> String, one of ["NOT_APPLICABLE", "IN_PROGRESS", "ACCELERATED", "NOT_ACCELERATED"]
    #   resp.data.jobs[0].arn #=> String
    #   resp.data.jobs[0].billing_tags_source #=> String, one of ["QUEUE", "PRESET", "JOB_TEMPLATE", "JOB"]
    #   resp.data.jobs[0].created_at #=> Time
    #   resp.data.jobs[0].current_phase #=> String, one of ["PROBING", "TRANSCODING", "UPLOADING"]
    #   resp.data.jobs[0].error_code #=> Integer
    #   resp.data.jobs[0].error_message #=> String
    #   resp.data.jobs[0].hop_destinations #=> Array<HopDestination>
    #   resp.data.jobs[0].hop_destinations[0] #=> Types::HopDestination
    #   resp.data.jobs[0].hop_destinations[0].priority #=> Integer
    #   resp.data.jobs[0].hop_destinations[0].queue #=> String
    #   resp.data.jobs[0].hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.jobs[0].id #=> String
    #   resp.data.jobs[0].job_percent_complete #=> Integer
    #   resp.data.jobs[0].job_template #=> String
    #   resp.data.jobs[0].messages #=> Types::JobMessages
    #   resp.data.jobs[0].messages.info #=> Array<String>
    #   resp.data.jobs[0].messages.info[0] #=> String
    #   resp.data.jobs[0].messages.warning #=> Array<String>
    #   resp.data.jobs[0].output_group_details #=> Array<OutputGroupDetail>
    #   resp.data.jobs[0].output_group_details[0] #=> Types::OutputGroupDetail
    #   resp.data.jobs[0].output_group_details[0].output_details #=> Array<OutputDetail>
    #   resp.data.jobs[0].output_group_details[0].output_details[0] #=> Types::OutputDetail
    #   resp.data.jobs[0].output_group_details[0].output_details[0].duration_in_ms #=> Integer
    #   resp.data.jobs[0].output_group_details[0].output_details[0].video_details #=> Types::VideoDetail
    #   resp.data.jobs[0].output_group_details[0].output_details[0].video_details.height_in_px #=> Integer
    #   resp.data.jobs[0].output_group_details[0].output_details[0].video_details.width_in_px #=> Integer
    #   resp.data.jobs[0].priority #=> Integer
    #   resp.data.jobs[0].queue #=> String
    #   resp.data.jobs[0].queue_transitions #=> Array<QueueTransition>
    #   resp.data.jobs[0].queue_transitions[0] #=> Types::QueueTransition
    #   resp.data.jobs[0].queue_transitions[0].destination_queue #=> String
    #   resp.data.jobs[0].queue_transitions[0].source_queue #=> String
    #   resp.data.jobs[0].queue_transitions[0].timestamp #=> Time
    #   resp.data.jobs[0].retry_count #=> Integer
    #   resp.data.jobs[0].role #=> String
    #   resp.data.jobs[0].settings #=> Types::JobSettings
    #   resp.data.jobs[0].settings.ad_avail_offset #=> Integer
    #   resp.data.jobs[0].settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.jobs[0].settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.jobs[0].settings.esam #=> Types::EsamSettings
    #   resp.data.jobs[0].settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.jobs[0].settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.jobs[0].settings.esam.response_signal_preroll #=> Integer
    #   resp.data.jobs[0].settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.jobs[0].settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.jobs[0].settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.jobs[0].settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.jobs[0].settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.jobs[0].settings.inputs #=> Array<Input>
    #   resp.data.jobs[0].settings.inputs[0] #=> Types::Input
    #   resp.data.jobs[0].settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.jobs[0].settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.jobs[0].settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.jobs[0].settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.jobs[0].settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.jobs[0].settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.jobs[0].settings.inputs[0].crop.height #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].crop.width #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].crop.x #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].crop.y #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].decryption_settings #=> Types::InputDecryptionSettings
    #   resp.data.jobs[0].settings.inputs[0].decryption_settings.decryption_mode #=> String, one of ["AES_CTR", "AES_CBC", "AES_GCM"]
    #   resp.data.jobs[0].settings.inputs[0].decryption_settings.encrypted_decryption_key #=> String
    #   resp.data.jobs[0].settings.inputs[0].decryption_settings.initialization_vector #=> String
    #   resp.data.jobs[0].settings.inputs[0].decryption_settings.kms_key_region #=> String
    #   resp.data.jobs[0].settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.jobs[0].settings.inputs[0].file_input #=> String
    #   resp.data.jobs[0].settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.jobs[0].settings.inputs[0].filter_strength #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.jobs[0].settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.jobs[0].settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.jobs[0].settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.jobs[0].settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.jobs[0].settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.jobs[0].settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.jobs[0].settings.inputs[0].program_number #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.jobs[0].settings.inputs[0].supplemental_imps #=> Array<String>
    #   resp.data.jobs[0].settings.inputs[0].supplemental_imps[0] #=> String
    #   resp.data.jobs[0].settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.jobs[0].settings.inputs[0].timecode_start #=> String
    #   resp.data.jobs[0].settings.inputs[0].video_generator #=> Types::InputVideoGenerator
    #   resp.data.jobs[0].settings.inputs[0].video_generator.duration #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.jobs[0].settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.jobs[0].settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.jobs[0].settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.jobs[0].settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.jobs[0].settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.jobs[0].settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.jobs[0].settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.jobs[0].settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.jobs[0].settings.kantar_watermark.channel_name #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.content_reference #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.file_offset #=> Float
    #   resp.data.jobs[0].settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.jobs[0].settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.log_destination #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.metadata3 #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.metadata4 #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.metadata5 #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.metadata6 #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.metadata7 #=> String
    #   resp.data.jobs[0].settings.kantar_watermark.metadata8 #=> String
    #   resp.data.jobs[0].settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.jobs[0].settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.jobs[0].settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.motion_image_inserter.input #=> String
    #   resp.data.jobs[0].settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.jobs[0].settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.jobs[0].settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.jobs[0].settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.jobs[0].settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.jobs[0].settings.motion_image_inserter.start_time #=> String
    #   resp.data.jobs[0].settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.jobs[0].settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.jobs[0].settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.jobs[0].settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.jobs[0].settings.output_groups #=> Array<OutputGroup>
    #   resp.data.jobs[0].settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.jobs[0].settings.output_groups[0].custom_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.jobs[0].settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.jobs[0].settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.jobs[0].settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.jobs[0].settings.timecode_config.anchor #=> String
    #   resp.data.jobs[0].settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.jobs[0].settings.timecode_config.start #=> String
    #   resp.data.jobs[0].settings.timecode_config.timestamp_offset #=> String
    #   resp.data.jobs[0].settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.jobs[0].settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.jobs[0].settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.jobs[0].settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.jobs[0].settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.jobs[0].simulate_reserved_queue #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.jobs[0].status #=> String, one of ["SUBMITTED", "PROGRESSING", "COMPLETE", "CANCELED", "ERROR"]
    #   resp.data.jobs[0].status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.jobs[0].timing #=> Types::Timing
    #   resp.data.jobs[0].timing.finish_time #=> Time
    #   resp.data.jobs[0].timing.start_time #=> Time
    #   resp.data.jobs[0].timing.submit_time #=> Time
    #   resp.data.jobs[0].user_metadata #=> Hash<String, String>
    #   resp.data.jobs[0].user_metadata['key'] #=> String
    #   resp.data.next_token #=> String
    #
    def list_jobs(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListJobsInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListJobsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListJobs
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::ListJobs
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListJobs,
        stubs: @stubs,
        params_class: Params::ListJobsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_jobs
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve a JSON array of up to twenty of your presets. This will return the presets themselves, not just a list of them. To retrieve the next twenty presets, use the nextToken string returned with the array.
    #
    # @param [Hash] params
    #   See {Types::ListPresetsInput}.
    #
    # @option params [String] :category
    #   Optionally, specify a preset category to limit responses to only presets from that category.
    #
    # @option params [String] :list_by
    #   Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    #
    # @option params [Integer] :max_results
    #   Optional. Number of presets, up to twenty, that will be returned at one time
    #
    # @option params [String] :next_token
    #   Use this string, provided with the response to a previous request, to request the next batch of presets.
    #
    # @option params [String] :order
    #   Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    #
    # @return [Types::ListPresetsOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_presets(
    #     category: 'Category',
    #     list_by: 'NAME', # accepts ["NAME", "CREATION_DATE", "SYSTEM"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     order: 'ASCENDING' # accepts ["ASCENDING", "DESCENDING"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListPresetsOutput
    #   resp.data.next_token #=> String
    #   resp.data.presets #=> Array<Preset>
    #   resp.data.presets[0] #=> Types::Preset
    #   resp.data.presets[0].arn #=> String
    #   resp.data.presets[0].category #=> String
    #   resp.data.presets[0].created_at #=> Time
    #   resp.data.presets[0].description #=> String
    #   resp.data.presets[0].last_updated #=> Time
    #   resp.data.presets[0].name #=> String
    #   resp.data.presets[0].settings #=> Types::PresetSettings
    #   resp.data.presets[0].settings.audio_descriptions #=> Array<AudioDescription>
    #   resp.data.presets[0].settings.audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_source_name #=> String
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_type #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.presets[0].settings.audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].custom_language_code #=> String
    #   resp.data.presets[0].settings.audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.presets[0].settings.audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channels_in #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].remix_settings.channels_out #=> Integer
    #   resp.data.presets[0].settings.audio_descriptions[0].stream_name #=> String
    #   resp.data.presets[0].settings.caption_descriptions #=> Array<CaptionDescriptionPreset>
    #   resp.data.presets[0].settings.caption_descriptions[0] #=> Types::CaptionDescriptionPreset
    #   resp.data.presets[0].settings.caption_descriptions[0].custom_language_code #=> String
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.presets[0].settings.caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.presets[0].settings.caption_descriptions[0].language_description #=> String
    #   resp.data.presets[0].settings.container_settings #=> Types::ContainerSettings
    #   resp.data.presets[0].settings.container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.presets[0].settings.container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.presets[0].settings.container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.presets[0].settings.container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.presets[0].settings.container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.presets[0].settings.container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.presets[0].settings.container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.presets[0].settings.container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.presets[0].settings.container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.presets[0].settings.container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.presets[0].settings.container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.presets[0].settings.container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.presets[0].settings.container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.presets[0].settings.container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.presets[0].settings.container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.presets[0].settings.container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.presets[0].settings.container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.presets[0].settings.container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.presets[0].settings.container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.presets[0].settings.container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.presets[0].settings.container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.presets[0].settings.container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.presets[0].settings.container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.presets[0].settings.container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.presets[0].settings.container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.presets[0].settings.container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.presets[0].settings.container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.presets[0].settings.video_description #=> Types::VideoDescription
    #   resp.data.presets[0].settings.video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.presets[0].settings.video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.presets[0].settings.video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.presets[0].settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.presets[0].settings.video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.presets[0].settings.video_description.crop #=> Types::Rectangle
    #   resp.data.presets[0].settings.video_description.crop.height #=> Integer
    #   resp.data.presets[0].settings.video_description.crop.width #=> Integer
    #   resp.data.presets[0].settings.video_description.crop.x #=> Integer
    #   resp.data.presets[0].settings.video_description.crop.y #=> Integer
    #   resp.data.presets[0].settings.video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.presets[0].settings.video_description.fixed_afd #=> Integer
    #   resp.data.presets[0].settings.video_description.height #=> Integer
    #   resp.data.presets[0].settings.video_description.position #=> Types::Rectangle
    #   resp.data.presets[0].settings.video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.presets[0].settings.video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.presets[0].settings.video_description.sharpness #=> Integer
    #   resp.data.presets[0].settings.video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.presets[0].settings.video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.presets[0].settings.video_description.video_preprocessors.image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.presets[0].settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.presets[0].settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.presets[0].settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.presets[0].settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.presets[0].settings.video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.presets[0].settings.video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.presets[0].settings.video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.presets[0].settings.video_description.width #=> Integer
    #   resp.data.presets[0].type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def list_presets(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListPresetsInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListPresetsInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListPresets
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::ListPresets
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListPresets,
        stubs: @stubs,
        params_class: Params::ListPresetsOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_presets
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve a JSON array of up to twenty of your queues. This will return the queues themselves, not just a list of them. To retrieve the next twenty queues, use the nextToken string returned with the array.
    #
    # @param [Hash] params
    #   See {Types::ListQueuesInput}.
    #
    # @option params [String] :list_by
    #   Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
    #
    # @option params [Integer] :max_results
    #   Optional. Number of queues, up to twenty, that will be returned at one time.
    #
    # @option params [String] :next_token
    #   Use this string, provided with the response to a previous request, to request the next batch of queues.
    #
    # @option params [String] :order
    #   Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    #
    # @return [Types::ListQueuesOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_queues(
    #     list_by: 'NAME', # accepts ["NAME", "CREATION_DATE"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     order: 'ASCENDING' # accepts ["ASCENDING", "DESCENDING"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListQueuesOutput
    #   resp.data.next_token #=> String
    #   resp.data.queues #=> Array<Queue>
    #   resp.data.queues[0] #=> Types::Queue
    #   resp.data.queues[0].arn #=> String
    #   resp.data.queues[0].created_at #=> Time
    #   resp.data.queues[0].description #=> String
    #   resp.data.queues[0].last_updated #=> Time
    #   resp.data.queues[0].name #=> String
    #   resp.data.queues[0].pricing_plan #=> String, one of ["ON_DEMAND", "RESERVED"]
    #   resp.data.queues[0].progressing_jobs_count #=> Integer
    #   resp.data.queues[0].reservation_plan #=> Types::ReservationPlan
    #   resp.data.queues[0].reservation_plan.commitment #=> String, one of ["ONE_YEAR"]
    #   resp.data.queues[0].reservation_plan.expires_at #=> Time
    #   resp.data.queues[0].reservation_plan.purchased_at #=> Time
    #   resp.data.queues[0].reservation_plan.renewal_type #=> String, one of ["AUTO_RENEW", "EXPIRE"]
    #   resp.data.queues[0].reservation_plan.reserved_slots #=> Integer
    #   resp.data.queues[0].reservation_plan.status #=> String, one of ["ACTIVE", "EXPIRED"]
    #   resp.data.queues[0].status #=> String, one of ["ACTIVE", "PAUSED"]
    #   resp.data.queues[0].submitted_jobs_count #=> Integer
    #   resp.data.queues[0].type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def list_queues(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListQueuesInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListQueuesInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListQueues
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::ListQueues
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListQueues,
        stubs: @stubs,
        params_class: Params::ListQueuesOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_queues
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Retrieve the tags for a MediaConvert resource.
    #
    # @param [Hash] params
    #   See {Types::ListTagsForResourceInput}.
    #
    # @option params [String] :arn
    #   The Amazon Resource Name (ARN) of the resource that you want to list tags for. To get the ARN, send a GET request with the resource name.
    #
    # @return [Types::ListTagsForResourceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.list_tags_for_resource(
    #     arn: 'Arn' # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::ListTagsForResourceOutput
    #   resp.data.resource_tags #=> Types::ResourceTags
    #   resp.data.resource_tags.arn #=> String
    #   resp.data.resource_tags.tags #=> Hash<String, String>
    #   resp.data.resource_tags.tags['key'] #=> String
    #
    def list_tags_for_resource(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::ListTagsForResourceInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::ListTagsForResourceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::ListTagsForResource
      )
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::ListTagsForResource
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::ListTagsForResource,
        stubs: @stubs,
        params_class: Params::ListTagsForResourceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :list_tags_for_resource
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Create or change your policy. For more information about policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    #
    # @param [Hash] params
    #   See {Types::PutPolicyInput}.
    #
    # @option params [Policy] :policy
    #   A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    #
    # @return [Types::PutPolicyOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.put_policy(
    #     policy: {
    #       http_inputs: 'ALLOWED', # accepts ["ALLOWED", "DISALLOWED"]
    #       https_inputs: 'ALLOWED', # accepts ["ALLOWED", "DISALLOWED"]
    #       s3_inputs: 'ALLOWED' # accepts ["ALLOWED", "DISALLOWED"]
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::PutPolicyOutput
    #   resp.data.policy #=> Types::Policy
    #   resp.data.policy.http_inputs #=> String, one of ["ALLOWED", "DISALLOWED"]
    #   resp.data.policy.https_inputs #=> String, one of ["ALLOWED", "DISALLOWED"]
    #   resp.data.policy.s3_inputs #=> String, one of ["ALLOWED", "DISALLOWED"]
    #
    def put_policy(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::PutPolicyInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::PutPolicyInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::PutPolicy
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::PutPolicy
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::PutPolicy,
        stubs: @stubs,
        params_class: Params::PutPolicyOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :put_policy
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Add tags to a MediaConvert queue, preset, or job template. For information about tagging, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/tagging-resources.html
    #
    # @param [Hash] params
    #   See {Types::TagResourceInput}.
    #
    # @option params [String] :arn
    #   The Amazon Resource Name (ARN) of the resource that you want to tag. To get the ARN, send a GET request with the resource name.
    #
    # @option params [Hash<String, String>] :tags
    #   The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    #
    # @return [Types::TagResourceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.tag_resource(
    #     arn: 'Arn', # required
    #     tags: {
    #       'key' => 'value'
    #     } # required
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::TagResourceOutput
    #
    def tag_resource(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::TagResourceInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::TagResourceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::TagResource
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::TagResource
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::TagResource,
        stubs: @stubs,
        params_class: Params::TagResourceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :tag_resource
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Remove tags from a MediaConvert queue, preset, or job template. For information about tagging, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/tagging-resources.html
    #
    # @param [Hash] params
    #   See {Types::UntagResourceInput}.
    #
    # @option params [String] :arn
    #   The Amazon Resource Name (ARN) of the resource that you want to remove tags from. To get the ARN, send a GET request with the resource name.
    #
    # @option params [Array<String>] :tag_keys
    #   The keys of the tags that you want to remove from the resource.
    #
    # @return [Types::UntagResourceOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.untag_resource(
    #     arn: 'Arn', # required
    #     tag_keys: [
    #       'member'
    #     ]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UntagResourceOutput
    #
    def untag_resource(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UntagResourceInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UntagResourceInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UntagResource
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::UntagResource
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UntagResource,
        stubs: @stubs,
        params_class: Params::UntagResourceOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :untag_resource
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Modify one of your existing job templates.
    #
    # @param [Hash] params
    #   See {Types::UpdateJobTemplateInput}.
    #
    # @option params [AccelerationSettings] :acceleration_settings
    #   Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    #
    # @option params [String] :category
    #   The new category for the job template, if you are changing it.
    #
    # @option params [String] :description
    #   The new description for the job template, if you are changing it.
    #
    # @option params [Array<HopDestination>] :hop_destinations
    #   Optional list of hop destinations.
    #
    # @option params [String] :name
    #   The name of the job template you are modifying
    #
    # @option params [Integer] :priority
    #   Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    #
    # @option params [String] :queue
    #   The new queue for the job template, if you are changing it.
    #
    # @option params [JobTemplateSettings] :settings
    #   JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    #
    # @option params [String] :status_update_interval
    #   Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    #
    # @return [Types::UpdateJobTemplateOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_job_template(
    #     acceleration_settings: {
    #       mode: 'DISABLED' # required - accepts ["DISABLED", "ENABLED", "PREFERRED"]
    #     },
    #     category: 'Category',
    #     description: 'Description',
    #     hop_destinations: [
    #       {
    #         priority: 1,
    #         queue: 'Queue',
    #         wait_minutes: 1
    #       }
    #     ],
    #     name: 'Name', # required
    #     priority: 1,
    #     queue: 'Queue',
    #     settings: {
    #       ad_avail_offset: 1,
    #       avail_blanking: {
    #         avail_blanking_image: 'AvailBlankingImage'
    #       },
    #       esam: {
    #         manifest_confirm_condition_notification: {
    #           mcc_xml: 'MccXml'
    #         },
    #         response_signal_preroll: 1,
    #         signal_processing_notification: {
    #           scc_xml: 'SccXml'
    #         }
    #       },
    #       extended_data_services: {
    #         copy_protection_action: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "STRIP"]
    #         vchip_action: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "STRIP"]
    #       },
    #       inputs: [
    #         {
    #           audio_selector_groups: {
    #             'key' => {
    #               audio_selector_names: [
    #                 'member'
    #               ]
    #             }
    #           },
    #           audio_selectors: {
    #             'key' => {
    #               custom_language_code: 'CustomLanguageCode',
    #               default_selection: 'DEFAULT', # accepts ["DEFAULT", "NOT_DEFAULT"]
    #               external_audio_file_input: 'ExternalAudioFileInput',
    #               hls_rendition_group_settings: {
    #                 rendition_group_id: 'RenditionGroupId',
    #                 rendition_language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                 rendition_name: 'RenditionName'
    #               },
    #               language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #               offset: 1,
    #               pids: [
    #                 1
    #               ],
    #               program_selection: 1,
    #               remix_settings: {
    #                 channel_mapping: {
    #                   output_channels: [
    #                     {
    #                       input_channels: [
    #                         1
    #                       ],
    #                       input_channels_fine_tune: [
    #                         1.0
    #                       ]
    #                     }
    #                   ]
    #                 },
    #                 channels_in: 1,
    #                 channels_out: 1
    #               },
    #               selector_type: 'PID', # accepts ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #             }
    #           },
    #           caption_selectors: {
    #             'key' => {
    #               custom_language_code: 'CustomLanguageCode',
    #               language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #               source_settings: {
    #                 ancillary_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   source_ancillary_channel_number: 1,
    #                   terminate_captions: 'END_OF_INPUT' # accepts ["END_OF_INPUT", "DISABLED"]
    #                 },
    #                 dvb_sub_source_settings: {
    #                   pid: 1
    #                 },
    #                 embedded_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   source608_channel_number: 1,
    #                   source608_track_number: 1,
    #                   terminate_captions: 'END_OF_INPUT' # accepts ["END_OF_INPUT", "DISABLED"]
    #                 },
    #                 file_source_settings: {
    #                   convert608_to708: 'UPCONVERT', # accepts ["UPCONVERT", "DISABLED"]
    #                   framerate: {
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1
    #                   },
    #                   source_file: 'SourceFile',
    #                   time_delta: 1,
    #                   time_delta_units: 'SECONDS' # accepts ["SECONDS", "MILLISECONDS"]
    #                 },
    #                 source_type: 'ANCILLARY', # accepts ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #                 teletext_source_settings: {
    #                   page_number: 'PageNumber'
    #                 },
    #                 track_source_settings: {
    #                   track_number: 1
    #                 },
    #                 webvtt_hls_source_settings: {
    #                   rendition_group_id: 'RenditionGroupId',
    #                   rendition_language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   rendition_name: 'RenditionName'
    #                 }
    #               }
    #             }
    #           },
    #           crop: {
    #             height: 1,
    #             width: 1,
    #             x: 1,
    #             y: 1
    #           },
    #           deblock_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #           denoise_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #           dolby_vision_metadata_xml: 'DolbyVisionMetadataXml',
    #           filter_enable: 'AUTO', # accepts ["AUTO", "DISABLE", "FORCE"]
    #           filter_strength: 1,
    #           image_inserter: {
    #             insertable_images: [
    #               {
    #                 duration: 1,
    #                 fade_in: 1,
    #                 fade_out: 1,
    #                 height: 1,
    #                 image_inserter_input: 'ImageInserterInput',
    #                 image_x: 1,
    #                 image_y: 1,
    #                 layer: 1,
    #                 opacity: 1,
    #                 start_time: 'StartTime',
    #                 width: 1
    #               }
    #             ]
    #           },
    #           input_clippings: [
    #             {
    #               end_timecode: 'EndTimecode',
    #               start_timecode: 'StartTimecode'
    #             }
    #           ],
    #           input_scan_type: 'AUTO', # accepts ["AUTO", "PSF"]
    #           program_number: 1,
    #           psi_control: 'IGNORE_PSI', # accepts ["IGNORE_PSI", "USE_PSI"]
    #           timecode_source: 'EMBEDDED', # accepts ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #           timecode_start: 'TimecodeStart',
    #           video_selector: {
    #             alpha_behavior: 'DISCARD', # accepts ["DISCARD", "REMAP_TO_LUMA"]
    #             color_space: 'FOLLOW', # accepts ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #             color_space_usage: 'FORCE', # accepts ["FORCE", "FALLBACK"]
    #             embedded_timecode_override: 'NONE', # accepts ["NONE", "USE_MDPM"]
    #             hdr10_metadata: {
    #               blue_primary_x: 1,
    #               blue_primary_y: 1,
    #               green_primary_x: 1,
    #               green_primary_y: 1,
    #               max_content_light_level: 1,
    #               max_frame_average_light_level: 1,
    #               max_luminance: 1,
    #               min_luminance: 1,
    #               red_primary_x: 1,
    #               red_primary_y: 1,
    #               white_point_x: 1,
    #               white_point_y: 1
    #             },
    #             pad_video: 'DISABLED', # accepts ["DISABLED", "BLACK"]
    #             pid: 1,
    #             program_number: 1,
    #             rotate: 'DEGREE_0', # accepts ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #             sample_range: 'FOLLOW' # accepts ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #           }
    #         }
    #       ],
    #       kantar_watermark: {
    #         channel_name: 'ChannelName',
    #         content_reference: 'ContentReference',
    #         credentials_secret_name: 'CredentialsSecretName',
    #         file_offset: 1.0,
    #         kantar_license_id: 1,
    #         kantar_server_url: 'KantarServerUrl',
    #         log_destination: 'LogDestination',
    #         metadata3: 'Metadata3',
    #         metadata4: 'Metadata4',
    #         metadata5: 'Metadata5',
    #         metadata6: 'Metadata6',
    #         metadata7: 'Metadata7',
    #         metadata8: 'Metadata8'
    #       },
    #       motion_image_inserter: {
    #         framerate: {
    #           framerate_denominator: 1,
    #           framerate_numerator: 1
    #         },
    #         input: 'Input',
    #         insertion_mode: 'MOV', # accepts ["MOV", "PNG"]
    #         offset: {
    #           image_x: 1,
    #           image_y: 1
    #         },
    #         playback: 'ONCE', # accepts ["ONCE", "REPEAT"]
    #         start_time: 'StartTime'
    #       },
    #       nielsen_configuration: {
    #         breakout_code: 1,
    #         distributor_id: 'DistributorId'
    #       },
    #       nielsen_non_linear_watermark: {
    #         active_watermark_process: 'NAES2_AND_NW', # accepts ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #         adi_filename: 'AdiFilename',
    #         asset_id: 'AssetId',
    #         asset_name: 'AssetName',
    #         cbet_source_id: 'CbetSourceId',
    #         episode_id: 'EpisodeId',
    #         metadata_destination: 'MetadataDestination',
    #         source_id: 1,
    #         source_watermark_status: 'CLEAN', # accepts ["CLEAN", "WATERMARKED"]
    #         tic_server_url: 'TicServerUrl',
    #         unique_tic_per_audio_track: 'RESERVE_UNIQUE_TICS_PER_TRACK' # accepts ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #       },
    #       output_groups: [
    #         {
    #           automated_encoding_settings: {
    #             abr_settings: {
    #               max_abr_bitrate: 1,
    #               max_renditions: 1,
    #               min_abr_bitrate: 1,
    #               rules: [
    #                 {
    #                   allowed_renditions: [
    #                     {
    #                       height: 1,
    #                       required: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       width: 1
    #                     }
    #                   ],
    #                   force_include_renditions: [
    #                     {
    #                       height: 1,
    #                       width: 1
    #                     }
    #                   ],
    #                   min_bottom_rendition_size: {
    #                     height: 1,
    #                     width: 1
    #                   },
    #                   min_top_rendition_size: {
    #                     height: 1,
    #                     width: 1
    #                   },
    #                   type: 'MIN_TOP_RENDITION_SIZE' # accepts ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #                 }
    #               ]
    #             }
    #           },
    #           custom_name: 'CustomName',
    #           name: 'Name',
    #           output_group_settings: {
    #             cmaf_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               base_url: 'BaseUrl',
    #               client_cache: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               codec_specification: 'RFC_6381', # accepts ["RFC_6381", "RFC_4281"]
    #               destination: 'Destination',
    #               destination_settings: {
    #                 s3_settings: {
    #                   access_control: {
    #                     canned_acl: 'PUBLIC_READ' # accepts ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #                   },
    #                   encryption: {
    #                     encryption_type: 'SERVER_SIDE_ENCRYPTION_S3', # accepts ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #                     kms_encryption_context: 'KmsEncryptionContext',
    #                     kms_key_arn: 'KmsKeyArn'
    #                   }
    #                 }
    #               },
    #               encryption: {
    #                 constant_initialization_vector: 'ConstantInitializationVector',
    #                 encryption_method: 'SAMPLE_AES', # accepts ["SAMPLE_AES", "AES_CTR"]
    #                 initialization_vector_in_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                 speke_key_provider: {
    #                   certificate_arn: 'CertificateArn',
    #                   dash_signaled_system_ids: [
    #                     'member'
    #                   ],
    #                   resource_id: 'ResourceId',
    #                   url: 'Url'
    #                 },
    #                 static_key_provider: {
    #                   key_format: 'KeyFormat',
    #                   key_format_versions: 'KeyFormatVersions',
    #                   static_key_value: 'StaticKeyValue',
    #                   url: 'Url'
    #                 },
    #                 type: 'SPEKE' # accepts ["SPEKE", "STATIC_KEY"]
    #               },
    #               fragment_length: 1,
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               manifest_compression: 'GZIP', # accepts ["GZIP", "NONE"]
    #               manifest_duration_format: 'FLOATING_POINT', # accepts ["FLOATING_POINT", "INTEGER"]
    #               min_buffer_time: 1,
    #               min_final_segment_length: 1.0,
    #               mpd_profile: 'MAIN_PROFILE', # accepts ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #               pts_offset_handling_for_b_frames: 'ZERO_BASED', # accepts ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               stream_inf_resolution: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               target_duration_compatibility_mode: 'LEGACY', # accepts ["LEGACY", "SPEC_COMPLIANT"]
    #               write_dash_manifest: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               write_hls_manifest: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               write_segment_timeline_in_representation: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             dash_iso_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_channel_config_scheme_id_uri: 'MPEG_CHANNEL_CONFIGURATION', # accepts ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #               base_url: 'BaseUrl',
    #               destination: 'Destination',
    #               encryption: {
    #                 playback_device_compatibility: 'CENC_V1', # accepts ["CENC_V1", "UNENCRYPTED_SEI"]
    #                 speke_key_provider: {
    #                   certificate_arn: 'CertificateArn',
    #                   resource_id: 'ResourceId',
    #                   system_ids: [
    #                     'member'
    #                   ],
    #                   url: 'Url'
    #                 }
    #               },
    #               fragment_length: 1,
    #               hbbtv_compliance: 'HBBTV_1_5', # accepts ["HBBTV_1_5", "NONE"]
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               min_buffer_time: 1,
    #               min_final_segment_length: 1.0,
    #               mpd_profile: 'MAIN_PROFILE', # accepts ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #               pts_offset_handling_for_b_frames: 'ZERO_BASED', # accepts ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               write_segment_timeline_in_representation: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             file_group_settings: {
    #               destination: 'Destination',
    #             },
    #             hls_group_settings: {
    #               ad_markers: [
    #                 'ELEMENTAL' # accepts ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #               ],
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_only_header: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               base_url: 'BaseUrl',
    #               caption_language_mappings: [
    #                 {
    #                   caption_channel: 1,
    #                   custom_language_code: 'CustomLanguageCode',
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_description: 'LanguageDescription'
    #                 }
    #               ],
    #               caption_language_setting: 'INSERT', # accepts ["INSERT", "OMIT", "NONE"]
    #               caption_segment_length_control: 'LARGE_SEGMENTS', # accepts ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #               client_cache: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               codec_specification: 'RFC_6381', # accepts ["RFC_6381", "RFC_4281"]
    #               destination: 'Destination',
    #               directory_structure: 'SINGLE_DIRECTORY', # accepts ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #               encryption: {
    #                 constant_initialization_vector: 'ConstantInitializationVector',
    #                 encryption_method: 'AES128', # accepts ["AES128", "SAMPLE_AES"]
    #                 initialization_vector_in_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                 offline_encrypted: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                 type: 'SPEKE' # accepts ["SPEKE", "STATIC_KEY"]
    #               },
    #               image_based_trick_play: 'NONE', # accepts ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #               image_based_trick_play_settings: {
    #                 interval_cadence: 'FOLLOW_IFRAME', # accepts ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #                 thumbnail_height: 1,
    #                 thumbnail_interval: 1.0,
    #                 thumbnail_width: 1,
    #                 tile_height: 1,
    #                 tile_width: 1
    #               },
    #               manifest_compression: 'GZIP', # accepts ["GZIP", "NONE"]
    #               manifest_duration_format: 'FLOATING_POINT', # accepts ["FLOATING_POINT", "INTEGER"]
    #               min_final_segment_length: 1.0,
    #               min_segment_length: 1,
    #               output_selection: 'MANIFESTS_AND_SEGMENTS', # accepts ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #               program_date_time: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               program_date_time_period: 1,
    #               segment_control: 'SINGLE_FILE', # accepts ["SINGLE_FILE", "SEGMENTED_FILES"]
    #               segment_length: 1,
    #               segment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               segments_per_subdirectory: 1,
    #               stream_inf_resolution: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #               target_duration_compatibility_mode: 'LEGACY', # accepts ["LEGACY", "SPEC_COMPLIANT"]
    #               timed_metadata_id3_frame: 'NONE', # accepts ["NONE", "PRIV", "TDRL"]
    #               timed_metadata_id3_period: 1,
    #               timestamp_delta_milliseconds: 1
    #             },
    #             ms_smooth_group_settings: {
    #               additional_manifests: [
    #                 {
    #                   manifest_name_modifier: 'ManifestNameModifier',
    #                 }
    #               ],
    #               audio_deduplication: 'COMBINE_DUPLICATE_STREAMS', # accepts ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #               destination: 'Destination',
    #               encryption: {
    #               },
    #               fragment_length: 1,
    #               fragment_length_control: 'EXACT', # accepts ["EXACT", "GOP_MULTIPLE"]
    #               manifest_encoding: 'UTF8' # accepts ["UTF8", "UTF16"]
    #             },
    #             type: 'HLS_GROUP_SETTINGS' # accepts ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #           },
    #           outputs: [
    #             {
    #               audio_descriptions: [
    #                 {
    #                   audio_channel_tagging_settings: {
    #                     channel_tag: 'L' # accepts ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #                   },
    #                   audio_normalization_settings: {
    #                     algorithm: 'ITU_BS_1770_1', # accepts ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #                     algorithm_control: 'CORRECT_AUDIO', # accepts ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #                     correction_gate_level: 1,
    #                     loudness_logging: 'LOG', # accepts ["LOG", "DONT_LOG"]
    #                     peak_calculation: 'TRUE_PEAK', # accepts ["TRUE_PEAK", "NONE"]
    #                     target_lkfs: 1.0
    #                   },
    #                   audio_source_name: 'AudioSourceName',
    #                   audio_type: 1,
    #                   audio_type_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                   codec_settings: {
    #                     aac_settings: {
    #                       audio_description_broadcaster_mix: 'BROADCASTER_MIXED_AD', # accepts ["BROADCASTER_MIXED_AD", "NORMAL"]
    #                       bitrate: 1,
    #                       codec_profile: 'LC', # accepts ["LC", "HEV1", "HEV2"]
    #                       coding_mode: 'AD_RECEIVER_MIX', # accepts ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #                       rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #                       raw_format: 'LATM_LOAS', # accepts ["LATM_LOAS", "NONE"]
    #                       sample_rate: 1,
    #                       specification: 'MPEG2', # accepts ["MPEG2", "MPEG4"]
    #                       vbr_quality: 'LOW' # accepts ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #                     },
    #                     ac3_settings: {
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #                       coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #                       dialnorm: 1,
    #                       dynamic_range_compression_line: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #                       dynamic_range_compression_profile: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "NONE"]
    #                       dynamic_range_compression_rf: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #                       lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                       sample_rate: 1
    #                     },
    #                     aiff_settings: {
    #                       bit_depth: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     codec: 'AAC', # accepts ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #                     eac3_atmos_settings: {
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN"]
    #                       coding_mode: 'CODING_MODE_AUTO', # accepts ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #                       dialogue_intelligence: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       downmix_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #                       dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #                       lo_ro_center_mix_level: 1.0,
    #                       lo_ro_surround_mix_level: 1.0,
    #                       lt_rt_center_mix_level: 1.0,
    #                       lt_rt_surround_mix_level: 1.0,
    #                       metering_mode: 'LEQ_A', # accepts ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #                       sample_rate: 1,
    #                       speech_threshold: 1,
    #                       stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #                       surround_ex_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                     },
    #                     eac3_settings: {
    #                       attenuation_control: 'ATTENUATE_3_DB', # accepts ["ATTENUATE_3_DB", "NONE"]
    #                       bitrate: 1,
    #                       bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #                       coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #                       dc_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       dialnorm: 1,
    #                       dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #                       lfe_control: 'LFE', # accepts ["LFE", "NO_LFE"]
    #                       lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       lo_ro_center_mix_level: 1.0,
    #                       lo_ro_surround_mix_level: 1.0,
    #                       lt_rt_center_mix_level: 1.0,
    #                       lt_rt_surround_mix_level: 1.0,
    #                       metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                       passthrough_control: 'WHEN_POSSIBLE', # accepts ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #                       phase_control: 'SHIFT_90_DEGREES', # accepts ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #                       sample_rate: 1,
    #                       stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #                       surround_ex_mode: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                       surround_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #                     },
    #                     mp2_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     mp3_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #                       sample_rate: 1,
    #                       vbr_quality: 1
    #                     },
    #                     opus_settings: {
    #                       bitrate: 1,
    #                       channels: 1,
    #                       sample_rate: 1
    #                     },
    #                     vorbis_settings: {
    #                       channels: 1,
    #                       sample_rate: 1,
    #                       vbr_quality: 1
    #                     },
    #                     wav_settings: {
    #                       bit_depth: 1,
    #                       channels: 1,
    #                       format: 'RIFF', # accepts ["RIFF", "RF64"]
    #                       sample_rate: 1
    #                     }
    #                   },
    #                   custom_language_code: 'CustomLanguageCode',
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_code_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #                   stream_name: 'StreamName'
    #                 }
    #               ],
    #               caption_descriptions: [
    #                 {
    #                   caption_selector_name: 'CaptionSelectorName',
    #                   custom_language_code: 'CustomLanguageCode',
    #                   destination_settings: {
    #                     burnin_destination_settings: {
    #                       alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #                       apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #                       background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       background_opacity: 1,
    #                       fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #                       font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #                       font_opacity: 1,
    #                       font_resolution: 1,
    #                       font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #                       font_size: 1,
    #                       hex_font_color: 'HexFontColor',
    #                       outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #                       outline_size: 1,
    #                       shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       shadow_opacity: 1,
    #                       shadow_x_offset: 1,
    #                       shadow_y_offset: 1,
    #                       style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #                       x_position: 1,
    #                       y_position: 1
    #                     },
    #                     destination_type: 'BURN_IN', # accepts ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #                     dvb_sub_destination_settings: {
    #                       alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #                       apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #                       background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       background_opacity: 1,
    #                       dds_handling: 'NONE', # accepts ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #                       dds_x_coordinate: 1,
    #                       dds_y_coordinate: 1,
    #                       fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #                       font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #                       font_opacity: 1,
    #                       font_resolution: 1,
    #                       font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #                       font_size: 1,
    #                       height: 1,
    #                       hex_font_color: 'HexFontColor',
    #                       outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #                       outline_size: 1,
    #                       shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #                       shadow_opacity: 1,
    #                       shadow_x_offset: 1,
    #                       shadow_y_offset: 1,
    #                       style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #                       subtitling_type: 'HEARING_IMPAIRED', # accepts ["HEARING_IMPAIRED", "STANDARD"]
    #                       teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #                       width: 1,
    #                       x_position: 1,
    #                       y_position: 1
    #                     },
    #                     embedded_destination_settings: {
    #                       destination608_channel_number: 1,
    #                       destination708_service_number: 1
    #                     },
    #                     imsc_destination_settings: {
    #                       accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     scc_destination_settings: {
    #                       framerate: 'FRAMERATE_23_97' # accepts ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #                     },
    #                     srt_destination_settings: {
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     teletext_destination_settings: {
    #                       page_number: 'PageNumber',
    #                       page_types: [
    #                         'PAGE_TYPE_INITIAL' # accepts ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #                       ]
    #                     },
    #                     ttml_destination_settings: {
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #                     },
    #                     webvtt_destination_settings: {
    #                       accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED", "STRICT"]
    #                     }
    #                   },
    #                   language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #                   language_description: 'LanguageDescription'
    #                 }
    #               ],
    #               container_settings: {
    #                 cmfc_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_group_id: 'AudioGroupId',
    #                   audio_rendition_sets: 'AudioRenditionSets',
    #                   audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #                   descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #                   i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #                 },
    #                 container: 'F4V', # accepts ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #                 f4v_settings: {
    #                   moov_placement: 'PROGRESSIVE_DOWNLOAD' # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #                 },
    #                 m2ts_settings: {
    #                   audio_buffer_model: 'DVB', # accepts ["DVB", "ATSC"]
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_frames_per_pes: 1,
    #                   audio_pids: [
    #                     1
    #                   ],
    #                   bitrate: 1,
    #                   buffer_model: 'MULTIPLEX', # accepts ["MULTIPLEX", "NONE"]
    #                   data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #                   dvb_nit_settings: {
    #                     network_id: 1,
    #                     network_name: 'NetworkName',
    #                     nit_interval: 1
    #                   },
    #                   dvb_sdt_settings: {
    #                     output_sdt: 'SDT_FOLLOW', # accepts ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #                     sdt_interval: 1,
    #                     service_name: 'ServiceName',
    #                     service_provider_name: 'ServiceProviderName'
    #                   },
    #                   dvb_tdt_settings: {
    #                     tdt_interval: 1
    #                   },
    #                   dvb_teletext_pid: 1,
    #                   ebp_audio_interval: 'VIDEO_AND_FIXED_INTERVALS', # accepts ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #                   ebp_placement: 'VIDEO_AND_AUDIO_PIDS', # accepts ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #                   es_rate_in_pes: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   force_ts_video_ebp_order: 'FORCE', # accepts ["FORCE", "DEFAULT"]
    #                   fragment_time: 1.0,
    #                   klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   max_pcr_interval: 1,
    #                   min_ebp_interval: 1,
    #                   nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   null_packet_bitrate: 1.0,
    #                   pat_interval: 1,
    #                   pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #                   pcr_pid: 1,
    #                   pmt_interval: 1,
    #                   pmt_pid: 1,
    #                   private_metadata_pid: 1,
    #                   program_number: 1,
    #                   rate_mode: 'VBR', # accepts ["VBR", "CBR"]
    #                   scte35_esam: {
    #                     scte35_esam_pid: 1
    #                   },
    #                   scte35_pid: 1,
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   segmentation_markers: 'NONE', # accepts ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #                   segmentation_style: 'MAINTAIN_CADENCE', # accepts ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #                   segmentation_time: 1.0,
    #                   timed_metadata_pid: 1,
    #                   transport_stream_id: 1,
    #                   video_pid: 1
    #                 },
    #                 m3u8_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   audio_frames_per_pes: 1,
    #                   data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #                   max_pcr_interval: 1,
    #                   nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   pat_interval: 1,
    #                   pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #                   pcr_pid: 1,
    #                   pmt_interval: 1,
    #                   pmt_pid: 1,
    #                   private_metadata_pid: 1,
    #                   program_number: 1,
    #                   scte35_pid: 1,
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata_pid: 1,
    #                   transport_stream_id: 1,
    #                   video_pid: 1
    #                 },
    #                 mov_settings: {
    #                   clap_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   mpeg2_four_cc_control: 'XDCAM', # accepts ["XDCAM", "MPEG"]
    #                   padding_control: 'OMNEON', # accepts ["OMNEON", "NONE"]
    #                   reference: 'SELF_CONTAINED' # accepts ["SELF_CONTAINED", "EXTERNAL"]
    #                 },
    #                 mp4_settings: {
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   ctts_version: 1,
    #                   free_space_box: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   moov_placement: 'PROGRESSIVE_DOWNLOAD', # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #                   mp4_major_brand: 'Mp4MajorBrand'
    #                 },
    #                 mpd_settings: {
    #                   accessibility_caption_hints: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #                   caption_container_type: 'RAW', # accepts ["RAW", "FRAGMENTED_MP4"]
    #                   klv_metadata: 'NONE', # accepts ["NONE", "PASSTHROUGH"]
    #                   scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #                   scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #                   timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #                 },
    #                 mxf_settings: {
    #                   afd_signaling: 'NO_COPY', # accepts ["NO_COPY", "COPY_FROM_VIDEO"]
    #                   profile: 'D_10', # accepts ["D_10", "XDCAM", "OP1A", "XAVC"]
    #                   xavc_profile_settings: {
    #                     duration_mode: 'ALLOW_ANY_DURATION', # accepts ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #                     max_anc_data_size: 1
    #                   }
    #                 }
    #               },
    #               extension: 'Extension',
    #               name_modifier: 'NameModifier',
    #               output_settings: {
    #                 hls_settings: {
    #                   audio_group_id: 'AudioGroupId',
    #                   audio_only_container: 'AUTOMATIC', # accepts ["AUTOMATIC", "M2TS"]
    #                   audio_rendition_sets: 'AudioRenditionSets',
    #                   audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #                   descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #                   i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #                   segment_modifier: 'SegmentModifier'
    #                 }
    #               },
    #               preset: 'Preset',
    #               video_description: {
    #                 afd_signaling: 'NONE', # accepts ["NONE", "AUTO", "FIXED"]
    #                 anti_alias: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                 codec_settings: {
    #                   av1_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     bit_depth: 'BIT_8', # accepts ["BIT_8", "BIT_10"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     max_bitrate: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     qvbr_settings: {
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'QVBR', # accepts ["QVBR"]
    #                     slices: 1,
    #                     spatial_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   avc_intra_settings: {
    #                     avc_intra_class: 'CLASS_50', # accepts ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #                     avc_intra_uhd_settings: {
    #                       quality_tuning_level: 'SINGLE_PASS' # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #                     },
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                   },
    #                   codec: 'AV1', # accepts ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #                   frame_capture_settings: {
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     max_captures: 1,
    #                     quality: 1
    #                   },
    #                   h264_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #                     codec_profile: 'BASELINE', # accepts ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     entropy_encoding: 'CABAC', # accepts ["CABAC", "CAVLC"]
    #                     field_encoding: 'PAFF', # accepts ["PAFF", "FORCE_FIELD", "MBAFF"]
    #                     flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     number_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                     qvbr_settings: {
    #                       max_average_bitrate: 1,
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #                     repeat_pps: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #                     slices: 1,
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     syntax: 'DEFAULT', # accepts ["DEFAULT", "RP2027"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     unregistered_sei_timecode: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   h265_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #                     alternate_transfer_function_sei: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #                     codec_profile: 'MAIN_MAIN', # accepts ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     number_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                     qvbr_settings: {
    #                       max_average_bitrate: 1,
    #                       qvbr_quality_level: 1,
    #                       qvbr_quality_level_fine_tune: 1.0
    #                     },
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #                     sample_adaptive_offset_filter_mode: 'DEFAULT', # accepts ["DEFAULT", "ADAPTIVE", "OFF"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #                     slices: 1,
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     temporal_ids: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     tiles: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     unregistered_sei_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     write_mp4_packaging_type: 'HVC1' # accepts ["HVC1", "HEV1"]
    #                   },
    #                   mpeg2_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH"]
    #                     bitrate: 1,
    #                     codec_level: 'AUTO', # accepts ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #                     codec_profile: 'MAIN', # accepts ["MAIN", "PROFILE_422"]
    #                     dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_closed_cadence: 1,
    #                     gop_size: 1.0,
    #                     gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS"]
    #                     hrd_buffer_initial_fill_percentage: 1,
    #                     hrd_buffer_size: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     intra_dc_precision: 'AUTO', # accepts ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #                     max_bitrate: 1,
    #                     min_i_interval: 1,
    #                     number_b_frames_between_reference_frames: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #                     rate_control_mode: 'VBR', # accepts ["VBR", "CBR"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     syntax: 'DEFAULT', # accepts ["DEFAULT", "D_10"]
    #                     telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #                     temporal_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #                   },
    #                   prores_settings: {
    #                     chroma_sampling: 'PRESERVE_444_SAMPLING', # accepts ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #                     codec_profile: 'APPLE_PRORES_422', # accepts ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                   },
    #                   vc3_settings: {
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     interlace_mode: 'INTERLACED', # accepts ["INTERLACED", "PROGRESSIVE"]
    #                     scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     telecine: 'NONE', # accepts ["NONE", "HARD"]
    #                     vc3_class: 'CLASS_145_8BIT' # accepts ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #                   },
    #                   vp8_settings: {
    #                     bitrate: 1,
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     hrd_buffer_size: 1,
    #                     max_bitrate: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #                     rate_control_mode: 'VBR' # accepts ["VBR"]
    #                   },
    #                   vp9_settings: {
    #                     bitrate: 1,
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     gop_size: 1.0,
    #                     hrd_buffer_size: 1,
    #                     max_bitrate: 1,
    #                     par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     par_denominator: 1,
    #                     par_numerator: 1,
    #                     quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #                     rate_control_mode: 'VBR' # accepts ["VBR"]
    #                   },
    #                   xavc_settings: {
    #                     adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #                     entropy_encoding: 'AUTO', # accepts ["AUTO", "CABAC", "CAVLC"]
    #                     framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #                     framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #                     framerate_denominator: 1,
    #                     framerate_numerator: 1,
    #                     profile: 'XAVC_HD_INTRA_CBG', # accepts ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #                     slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     softness: 1,
    #                     spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                     xavc4k_intra_cbg_profile_settings: {
    #                       xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #                     },
    #                     xavc4k_intra_vbr_profile_settings: {
    #                       xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #                     },
    #                     xavc4k_profile_settings: {
    #                       bitrate_class: 'BITRATE_CLASS_100', # accepts ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #                       codec_profile: 'HIGH', # accepts ["HIGH", "HIGH_422"]
    #                       flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_closed_cadence: 1,
    #                       hrd_buffer_size: 1,
    #                       quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                       slices: 1
    #                     },
    #                     xavc_hd_intra_cbg_profile_settings: {
    #                       xavc_class: 'CLASS_50' # accepts ["CLASS_50", "CLASS_100", "CLASS_200"]
    #                     },
    #                     xavc_hd_profile_settings: {
    #                       bitrate_class: 'BITRATE_CLASS_25', # accepts ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #                       flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                       gop_closed_cadence: 1,
    #                       hrd_buffer_size: 1,
    #                       interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #                       quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #                       slices: 1,
    #                       telecine: 'NONE' # accepts ["NONE", "HARD"]
    #                     }
    #                   }
    #                 },
    #                 color_metadata: 'IGNORE', # accepts ["IGNORE", "INSERT"]
    #                 drop_frame_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #                 fixed_afd: 1,
    #                 height: 1,
    #                 respond_to_afd: 'NONE', # accepts ["NONE", "RESPOND", "PASSTHROUGH"]
    #                 scaling_behavior: 'DEFAULT', # accepts ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #                 sharpness: 1,
    #                 timecode_insertion: 'DISABLED', # accepts ["DISABLED", "PIC_TIMING_SEI"]
    #                 video_preprocessors: {
    #                   color_corrector: {
    #                     brightness: 1,
    #                     color_space_conversion: 'NONE', # accepts ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #                     contrast: 1,
    #                     hue: 1,
    #                     sample_range_conversion: 'LIMITED_RANGE_SQUEEZE', # accepts ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #                     saturation: 1
    #                   },
    #                   deinterlacer: {
    #                     algorithm: 'INTERPOLATE', # accepts ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #                     control: 'FORCE_ALL_FRAMES', # accepts ["FORCE_ALL_FRAMES", "NORMAL"]
    #                     mode: 'DEINTERLACE' # accepts ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #                   },
    #                   dolby_vision: {
    #                     l6_metadata: {
    #                       max_cll: 1,
    #                       max_fall: 1
    #                     },
    #                     l6_mode: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #                     mapping: 'HDR10_NOMAP', # accepts ["HDR10_NOMAP", "HDR10_1000"]
    #                     profile: 'PROFILE_5' # accepts ["PROFILE_5", "PROFILE_8_1"]
    #                   },
    #                   hdr10_plus: {
    #                     mastering_monitor_nits: 1,
    #                     target_monitor_nits: 1
    #                   },
    #                   noise_reducer: {
    #                     filter: 'BILATERAL', # accepts ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #                     filter_settings: {
    #                       strength: 1
    #                     },
    #                     spatial_filter_settings: {
    #                       post_filter_sharpen_strength: 1,
    #                       speed: 1,
    #                       strength: 1
    #                     },
    #                     temporal_filter_settings: {
    #                       aggressive_mode: 1,
    #                       post_temporal_sharpening: 'DISABLED', # accepts ["DISABLED", "ENABLED", "AUTO"]
    #                       post_temporal_sharpening_strength: 'LOW', # accepts ["LOW", "MEDIUM", "HIGH"]
    #                       speed: 1,
    #                       strength: 1
    #                     }
    #                   },
    #                   partner_watermarking: {
    #                     nexguard_file_marker_settings: {
    #                       license: 'License',
    #                       payload: 1,
    #                       preset: 'Preset',
    #                       strength: 'LIGHTEST' # accepts ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #                     }
    #                   },
    #                   timecode_burnin: {
    #                     font_size: 1,
    #                     position: 'TOP_CENTER', # accepts ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #                     prefix: 'Prefix'
    #                   }
    #                 },
    #                 width: 1
    #               }
    #             }
    #           ]
    #         }
    #       ],
    #       timecode_config: {
    #         anchor: 'Anchor',
    #         source: 'EMBEDDED', # accepts ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #         start: 'Start',
    #         timestamp_offset: 'TimestampOffset'
    #       },
    #       timed_metadata_insertion: {
    #         id3_insertions: [
    #           {
    #             id3: 'Id3',
    #             timecode: 'Timecode'
    #           }
    #         ]
    #       }
    #     },
    #     status_update_interval: 'SECONDS_10' # accepts ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateJobTemplateOutput
    #   resp.data.job_template #=> Types::JobTemplate
    #   resp.data.job_template.acceleration_settings #=> Types::AccelerationSettings
    #   resp.data.job_template.acceleration_settings.mode #=> String, one of ["DISABLED", "ENABLED", "PREFERRED"]
    #   resp.data.job_template.arn #=> String
    #   resp.data.job_template.category #=> String
    #   resp.data.job_template.created_at #=> Time
    #   resp.data.job_template.description #=> String
    #   resp.data.job_template.hop_destinations #=> Array<HopDestination>
    #   resp.data.job_template.hop_destinations[0] #=> Types::HopDestination
    #   resp.data.job_template.hop_destinations[0].priority #=> Integer
    #   resp.data.job_template.hop_destinations[0].queue #=> String
    #   resp.data.job_template.hop_destinations[0].wait_minutes #=> Integer
    #   resp.data.job_template.last_updated #=> Time
    #   resp.data.job_template.name #=> String
    #   resp.data.job_template.priority #=> Integer
    #   resp.data.job_template.queue #=> String
    #   resp.data.job_template.settings #=> Types::JobTemplateSettings
    #   resp.data.job_template.settings.ad_avail_offset #=> Integer
    #   resp.data.job_template.settings.avail_blanking #=> Types::AvailBlanking
    #   resp.data.job_template.settings.avail_blanking.avail_blanking_image #=> String
    #   resp.data.job_template.settings.esam #=> Types::EsamSettings
    #   resp.data.job_template.settings.esam.manifest_confirm_condition_notification #=> Types::EsamManifestConfirmConditionNotification
    #   resp.data.job_template.settings.esam.manifest_confirm_condition_notification.mcc_xml #=> String
    #   resp.data.job_template.settings.esam.response_signal_preroll #=> Integer
    #   resp.data.job_template.settings.esam.signal_processing_notification #=> Types::EsamSignalProcessingNotification
    #   resp.data.job_template.settings.esam.signal_processing_notification.scc_xml #=> String
    #   resp.data.job_template.settings.extended_data_services #=> Types::ExtendedDataServices
    #   resp.data.job_template.settings.extended_data_services.copy_protection_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_template.settings.extended_data_services.vchip_action #=> String, one of ["PASSTHROUGH", "STRIP"]
    #   resp.data.job_template.settings.inputs #=> Array<InputTemplate>
    #   resp.data.job_template.settings.inputs[0] #=> Types::InputTemplate
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups #=> Hash<String, AudioSelectorGroup>
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'] #=> Types::AudioSelectorGroup
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'].audio_selector_names #=> Array<String>
    #   resp.data.job_template.settings.inputs[0].audio_selector_groups['key'].audio_selector_names[0] #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors #=> Hash<String, AudioSelector>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'] #=> Types::AudioSelector
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].custom_language_code #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].default_selection #=> String, one of ["DEFAULT", "NOT_DEFAULT"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].external_audio_file_input #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings #=> Types::HlsRenditionGroupSettings
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_group_id #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].hls_rendition_group_settings.rendition_name #=> String
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].offset #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].pids #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].pids[0] #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].program_selection #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings #=> Types::RemixSettings
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channels_in #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].remix_settings.channels_out #=> Integer
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].selector_type #=> String, one of ["PID", "TRACK", "LANGUAGE_CODE", "HLS_RENDITION_GROUP"]
    #   resp.data.job_template.settings.inputs[0].audio_selectors['key'].tracks #=> Array<Integer>
    #   resp.data.job_template.settings.inputs[0].caption_selectors #=> Hash<String, CaptionSelector>
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'] #=> Types::CaptionSelector
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].custom_language_code #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings #=> Types::CaptionSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings #=> Types::AncillarySourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.source_ancillary_channel_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.ancillary_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings #=> Types::DvbSubSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.dvb_sub_source_settings.pid #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings #=> Types::EmbeddedSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_channel_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.source608_track_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.embedded_source_settings.terminate_captions #=> String, one of ["END_OF_INPUT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings #=> Types::FileSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.convert608_to708 #=> String, one of ["UPCONVERT", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate #=> Types::CaptionSourceFramerate
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.framerate.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.source_file #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.file_source_settings.time_delta_units #=> String, one of ["SECONDS", "MILLISECONDS"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.source_type #=> String, one of ["ANCILLARY", "DVB_SUB", "EMBEDDED", "SCTE20", "SCC", "TTML", "STL", "SRT", "SMI", "SMPTE_TT", "TELETEXT", "NULL_SOURCE", "IMSC", "WEBVTT"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings #=> Types::TeletextSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.teletext_source_settings.page_number #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings #=> Types::TrackSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.track_source_settings.track_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings #=> Types::WebvttHlsSourceSettings
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_group_id #=> String
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.inputs[0].caption_selectors['key'].source_settings.webvtt_hls_source_settings.rendition_name #=> String
    #   resp.data.job_template.settings.inputs[0].crop #=> Types::Rectangle
    #   resp.data.job_template.settings.inputs[0].crop.height #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.width #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.x #=> Integer
    #   resp.data.job_template.settings.inputs[0].crop.y #=> Integer
    #   resp.data.job_template.settings.inputs[0].deblock_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].denoise_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.inputs[0].dolby_vision_metadata_xml #=> String
    #   resp.data.job_template.settings.inputs[0].filter_enable #=> String, one of ["AUTO", "DISABLE", "FORCE"]
    #   resp.data.job_template.settings.inputs[0].filter_strength #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter #=> Types::ImageInserter
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.job_template.settings.inputs[0].image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.job_template.settings.inputs[0].input_clippings #=> Array<InputClipping>
    #   resp.data.job_template.settings.inputs[0].input_clippings[0] #=> Types::InputClipping
    #   resp.data.job_template.settings.inputs[0].input_clippings[0].end_timecode #=> String
    #   resp.data.job_template.settings.inputs[0].input_clippings[0].start_timecode #=> String
    #   resp.data.job_template.settings.inputs[0].input_scan_type #=> String, one of ["AUTO", "PSF"]
    #   resp.data.job_template.settings.inputs[0].position #=> Types::Rectangle
    #   resp.data.job_template.settings.inputs[0].program_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].psi_control #=> String, one of ["IGNORE_PSI", "USE_PSI"]
    #   resp.data.job_template.settings.inputs[0].timecode_source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_template.settings.inputs[0].timecode_start #=> String
    #   resp.data.job_template.settings.inputs[0].video_selector #=> Types::VideoSelector
    #   resp.data.job_template.settings.inputs[0].video_selector.alpha_behavior #=> String, one of ["DISCARD", "REMAP_TO_LUMA"]
    #   resp.data.job_template.settings.inputs[0].video_selector.color_space #=> String, one of ["FOLLOW", "REC_601", "REC_709", "HDR10", "HLG_2020"]
    #   resp.data.job_template.settings.inputs[0].video_selector.color_space_usage #=> String, one of ["FORCE", "FALLBACK"]
    #   resp.data.job_template.settings.inputs[0].video_selector.embedded_timecode_override #=> String, one of ["NONE", "USE_MDPM"]
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.pad_video #=> String, one of ["DISABLED", "BLACK"]
    #   resp.data.job_template.settings.inputs[0].video_selector.pid #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.program_number #=> Integer
    #   resp.data.job_template.settings.inputs[0].video_selector.rotate #=> String, one of ["DEGREE_0", "DEGREES_90", "DEGREES_180", "DEGREES_270", "AUTO"]
    #   resp.data.job_template.settings.inputs[0].video_selector.sample_range #=> String, one of ["FOLLOW", "FULL_RANGE", "LIMITED_RANGE"]
    #   resp.data.job_template.settings.kantar_watermark #=> Types::KantarWatermarkSettings
    #   resp.data.job_template.settings.kantar_watermark.channel_name #=> String
    #   resp.data.job_template.settings.kantar_watermark.content_reference #=> String
    #   resp.data.job_template.settings.kantar_watermark.credentials_secret_name #=> String
    #   resp.data.job_template.settings.kantar_watermark.file_offset #=> Float
    #   resp.data.job_template.settings.kantar_watermark.kantar_license_id #=> Integer
    #   resp.data.job_template.settings.kantar_watermark.kantar_server_url #=> String
    #   resp.data.job_template.settings.kantar_watermark.log_destination #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata3 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata4 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata5 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata6 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata7 #=> String
    #   resp.data.job_template.settings.kantar_watermark.metadata8 #=> String
    #   resp.data.job_template.settings.motion_image_inserter #=> Types::MotionImageInserter
    #   resp.data.job_template.settings.motion_image_inserter.framerate #=> Types::MotionImageInsertionFramerate
    #   resp.data.job_template.settings.motion_image_inserter.framerate.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.framerate.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.input #=> String
    #   resp.data.job_template.settings.motion_image_inserter.insertion_mode #=> String, one of ["MOV", "PNG"]
    #   resp.data.job_template.settings.motion_image_inserter.offset #=> Types::MotionImageInsertionOffset
    #   resp.data.job_template.settings.motion_image_inserter.offset.image_x #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.offset.image_y #=> Integer
    #   resp.data.job_template.settings.motion_image_inserter.playback #=> String, one of ["ONCE", "REPEAT"]
    #   resp.data.job_template.settings.motion_image_inserter.start_time #=> String
    #   resp.data.job_template.settings.nielsen_configuration #=> Types::NielsenConfiguration
    #   resp.data.job_template.settings.nielsen_configuration.breakout_code #=> Integer
    #   resp.data.job_template.settings.nielsen_configuration.distributor_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark #=> Types::NielsenNonLinearWatermarkSettings
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.active_watermark_process #=> String, one of ["NAES2_AND_NW", "CBET", "NAES2_AND_NW_AND_CBET"]
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.adi_filename #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.asset_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.asset_name #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.cbet_source_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.episode_id #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.metadata_destination #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.source_id #=> Integer
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.source_watermark_status #=> String, one of ["CLEAN", "WATERMARKED"]
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.tic_server_url #=> String
    #   resp.data.job_template.settings.nielsen_non_linear_watermark.unique_tic_per_audio_track #=> String, one of ["RESERVE_UNIQUE_TICS_PER_TRACK", "SAME_TICS_PER_TRACK"]
    #   resp.data.job_template.settings.output_groups #=> Array<OutputGroup>
    #   resp.data.job_template.settings.output_groups[0] #=> Types::OutputGroup
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings #=> Types::AutomatedEncodingSettings
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings #=> Types::AutomatedAbrSettings
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.max_abr_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.max_renditions #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.min_abr_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules #=> Array<AutomatedAbrRule>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0] #=> Types::AutomatedAbrRule
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions #=> Array<AllowedRenditionSize>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0] #=> Types::AllowedRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].required #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].allowed_renditions[0].width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions #=> Array<ForceIncludeRenditionSize>
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0] #=> Types::ForceIncludeRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].force_include_renditions[0].width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size #=> Types::MinBottomRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_bottom_rendition_size.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size #=> Types::MinTopRenditionSize
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].min_top_rendition_size.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].automated_encoding_settings.abr_settings.rules[0].type #=> String, one of ["MIN_TOP_RENDITION_SIZE", "MIN_BOTTOM_RENDITION_SIZE", "FORCE_INCLUDE_RENDITIONS", "ALLOWED_RENDITIONS"]
    #   resp.data.job_template.settings.output_groups[0].custom_name #=> String
    #   resp.data.job_template.settings.output_groups[0].name #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings #=> Types::OutputGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings #=> Types::CmafGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests #=> Array<CmafAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0] #=> Types::CmafAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings #=> Types::S3DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control #=> Types::S3DestinationAccessControl
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.access_control.canned_acl #=> String, one of ["PUBLIC_READ", "AUTHENTICATED_READ", "BUCKET_OWNER_READ", "BUCKET_OWNER_FULL_CONTROL"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption #=> Types::S3EncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.encryption_type #=> String, one of ["SERVER_SIDE_ENCRYPTION_S3", "SERVER_SIDE_ENCRYPTION_KMS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_encryption_context #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.destination_settings.s3_settings.encryption.kms_key_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption #=> Types::CmafEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.encryption_method #=> String, one of ["SAMPLE_AES", "AES_CTR"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProviderCmaf
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.dash_signaled_system_ids[0] #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.hls_signaled_system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.key_format_versions #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.static_key_value #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.static_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings #=> Types::CmafImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_dash_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_hls_manifest #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.cmaf_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings #=> Types::DashIsoGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests #=> Array<DashAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0] #=> Types::DashAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.audio_channel_config_scheme_id_uri #=> String, one of ["MPEG_CHANNEL_CONFIGURATION", "DOLBY_CHANNEL_CONFIGURATION"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption #=> Types::DashIsoEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.playback_device_compatibility #=> String, one of ["CENC_V1", "UNENCRYPTED_SEI"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.certificate_arn #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.resource_id #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.system_ids[0] #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.encryption.speke_key_provider.url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.hbbtv_compliance #=> String, one of ["HBBTV_1_5", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings #=> Types::DashIsoImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_buffer_time #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.mpd_profile #=> String, one of ["MAIN_PROFILE", "ON_DEMAND_PROFILE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.pts_offset_handling_for_b_frames #=> String, one of ["ZERO_BASED", "MATCH_INITIAL_PTS"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.dash_iso_group_settings.write_segment_timeline_in_representation #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings #=> Types::FileGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.file_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings #=> Types::HlsGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.ad_markers[0] #=> String, one of ["ELEMENTAL", "ELEMENTAL_SCTE35"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests #=> Array<HlsAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0] #=> Types::HlsAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.audio_only_header #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.base_url #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings #=> Array<HlsCaptionLanguageMapping>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0] #=> Types::HlsCaptionLanguageMapping
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].caption_channel #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_mappings[0].language_description #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_language_setting #=> String, one of ["INSERT", "OMIT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.caption_segment_length_control #=> String, one of ["LARGE_SEGMENTS", "MATCH_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.client_cache #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.codec_specification #=> String, one of ["RFC_6381", "RFC_4281"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.directory_structure #=> String, one of ["SINGLE_DIRECTORY", "SUBDIRECTORY_PER_STREAM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption #=> Types::HlsEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.constant_initialization_vector #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.encryption_method #=> String, one of ["AES128", "SAMPLE_AES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.initialization_vector_in_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.offline_encrypted #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.static_key_provider #=> Types::StaticKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.encryption.type #=> String, one of ["SPEKE", "STATIC_KEY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play #=> String, one of ["NONE", "THUMBNAIL", "THUMBNAIL_AND_FULLFRAME", "ADVANCED"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings #=> Types::HlsImageBasedTrickPlaySettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.interval_cadence #=> String, one of ["FOLLOW_IFRAME", "FOLLOW_CUSTOM"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_interval #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.thumbnail_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.image_based_trick_play_settings.tile_width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_compression #=> String, one of ["GZIP", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.manifest_duration_format #=> String, one of ["FLOATING_POINT", "INTEGER"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.min_final_segment_length #=> Float
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.min_segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.output_selection #=> String, one of ["MANIFESTS_AND_SEGMENTS", "SEGMENTS_ONLY"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.program_date_time_period #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_control #=> String, one of ["SINGLE_FILE", "SEGMENTED_FILES"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.segments_per_subdirectory #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.stream_inf_resolution #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.target_duration_compatibility_mode #=> String, one of ["LEGACY", "SPEC_COMPLIANT"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_frame #=> String, one of ["NONE", "PRIV", "TDRL"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timed_metadata_id3_period #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.hls_group_settings.timestamp_delta_milliseconds #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings #=> Types::MsSmoothGroupSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests #=> Array<MsSmoothAdditionalManifest>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0] #=> Types::MsSmoothAdditionalManifest
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].manifest_name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.additional_manifests[0].selected_outputs #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.audio_deduplication #=> String, one of ["COMBINE_DUPLICATE_STREAMS", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination #=> String
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.destination_settings #=> Types::DestinationSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption #=> Types::MsSmoothEncryptionSettings
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.encryption.speke_key_provider #=> Types::SpekeKeyProvider
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length #=> Integer
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.fragment_length_control #=> String, one of ["EXACT", "GOP_MULTIPLE"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.ms_smooth_group_settings.manifest_encoding #=> String, one of ["UTF8", "UTF16"]
    #   resp.data.job_template.settings.output_groups[0].output_group_settings.type #=> String, one of ["HLS_GROUP_SETTINGS", "DASH_ISO_GROUP_SETTINGS", "FILE_GROUP_SETTINGS", "MS_SMOOTH_GROUP_SETTINGS", "CMAF_GROUP_SETTINGS"]
    #   resp.data.job_template.settings.output_groups[0].outputs #=> Array<Output>
    #   resp.data.job_template.settings.output_groups[0].outputs[0] #=> Types::Output
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions #=> Array<AudioDescription>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_source_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].audio_descriptions[0].stream_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions #=> Array<CaptionDescription>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0] #=> Types::CaptionDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].caption_selector_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].custom_language_code #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].caption_descriptions[0].language_description #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings #=> Types::ContainerSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].extension #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].name_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings #=> Types::OutputSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings #=> Types::HlsSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_group_id #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_only_container #=> String, one of ["AUTOMATIC", "M2TS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_rendition_sets #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT", "AUDIO_ONLY_VARIANT_STREAM"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].output_settings.hls_settings.segment_modifier #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].preset #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description #=> Types::VideoDescription
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.crop #=> Types::Rectangle
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.fixed_afd #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.height #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.position #=> Types::Rectangle
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.sharpness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.job_template.settings.output_groups[0].outputs[0].video_description.width #=> Integer
    #   resp.data.job_template.settings.timecode_config #=> Types::TimecodeConfig
    #   resp.data.job_template.settings.timecode_config.anchor #=> String
    #   resp.data.job_template.settings.timecode_config.source #=> String, one of ["EMBEDDED", "ZEROBASED", "SPECIFIEDSTART"]
    #   resp.data.job_template.settings.timecode_config.start #=> String
    #   resp.data.job_template.settings.timecode_config.timestamp_offset #=> String
    #   resp.data.job_template.settings.timed_metadata_insertion #=> Types::TimedMetadataInsertion
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions #=> Array<Id3Insertion>
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0] #=> Types::Id3Insertion
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0].id3 #=> String
    #   resp.data.job_template.settings.timed_metadata_insertion.id3_insertions[0].timecode #=> String
    #   resp.data.job_template.status_update_interval #=> String, one of ["SECONDS_10", "SECONDS_12", "SECONDS_15", "SECONDS_20", "SECONDS_30", "SECONDS_60", "SECONDS_120", "SECONDS_180", "SECONDS_240", "SECONDS_300", "SECONDS_360", "SECONDS_420", "SECONDS_480", "SECONDS_540", "SECONDS_600"]
    #   resp.data.job_template.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def update_job_template(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateJobTemplateInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateJobTemplateInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateJobTemplate
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::UpdateJobTemplate
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateJobTemplate,
        stubs: @stubs,
        params_class: Params::UpdateJobTemplateOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_job_template
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Modify one of your existing presets.
    #
    # @param [Hash] params
    #   See {Types::UpdatePresetInput}.
    #
    # @option params [String] :category
    #   The new category for the preset, if you are changing it.
    #
    # @option params [String] :description
    #   The new description for the preset, if you are changing it.
    #
    # @option params [String] :name
    #   The name of the preset you are modifying.
    #
    # @option params [PresetSettings] :settings
    #   Settings for preset
    #
    # @return [Types::UpdatePresetOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_preset(
    #     category: 'Category',
    #     description: 'Description',
    #     name: 'Name', # required
    #     settings: {
    #       audio_descriptions: [
    #         {
    #           audio_channel_tagging_settings: {
    #             channel_tag: 'L' # accepts ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #           },
    #           audio_normalization_settings: {
    #             algorithm: 'ITU_BS_1770_1', # accepts ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #             algorithm_control: 'CORRECT_AUDIO', # accepts ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #             correction_gate_level: 1,
    #             loudness_logging: 'LOG', # accepts ["LOG", "DONT_LOG"]
    #             peak_calculation: 'TRUE_PEAK', # accepts ["TRUE_PEAK", "NONE"]
    #             target_lkfs: 1.0
    #           },
    #           audio_source_name: 'AudioSourceName',
    #           audio_type: 1,
    #           audio_type_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #           codec_settings: {
    #             aac_settings: {
    #               audio_description_broadcaster_mix: 'BROADCASTER_MIXED_AD', # accepts ["BROADCASTER_MIXED_AD", "NORMAL"]
    #               bitrate: 1,
    #               codec_profile: 'LC', # accepts ["LC", "HEV1", "HEV2"]
    #               coding_mode: 'AD_RECEIVER_MIX', # accepts ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #               rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #               raw_format: 'LATM_LOAS', # accepts ["LATM_LOAS", "NONE"]
    #               sample_rate: 1,
    #               specification: 'MPEG2', # accepts ["MPEG2", "MPEG4"]
    #               vbr_quality: 'LOW' # accepts ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #             },
    #             ac3_settings: {
    #               bitrate: 1,
    #               bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #               coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #               dialnorm: 1,
    #               dynamic_range_compression_line: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #               dynamic_range_compression_profile: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "NONE"]
    #               dynamic_range_compression_rf: 'FILM_STANDARD', # accepts ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #               lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #               sample_rate: 1
    #             },
    #             aiff_settings: {
    #               bit_depth: 1,
    #               channels: 1,
    #               sample_rate: 1
    #             },
    #             codec: 'AAC', # accepts ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #             eac3_atmos_settings: {
    #               bitrate: 1,
    #               bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN"]
    #               coding_mode: 'CODING_MODE_AUTO', # accepts ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #               dialogue_intelligence: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               downmix_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #               dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               dynamic_range_control: 'SPECIFIED', # accepts ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #               lo_ro_center_mix_level: 1.0,
    #               lo_ro_surround_mix_level: 1.0,
    #               lt_rt_center_mix_level: 1.0,
    #               lt_rt_surround_mix_level: 1.0,
    #               metering_mode: 'LEQ_A', # accepts ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #               sample_rate: 1,
    #               speech_threshold: 1,
    #               stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #               surround_ex_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #             },
    #             eac3_settings: {
    #               attenuation_control: 'ATTENUATE_3_DB', # accepts ["ATTENUATE_3_DB", "NONE"]
    #               bitrate: 1,
    #               bitstream_mode: 'COMPLETE_MAIN', # accepts ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #               coding_mode: 'CODING_MODE_1_0', # accepts ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #               dc_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               dialnorm: 1,
    #               dynamic_range_compression_line: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               dynamic_range_compression_rf: 'NONE', # accepts ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #               lfe_control: 'LFE', # accepts ["LFE", "NO_LFE"]
    #               lfe_filter: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               lo_ro_center_mix_level: 1.0,
    #               lo_ro_surround_mix_level: 1.0,
    #               lt_rt_center_mix_level: 1.0,
    #               lt_rt_surround_mix_level: 1.0,
    #               metadata_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #               passthrough_control: 'WHEN_POSSIBLE', # accepts ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #               phase_control: 'SHIFT_90_DEGREES', # accepts ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #               sample_rate: 1,
    #               stereo_downmix: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #               surround_ex_mode: 'NOT_INDICATED', # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #               surround_mode: 'NOT_INDICATED' # accepts ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #             },
    #             mp2_settings: {
    #               bitrate: 1,
    #               channels: 1,
    #               sample_rate: 1
    #             },
    #             mp3_settings: {
    #               bitrate: 1,
    #               channels: 1,
    #               rate_control_mode: 'CBR', # accepts ["CBR", "VBR"]
    #               sample_rate: 1,
    #               vbr_quality: 1
    #             },
    #             opus_settings: {
    #               bitrate: 1,
    #               channels: 1,
    #               sample_rate: 1
    #             },
    #             vorbis_settings: {
    #               channels: 1,
    #               sample_rate: 1,
    #               vbr_quality: 1
    #             },
    #             wav_settings: {
    #               bit_depth: 1,
    #               channels: 1,
    #               format: 'RIFF', # accepts ["RIFF", "RF64"]
    #               sample_rate: 1
    #             }
    #           },
    #           custom_language_code: 'CustomLanguageCode',
    #           language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #           language_code_control: 'FOLLOW_INPUT', # accepts ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #           remix_settings: {
    #             channel_mapping: {
    #               output_channels: [
    #                 {
    #                   input_channels: [
    #                     1
    #                   ],
    #                   input_channels_fine_tune: [
    #                     1.0
    #                   ]
    #                 }
    #               ]
    #             },
    #             channels_in: 1,
    #             channels_out: 1
    #           },
    #           stream_name: 'StreamName'
    #         }
    #       ],
    #       caption_descriptions: [
    #         {
    #           custom_language_code: 'CustomLanguageCode',
    #           destination_settings: {
    #             burnin_destination_settings: {
    #               alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #               apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #               background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               background_opacity: 1,
    #               fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #               font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #               font_opacity: 1,
    #               font_resolution: 1,
    #               font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #               font_size: 1,
    #               hex_font_color: 'HexFontColor',
    #               outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #               outline_size: 1,
    #               shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               shadow_opacity: 1,
    #               shadow_x_offset: 1,
    #               shadow_y_offset: 1,
    #               style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #               x_position: 1,
    #               y_position: 1
    #             },
    #             destination_type: 'BURN_IN', # accepts ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #             dvb_sub_destination_settings: {
    #               alignment: 'CENTERED', # accepts ["CENTERED", "LEFT", "AUTO"]
    #               apply_font_color: 'WHITE_TEXT_ONLY', # accepts ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #               background_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               background_opacity: 1,
    #               dds_handling: 'NONE', # accepts ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #               dds_x_coordinate: 1,
    #               dds_y_coordinate: 1,
    #               fallback_font: 'BEST_MATCH', # accepts ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #               font_color: 'WHITE', # accepts ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #               font_opacity: 1,
    #               font_resolution: 1,
    #               font_script: 'AUTOMATIC', # accepts ["AUTOMATIC", "HANS", "HANT"]
    #               font_size: 1,
    #               height: 1,
    #               hex_font_color: 'HexFontColor',
    #               outline_color: 'BLACK', # accepts ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #               outline_size: 1,
    #               shadow_color: 'NONE', # accepts ["NONE", "BLACK", "WHITE", "AUTO"]
    #               shadow_opacity: 1,
    #               shadow_x_offset: 1,
    #               shadow_y_offset: 1,
    #               style_passthrough: 'ENABLED', # accepts ["ENABLED", "DISABLED"]
    #               subtitling_type: 'HEARING_IMPAIRED', # accepts ["HEARING_IMPAIRED", "STANDARD"]
    #               teletext_spacing: 'FIXED_GRID', # accepts ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #               width: 1,
    #               x_position: 1,
    #               y_position: 1
    #             },
    #             embedded_destination_settings: {
    #               destination608_channel_number: 1,
    #               destination708_service_number: 1
    #             },
    #             imsc_destination_settings: {
    #               accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             scc_destination_settings: {
    #               framerate: 'FRAMERATE_23_97' # accepts ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #             },
    #             srt_destination_settings: {
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             teletext_destination_settings: {
    #               page_number: 'PageNumber',
    #               page_types: [
    #                 'PAGE_TYPE_INITIAL' # accepts ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #               ]
    #             },
    #             ttml_destination_settings: {
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED"]
    #             },
    #             webvtt_destination_settings: {
    #               accessibility: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               style_passthrough: 'ENABLED' # accepts ["ENABLED", "DISABLED", "STRICT"]
    #             }
    #           },
    #           language_code: 'ENG', # accepts ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #           language_description: 'LanguageDescription'
    #         }
    #       ],
    #       container_settings: {
    #         cmfc_settings: {
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           audio_group_id: 'AudioGroupId',
    #           audio_rendition_sets: 'AudioRenditionSets',
    #           audio_track_type: 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT', # accepts ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #           descriptive_video_service_flag: 'DONT_FLAG', # accepts ["DONT_FLAG", "FLAG"]
    #           i_frame_only_manifest: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #         },
    #         container: 'F4V', # accepts ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #         f4v_settings: {
    #           moov_placement: 'PROGRESSIVE_DOWNLOAD' # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #         },
    #         m2ts_settings: {
    #           audio_buffer_model: 'DVB', # accepts ["DVB", "ATSC"]
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           audio_frames_per_pes: 1,
    #           audio_pids: [
    #             1
    #           ],
    #           bitrate: 1,
    #           buffer_model: 'MULTIPLEX', # accepts ["MULTIPLEX", "NONE"]
    #           data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #           dvb_nit_settings: {
    #             network_id: 1,
    #             network_name: 'NetworkName',
    #             nit_interval: 1
    #           },
    #           dvb_sdt_settings: {
    #             output_sdt: 'SDT_FOLLOW', # accepts ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #             sdt_interval: 1,
    #             service_name: 'ServiceName',
    #             service_provider_name: 'ServiceProviderName'
    #           },
    #           dvb_tdt_settings: {
    #             tdt_interval: 1
    #           },
    #           dvb_teletext_pid: 1,
    #           ebp_audio_interval: 'VIDEO_AND_FIXED_INTERVALS', # accepts ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #           ebp_placement: 'VIDEO_AND_AUDIO_PIDS', # accepts ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #           es_rate_in_pes: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           force_ts_video_ebp_order: 'FORCE', # accepts ["FORCE", "DEFAULT"]
    #           fragment_time: 1.0,
    #           klv_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           max_pcr_interval: 1,
    #           min_ebp_interval: 1,
    #           nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #           null_packet_bitrate: 1.0,
    #           pat_interval: 1,
    #           pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #           pcr_pid: 1,
    #           pmt_interval: 1,
    #           pmt_pid: 1,
    #           private_metadata_pid: 1,
    #           program_number: 1,
    #           rate_mode: 'VBR', # accepts ["VBR", "CBR"]
    #           scte35_esam: {
    #             scte35_esam_pid: 1
    #           },
    #           scte35_pid: 1,
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           segmentation_markers: 'NONE', # accepts ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #           segmentation_style: 'MAINTAIN_CADENCE', # accepts ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #           segmentation_time: 1.0,
    #           timed_metadata_pid: 1,
    #           transport_stream_id: 1,
    #           video_pid: 1
    #         },
    #         m3u8_settings: {
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           audio_frames_per_pes: 1,
    #           data_pts_control: 'AUTO', # accepts ["AUTO", "ALIGN_TO_VIDEO"]
    #           max_pcr_interval: 1,
    #           nielsen_id3: 'INSERT', # accepts ["INSERT", "NONE"]
    #           pat_interval: 1,
    #           pcr_control: 'PCR_EVERY_PES_PACKET', # accepts ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #           pcr_pid: 1,
    #           pmt_interval: 1,
    #           pmt_pid: 1,
    #           private_metadata_pid: 1,
    #           program_number: 1,
    #           scte35_pid: 1,
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata_pid: 1,
    #           transport_stream_id: 1,
    #           video_pid: 1
    #         },
    #         mov_settings: {
    #           clap_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           mpeg2_four_cc_control: 'XDCAM', # accepts ["XDCAM", "MPEG"]
    #           padding_control: 'OMNEON', # accepts ["OMNEON", "NONE"]
    #           reference: 'SELF_CONTAINED' # accepts ["SELF_CONTAINED", "EXTERNAL"]
    #         },
    #         mp4_settings: {
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           cslg_atom: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           ctts_version: 1,
    #           free_space_box: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           moov_placement: 'PROGRESSIVE_DOWNLOAD', # accepts ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #           mp4_major_brand: 'Mp4MajorBrand'
    #         },
    #         mpd_settings: {
    #           accessibility_caption_hints: 'INCLUDE', # accepts ["INCLUDE", "EXCLUDE"]
    #           audio_duration: 'DEFAULT_CODEC_DURATION', # accepts ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #           caption_container_type: 'RAW', # accepts ["RAW", "FRAGMENTED_MP4"]
    #           klv_metadata: 'NONE', # accepts ["NONE", "PASSTHROUGH"]
    #           scte35_esam: 'INSERT', # accepts ["INSERT", "NONE"]
    #           scte35_source: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "NONE"]
    #           timed_metadata: 'PASSTHROUGH' # accepts ["PASSTHROUGH", "NONE"]
    #         },
    #         mxf_settings: {
    #           afd_signaling: 'NO_COPY', # accepts ["NO_COPY", "COPY_FROM_VIDEO"]
    #           profile: 'D_10', # accepts ["D_10", "XDCAM", "OP1A", "XAVC"]
    #           xavc_profile_settings: {
    #             duration_mode: 'ALLOW_ANY_DURATION', # accepts ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #             max_anc_data_size: 1
    #           }
    #         }
    #       },
    #       video_description: {
    #         afd_signaling: 'NONE', # accepts ["NONE", "AUTO", "FIXED"]
    #         anti_alias: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #         codec_settings: {
    #           av1_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #             bit_depth: 'BIT_8', # accepts ["BIT_8", "BIT_10"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_size: 1.0,
    #             max_bitrate: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             qvbr_settings: {
    #               qvbr_quality_level: 1,
    #               qvbr_quality_level_fine_tune: 1.0
    #             },
    #             rate_control_mode: 'QVBR', # accepts ["QVBR"]
    #             slices: 1,
    #             spatial_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #           },
    #           avc_intra_settings: {
    #             avc_intra_class: 'CLASS_50', # accepts ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #             avc_intra_uhd_settings: {
    #               quality_tuning_level: 'SINGLE_PASS' # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #             },
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE' # accepts ["NONE", "HARD"]
    #           },
    #           codec: 'AV1', # accepts ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #           frame_capture_settings: {
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             max_captures: 1,
    #             quality: 1
    #           },
    #           h264_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #             bitrate: 1,
    #             codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #             codec_profile: 'BASELINE', # accepts ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #             dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #             entropy_encoding: 'CABAC', # accepts ["CABAC", "CAVLC"]
    #             field_encoding: 'PAFF', # accepts ["PAFF", "FORCE_FIELD", "MBAFF"]
    #             flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             gop_closed_cadence: 1,
    #             gop_size: 1.0,
    #             gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #             hrd_buffer_initial_fill_percentage: 1,
    #             hrd_buffer_size: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             max_bitrate: 1,
    #             min_i_interval: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             number_reference_frames: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #             qvbr_settings: {
    #               max_average_bitrate: 1,
    #               qvbr_quality_level: 1,
    #               qvbr_quality_level_fine_tune: 1.0
    #             },
    #             rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #             repeat_pps: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #             slices: 1,
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             softness: 1,
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             syntax: 'DEFAULT', # accepts ["DEFAULT", "RP2027"]
    #             telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #             temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             unregistered_sei_timecode: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #           },
    #           h265_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #             alternate_transfer_function_sei: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             bitrate: 1,
    #             codec_level: 'AUTO', # accepts ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #             codec_profile: 'MAIN_MAIN', # accepts ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #             dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #             flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             gop_closed_cadence: 1,
    #             gop_size: 1.0,
    #             gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS", "AUTO"]
    #             hrd_buffer_initial_fill_percentage: 1,
    #             hrd_buffer_size: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             max_bitrate: 1,
    #             min_i_interval: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             number_reference_frames: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #             qvbr_settings: {
    #               max_average_bitrate: 1,
    #               qvbr_quality_level: 1,
    #               qvbr_quality_level_fine_tune: 1.0
    #             },
    #             rate_control_mode: 'VBR', # accepts ["VBR", "CBR", "QVBR"]
    #             sample_adaptive_offset_filter_mode: 'DEFAULT', # accepts ["DEFAULT", "ADAPTIVE", "OFF"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #             slices: 1,
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #             temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             temporal_ids: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             tiles: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             unregistered_sei_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             write_mp4_packaging_type: 'HVC1' # accepts ["HVC1", "HEV1"]
    #           },
    #           mpeg2_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "LOW", "MEDIUM", "HIGH"]
    #             bitrate: 1,
    #             codec_level: 'AUTO', # accepts ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #             codec_profile: 'MAIN', # accepts ["MAIN", "PROFILE_422"]
    #             dynamic_sub_gop: 'ADAPTIVE', # accepts ["ADAPTIVE", "STATIC"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_closed_cadence: 1,
    #             gop_size: 1.0,
    #             gop_size_units: 'FRAMES', # accepts ["FRAMES", "SECONDS"]
    #             hrd_buffer_initial_fill_percentage: 1,
    #             hrd_buffer_size: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             intra_dc_precision: 'AUTO', # accepts ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #             max_bitrate: 1,
    #             min_i_interval: 1,
    #             number_b_frames_between_reference_frames: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "MULTI_PASS"]
    #             rate_control_mode: 'VBR', # accepts ["VBR", "CBR"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             scene_change_detect: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             softness: 1,
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             syntax: 'DEFAULT', # accepts ["DEFAULT", "D_10"]
    #             telecine: 'NONE', # accepts ["NONE", "SOFT", "HARD"]
    #             temporal_adaptive_quantization: 'DISABLED' # accepts ["DISABLED", "ENABLED"]
    #           },
    #           prores_settings: {
    #             chroma_sampling: 'PRESERVE_444_SAMPLING', # accepts ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #             codec_profile: 'APPLE_PRORES_422', # accepts ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE' # accepts ["NONE", "HARD"]
    #           },
    #           vc3_settings: {
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             interlace_mode: 'INTERLACED', # accepts ["INTERLACED", "PROGRESSIVE"]
    #             scan_type_conversion_mode: 'INTERLACED', # accepts ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             telecine: 'NONE', # accepts ["NONE", "HARD"]
    #             vc3_class: 'CLASS_145_8BIT' # accepts ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #           },
    #           vp8_settings: {
    #             bitrate: 1,
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_size: 1.0,
    #             hrd_buffer_size: 1,
    #             max_bitrate: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #             rate_control_mode: 'VBR' # accepts ["VBR"]
    #           },
    #           vp9_settings: {
    #             bitrate: 1,
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             gop_size: 1.0,
    #             hrd_buffer_size: 1,
    #             max_bitrate: 1,
    #             par_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             par_denominator: 1,
    #             par_numerator: 1,
    #             quality_tuning_level: 'MULTI_PASS', # accepts ["MULTI_PASS", "MULTI_PASS_HQ"]
    #             rate_control_mode: 'VBR' # accepts ["VBR"]
    #           },
    #           xavc_settings: {
    #             adaptive_quantization: 'OFF', # accepts ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #             entropy_encoding: 'AUTO', # accepts ["AUTO", "CABAC", "CAVLC"]
    #             framerate_control: 'INITIALIZE_FROM_SOURCE', # accepts ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #             framerate_conversion_algorithm: 'DUPLICATE_DROP', # accepts ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #             framerate_denominator: 1,
    #             framerate_numerator: 1,
    #             profile: 'XAVC_HD_INTRA_CBG', # accepts ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #             slow_pal: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             softness: 1,
    #             spatial_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             temporal_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #             xavc4k_intra_cbg_profile_settings: {
    #               xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #             },
    #             xavc4k_intra_vbr_profile_settings: {
    #               xavc_class: 'CLASS_100' # accepts ["CLASS_100", "CLASS_300", "CLASS_480"]
    #             },
    #             xavc4k_profile_settings: {
    #               bitrate_class: 'BITRATE_CLASS_100', # accepts ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #               codec_profile: 'HIGH', # accepts ["HIGH", "HIGH_422"]
    #               flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_closed_cadence: 1,
    #               hrd_buffer_size: 1,
    #               quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #               slices: 1
    #             },
    #             xavc_hd_intra_cbg_profile_settings: {
    #               xavc_class: 'CLASS_50' # accepts ["CLASS_50", "CLASS_100", "CLASS_200"]
    #             },
    #             xavc_hd_profile_settings: {
    #               bitrate_class: 'BITRATE_CLASS_25', # accepts ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #               flicker_adaptive_quantization: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_b_reference: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #               gop_closed_cadence: 1,
    #               hrd_buffer_size: 1,
    #               interlace_mode: 'PROGRESSIVE', # accepts ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #               quality_tuning_level: 'SINGLE_PASS', # accepts ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #               slices: 1,
    #               telecine: 'NONE' # accepts ["NONE", "HARD"]
    #             }
    #           }
    #         },
    #         color_metadata: 'IGNORE', # accepts ["IGNORE", "INSERT"]
    #         crop: {
    #           height: 1,
    #           width: 1,
    #           x: 1,
    #           y: 1
    #         },
    #         drop_frame_timecode: 'DISABLED', # accepts ["DISABLED", "ENABLED"]
    #         fixed_afd: 1,
    #         height: 1,
    #         respond_to_afd: 'NONE', # accepts ["NONE", "RESPOND", "PASSTHROUGH"]
    #         scaling_behavior: 'DEFAULT', # accepts ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #         sharpness: 1,
    #         timecode_insertion: 'DISABLED', # accepts ["DISABLED", "PIC_TIMING_SEI"]
    #         video_preprocessors: {
    #           color_corrector: {
    #             brightness: 1,
    #             color_space_conversion: 'NONE', # accepts ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #             contrast: 1,
    #             hdr10_metadata: {
    #               blue_primary_x: 1,
    #               blue_primary_y: 1,
    #               green_primary_x: 1,
    #               green_primary_y: 1,
    #               max_content_light_level: 1,
    #               max_frame_average_light_level: 1,
    #               max_luminance: 1,
    #               min_luminance: 1,
    #               red_primary_x: 1,
    #               red_primary_y: 1,
    #               white_point_x: 1,
    #               white_point_y: 1
    #             },
    #             hue: 1,
    #             sample_range_conversion: 'LIMITED_RANGE_SQUEEZE', # accepts ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #             saturation: 1
    #           },
    #           deinterlacer: {
    #             algorithm: 'INTERPOLATE', # accepts ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #             control: 'FORCE_ALL_FRAMES', # accepts ["FORCE_ALL_FRAMES", "NORMAL"]
    #             mode: 'DEINTERLACE' # accepts ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #           },
    #           dolby_vision: {
    #             l6_metadata: {
    #               max_cll: 1,
    #               max_fall: 1
    #             },
    #             l6_mode: 'PASSTHROUGH', # accepts ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #             mapping: 'HDR10_NOMAP', # accepts ["HDR10_NOMAP", "HDR10_1000"]
    #             profile: 'PROFILE_5' # accepts ["PROFILE_5", "PROFILE_8_1"]
    #           },
    #           hdr10_plus: {
    #             mastering_monitor_nits: 1,
    #             target_monitor_nits: 1
    #           },
    #           image_inserter: {
    #             insertable_images: [
    #               {
    #                 duration: 1,
    #                 fade_in: 1,
    #                 fade_out: 1,
    #                 height: 1,
    #                 image_inserter_input: 'ImageInserterInput',
    #                 image_x: 1,
    #                 image_y: 1,
    #                 layer: 1,
    #                 opacity: 1,
    #                 start_time: 'StartTime',
    #                 width: 1
    #               }
    #             ]
    #           },
    #           noise_reducer: {
    #             filter: 'BILATERAL', # accepts ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #             filter_settings: {
    #               strength: 1
    #             },
    #             spatial_filter_settings: {
    #               post_filter_sharpen_strength: 1,
    #               speed: 1,
    #               strength: 1
    #             },
    #             temporal_filter_settings: {
    #               aggressive_mode: 1,
    #               post_temporal_sharpening: 'DISABLED', # accepts ["DISABLED", "ENABLED", "AUTO"]
    #               post_temporal_sharpening_strength: 'LOW', # accepts ["LOW", "MEDIUM", "HIGH"]
    #               speed: 1,
    #               strength: 1
    #             }
    #           },
    #           partner_watermarking: {
    #             nexguard_file_marker_settings: {
    #               license: 'License',
    #               payload: 1,
    #               preset: 'Preset',
    #               strength: 'LIGHTEST' # accepts ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #             }
    #           },
    #           timecode_burnin: {
    #             font_size: 1,
    #             position: 'TOP_CENTER', # accepts ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #             prefix: 'Prefix'
    #           }
    #         },
    #         width: 1
    #       }
    #     }
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdatePresetOutput
    #   resp.data.preset #=> Types::Preset
    #   resp.data.preset.arn #=> String
    #   resp.data.preset.category #=> String
    #   resp.data.preset.created_at #=> Time
    #   resp.data.preset.description #=> String
    #   resp.data.preset.last_updated #=> Time
    #   resp.data.preset.name #=> String
    #   resp.data.preset.settings #=> Types::PresetSettings
    #   resp.data.preset.settings.audio_descriptions #=> Array<AudioDescription>
    #   resp.data.preset.settings.audio_descriptions[0] #=> Types::AudioDescription
    #   resp.data.preset.settings.audio_descriptions[0].audio_channel_tagging_settings #=> Types::AudioChannelTaggingSettings
    #   resp.data.preset.settings.audio_descriptions[0].audio_channel_tagging_settings.channel_tag #=> String, one of ["L", "R", "C", "LFE", "LS", "RS", "LC", "RC", "CS", "LSD", "RSD", "TCS", "VHL", "VHC", "VHR"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings #=> Types::AudioNormalizationSettings
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.algorithm #=> String, one of ["ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.algorithm_control #=> String, one of ["CORRECT_AUDIO", "MEASURE_ONLY"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.correction_gate_level #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.loudness_logging #=> String, one of ["LOG", "DONT_LOG"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.peak_calculation #=> String, one of ["TRUE_PEAK", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].audio_normalization_settings.target_lkfs #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].audio_source_name #=> String
    #   resp.data.preset.settings.audio_descriptions[0].audio_type #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].audio_type_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings #=> Types::AudioCodecSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings #=> Types::AacSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.audio_description_broadcaster_mix #=> String, one of ["BROADCASTER_MIXED_AD", "NORMAL"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.codec_profile #=> String, one of ["LC", "HEV1", "HEV2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.coding_mode #=> String, one of ["AD_RECEIVER_MIX", "CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_5_1"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.raw_format #=> String, one of ["LATM_LOAS", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.specification #=> String, one of ["MPEG2", "MPEG4"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aac_settings.vbr_quality #=> String, one of ["LOW", "MEDIUM_LOW", "MEDIUM_HIGH", "HIGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings #=> Types::Ac3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "DIALOGUE", "EMERGENCY", "HEARING_IMPAIRED", "MUSIC_AND_EFFECTS", "VISUALLY_IMPAIRED", "VOICE_OVER"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_1_1", "CODING_MODE_2_0", "CODING_MODE_3_2_LFE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dialnorm #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_line #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_profile #=> String, one of ["FILM_STANDARD", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.dynamic_range_compression_rf #=> String, one of ["FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.ac3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings #=> Types::AiffSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.bit_depth #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.aiff_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.codec #=> String, one of ["AAC", "MP2", "MP3", "WAV", "AIFF", "AC3", "EAC3", "EAC3_ATMOS", "VORBIS", "OPUS", "PASSTHROUGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings #=> Types::Eac3AtmosSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.coding_mode #=> String, one of ["CODING_MODE_AUTO", "CODING_MODE_5_1_4", "CODING_MODE_7_1_4", "CODING_MODE_9_1_6"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dialogue_intelligence #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.downmix_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.dynamic_range_control #=> String, one of ["SPECIFIED", "INITIALIZE_FROM_SOURCE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.metering_mode #=> String, one of ["LEQ_A", "ITU_BS_1770_1", "ITU_BS_1770_2", "ITU_BS_1770_3", "ITU_BS_1770_4"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.speech_threshold #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "STEREO", "SURROUND", "DPL2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_atmos_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings #=> Types::Eac3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.attenuation_control #=> String, one of ["ATTENUATE_3_DB", "NONE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.bitstream_mode #=> String, one of ["COMPLETE_MAIN", "COMMENTARY", "EMERGENCY", "HEARING_IMPAIRED", "VISUALLY_IMPAIRED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.coding_mode #=> String, one of ["CODING_MODE_1_0", "CODING_MODE_2_0", "CODING_MODE_3_2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dc_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dialnorm #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_line #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.dynamic_range_compression_rf #=> String, one of ["NONE", "FILM_STANDARD", "FILM_LIGHT", "MUSIC_STANDARD", "MUSIC_LIGHT", "SPEECH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_control #=> String, one of ["LFE", "NO_LFE"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lfe_filter #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lo_ro_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_center_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.lt_rt_surround_mix_level #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.metadata_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.passthrough_control #=> String, one of ["WHEN_POSSIBLE", "NO_PASSTHROUGH"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.phase_control #=> String, one of ["SHIFT_90_DEGREES", "NO_SHIFT"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.stereo_downmix #=> String, one of ["NOT_INDICATED", "LO_RO", "LT_RT", "DPL2"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.surround_ex_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.eac3_settings.surround_mode #=> String, one of ["NOT_INDICATED", "ENABLED", "DISABLED"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings #=> Types::Mp2Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp2_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings #=> Types::Mp3Settings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.rate_control_mode #=> String, one of ["CBR", "VBR"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.mp3_settings.vbr_quality #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings #=> Types::OpusSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.bitrate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.opus_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings #=> Types::VorbisSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.vorbis_settings.vbr_quality #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings #=> Types::WavSettings
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.bit_depth #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.channels #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.format #=> String, one of ["RIFF", "RF64"]
    #   resp.data.preset.settings.audio_descriptions[0].codec_settings.wav_settings.sample_rate #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].custom_language_code #=> String
    #   resp.data.preset.settings.audio_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.preset.settings.audio_descriptions[0].language_code_control #=> String, one of ["FOLLOW_INPUT", "USE_CONFIGURED"]
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings #=> Types::RemixSettings
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping #=> Types::ChannelMapping
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels #=> Array<OutputChannelMapping>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0] #=> Types::OutputChannelMapping
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels #=> Array<Integer>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels[0] #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune #=> Array<Float>
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channel_mapping.output_channels[0].input_channels_fine_tune[0] #=> Float
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channels_in #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].remix_settings.channels_out #=> Integer
    #   resp.data.preset.settings.audio_descriptions[0].stream_name #=> String
    #   resp.data.preset.settings.caption_descriptions #=> Array<CaptionDescriptionPreset>
    #   resp.data.preset.settings.caption_descriptions[0] #=> Types::CaptionDescriptionPreset
    #   resp.data.preset.settings.caption_descriptions[0].custom_language_code #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings #=> Types::CaptionDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings #=> Types::BurninDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.background_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_resolution #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.font_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.hex_font_color #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.outline_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.x_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.burnin_destination_settings.y_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.destination_type #=> String, one of ["BURN_IN", "DVB_SUB", "EMBEDDED", "EMBEDDED_PLUS_SCTE20", "IMSC", "SCTE20_PLUS_EMBEDDED", "SCC", "SRT", "SMI", "TELETEXT", "TTML", "WEBVTT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings #=> Types::DvbSubDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.alignment #=> String, one of ["CENTERED", "LEFT", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.apply_font_color #=> String, one of ["WHITE_TEXT_ONLY", "ALL_TEXT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.background_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_handling #=> String, one of ["NONE", "SPECIFIED", "NO_DISPLAY_WINDOW"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_x_coordinate #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.dds_y_coordinate #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.fallback_font #=> String, one of ["BEST_MATCH", "MONOSPACED_SANSSERIF", "MONOSPACED_SERIF", "PROPORTIONAL_SANSSERIF", "PROPORTIONAL_SERIF"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_color #=> String, one of ["WHITE", "BLACK", "YELLOW", "RED", "GREEN", "BLUE", "HEX", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_resolution #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_script #=> String, one of ["AUTOMATIC", "HANS", "HANT"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.font_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.height #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.hex_font_color #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_color #=> String, one of ["BLACK", "WHITE", "YELLOW", "RED", "GREEN", "BLUE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.outline_size #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_color #=> String, one of ["NONE", "BLACK", "WHITE", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_opacity #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_x_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.shadow_y_offset #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.subtitling_type #=> String, one of ["HEARING_IMPAIRED", "STANDARD"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.teletext_spacing #=> String, one of ["FIXED_GRID", "PROPORTIONAL", "AUTO"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.width #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.x_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.dvb_sub_destination_settings.y_position #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings #=> Types::EmbeddedDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination608_channel_number #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.embedded_destination_settings.destination708_service_number #=> Integer
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings #=> Types::ImscDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.imsc_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.scc_destination_settings #=> Types::SccDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.scc_destination_settings.framerate #=> String, one of ["FRAMERATE_23_97", "FRAMERATE_24", "FRAMERATE_25", "FRAMERATE_29_97_DROPFRAME", "FRAMERATE_29_97_NON_DROPFRAME"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.srt_destination_settings #=> Types::SrtDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.srt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings #=> Types::TeletextDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_number #=> String
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types #=> Array<String>
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.teletext_destination_settings.page_types[0] #=> String, one of ["PAGE_TYPE_INITIAL", "PAGE_TYPE_SUBTITLE", "PAGE_TYPE_ADDL_INFO", "PAGE_TYPE_PROGRAM_SCHEDULE", "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.ttml_destination_settings #=> Types::TtmlDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.ttml_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings #=> Types::WebvttDestinationSettings
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.accessibility #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.caption_descriptions[0].destination_settings.webvtt_destination_settings.style_passthrough #=> String, one of ["ENABLED", "DISABLED", "STRICT"]
    #   resp.data.preset.settings.caption_descriptions[0].language_code #=> String, one of ["ENG", "SPA", "FRA", "DEU", "GER", "ZHO", "ARA", "HIN", "JPN", "RUS", "POR", "ITA", "URD", "VIE", "KOR", "PAN", "ABK", "AAR", "AFR", "AKA", "SQI", "AMH", "ARG", "HYE", "ASM", "AVA", "AVE", "AYM", "AZE", "BAM", "BAK", "EUS", "BEL", "BEN", "BIH", "BIS", "BOS", "BRE", "BUL", "MYA", "CAT", "KHM", "CHA", "CHE", "NYA", "CHU", "CHV", "COR", "COS", "CRE", "HRV", "CES", "DAN", "DIV", "NLD", "DZO", "ENM", "EPO", "EST", "EWE", "FAO", "FIJ", "FIN", "FRM", "FUL", "GLA", "GLG", "LUG", "KAT", "ELL", "GRN", "GUJ", "HAT", "HAU", "HEB", "HER", "HMO", "HUN", "ISL", "IDO", "IBO", "IND", "INA", "ILE", "IKU", "IPK", "GLE", "JAV", "KAL", "KAN", "KAU", "KAS", "KAZ", "KIK", "KIN", "KIR", "KOM", "KON", "KUA", "KUR", "LAO", "LAT", "LAV", "LIM", "LIN", "LIT", "LUB", "LTZ", "MKD", "MLG", "MSA", "MAL", "MLT", "GLV", "MRI", "MAR", "MAH", "MON", "NAU", "NAV", "NDE", "NBL", "NDO", "NEP", "SME", "NOR", "NOB", "NNO", "OCI", "OJI", "ORI", "ORM", "OSS", "PLI", "FAS", "POL", "PUS", "QUE", "QAA", "RON", "ROH", "RUN", "SMO", "SAG", "SAN", "SRD", "SRB", "SNA", "III", "SND", "SIN", "SLK", "SLV", "SOM", "SOT", "SUN", "SWA", "SSW", "SWE", "TGL", "TAH", "TGK", "TAM", "TAT", "TEL", "THA", "BOD", "TIR", "TON", "TSO", "TSN", "TUR", "TUK", "TWI", "UIG", "UKR", "UZB", "VEN", "VOL", "WLN", "CYM", "FRY", "WOL", "XHO", "YID", "YOR", "ZHA", "ZUL", "ORJ", "QPC", "TNG", "SRP"]
    #   resp.data.preset.settings.caption_descriptions[0].language_description #=> String
    #   resp.data.preset.settings.container_settings #=> Types::ContainerSettings
    #   resp.data.preset.settings.container_settings.cmfc_settings #=> Types::CmfcSettings
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_group_id #=> String
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_rendition_sets #=> String
    #   resp.data.preset.settings.container_settings.cmfc_settings.audio_track_type #=> String, one of ["ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT", "ALTERNATE_AUDIO_AUTO_SELECT", "ALTERNATE_AUDIO_NOT_AUTO_SELECT"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.descriptive_video_service_flag #=> String, one of ["DONT_FLAG", "FLAG"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.i_frame_only_manifest #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.cmfc_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.container #=> String, one of ["F4V", "ISMV", "M2TS", "M3U8", "CMFC", "MOV", "MP4", "MPD", "MXF", "WEBM", "RAW"]
    #   resp.data.preset.settings.container_settings.f4v_settings #=> Types::F4vSettings
    #   resp.data.preset.settings.container_settings.f4v_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.preset.settings.container_settings.m2ts_settings #=> Types::M2tsSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_buffer_model #=> String, one of ["DVB", "ATSC"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_frames_per_pes #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m2ts_settings.audio_pids[0] #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.bitrate #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.buffer_model #=> String, one of ["MULTIPLEX", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings #=> Types::DvbNitSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.network_id #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.network_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_nit_settings.nit_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings #=> Types::DvbSdtSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.output_sdt #=> String, one of ["SDT_FOLLOW", "SDT_FOLLOW_IF_PRESENT", "SDT_MANUAL", "SDT_NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.sdt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.service_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sdt_settings.service_provider_name #=> String
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_sub_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_tdt_settings #=> Types::DvbTdtSettings
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_tdt_settings.tdt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.dvb_teletext_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.ebp_audio_interval #=> String, one of ["VIDEO_AND_FIXED_INTERVALS", "VIDEO_INTERVAL"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.ebp_placement #=> String, one of ["VIDEO_AND_AUDIO_PIDS", "VIDEO_PID"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.es_rate_in_pes #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.force_ts_video_ebp_order #=> String, one of ["FORCE", "DEFAULT"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.fragment_time #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.klv_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.max_pcr_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.min_ebp_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.null_packet_bitrate #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.pat_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.pcr_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pmt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.pmt_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.private_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.program_number #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.rate_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_esam #=> Types::M2tsScte35Esam
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_esam.scte35_esam_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_markers #=> String, one of ["NONE", "RAI_SEGSTART", "RAI_ADAPT", "PSI_SEGSTART", "EBP", "EBP_LEGACY"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_style #=> String, one of ["MAINTAIN_CADENCE", "RESET_CADENCE"]
    #   resp.data.preset.settings.container_settings.m2ts_settings.segmentation_time #=> Float
    #   resp.data.preset.settings.container_settings.m2ts_settings.timed_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.transport_stream_id #=> Integer
    #   resp.data.preset.settings.container_settings.m2ts_settings.video_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings #=> Types::M3u8Settings
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_frames_per_pes #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.audio_pids #=> Array<Integer>
    #   resp.data.preset.settings.container_settings.m3u8_settings.data_pts_control #=> String, one of ["AUTO", "ALIGN_TO_VIDEO"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.max_pcr_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.nielsen_id3 #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.pat_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pcr_control #=> String, one of ["PCR_EVERY_PES_PACKET", "CONFIGURED_PCR_PERIOD"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.pcr_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pmt_interval #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.pmt_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.private_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.program_number #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.scte35_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.m3u8_settings.timed_metadata_pid #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.transport_stream_id #=> Integer
    #   resp.data.preset.settings.container_settings.m3u8_settings.video_pid #=> Integer
    #   resp.data.preset.settings.container_settings.mov_settings #=> Types::MovSettings
    #   resp.data.preset.settings.container_settings.mov_settings.clap_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mov_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mov_settings.mpeg2_four_cc_control #=> String, one of ["XDCAM", "MPEG"]
    #   resp.data.preset.settings.container_settings.mov_settings.padding_control #=> String, one of ["OMNEON", "NONE"]
    #   resp.data.preset.settings.container_settings.mov_settings.reference #=> String, one of ["SELF_CONTAINED", "EXTERNAL"]
    #   resp.data.preset.settings.container_settings.mp4_settings #=> Types::Mp4Settings
    #   resp.data.preset.settings.container_settings.mp4_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.mp4_settings.cslg_atom #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mp4_settings.ctts_version #=> Integer
    #   resp.data.preset.settings.container_settings.mp4_settings.free_space_box #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mp4_settings.moov_placement #=> String, one of ["PROGRESSIVE_DOWNLOAD", "NORMAL"]
    #   resp.data.preset.settings.container_settings.mp4_settings.mp4_major_brand #=> String
    #   resp.data.preset.settings.container_settings.mpd_settings #=> Types::MpdSettings
    #   resp.data.preset.settings.container_settings.mpd_settings.accessibility_caption_hints #=> String, one of ["INCLUDE", "EXCLUDE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.audio_duration #=> String, one of ["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    #   resp.data.preset.settings.container_settings.mpd_settings.caption_container_type #=> String, one of ["RAW", "FRAGMENTED_MP4"]
    #   resp.data.preset.settings.container_settings.mpd_settings.klv_metadata #=> String, one of ["NONE", "PASSTHROUGH"]
    #   resp.data.preset.settings.container_settings.mpd_settings.scte35_esam #=> String, one of ["INSERT", "NONE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.scte35_source #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.mpd_settings.timed_metadata #=> String, one of ["PASSTHROUGH", "NONE"]
    #   resp.data.preset.settings.container_settings.mxf_settings #=> Types::MxfSettings
    #   resp.data.preset.settings.container_settings.mxf_settings.afd_signaling #=> String, one of ["NO_COPY", "COPY_FROM_VIDEO"]
    #   resp.data.preset.settings.container_settings.mxf_settings.profile #=> String, one of ["D_10", "XDCAM", "OP1A", "XAVC"]
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings #=> Types::MxfXavcProfileSettings
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings.duration_mode #=> String, one of ["ALLOW_ANY_DURATION", "DROP_FRAMES_FOR_COMPLIANCE"]
    #   resp.data.preset.settings.container_settings.mxf_settings.xavc_profile_settings.max_anc_data_size #=> Integer
    #   resp.data.preset.settings.video_description #=> Types::VideoDescription
    #   resp.data.preset.settings.video_description.afd_signaling #=> String, one of ["NONE", "AUTO", "FIXED"]
    #   resp.data.preset.settings.video_description.anti_alias #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings #=> Types::VideoCodecSettings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings #=> Types::Av1Settings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.bit_depth #=> String, one of ["BIT_8", "BIT_10"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings #=> Types::Av1QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.rate_control_mode #=> String, one of ["QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.av1_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings #=> Types::AvcIntraSettings
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200", "CLASS_4K_2K"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings #=> Types::AvcIntraUhdSettings
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.avc_intra_uhd_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.avc_intra_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.codec #=> String, one of ["AV1", "AVC_INTRA", "FRAME_CAPTURE", "H_264", "H_265", "MPEG2", "PRORES", "VC3", "VP8", "VP9", "XAVC"]
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings #=> Types::FrameCaptureSettings
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.max_captures #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.frame_capture_settings.quality #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings #=> Types::H264Settings
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_1_1", "LEVEL_1_2", "LEVEL_1_3", "LEVEL_2", "LEVEL_2_1", "LEVEL_2_2", "LEVEL_3", "LEVEL_3_1", "LEVEL_3_2", "LEVEL_4", "LEVEL_4_1", "LEVEL_4_2", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.codec_profile #=> String, one of ["BASELINE", "HIGH", "HIGH_10BIT", "HIGH_422", "HIGH_422_10BIT", "MAIN"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.entropy_encoding #=> String, one of ["CABAC", "CAVLC"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.field_encoding #=> String, one of ["PAFF", "FORCE_FIELD", "MBAFF"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.number_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings #=> Types::H264QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.repeat_pps #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.syntax #=> String, one of ["DEFAULT", "RP2027"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h264_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings #=> Types::H265Settings
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.alternate_transfer_function_sei #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.codec_level #=> String, one of ["AUTO", "LEVEL_1", "LEVEL_2", "LEVEL_2_1", "LEVEL_3", "LEVEL_3_1", "LEVEL_4", "LEVEL_4_1", "LEVEL_5", "LEVEL_5_1", "LEVEL_5_2", "LEVEL_6", "LEVEL_6_1", "LEVEL_6_2"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.codec_profile #=> String, one of ["MAIN_MAIN", "MAIN_HIGH", "MAIN10_MAIN", "MAIN10_HIGH", "MAIN_422_8BIT_MAIN", "MAIN_422_8BIT_HIGH", "MAIN_422_10BIT_MAIN", "MAIN_422_10BIT_HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS", "AUTO"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.number_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings #=> Types::H265QvbrSettings
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.max_average_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.qvbr_settings.qvbr_quality_level_fine_tune #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.rate_control_mode #=> String, one of ["VBR", "CBR", "QVBR"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.sample_adaptive_offset_filter_mode #=> String, one of ["DEFAULT", "ADAPTIVE", "OFF"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED", "TRANSITION_DETECTION"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.temporal_ids #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.tiles #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.unregistered_sei_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.h265_settings.write_mp4_packaging_type #=> String, one of ["HVC1", "HEV1"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings #=> Types::Mpeg2Settings
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.adaptive_quantization #=> String, one of ["OFF", "LOW", "MEDIUM", "HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.codec_level #=> String, one of ["AUTO", "LOW", "MAIN", "HIGH1440", "HIGH"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.codec_profile #=> String, one of ["MAIN", "PROFILE_422"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.dynamic_sub_gop #=> String, one of ["ADAPTIVE", "STATIC"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.gop_size_units #=> String, one of ["FRAMES", "SECONDS"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_initial_fill_percentage #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.intra_dc_precision #=> String, one of ["AUTO", "INTRA_DC_PRECISION_8", "INTRA_DC_PRECISION_9", "INTRA_DC_PRECISION_10", "INTRA_DC_PRECISION_11"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.min_i_interval #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.number_b_frames_between_reference_frames #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "MULTI_PASS"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.rate_control_mode #=> String, one of ["VBR", "CBR"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.scene_change_detect #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.syntax #=> String, one of ["DEFAULT", "D_10"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.telecine #=> String, one of ["NONE", "SOFT", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.mpeg2_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings #=> Types::ProresSettings
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.chroma_sampling #=> String, one of ["PRESERVE_444_SAMPLING", "SUBSAMPLE_TO_422"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.codec_profile #=> String, one of ["APPLE_PRORES_422", "APPLE_PRORES_422_HQ", "APPLE_PRORES_422_LT", "APPLE_PRORES_422_PROXY", "APPLE_PRORES_4444", "APPLE_PRORES_4444_XQ"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.prores_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings #=> Types::Vc3Settings
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.interlace_mode #=> String, one of ["INTERLACED", "PROGRESSIVE"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.scan_type_conversion_mode #=> String, one of ["INTERLACED", "INTERLACED_OPTIMIZE"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.codec_settings.vc3_settings.vc3_class #=> String, one of ["CLASS_145_8BIT", "CLASS_220_8BIT", "CLASS_220_10BIT"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings #=> Types::Vp8Settings
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.vp8_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings #=> Types::Vp9Settings
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.gop_size #=> Float
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.max_bitrate #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.par_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.quality_tuning_level #=> String, one of ["MULTI_PASS", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.vp9_settings.rate_control_mode #=> String, one of ["VBR"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings #=> Types::XavcSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.adaptive_quantization #=> String, one of ["OFF", "AUTO", "LOW", "MEDIUM", "HIGH", "HIGHER", "MAX"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.entropy_encoding #=> String, one of ["AUTO", "CABAC", "CAVLC"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_control #=> String, one of ["INITIALIZE_FROM_SOURCE", "SPECIFIED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_conversion_algorithm #=> String, one of ["DUPLICATE_DROP", "INTERPOLATE", "FRAMEFORMER"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_denominator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.framerate_numerator #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.profile #=> String, one of ["XAVC_HD_INTRA_CBG", "XAVC_4K_INTRA_CBG", "XAVC_4K_INTRA_VBR", "XAVC_HD", "XAVC_4K"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.slow_pal #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.softness #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.spatial_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.temporal_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings #=> Types::Xavc4kIntraCbgProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings #=> Types::Xavc4kIntraVbrProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_intra_vbr_profile_settings.xavc_class #=> String, one of ["CLASS_100", "CLASS_300", "CLASS_480"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings #=> Types::Xavc4kProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_100", "BITRATE_CLASS_140", "BITRATE_CLASS_200"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.codec_profile #=> String, one of ["HIGH", "HIGH_422"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc4k_profile_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings #=> Types::XavcHdIntraCbgProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_intra_cbg_profile_settings.xavc_class #=> String, one of ["CLASS_50", "CLASS_100", "CLASS_200"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings #=> Types::XavcHdProfileSettings
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.bitrate_class #=> String, one of ["BITRATE_CLASS_25", "BITRATE_CLASS_35", "BITRATE_CLASS_50"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.flicker_adaptive_quantization #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_b_reference #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.gop_closed_cadence #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.hrd_buffer_size #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.interlace_mode #=> String, one of ["PROGRESSIVE", "TOP_FIELD", "BOTTOM_FIELD", "FOLLOW_TOP_FIELD", "FOLLOW_BOTTOM_FIELD"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.quality_tuning_level #=> String, one of ["SINGLE_PASS", "SINGLE_PASS_HQ", "MULTI_PASS_HQ"]
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.slices #=> Integer
    #   resp.data.preset.settings.video_description.codec_settings.xavc_settings.xavc_hd_profile_settings.telecine #=> String, one of ["NONE", "HARD"]
    #   resp.data.preset.settings.video_description.color_metadata #=> String, one of ["IGNORE", "INSERT"]
    #   resp.data.preset.settings.video_description.crop #=> Types::Rectangle
    #   resp.data.preset.settings.video_description.crop.height #=> Integer
    #   resp.data.preset.settings.video_description.crop.width #=> Integer
    #   resp.data.preset.settings.video_description.crop.x #=> Integer
    #   resp.data.preset.settings.video_description.crop.y #=> Integer
    #   resp.data.preset.settings.video_description.drop_frame_timecode #=> String, one of ["DISABLED", "ENABLED"]
    #   resp.data.preset.settings.video_description.fixed_afd #=> Integer
    #   resp.data.preset.settings.video_description.height #=> Integer
    #   resp.data.preset.settings.video_description.position #=> Types::Rectangle
    #   resp.data.preset.settings.video_description.respond_to_afd #=> String, one of ["NONE", "RESPOND", "PASSTHROUGH"]
    #   resp.data.preset.settings.video_description.scaling_behavior #=> String, one of ["DEFAULT", "STRETCH_TO_OUTPUT"]
    #   resp.data.preset.settings.video_description.sharpness #=> Integer
    #   resp.data.preset.settings.video_description.timecode_insertion #=> String, one of ["DISABLED", "PIC_TIMING_SEI"]
    #   resp.data.preset.settings.video_description.video_preprocessors #=> Types::VideoPreprocessor
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector #=> Types::ColorCorrector
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.brightness #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.color_space_conversion #=> String, one of ["NONE", "FORCE_601", "FORCE_709", "FORCE_HDR10", "FORCE_HLG_2020"]
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.contrast #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata #=> Types::Hdr10Metadata
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.blue_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.green_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_content_light_level #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_frame_average_light_level #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.max_luminance #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.min_luminance #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.red_primary_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hdr10_metadata.white_point_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.hue #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.sample_range_conversion #=> String, one of ["LIMITED_RANGE_SQUEEZE", "NONE"]
    #   resp.data.preset.settings.video_description.video_preprocessors.color_corrector.saturation #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer #=> Types::Deinterlacer
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.algorithm #=> String, one of ["INTERPOLATE", "INTERPOLATE_TICKER", "BLEND", "BLEND_TICKER"]
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.control #=> String, one of ["FORCE_ALL_FRAMES", "NORMAL"]
    #   resp.data.preset.settings.video_description.video_preprocessors.deinterlacer.mode #=> String, one of ["DEINTERLACE", "INVERSE_TELECINE", "ADAPTIVE"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision #=> Types::DolbyVision
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata #=> Types::DolbyVisionLevel6Metadata
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_cll #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_metadata.max_fall #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.l6_mode #=> String, one of ["PASSTHROUGH", "RECALCULATE", "SPECIFY"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.mapping #=> String, one of ["HDR10_NOMAP", "HDR10_1000"]
    #   resp.data.preset.settings.video_description.video_preprocessors.dolby_vision.profile #=> String, one of ["PROFILE_5", "PROFILE_8_1"]
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus #=> Types::Hdr10Plus
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus.mastering_monitor_nits #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.hdr10_plus.target_monitor_nits #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter #=> Types::ImageInserter
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images #=> Array<InsertableImage>
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0] #=> Types::InsertableImage
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].duration #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_in #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].fade_out #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].height #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_inserter_input #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_x #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].image_y #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].layer #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].opacity #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].start_time #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.image_inserter.insertable_images[0].width #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer #=> Types::NoiseReducer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter #=> String, one of ["BILATERAL", "MEAN", "GAUSSIAN", "LANCZOS", "SHARPEN", "CONSERVE", "SPATIAL", "TEMPORAL"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter_settings #=> Types::NoiseReducerFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings #=> Types::NoiseReducerSpatialFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.post_filter_sharpen_strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.speed #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.spatial_filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings #=> Types::NoiseReducerTemporalFilterSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.aggressive_mode #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening #=> String, one of ["DISABLED", "ENABLED", "AUTO"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.post_temporal_sharpening_strength #=> String, one of ["LOW", "MEDIUM", "HIGH"]
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.speed #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.noise_reducer.temporal_filter_settings.strength #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking #=> Types::PartnerWatermarking
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings #=> Types::NexGuardFileMarkerSettings
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.license #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.payload #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.preset #=> String
    #   resp.data.preset.settings.video_description.video_preprocessors.partner_watermarking.nexguard_file_marker_settings.strength #=> String, one of ["LIGHTEST", "LIGHTER", "DEFAULT", "STRONGER", "STRONGEST"]
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin #=> Types::TimecodeBurnin
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.font_size #=> Integer
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.position #=> String, one of ["TOP_CENTER", "TOP_LEFT", "TOP_RIGHT", "MIDDLE_LEFT", "MIDDLE_CENTER", "MIDDLE_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT"]
    #   resp.data.preset.settings.video_description.video_preprocessors.timecode_burnin.prefix #=> String
    #   resp.data.preset.settings.video_description.width #=> Integer
    #   resp.data.preset.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def update_preset(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdatePresetInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdatePresetInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdatePreset
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::UpdatePreset
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdatePreset,
        stubs: @stubs,
        params_class: Params::UpdatePresetOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_preset
        )
      )
      raise resp.error if resp.error
      resp
    end

    # Modify one of your existing queues.
    #
    # @param [Hash] params
    #   See {Types::UpdateQueueInput}.
    #
    # @option params [String] :description
    #   The new description for the queue, if you are changing it.
    #
    # @option params [String] :name
    #   The name of the queue that you are modifying.
    #
    # @option params [ReservationPlanSettings] :reservation_plan_settings
    #   The new details of your pricing plan for your reserved queue. When you set up a new pricing plan to replace an expired one, you enter into another 12-month commitment. When you add capacity to your queue by increasing the number of RTS, you extend the term of your commitment to 12 months from when you add capacity. After you make these commitments, you can't cancel them.
    #
    # @option params [String] :status
    #   Pause or activate a queue by changing its status between ACTIVE and PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause the queue continue to run until they finish or result in an error.
    #
    # @return [Types::UpdateQueueOutput]
    #
    # @example Request syntax with placeholder values
    #
    #   resp = client.update_queue(
    #     description: 'Description',
    #     name: 'Name', # required
    #     reservation_plan_settings: {
    #       commitment: 'ONE_YEAR', # required - accepts ["ONE_YEAR"]
    #       renewal_type: 'AUTO_RENEW', # required - accepts ["AUTO_RENEW", "EXPIRE"]
    #       reserved_slots: 1 # required
    #     },
    #     status: 'ACTIVE' # accepts ["ACTIVE", "PAUSED"]
    #   )
    #
    # @example Response structure
    #
    #   resp.data #=> Types::UpdateQueueOutput
    #   resp.data.queue #=> Types::Queue
    #   resp.data.queue.arn #=> String
    #   resp.data.queue.created_at #=> Time
    #   resp.data.queue.description #=> String
    #   resp.data.queue.last_updated #=> Time
    #   resp.data.queue.name #=> String
    #   resp.data.queue.pricing_plan #=> String, one of ["ON_DEMAND", "RESERVED"]
    #   resp.data.queue.progressing_jobs_count #=> Integer
    #   resp.data.queue.reservation_plan #=> Types::ReservationPlan
    #   resp.data.queue.reservation_plan.commitment #=> String, one of ["ONE_YEAR"]
    #   resp.data.queue.reservation_plan.expires_at #=> Time
    #   resp.data.queue.reservation_plan.purchased_at #=> Time
    #   resp.data.queue.reservation_plan.renewal_type #=> String, one of ["AUTO_RENEW", "EXPIRE"]
    #   resp.data.queue.reservation_plan.reserved_slots #=> Integer
    #   resp.data.queue.reservation_plan.status #=> String, one of ["ACTIVE", "EXPIRED"]
    #   resp.data.queue.status #=> String, one of ["ACTIVE", "PAUSED"]
    #   resp.data.queue.submitted_jobs_count #=> Integer
    #   resp.data.queue.type #=> String, one of ["SYSTEM", "CUSTOM"]
    #
    def update_queue(params = {}, options = {}, &block)
      stack = Hearth::MiddlewareStack.new
      input = Params::UpdateQueueInput.build(params)
      response_body = ::StringIO.new
      stack.use(Hearth::Middleware::Validate,
        validator: Validators::UpdateQueueInput,
        validate_input: @config.validate_input
      )
      stack.use(Hearth::Middleware::Build,
        builder: Builders::UpdateQueue
      )
      stack.use(Hearth::HTTP::Middleware::ContentLength)
      stack.use(Hearth::Middleware::Retry,
        retry_mode: @config.retry_mode,
        error_inspector_class: Hearth::Retry::ErrorInspector,
        retry_quota: @retry_quota,
        max_attempts: @config.max_attempts,
        client_rate_limiter: @client_rate_limiter,
        adaptive_retry_wait_to_fill: @config.adaptive_retry_wait_to_fill
      )
      stack.use(AWS::SDK::Core::Middleware::Signer,
        signer: @config.signer
      )
      stack.use(Hearth::Middleware::Parse,
        error_parser: Hearth::HTTP::ErrorParser.new(error_module: Errors, success_status: 200, errors: [Errors::TooManyRequestsException, Errors::InternalServerErrorException, Errors::NotFoundException, Errors::ConflictException, Errors::ForbiddenException, Errors::BadRequestException]),
        data_parser: Parsers::UpdateQueue
      )
      stack.use(Middleware::RequestId)
      stack.use(Hearth::Middleware::Send,
        stub_responses: @config.stub_responses,
        client: Hearth::HTTP::Client.new(logger: @config.logger, http_wire_trace: options.fetch(:http_wire_trace, @config.http_wire_trace)),
        stub_class: Stubs::UpdateQueue,
        stubs: @stubs,
        params_class: Params::UpdateQueueOutput
      )
      apply_middleware(stack, options[:middleware])

      resp = stack.run(
        input: input,
        context: Hearth::Context.new(
          request: Hearth::HTTP::Request.new(url: options.fetch(:endpoint, @config.endpoint)),
          response: Hearth::HTTP::Response.new(body: response_body),
          params: params,
          logger: @config.logger,
          operation_name: :update_queue
        )
      )
      raise resp.error if resp.error
      resp
    end

    private

    def apply_middleware(middleware_stack, middleware)
      Client.middleware.apply(middleware_stack)
      @middleware.apply(middleware_stack)
      Hearth::MiddlewareBuilder.new(middleware).apply(middleware_stack)
    end
  end
end
