# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::Identitystore
  module Types

    # <p>You do not have sufficient access to perform this action.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    # @!attribute request_id
    #   <p>The identifier for each request. This value is a globally unique ID that is generated by the Identity Store service for each sent request, and is then returned inside the exception if the request fails.</p>
    #
    #   @return [String]
    #
    AccessDeniedException = ::Struct.new(
      :message,
      :request_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute identity_store_id
    #   <p>The globally unique identifier for the identity store, such as
    #            <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
    #               <code>1234567890</code> is a randomly generated string that contains number and lower
    #            case letters. This value is generated at the time that a new identity store is
    #            created.</p>
    #
    #   @return [String]
    #
    # @!attribute group_id
    #   <p>The identifier for a group in the identity store.</p>
    #
    #   @return [String]
    #
    DescribeGroupInput = ::Struct.new(
      :identity_store_id,
      :group_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute group_id
    #   <p>The identifier for a group in the identity store.</p>
    #
    #   @return [String]
    #
    # @!attribute display_name
    #   <p>Contains the group’s display name value. The length limit is 1,024 characters. This
    #            value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new
    #            line, carriage return, space, and nonbreaking space in this attribute. The characters
    #               <code><>;:%</code> are excluded. This value is specified at the time that the
    #            group is created and stored as an attribute of the group object in the identity
    #            store.</p>
    #
    #   @return [String]
    #
    DescribeGroupOutput = ::Struct.new(
      :group_id,
      :display_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute identity_store_id
    #   <p>The globally unique identifier for the identity store, such as
    #            <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
    #               <code>1234567890</code> is a randomly generated string that contains number and lower
    #            case letters. This value is generated at the time that a new identity store is
    #            created.</p>
    #
    #   @return [String]
    #
    # @!attribute user_id
    #   <p>The identifier for a user in the identity store.</p>
    #
    #   @return [String]
    #
    DescribeUserInput = ::Struct.new(
      :identity_store_id,
      :user_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute user_name
    #   <p>Contains the user’s user name value. The length limit is 128 characters. This value can
    #            consist of letters, accented characters, symbols, numbers, and punctuation. The characters
    #               <code><>;:%</code> are excluded. This value is specified at the time the user is
    #            created and stored as an attribute of the user object in the identity store.</p>
    #
    #   @return [String]
    #
    # @!attribute user_id
    #   <p>The identifier for a user in the identity store.</p>
    #
    #   @return [String]
    #
    DescribeUserOutput = ::Struct.new(
      :user_name,
      :user_id,
      keyword_init: true
    ) do
      include Hearth::Structure

      def to_s
        "#<struct AWS::SDK::Identitystore::Types::DescribeUserOutput "\
          "user_name=\"[SENSITIVE]\", "\
          "user_id=#{user_id || 'nil'}>"
      end
    end

    # <p>A query filter used by <code>ListUsers</code> and <code>ListGroup</code>. This filter object provides the attribute name and attribute value to
    #          search users or groups.</p>
    #
    # @!attribute attribute_path
    #   <p>The attribute path that is used to specify which attribute name to search. Length limit
    #            is 255 characters. For example, <code>UserName</code> is a valid attribute path for the
    #               <code>ListUsers</code> API, and <code>DisplayName</code> is a valid attribute path for
    #            the <code>ListGroups</code> API.</p>
    #
    #   @return [String]
    #
    # @!attribute attribute_value
    #   <p>Represents the data for an attribute. Each attribute value is described as a name-value pair. </p>
    #
    #   @return [String]
    #
    Filter = ::Struct.new(
      :attribute_path,
      :attribute_value,
      keyword_init: true
    ) do
      include Hearth::Structure

      def to_s
        "#<struct AWS::SDK::Identitystore::Types::Filter "\
          "attribute_path=#{attribute_path || 'nil'}, "\
          "attribute_value=\"[SENSITIVE]\">"
      end
    end

    # <p>A group object, which contains a specified group’s metadata and attributes.</p>
    #
    # @!attribute group_id
    #   <p>The identifier for a group in the identity store.</p>
    #
    #   @return [String]
    #
    # @!attribute display_name
    #   <p>Contains the group’s display name value. The length limit is 1,024 characters. This
    #            value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new
    #            line, carriage return, space, and nonbreaking space in this attribute. The characters
    #               <code><>;:%</code> are excluded. This value is specified at the time the group
    #            is created and stored as an attribute of the group object in the identity store.</p>
    #
    #   @return [String]
    #
    Group = ::Struct.new(
      :group_id,
      :display_name,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>The request processing has failed because of an unknown error, exception or failure with an internal server.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    # @!attribute request_id
    #   <p>The identifier for each request. This value is a globally unique ID that is generated by the Identity Store service for each sent request, and is then returned inside the exception if the request fails.</p>
    #
    #   @return [String]
    #
    InternalServerException = ::Struct.new(
      :message,
      :request_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute identity_store_id
    #   <p>The globally unique identifier for the identity store, such as
    #            <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
    #               <code>1234567890</code> is a randomly generated string that contains number and lower
    #            case letters. This value is generated at the time that a new identity store is
    #            created.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of results to be returned per request. This parameter is used in the
    #               <code>ListUsers</code> and <code>ListGroups</code> request to specify how many results
    #            to return in one page. The length limit is 50 characters.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
    #            operations. This value is generated by the identity store service. It is returned in the
    #            API response if the total results are more than the size of one page. This token is also
    #            returned when it is used in the API request to search for the next page.</p>
    #
    #   @return [String]
    #
    # @!attribute filters
    #   <p>A list of <code>Filter</code> objects, which is used in the <code>ListUsers</code> and <code>ListGroups</code> request. </p>
    #
    #   @return [Array<Filter>]
    #
    ListGroupsInput = ::Struct.new(
      :identity_store_id,
      :max_results,
      :next_token,
      :filters,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute groups
    #   <p>A list of <code>Group</code> objects in the identity store.</p>
    #
    #   @return [Array<Group>]
    #
    # @!attribute next_token
    #   <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
    #            operations. This value is generated by the identity store service. It is returned in the
    #            API response if the total results are more than the size of one page. This token is also
    #            returned when it1 is used in the API request to search for the next page.</p>
    #
    #   @return [String]
    #
    ListGroupsOutput = ::Struct.new(
      :groups,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute identity_store_id
    #   <p>The globally unique identifier for the identity store, such as
    #            <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
    #               <code>1234567890</code> is a randomly generated string that contains number and lower
    #            case letters. This value is generated at the time that a new identity store is
    #            created.</p>
    #
    #   @return [String]
    #
    # @!attribute max_results
    #   <p>The maximum number of results to be returned per request. This parameter is used in the
    #               <code>ListUsers</code> and <code>ListGroups</code> request to specify how many results
    #            to return in one page. The length limit is 50 characters.</p>
    #
    #   @return [Integer]
    #
    # @!attribute next_token
    #   <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
    #            operations. This value is generated by the identity store service. It is returned in the
    #            API response if the total results are more than the size of one page. This token is also
    #            returned when it is used in the API request to search for the next page.</p>
    #
    #   @return [String]
    #
    # @!attribute filters
    #   <p>A list of <code>Filter</code> objects, which is used in the <code>ListUsers</code> and <code>ListGroups</code> request. </p>
    #
    #   @return [Array<Filter>]
    #
    ListUsersInput = ::Struct.new(
      :identity_store_id,
      :max_results,
      :next_token,
      :filters,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # @!attribute users
    #   <p>A list of <code>User</code> objects in the identity store.</p>
    #
    #   @return [Array<User>]
    #
    # @!attribute next_token
    #   <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
    #            operations. This value is generated by the identity store service. It is returned in the
    #            API response if the total results are more than the size of one page. This token is also
    #            returned when it is used in the API request to search for the next page.</p>
    #
    #   @return [String]
    #
    ListUsersOutput = ::Struct.new(
      :users,
      :next_token,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>Indicates that a requested resource is not found.</p>
    #
    # @!attribute resource_type
    #   <p>The type of resource in the Identity Store service, which is an enum object. Valid values include USER, GROUP, and IDENTITY_STORE.</p>
    #
    #   Enum, one of: ["GROUP", "USER", "IDENTITY_STORE"]
    #
    #   @return [String]
    #
    # @!attribute resource_id
    #   <p>The identifier for a resource in the identity store, which can be used as <code>UserId</code> or <code>GroupId</code>. The format for <code>ResourceId</code> is either <code>UUID</code> or <code>1234567890-UUID</code>, where <code>UUID</code> is a randomly generated value for each resource when it is created and <code>1234567890</code> represents the <code>IdentityStoreId</code> string value. In the case that the identity store is migrated from a legacy SSO identity store, the <code>ResourceId</code> for that identity store will be in the format of <code>UUID</code>. Otherwise, it will be in the <code>1234567890-UUID</code> format.</p>
    #
    #   @return [String]
    #
    # @!attribute message
    #
    #   @return [String]
    #
    # @!attribute request_id
    #   <p>The identifier for each request. This value is a globally unique ID that is generated by the Identity Store service for each sent request, and is then returned inside the exception if the request fails.</p>
    #
    #   @return [String]
    #
    ResourceNotFoundException = ::Struct.new(
      :resource_type,
      :resource_id,
      :message,
      :request_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # Includes enum constants for ResourceType
    #
    module ResourceType
      # No documentation available.
      #
      GROUP = "GROUP"

      # No documentation available.
      #
      USER = "USER"

      # No documentation available.
      #
      IDENTITY_STORE = "IDENTITY_STORE"
    end

    # <p>Indicates that the principal has crossed the throttling limits of the API operations.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    # @!attribute request_id
    #   <p>The identifier for each request. This value is a globally unique ID that is generated by the Identity Store service for each sent request, and is then returned inside the exception if the request fails.</p>
    #
    #   @return [String]
    #
    ThrottlingException = ::Struct.new(
      :message,
      :request_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

    # <p>A user object, which contains a specified user’s metadata and attributes.</p>
    #
    # @!attribute user_name
    #   <p>Contains the user’s user name value. The length limit is 128 characters. This value can
    #            consist of letters, accented characters, symbols, numbers, and punctuation. The characters
    #               <code><>;:%</code> are excluded. This value is specified at the time the user is
    #            created and stored as an attribute of the user object in the identity store.</p>
    #
    #   @return [String]
    #
    # @!attribute user_id
    #   <p>The identifier for a user in the identity store.</p>
    #
    #   @return [String]
    #
    User = ::Struct.new(
      :user_name,
      :user_id,
      keyword_init: true
    ) do
      include Hearth::Structure

      def to_s
        "#<struct AWS::SDK::Identitystore::Types::User "\
          "user_name=\"[SENSITIVE]\", "\
          "user_id=#{user_id || 'nil'}>"
      end
    end

    # <p>The request failed because it contains a syntax error.</p>
    #
    # @!attribute message
    #
    #   @return [String]
    #
    # @!attribute request_id
    #   <p>The identifier for each request. This value is a globally unique ID that is generated by the Identity Store service for each sent request, and is then returned inside the exception if the request fails.</p>
    #
    #   @return [String]
    #
    ValidationException = ::Struct.new(
      :message,
      :request_id,
      keyword_init: true
    ) do
      include Hearth::Structure
    end

  end
end
