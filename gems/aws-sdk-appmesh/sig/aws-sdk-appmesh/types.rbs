# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::AppMesh
  module Types

    class AccessLog < Hearth::Union
      class File < AccessLog
        def to_h: () -> { file: Hash[Symbol,AccessLog] }
      end

      class Unknown < AccessLog
        def to_h: () -> { unknown: Hash[Symbol,AccessLog] }
      end
    end

    AwsCloudMapInstanceAttribute: untyped

    AwsCloudMapServiceDiscovery: untyped

    class Backend < Hearth::Union
      class VirtualService < Backend
        def to_h: () -> { virtual_service: Hash[Symbol,Backend] }
      end

      class Unknown < Backend
        def to_h: () -> { unknown: Hash[Symbol,Backend] }
      end
    end

    BackendDefaults: untyped

    BadRequestException: untyped

    ClientPolicy: untyped

    ClientPolicyTls: untyped

    class ClientTlsCertificate < Hearth::Union
      class File < ClientTlsCertificate
        def to_h: () -> { file: Hash[Symbol,ClientTlsCertificate] }
      end

      class Sds < ClientTlsCertificate
        def to_h: () -> { sds: Hash[Symbol,ClientTlsCertificate] }
      end

      class Unknown < ClientTlsCertificate
        def to_h: () -> { unknown: Hash[Symbol,ClientTlsCertificate] }
      end
    end

    ConflictException: untyped

    CreateGatewayRouteInput: untyped

    CreateGatewayRouteOutput: untyped

    CreateMeshInput: untyped

    CreateMeshOutput: untyped

    CreateRouteInput: untyped

    CreateRouteOutput: untyped

    CreateVirtualGatewayInput: untyped

    CreateVirtualGatewayOutput: untyped

    CreateVirtualNodeInput: untyped

    CreateVirtualNodeOutput: untyped

    CreateVirtualRouterInput: untyped

    CreateVirtualRouterOutput: untyped

    CreateVirtualServiceInput: untyped

    CreateVirtualServiceOutput: untyped

    module DefaultGatewayRouteRewrite
      ENABLED: ::String

      DISABLED: ::String
    end

    DeleteGatewayRouteInput: untyped

    DeleteGatewayRouteOutput: untyped

    DeleteMeshInput: untyped

    DeleteMeshOutput: untyped

    DeleteRouteInput: untyped

    DeleteRouteOutput: untyped

    DeleteVirtualGatewayInput: untyped

    DeleteVirtualGatewayOutput: untyped

    DeleteVirtualNodeInput: untyped

    DeleteVirtualNodeOutput: untyped

    DeleteVirtualRouterInput: untyped

    DeleteVirtualRouterOutput: untyped

    DeleteVirtualServiceInput: untyped

    DeleteVirtualServiceOutput: untyped

    DescribeGatewayRouteInput: untyped

    DescribeGatewayRouteOutput: untyped

    DescribeMeshInput: untyped

    DescribeMeshOutput: untyped

    DescribeRouteInput: untyped

    DescribeRouteOutput: untyped

    DescribeVirtualGatewayInput: untyped

    DescribeVirtualGatewayOutput: untyped

    DescribeVirtualNodeInput: untyped

    DescribeVirtualNodeOutput: untyped

    DescribeVirtualRouterInput: untyped

    DescribeVirtualRouterOutput: untyped

    DescribeVirtualServiceInput: untyped

    DescribeVirtualServiceOutput: untyped

    module DnsResponseType
      LOADBALANCER: ::String

      ENDPOINTS: ::String
    end

    DnsServiceDiscovery: untyped

    Duration: untyped

    module DurationUnit
      S: ::String

      MS: ::String
    end

    EgressFilter: untyped

    module EgressFilterType
      ALLOW_ALL: ::String

      DROP_ALL: ::String
    end

    FileAccessLog: untyped

    ForbiddenException: untyped

    GatewayRouteData: untyped

    GatewayRouteHostnameMatch: untyped

    GatewayRouteHostnameRewrite: untyped

    GatewayRouteRef: untyped

    GatewayRouteSpec: untyped

    GatewayRouteStatus: untyped

    module GatewayRouteStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    GatewayRouteTarget: untyped

    GatewayRouteVirtualService: untyped

    GrpcGatewayRoute: untyped

    GrpcGatewayRouteAction: untyped

    GrpcGatewayRouteMatch: untyped

    GrpcGatewayRouteMetadata: untyped

    GrpcGatewayRouteRewrite: untyped

    class GrpcMetadataMatchMethod < Hearth::Union
      class Exact < GrpcMetadataMatchMethod
        def to_h: () -> { exact: Hash[Symbol,GrpcMetadataMatchMethod] }
      end

      class Regex < GrpcMetadataMatchMethod
        def to_h: () -> { regex: Hash[Symbol,GrpcMetadataMatchMethod] }
      end

      class Range < GrpcMetadataMatchMethod
        def to_h: () -> { range: Hash[Symbol,GrpcMetadataMatchMethod] }
      end

      class Prefix < GrpcMetadataMatchMethod
        def to_h: () -> { prefix: Hash[Symbol,GrpcMetadataMatchMethod] }
      end

      class Suffix < GrpcMetadataMatchMethod
        def to_h: () -> { suffix: Hash[Symbol,GrpcMetadataMatchMethod] }
      end

      class Unknown < GrpcMetadataMatchMethod
        def to_h: () -> { unknown: Hash[Symbol,GrpcMetadataMatchMethod] }
      end
    end

    GrpcRetryPolicy: untyped

    module GrpcRetryPolicyEvent
      CANCELLED: ::String

      DEADLINE_EXCEEDED: ::String

      INTERNAL: ::String

      RESOURCE_EXHAUSTED: ::String

      UNAVAILABLE: ::String
    end

    GrpcRoute: untyped

    GrpcRouteAction: untyped

    GrpcRouteMatch: untyped

    GrpcRouteMetadata: untyped

    class GrpcRouteMetadataMatchMethod < Hearth::Union
      class Exact < GrpcRouteMetadataMatchMethod
        def to_h: () -> { exact: Hash[Symbol,GrpcRouteMetadataMatchMethod] }
      end

      class Regex < GrpcRouteMetadataMatchMethod
        def to_h: () -> { regex: Hash[Symbol,GrpcRouteMetadataMatchMethod] }
      end

      class Range < GrpcRouteMetadataMatchMethod
        def to_h: () -> { range: Hash[Symbol,GrpcRouteMetadataMatchMethod] }
      end

      class Prefix < GrpcRouteMetadataMatchMethod
        def to_h: () -> { prefix: Hash[Symbol,GrpcRouteMetadataMatchMethod] }
      end

      class Suffix < GrpcRouteMetadataMatchMethod
        def to_h: () -> { suffix: Hash[Symbol,GrpcRouteMetadataMatchMethod] }
      end

      class Unknown < GrpcRouteMetadataMatchMethod
        def to_h: () -> { unknown: Hash[Symbol,GrpcRouteMetadataMatchMethod] }
      end
    end

    GrpcTimeout: untyped

    class HeaderMatchMethod < Hearth::Union
      class Exact < HeaderMatchMethod
        def to_h: () -> { exact: Hash[Symbol,HeaderMatchMethod] }
      end

      class Regex < HeaderMatchMethod
        def to_h: () -> { regex: Hash[Symbol,HeaderMatchMethod] }
      end

      class Range < HeaderMatchMethod
        def to_h: () -> { range: Hash[Symbol,HeaderMatchMethod] }
      end

      class Prefix < HeaderMatchMethod
        def to_h: () -> { prefix: Hash[Symbol,HeaderMatchMethod] }
      end

      class Suffix < HeaderMatchMethod
        def to_h: () -> { suffix: Hash[Symbol,HeaderMatchMethod] }
      end

      class Unknown < HeaderMatchMethod
        def to_h: () -> { unknown: Hash[Symbol,HeaderMatchMethod] }
      end
    end

    HealthCheckPolicy: untyped

    HttpGatewayRoute: untyped

    HttpGatewayRouteAction: untyped

    HttpGatewayRouteHeader: untyped

    HttpGatewayRouteMatch: untyped

    HttpGatewayRoutePathRewrite: untyped

    HttpGatewayRoutePrefixRewrite: untyped

    HttpGatewayRouteRewrite: untyped

    module HttpMethod
      GET: ::String

      HEAD: ::String

      POST: ::String

      PUT: ::String

      DELETE: ::String

      CONNECT: ::String

      OPTIONS: ::String

      TRACE: ::String

      PATCH: ::String
    end

    HttpPathMatch: untyped

    HttpQueryParameter: untyped

    HttpRetryPolicy: untyped

    HttpRoute: untyped

    HttpRouteAction: untyped

    HttpRouteHeader: untyped

    HttpRouteMatch: untyped

    module HttpScheme
      HTTP: ::String

      HTTPS: ::String
    end

    HttpTimeout: untyped

    InternalServerErrorException: untyped

    module IpPreference
      IPv6_PREFERRED: ::String

      IPv4_PREFERRED: ::String

      IPv4_ONLY: ::String

      IPv6_ONLY: ::String
    end

    LimitExceededException: untyped

    ListGatewayRoutesInput: untyped

    ListGatewayRoutesOutput: untyped

    ListMeshesInput: untyped

    ListMeshesOutput: untyped

    ListRoutesInput: untyped

    ListRoutesOutput: untyped

    ListTagsForResourceInput: untyped

    ListTagsForResourceOutput: untyped

    ListVirtualGatewaysInput: untyped

    ListVirtualGatewaysOutput: untyped

    ListVirtualNodesInput: untyped

    ListVirtualNodesOutput: untyped

    ListVirtualRoutersInput: untyped

    ListVirtualRoutersOutput: untyped

    ListVirtualServicesInput: untyped

    ListVirtualServicesOutput: untyped

    Listener: untyped

    class ListenerTimeout < Hearth::Union
      class Tcp < ListenerTimeout
        def to_h: () -> { tcp: Hash[Symbol,ListenerTimeout] }
      end

      class Http < ListenerTimeout
        def to_h: () -> { http: Hash[Symbol,ListenerTimeout] }
      end

      class Http2 < ListenerTimeout
        def to_h: () -> { http2: Hash[Symbol,ListenerTimeout] }
      end

      class Grpc < ListenerTimeout
        def to_h: () -> { grpc: Hash[Symbol,ListenerTimeout] }
      end

      class Unknown < ListenerTimeout
        def to_h: () -> { unknown: Hash[Symbol,ListenerTimeout] }
      end
    end

    ListenerTls: untyped

    ListenerTlsAcmCertificate: untyped

    class ListenerTlsCertificate < Hearth::Union
      class Acm < ListenerTlsCertificate
        def to_h: () -> { acm: Hash[Symbol,ListenerTlsCertificate] }
      end

      class File < ListenerTlsCertificate
        def to_h: () -> { file: Hash[Symbol,ListenerTlsCertificate] }
      end

      class Sds < ListenerTlsCertificate
        def to_h: () -> { sds: Hash[Symbol,ListenerTlsCertificate] }
      end

      class Unknown < ListenerTlsCertificate
        def to_h: () -> { unknown: Hash[Symbol,ListenerTlsCertificate] }
      end
    end

    ListenerTlsFileCertificate: untyped

    module ListenerTlsMode
      STRICT: ::String

      PERMISSIVE: ::String

      DISABLED: ::String
    end

    ListenerTlsSdsCertificate: untyped

    ListenerTlsValidationContext: untyped

    class ListenerTlsValidationContextTrust < Hearth::Union
      class File < ListenerTlsValidationContextTrust
        def to_h: () -> { file: Hash[Symbol,ListenerTlsValidationContextTrust] }
      end

      class Sds < ListenerTlsValidationContextTrust
        def to_h: () -> { sds: Hash[Symbol,ListenerTlsValidationContextTrust] }
      end

      class Unknown < ListenerTlsValidationContextTrust
        def to_h: () -> { unknown: Hash[Symbol,ListenerTlsValidationContextTrust] }
      end
    end

    Logging: untyped

    MatchRange: untyped

    MeshData: untyped

    MeshRef: untyped

    MeshServiceDiscovery: untyped

    MeshSpec: untyped

    MeshStatus: untyped

    module MeshStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    NotFoundException: untyped

    OutlierDetection: untyped

    PortMapping: untyped

    module PortProtocol
      HTTP: ::String

      TCP: ::String

      HTTP2: ::String

      GRPC: ::String
    end

    QueryParameterMatch: untyped

    ResourceInUseException: untyped

    ResourceMetadata: untyped

    RouteData: untyped

    RouteRef: untyped

    RouteSpec: untyped

    RouteStatus: untyped

    module RouteStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    class ServiceDiscovery < Hearth::Union
      class Dns < ServiceDiscovery
        def to_h: () -> { dns: Hash[Symbol,ServiceDiscovery] }
      end

      class AwsCloudMap < ServiceDiscovery
        def to_h: () -> { aws_cloud_map: Hash[Symbol,ServiceDiscovery] }
      end

      class Unknown < ServiceDiscovery
        def to_h: () -> { unknown: Hash[Symbol,ServiceDiscovery] }
      end
    end

    ServiceUnavailableException: untyped

    SubjectAlternativeNameMatchers: untyped

    SubjectAlternativeNames: untyped

    TagRef: untyped

    TagResourceInput: untyped

    TagResourceOutput: untyped

    module TcpRetryPolicyEvent
      CONNECTION_ERROR: ::String
    end

    TcpRoute: untyped

    TcpRouteAction: untyped

    TcpTimeout: untyped

    TlsValidationContext: untyped

    TlsValidationContextAcmTrust: untyped

    TlsValidationContextFileTrust: untyped

    TlsValidationContextSdsTrust: untyped

    class TlsValidationContextTrust < Hearth::Union
      class Acm < TlsValidationContextTrust
        def to_h: () -> { acm: Hash[Symbol,TlsValidationContextTrust] }
      end

      class File < TlsValidationContextTrust
        def to_h: () -> { file: Hash[Symbol,TlsValidationContextTrust] }
      end

      class Sds < TlsValidationContextTrust
        def to_h: () -> { sds: Hash[Symbol,TlsValidationContextTrust] }
      end

      class Unknown < TlsValidationContextTrust
        def to_h: () -> { unknown: Hash[Symbol,TlsValidationContextTrust] }
      end
    end

    TooManyRequestsException: untyped

    TooManyTagsException: untyped

    UntagResourceInput: untyped

    UntagResourceOutput: untyped

    UpdateGatewayRouteInput: untyped

    UpdateGatewayRouteOutput: untyped

    UpdateMeshInput: untyped

    UpdateMeshOutput: untyped

    UpdateRouteInput: untyped

    UpdateRouteOutput: untyped

    UpdateVirtualGatewayInput: untyped

    UpdateVirtualGatewayOutput: untyped

    UpdateVirtualNodeInput: untyped

    UpdateVirtualNodeOutput: untyped

    UpdateVirtualRouterInput: untyped

    UpdateVirtualRouterOutput: untyped

    UpdateVirtualServiceInput: untyped

    UpdateVirtualServiceOutput: untyped

    class VirtualGatewayAccessLog < Hearth::Union
      class File < VirtualGatewayAccessLog
        def to_h: () -> { file: Hash[Symbol,VirtualGatewayAccessLog] }
      end

      class Unknown < VirtualGatewayAccessLog
        def to_h: () -> { unknown: Hash[Symbol,VirtualGatewayAccessLog] }
      end
    end

    VirtualGatewayBackendDefaults: untyped

    VirtualGatewayClientPolicy: untyped

    VirtualGatewayClientPolicyTls: untyped

    class VirtualGatewayClientTlsCertificate < Hearth::Union
      class File < VirtualGatewayClientTlsCertificate
        def to_h: () -> { file: Hash[Symbol,VirtualGatewayClientTlsCertificate] }
      end

      class Sds < VirtualGatewayClientTlsCertificate
        def to_h: () -> { sds: Hash[Symbol,VirtualGatewayClientTlsCertificate] }
      end

      class Unknown < VirtualGatewayClientTlsCertificate
        def to_h: () -> { unknown: Hash[Symbol,VirtualGatewayClientTlsCertificate] }
      end
    end

    class VirtualGatewayConnectionPool < Hearth::Union
      class Http < VirtualGatewayConnectionPool
        def to_h: () -> { http: Hash[Symbol,VirtualGatewayConnectionPool] }
      end

      class Http2 < VirtualGatewayConnectionPool
        def to_h: () -> { http2: Hash[Symbol,VirtualGatewayConnectionPool] }
      end

      class Grpc < VirtualGatewayConnectionPool
        def to_h: () -> { grpc: Hash[Symbol,VirtualGatewayConnectionPool] }
      end

      class Unknown < VirtualGatewayConnectionPool
        def to_h: () -> { unknown: Hash[Symbol,VirtualGatewayConnectionPool] }
      end
    end

    VirtualGatewayData: untyped

    VirtualGatewayFileAccessLog: untyped

    VirtualGatewayGrpcConnectionPool: untyped

    VirtualGatewayHealthCheckPolicy: untyped

    VirtualGatewayHttp2ConnectionPool: untyped

    VirtualGatewayHttpConnectionPool: untyped

    VirtualGatewayListener: untyped

    VirtualGatewayListenerTls: untyped

    VirtualGatewayListenerTlsAcmCertificate: untyped

    class VirtualGatewayListenerTlsCertificate < Hearth::Union
      class Acm < VirtualGatewayListenerTlsCertificate
        def to_h: () -> { acm: Hash[Symbol,VirtualGatewayListenerTlsCertificate] }
      end

      class File < VirtualGatewayListenerTlsCertificate
        def to_h: () -> { file: Hash[Symbol,VirtualGatewayListenerTlsCertificate] }
      end

      class Sds < VirtualGatewayListenerTlsCertificate
        def to_h: () -> { sds: Hash[Symbol,VirtualGatewayListenerTlsCertificate] }
      end

      class Unknown < VirtualGatewayListenerTlsCertificate
        def to_h: () -> { unknown: Hash[Symbol,VirtualGatewayListenerTlsCertificate] }
      end
    end

    VirtualGatewayListenerTlsFileCertificate: untyped

    module VirtualGatewayListenerTlsMode
      STRICT: ::String

      PERMISSIVE: ::String

      DISABLED: ::String
    end

    VirtualGatewayListenerTlsSdsCertificate: untyped

    VirtualGatewayListenerTlsValidationContext: untyped

    class VirtualGatewayListenerTlsValidationContextTrust < Hearth::Union
      class File < VirtualGatewayListenerTlsValidationContextTrust
        def to_h: () -> { file: Hash[Symbol,VirtualGatewayListenerTlsValidationContextTrust] }
      end

      class Sds < VirtualGatewayListenerTlsValidationContextTrust
        def to_h: () -> { sds: Hash[Symbol,VirtualGatewayListenerTlsValidationContextTrust] }
      end

      class Unknown < VirtualGatewayListenerTlsValidationContextTrust
        def to_h: () -> { unknown: Hash[Symbol,VirtualGatewayListenerTlsValidationContextTrust] }
      end
    end

    VirtualGatewayLogging: untyped

    VirtualGatewayPortMapping: untyped

    module VirtualGatewayPortProtocol
      HTTP: ::String

      HTTP2: ::String

      GRPC: ::String
    end

    VirtualGatewayRef: untyped

    VirtualGatewaySpec: untyped

    VirtualGatewayStatus: untyped

    module VirtualGatewayStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    VirtualGatewayTlsValidationContext: untyped

    VirtualGatewayTlsValidationContextAcmTrust: untyped

    VirtualGatewayTlsValidationContextFileTrust: untyped

    VirtualGatewayTlsValidationContextSdsTrust: untyped

    class VirtualGatewayTlsValidationContextTrust < Hearth::Union
      class Acm < VirtualGatewayTlsValidationContextTrust
        def to_h: () -> { acm: Hash[Symbol,VirtualGatewayTlsValidationContextTrust] }
      end

      class File < VirtualGatewayTlsValidationContextTrust
        def to_h: () -> { file: Hash[Symbol,VirtualGatewayTlsValidationContextTrust] }
      end

      class Sds < VirtualGatewayTlsValidationContextTrust
        def to_h: () -> { sds: Hash[Symbol,VirtualGatewayTlsValidationContextTrust] }
      end

      class Unknown < VirtualGatewayTlsValidationContextTrust
        def to_h: () -> { unknown: Hash[Symbol,VirtualGatewayTlsValidationContextTrust] }
      end
    end

    class VirtualNodeConnectionPool < Hearth::Union
      class Tcp < VirtualNodeConnectionPool
        def to_h: () -> { tcp: Hash[Symbol,VirtualNodeConnectionPool] }
      end

      class Http < VirtualNodeConnectionPool
        def to_h: () -> { http: Hash[Symbol,VirtualNodeConnectionPool] }
      end

      class Http2 < VirtualNodeConnectionPool
        def to_h: () -> { http2: Hash[Symbol,VirtualNodeConnectionPool] }
      end

      class Grpc < VirtualNodeConnectionPool
        def to_h: () -> { grpc: Hash[Symbol,VirtualNodeConnectionPool] }
      end

      class Unknown < VirtualNodeConnectionPool
        def to_h: () -> { unknown: Hash[Symbol,VirtualNodeConnectionPool] }
      end
    end

    VirtualNodeData: untyped

    VirtualNodeGrpcConnectionPool: untyped

    VirtualNodeHttp2ConnectionPool: untyped

    VirtualNodeHttpConnectionPool: untyped

    VirtualNodeRef: untyped

    VirtualNodeServiceProvider: untyped

    VirtualNodeSpec: untyped

    VirtualNodeStatus: untyped

    module VirtualNodeStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    VirtualNodeTcpConnectionPool: untyped

    VirtualRouterData: untyped

    VirtualRouterListener: untyped

    VirtualRouterRef: untyped

    VirtualRouterServiceProvider: untyped

    VirtualRouterSpec: untyped

    VirtualRouterStatus: untyped

    module VirtualRouterStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    VirtualServiceBackend: untyped

    VirtualServiceData: untyped

    class VirtualServiceProvider < Hearth::Union
      class VirtualNode < VirtualServiceProvider
        def to_h: () -> { virtual_node: Hash[Symbol,VirtualServiceProvider] }
      end

      class VirtualRouter < VirtualServiceProvider
        def to_h: () -> { virtual_router: Hash[Symbol,VirtualServiceProvider] }
      end

      class Unknown < VirtualServiceProvider
        def to_h: () -> { unknown: Hash[Symbol,VirtualServiceProvider] }
      end
    end

    VirtualServiceRef: untyped

    VirtualServiceSpec: untyped

    VirtualServiceStatus: untyped

    module VirtualServiceStatusCode
      ACTIVE: ::String

      INACTIVE: ::String

      DELETED: ::String
    end

    WeightedTarget: untyped

  end
end
