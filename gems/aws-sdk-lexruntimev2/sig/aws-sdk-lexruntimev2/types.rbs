# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/awslabs/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::LexRuntimeV2
  module Types

    AccessDeniedException: untyped

    ActiveContext: untyped

    ActiveContextTimeToLive: untyped

    AudioInputEvent: untyped

    AudioResponseEvent: untyped

    BadGatewayException: untyped

    Button: untyped

    ConfidenceScore: untyped

    ConfigurationEvent: untyped

    module ConfirmationState
      CONFIRMED: ::String

      DENIED: ::String

      NONE: ::String
    end

    ConflictException: untyped

    module ConversationMode
      AUDIO: ::String

      TEXT: ::String
    end

    DTMFInputEvent: untyped

    DeleteSessionInput: untyped

    DeleteSessionOutput: untyped

    DependencyFailedException: untyped

    DialogAction: untyped

    module DialogActionType
      CLOSE: ::String

      CONFIRM_INTENT: ::String

      DELEGATE: ::String

      ELICIT_INTENT: ::String

      ELICIT_SLOT: ::String

      NONE: ::String
    end

    DisconnectionEvent: untyped

    GetSessionInput: untyped

    GetSessionOutput: untyped

    HeartbeatEvent: untyped

    ImageResponseCard: untyped

    module InputMode
      TEXT: ::String

      SPEECH: ::String

      DTMF: ::String
    end

    Intent: untyped

    IntentResultEvent: untyped

    module IntentState
      FAILED: ::String

      FULFILLED: ::String

      IN_PROGRESS: ::String

      READY_FOR_FULFILLMENT: ::String

      WAITING: ::String

      FULFILLMENT_IN_PROGRESS: ::String
    end

    InternalServerException: untyped

    Interpretation: untyped

    Message: untyped

    module MessageContentType
      CUSTOM_PAYLOAD: ::String

      IMAGE_RESPONSE_CARD: ::String

      PLAIN_TEXT: ::String

      SSML: ::String
    end

    PlaybackCompletionEvent: untyped

    PlaybackInterruptionEvent: untyped

    module PlaybackInterruptionReason
      DTMF_START_DETECTED: ::String

      TEXT_DETECTED: ::String

      VOICE_START_DETECTED: ::String
    end

    PutSessionInput: untyped

    PutSessionOutput: untyped

    RecognizeTextInput: untyped

    RecognizeTextOutput: untyped

    RecognizeUtteranceInput: untyped

    RecognizeUtteranceOutput: untyped

    ResourceNotFoundException: untyped

    RuntimeHintDetails: untyped

    RuntimeHintValue: untyped

    RuntimeHints: untyped

    SentimentResponse: untyped

    SentimentScore: untyped

    module SentimentType
      MIXED: ::String

      NEGATIVE: ::String

      NEUTRAL: ::String

      POSITIVE: ::String
    end

    SessionState: untyped

    module Shape
      SCALAR: ::String

      LIST: ::String
    end

    Slot: untyped

    StartConversationInput: untyped

    StartConversationOutput: untyped

    class StartConversationRequestEventStream < Hearth::Union
      class ConfigurationEvent < StartConversationRequestEventStream
        def to_h: () -> { configuration_event: Hash[Symbol,StartConversationRequestEventStream] }
      end

      class AudioInputEvent < StartConversationRequestEventStream
        def to_h: () -> { audio_input_event: Hash[Symbol,StartConversationRequestEventStream] }
      end

      class DtmfInputEvent < StartConversationRequestEventStream
        def to_h: () -> { dtmf_input_event: Hash[Symbol,StartConversationRequestEventStream] }
      end

      class TextInputEvent < StartConversationRequestEventStream
        def to_h: () -> { text_input_event: Hash[Symbol,StartConversationRequestEventStream] }
      end

      class PlaybackCompletionEvent < StartConversationRequestEventStream
        def to_h: () -> { playback_completion_event: Hash[Symbol,StartConversationRequestEventStream] }
      end

      class DisconnectionEvent < StartConversationRequestEventStream
        def to_h: () -> { disconnection_event: Hash[Symbol,StartConversationRequestEventStream] }
      end

      class Unknown < StartConversationRequestEventStream
        def to_h: () -> { unknown: Hash[Symbol,StartConversationRequestEventStream] }
      end
    end

    class StartConversationResponseEventStream < Hearth::Union
      class PlaybackInterruptionEvent < StartConversationResponseEventStream
        def to_h: () -> { playback_interruption_event: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class TranscriptEvent < StartConversationResponseEventStream
        def to_h: () -> { transcript_event: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class IntentResultEvent < StartConversationResponseEventStream
        def to_h: () -> { intent_result_event: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class TextResponseEvent < StartConversationResponseEventStream
        def to_h: () -> { text_response_event: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class AudioResponseEvent < StartConversationResponseEventStream
        def to_h: () -> { audio_response_event: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class HeartbeatEvent < StartConversationResponseEventStream
        def to_h: () -> { heartbeat_event: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class AccessDeniedException < StartConversationResponseEventStream
        def to_h: () -> { access_denied_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class ResourceNotFoundException < StartConversationResponseEventStream
        def to_h: () -> { resource_not_found_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class ValidationException < StartConversationResponseEventStream
        def to_h: () -> { validation_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class ThrottlingException < StartConversationResponseEventStream
        def to_h: () -> { throttling_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class InternalServerException < StartConversationResponseEventStream
        def to_h: () -> { internal_server_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class ConflictException < StartConversationResponseEventStream
        def to_h: () -> { conflict_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class DependencyFailedException < StartConversationResponseEventStream
        def to_h: () -> { dependency_failed_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class BadGatewayException < StartConversationResponseEventStream
        def to_h: () -> { bad_gateway_exception: Hash[Symbol,StartConversationResponseEventStream] }
      end

      class Unknown < StartConversationResponseEventStream
        def to_h: () -> { unknown: Hash[Symbol,StartConversationResponseEventStream] }
      end
    end

    module StyleType
      DEFAULT: ::String

      SPELL_BY_LETTER: ::String

      SPELL_BY_WORD: ::String
    end

    TextInputEvent: untyped

    TextResponseEvent: untyped

    ThrottlingException: untyped

    TranscriptEvent: untyped

    ValidationException: untyped

    Value: untyped

  end
end
