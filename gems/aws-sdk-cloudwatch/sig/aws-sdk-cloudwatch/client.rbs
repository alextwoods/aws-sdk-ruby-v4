# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/smithy-lang/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

module AWS::SDK::CloudWatch
  class Client < Hearth::Client

    def self.plugins: () -> Hearth::PluginList[Config]

    def initialize: (?::Hash[::Symbol, untyped] options) -> void |
      (
        ?auth_resolver: Hearth::_AuthResolver[Auth::Params],
        ?auth_schemes: Array[Hearth::AuthSchemes::Base],
        ?credentials_provider: Hearth::IdentityProvider,
        ?disable_host_prefix: bool,
        ?disable_request_compression: bool,
        ?endpoint: String,
        ?endpoint_resolver: Hearth::_EndpointResolver[Endpoint::Params],
        ?http_client: Hearth::HTTP::Client,
        ?interceptors: Hearth::InterceptorList[Config],
        ?logger: Logger,
        ?plugins: Hearth::PluginList[Config],
        ?profile: String,
        ?region: String,
        ?request_min_compression_size_bytes: Integer,
        ?retry_strategy: Hearth::_RetryStrategy,
        ?stub_responses: bool,
        ?stubs: Hearth::Stubs,
        ?use_dualstack_endpoint: bool,
        ?use_fips_endpoint: bool,
        ?validate_input: bool
      ) -> void

    attr_reader config: Config

    def delete_alarms: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteAlarmsOutput] |
      (?Types::DeleteAlarmsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteAlarmsOutput] |
      (
        alarm_names: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteAlarmsOutput]

    def delete_anomaly_detector: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteAnomalyDetectorOutput] |
      (?Types::DeleteAnomalyDetectorInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteAnomalyDetectorOutput] |
      (
        ?namespace: ::String,
        ?metric_name: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        ?stat: ::String,
        ?single_metric_anomaly_detector: {
          namespace: ::String,
          metric_name: ::String,
          dimensions: ::Array[Types::Dimension],
          stat: ::String
        },
        ?metric_math_anomaly_detector: {
          metric_data_queries: ::Array[Types::MetricDataQuery]
        }
      ) -> Hearth::Output[Types::DeleteAnomalyDetectorOutput]

    def delete_dashboards: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteDashboardsOutput] |
      (?Types::DeleteDashboardsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteDashboardsOutput] |
      (
        dashboard_names: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteDashboardsOutput]

    def delete_insight_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInsightRulesOutput] |
      (?Types::DeleteInsightRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteInsightRulesOutput] |
      (
        rule_names: ::Array[::String]
      ) -> Hearth::Output[Types::DeleteInsightRulesOutput]

    def delete_metric_stream: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteMetricStreamOutput] |
      (?Types::DeleteMetricStreamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DeleteMetricStreamOutput] |
      (
        name: ::String
      ) -> Hearth::Output[Types::DeleteMetricStreamOutput]

    def describe_alarm_history: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAlarmHistoryOutput] |
      (?Types::DescribeAlarmHistoryInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAlarmHistoryOutput] |
      (
        ?alarm_name: ::String,
        ?alarm_types: ::Array[("CompositeAlarm" | "MetricAlarm")],
        ?history_item_type: ("ConfigurationUpdate" | "StateUpdate" | "Action"),
        ?start_date: ::Time,
        ?end_date: ::Time,
        ?max_records: ::Integer,
        ?next_token: ::String,
        ?scan_by: ("TimestampDescending" | "TimestampAscending")
      ) -> Hearth::Output[Types::DescribeAlarmHistoryOutput]

    def describe_alarms: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAlarmsOutput] |
      (?Types::DescribeAlarmsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAlarmsOutput] |
      (
        ?alarm_names: ::Array[::String],
        ?alarm_name_prefix: ::String,
        ?alarm_types: ::Array[("CompositeAlarm" | "MetricAlarm")],
        ?children_of_alarm_name: ::String,
        ?parents_of_alarm_name: ::String,
        ?state_value: ("OK" | "ALARM" | "INSUFFICIENT_DATA"),
        ?action_prefix: ::String,
        ?max_records: ::Integer,
        ?next_token: ::String
      ) -> Hearth::Output[Types::DescribeAlarmsOutput]

    def describe_alarms_for_metric: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAlarmsForMetricOutput] |
      (?Types::DescribeAlarmsForMetricInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAlarmsForMetricOutput] |
      (
        metric_name: ::String,
        namespace: ::String,
        ?statistic: ("SampleCount" | "Average" | "Sum" | "Minimum" | "Maximum"),
        ?extended_statistic: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        ?period: ::Integer,
        ?unit: ("Seconds" | "Microseconds" | "Milliseconds" | "Bytes" | "Kilobytes" | "Megabytes" | "Gigabytes" | "Terabytes" | "Bits" | "Kilobits" | "Megabits" | "Gigabits" | "Terabits" | "Percent" | "Count" | "Bytes/Second" | "Kilobytes/Second" | "Megabytes/Second" | "Gigabytes/Second" | "Terabytes/Second" | "Bits/Second" | "Kilobits/Second" | "Megabits/Second" | "Gigabits/Second" | "Terabits/Second" | "Count/Second" | "None")
      ) -> Hearth::Output[Types::DescribeAlarmsForMetricOutput]

    def describe_anomaly_detectors: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAnomalyDetectorsOutput] |
      (?Types::DescribeAnomalyDetectorsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeAnomalyDetectorsOutput] |
      (
        ?next_token: ::String,
        ?max_results: ::Integer,
        ?namespace: ::String,
        ?metric_name: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        ?anomaly_detector_types: ::Array[("SINGLE_METRIC" | "METRIC_MATH")]
      ) -> Hearth::Output[Types::DescribeAnomalyDetectorsOutput]

    def describe_insight_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInsightRulesOutput] |
      (?Types::DescribeInsightRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DescribeInsightRulesOutput] |
      (
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::DescribeInsightRulesOutput]

    def disable_alarm_actions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableAlarmActionsOutput] |
      (?Types::DisableAlarmActionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableAlarmActionsOutput] |
      (
        alarm_names: ::Array[::String]
      ) -> Hearth::Output[Types::DisableAlarmActionsOutput]

    def disable_insight_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableInsightRulesOutput] |
      (?Types::DisableInsightRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::DisableInsightRulesOutput] |
      (
        rule_names: ::Array[::String]
      ) -> Hearth::Output[Types::DisableInsightRulesOutput]

    def enable_alarm_actions: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableAlarmActionsOutput] |
      (?Types::EnableAlarmActionsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableAlarmActionsOutput] |
      (
        alarm_names: ::Array[::String]
      ) -> Hearth::Output[Types::EnableAlarmActionsOutput]

    def enable_insight_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableInsightRulesOutput] |
      (?Types::EnableInsightRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::EnableInsightRulesOutput] |
      (
        rule_names: ::Array[::String]
      ) -> Hearth::Output[Types::EnableInsightRulesOutput]

    def get_dashboard: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetDashboardOutput] |
      (?Types::GetDashboardInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetDashboardOutput] |
      (
        dashboard_name: ::String
      ) -> Hearth::Output[Types::GetDashboardOutput]

    def get_insight_rule_report: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetInsightRuleReportOutput] |
      (?Types::GetInsightRuleReportInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetInsightRuleReportOutput] |
      (
        rule_name: ::String,
        start_time: ::Time,
        end_time: ::Time,
        period: ::Integer,
        ?max_contributor_count: ::Integer,
        ?metrics: ::Array[::String],
        ?order_by: ::String
      ) -> Hearth::Output[Types::GetInsightRuleReportOutput]

    def get_metric_data: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricDataOutput] |
      (?Types::GetMetricDataInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricDataOutput] |
      (
        metric_data_queries: ::Array[{
          id: ::String,
          metric_stat: Types::MetricStat,
          expression: ::String,
          label: ::String,
          return_data: bool,
          period: ::Integer,
          account_id: ::String
        }],
        start_time: ::Time,
        end_time: ::Time,
        ?next_token: ::String,
        ?scan_by: ("TimestampDescending" | "TimestampAscending"),
        ?max_datapoints: ::Integer,
        ?label_options: {
          timezone: ::String
        }
      ) -> Hearth::Output[Types::GetMetricDataOutput]

    def get_metric_statistics: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricStatisticsOutput] |
      (?Types::GetMetricStatisticsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricStatisticsOutput] |
      (
        namespace: ::String,
        metric_name: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        start_time: ::Time,
        end_time: ::Time,
        period: ::Integer,
        ?statistics: ::Array[("SampleCount" | "Average" | "Sum" | "Minimum" | "Maximum")],
        ?extended_statistics: ::Array[::String],
        ?unit: ("Seconds" | "Microseconds" | "Milliseconds" | "Bytes" | "Kilobytes" | "Megabytes" | "Gigabytes" | "Terabytes" | "Bits" | "Kilobits" | "Megabits" | "Gigabits" | "Terabits" | "Percent" | "Count" | "Bytes/Second" | "Kilobytes/Second" | "Megabytes/Second" | "Gigabytes/Second" | "Terabytes/Second" | "Bits/Second" | "Kilobits/Second" | "Megabits/Second" | "Gigabits/Second" | "Terabits/Second" | "Count/Second" | "None")
      ) -> Hearth::Output[Types::GetMetricStatisticsOutput]

    def get_metric_stream: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricStreamOutput] |
      (?Types::GetMetricStreamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricStreamOutput] |
      (
        name: ::String
      ) -> Hearth::Output[Types::GetMetricStreamOutput]

    def get_metric_widget_image: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricWidgetImageOutput] |
      (?Types::GetMetricWidgetImageInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::GetMetricWidgetImageOutput] |
      (
        metric_widget: ::String,
        ?output_format: ::String
      ) -> Hearth::Output[Types::GetMetricWidgetImageOutput]

    def list_dashboards: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListDashboardsOutput] |
      (?Types::ListDashboardsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListDashboardsOutput] |
      (
        ?dashboard_name_prefix: ::String,
        ?next_token: ::String
      ) -> Hearth::Output[Types::ListDashboardsOutput]

    def list_managed_insight_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListManagedInsightRulesOutput] |
      (?Types::ListManagedInsightRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListManagedInsightRulesOutput] |
      (
        resource_arn: ::String,
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::ListManagedInsightRulesOutput]

    def list_metric_streams: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListMetricStreamsOutput] |
      (?Types::ListMetricStreamsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListMetricStreamsOutput] |
      (
        ?next_token: ::String,
        ?max_results: ::Integer
      ) -> Hearth::Output[Types::ListMetricStreamsOutput]

    def list_metrics: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListMetricsOutput] |
      (?Types::ListMetricsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListMetricsOutput] |
      (
        ?namespace: ::String,
        ?metric_name: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        ?next_token: ::String,
        ?recently_active: ("PT3H"),
        ?include_linked_accounts: bool,
        ?owning_account: ::String
      ) -> Hearth::Output[Types::ListMetricsOutput]

    def list_tags_for_resource: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListTagsForResourceOutput] |
      (?Types::ListTagsForResourceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::ListTagsForResourceOutput] |
      (
        resource_arn: ::String
      ) -> Hearth::Output[Types::ListTagsForResourceOutput]

    def put_anomaly_detector: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutAnomalyDetectorOutput] |
      (?Types::PutAnomalyDetectorInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutAnomalyDetectorOutput] |
      (
        ?namespace: ::String,
        ?metric_name: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        ?stat: ::String,
        ?configuration: {
          excluded_time_ranges: ::Array[Types::Range],
          metric_timezone: ::String
        },
        ?single_metric_anomaly_detector: {
          namespace: ::String,
          metric_name: ::String,
          dimensions: ::Array[Types::Dimension],
          stat: ::String
        },
        ?metric_math_anomaly_detector: {
          metric_data_queries: ::Array[Types::MetricDataQuery]
        }
      ) -> Hearth::Output[Types::PutAnomalyDetectorOutput]

    def put_composite_alarm: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutCompositeAlarmOutput] |
      (?Types::PutCompositeAlarmInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutCompositeAlarmOutput] |
      (
        ?actions_enabled: bool,
        ?alarm_actions: ::Array[::String],
        ?alarm_description: ::String,
        alarm_name: ::String,
        alarm_rule: ::String,
        ?insufficient_data_actions: ::Array[::String],
        ?ok_actions: ::Array[::String],
        ?tags: ::Array[{
          key: ::String,
          value: ::String
        }],
        ?actions_suppressor: ::String,
        ?actions_suppressor_wait_period: ::Integer,
        ?actions_suppressor_extension_period: ::Integer
      ) -> Hearth::Output[Types::PutCompositeAlarmOutput]

    def put_dashboard: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutDashboardOutput] |
      (?Types::PutDashboardInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutDashboardOutput] |
      (
        dashboard_name: ::String,
        dashboard_body: ::String
      ) -> Hearth::Output[Types::PutDashboardOutput]

    def put_insight_rule: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutInsightRuleOutput] |
      (?Types::PutInsightRuleInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutInsightRuleOutput] |
      (
        rule_name: ::String,
        ?rule_state: ::String,
        rule_definition: ::String,
        ?tags: ::Array[{
          key: ::String,
          value: ::String
        }]
      ) -> Hearth::Output[Types::PutInsightRuleOutput]

    def put_managed_insight_rules: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutManagedInsightRulesOutput] |
      (?Types::PutManagedInsightRulesInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutManagedInsightRulesOutput] |
      (
        managed_rules: ::Array[{
          template_name: ::String,
          resource_arn: ::String,
          tags: ::Array[Types::Tag]
        }]
      ) -> Hearth::Output[Types::PutManagedInsightRulesOutput]

    def put_metric_alarm: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutMetricAlarmOutput] |
      (?Types::PutMetricAlarmInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutMetricAlarmOutput] |
      (
        alarm_name: ::String,
        ?alarm_description: ::String,
        ?actions_enabled: bool,
        ?ok_actions: ::Array[::String],
        ?alarm_actions: ::Array[::String],
        ?insufficient_data_actions: ::Array[::String],
        ?metric_name: ::String,
        ?namespace: ::String,
        ?statistic: ("SampleCount" | "Average" | "Sum" | "Minimum" | "Maximum"),
        ?extended_statistic: ::String,
        ?dimensions: ::Array[{
          name: ::String,
          value: ::String
        }],
        ?period: ::Integer,
        ?unit: ("Seconds" | "Microseconds" | "Milliseconds" | "Bytes" | "Kilobytes" | "Megabytes" | "Gigabytes" | "Terabytes" | "Bits" | "Kilobits" | "Megabits" | "Gigabits" | "Terabits" | "Percent" | "Count" | "Bytes/Second" | "Kilobytes/Second" | "Megabytes/Second" | "Gigabytes/Second" | "Terabytes/Second" | "Bits/Second" | "Kilobits/Second" | "Megabits/Second" | "Gigabits/Second" | "Terabits/Second" | "Count/Second" | "None"),
        evaluation_periods: ::Integer,
        ?datapoints_to_alarm: ::Integer,
        ?threshold: ::Float,
        comparison_operator: ("GreaterThanOrEqualToThreshold" | "GreaterThanThreshold" | "LessThanThreshold" | "LessThanOrEqualToThreshold" | "LessThanLowerOrGreaterThanUpperThreshold" | "LessThanLowerThreshold" | "GreaterThanUpperThreshold"),
        ?treat_missing_data: ::String,
        ?evaluate_low_sample_count_percentile: ::String,
        ?metrics: ::Array[{
          id: ::String,
          metric_stat: Types::MetricStat,
          expression: ::String,
          label: ::String,
          return_data: bool,
          period: ::Integer,
          account_id: ::String
        }],
        ?tags: ::Array[{
          key: ::String,
          value: ::String
        }],
        ?threshold_metric_id: ::String
      ) -> Hearth::Output[Types::PutMetricAlarmOutput]

    def put_metric_data: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutMetricDataOutput] |
      (?Types::PutMetricDataInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutMetricDataOutput] |
      (
        namespace: ::String,
        metric_data: ::Array[{
          metric_name: ::String,
          dimensions: ::Array[Types::Dimension],
          timestamp: ::Time,
          value: ::Float,
          statistic_values: Types::StatisticSet,
          member_values: ::Array[::Float],
          counts: ::Array[::Float],
          unit: ::String,
          storage_resolution: ::Integer
        }]
      ) -> Hearth::Output[Types::PutMetricDataOutput]

    def put_metric_stream: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutMetricStreamOutput] |
      (?Types::PutMetricStreamInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::PutMetricStreamOutput] |
      (
        name: ::String,
        ?include_filters: ::Array[{
          namespace: ::String,
          metric_names: ::Array[::String]
        }],
        ?exclude_filters: ::Array[{
          namespace: ::String,
          metric_names: ::Array[::String]
        }],
        firehose_arn: ::String,
        role_arn: ::String,
        output_format: ("json" | "opentelemetry0.7" | "opentelemetry1.0"),
        ?tags: ::Array[{
          key: ::String,
          value: ::String
        }],
        ?statistics_configurations: ::Array[{
          include_metrics: ::Array[Types::MetricStreamStatisticsMetric],
          additional_statistics: ::Array[::String]
        }],
        ?include_linked_accounts_metrics: bool
      ) -> Hearth::Output[Types::PutMetricStreamOutput]

    def set_alarm_state: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SetAlarmStateOutput] |
      (?Types::SetAlarmStateInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::SetAlarmStateOutput] |
      (
        alarm_name: ::String,
        state_value: ("OK" | "ALARM" | "INSUFFICIENT_DATA"),
        state_reason: ::String,
        ?state_reason_data: ::String
      ) -> Hearth::Output[Types::SetAlarmStateOutput]

    def start_metric_streams: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartMetricStreamsOutput] |
      (?Types::StartMetricStreamsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StartMetricStreamsOutput] |
      (
        names: ::Array[::String]
      ) -> Hearth::Output[Types::StartMetricStreamsOutput]

    def stop_metric_streams: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StopMetricStreamsOutput] |
      (?Types::StopMetricStreamsInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::StopMetricStreamsOutput] |
      (
        names: ::Array[::String]
      ) -> Hearth::Output[Types::StopMetricStreamsOutput]

    def tag_resource: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TagResourceOutput] |
      (?Types::TagResourceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::TagResourceOutput] |
      (
        resource_arn: ::String,
        tags: ::Array[{
          key: ::String,
          value: ::String
        }]
      ) -> Hearth::Output[Types::TagResourceOutput]

    def untag_resource: (?::Hash[::Symbol, untyped] params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UntagResourceOutput] |
      (?Types::UntagResourceInput params, ?::Hash[::Symbol, untyped] options)  -> Hearth::Output[Types::UntagResourceOutput] |
      (
        resource_arn: ::String,
        tag_keys: ::Array[::String]
      ) -> Hearth::Output[Types::UntagResourceOutput]

  end
end
