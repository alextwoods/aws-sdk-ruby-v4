# frozen_string_literal: true

# WARNING ABOUT GENERATED CODE
#
# This file was code generated using smithy-ruby.
# https://github.com/smithy-lang/smithy-ruby
#
# WARNING ABOUT GENERATED CODE

require 'stringio'

require_relative 'plugins/global_config'

module AWS::SDK::EC2
  # <fullname>Amazon Elastic Compute Cloud</fullname>
  #          <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the Amazon Web Services Cloud.
  #           Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications
  #           faster. Amazon Virtual Private Cloud (Amazon VPC) enables you to provision a logically isolated section of the
  #           Amazon Web Services Cloud where you can launch Amazon Web Services resources in a virtual network that you've defined. Amazon Elastic Block Store
  #           (Amazon EBS) provides block level storage volumes for use with EC2 instances. EBS volumes are highly available
  #           and reliable storage volumes that can be attached to any running instance and used like a hard drive.</p>
  #          <p>To learn more, see the following resources:</p>
  #          <ul>
  #             <li>
  #                <p>Amazon EC2: <a href="http://aws.amazon.com/ec2">Amazon EC2 product page</a>, <a href="https://docs.aws.amazon.com/ec2/index.html">Amazon EC2 documentation</a>
  #                </p>
  #             </li>
  #             <li>
  #                <p>Amazon EBS: <a href="http://aws.amazon.com/ebs">Amazon EBS product page</a>, <a href="https://docs.aws.amazon.com/ebs/index.html">Amazon EBS documentation</a>
  #                </p>
  #             </li>
  #             <li>
  #                <p>Amazon VPC: <a href="http://aws.amazon.com/vpc">Amazon VPC product page</a>, <a href="https://docs.aws.amazon.com/vpc/index.html">Amazon VPC documentation</a>
  #                </p>
  #             </li>
  #             <li>
  #                <p>VPN: <a href="http://aws.amazon.com/vpn">VPN product page</a>, <a href="https://docs.aws.amazon.com/vpn/index.html">VPN documentation</a>
  #                </p>
  #             </li>
  #          </ul>
  class Client < Hearth::Client

    # @api private
    @plugins = Hearth::PluginList.new([
      Plugins::GlobalConfig.new
    ])

    # @param [Hash] options
    #   Options used to construct an instance of {Config}
    def initialize(options = {})
      super(options, Config)
    end

    # @return [Config] config
    attr_reader :config

    # <p>Accepts an Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#using-instance-addressing-eips-transfer-accept">Accept a transferred Elastic IP address</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    # @param [Hash | Types::AcceptAddressTransferInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptAddressTransferInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_address_transfer(
    #     address: 'Address', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptAddressTransferOutput
    #   resp.data.address_transfer #=> Types::AddressTransfer
    #   resp.data.address_transfer.public_ip #=> String
    #   resp.data.address_transfer.allocation_id #=> String
    #   resp.data.address_transfer.transfer_account_id #=> String
    #   resp.data.address_transfer.transfer_offer_expiration_timestamp #=> Time
    #   resp.data.address_transfer.transfer_offer_accepted_timestamp #=> Time
    #   resp.data.address_transfer.address_transfer_status #=> String, one of ["pending", "disabled", "accepted"]
    def accept_address_transfer(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptAddressTransferInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptAddressTransfer.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_address_transfer,
        tracer: tracer
      )
      Telemetry::AcceptAddressTransfer.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_address_transfer] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_address_transfer] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_address_transfer] #{output.data}")
        output
      end
    end

    # <p>Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
    # @param [Hash | Types::AcceptReservedInstancesExchangeQuoteInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptReservedInstancesExchangeQuoteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_reserved_instances_exchange_quote(
    #     dry_run: false,
    #     reserved_instance_ids: [
    #       'member'
    #     ], # required
    #     target_configurations: [
    #       {
    #         instance_count: 1,
    #         offering_id: 'OfferingId' # required
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptReservedInstancesExchangeQuoteOutput
    #   resp.data.exchange_id #=> String
    def accept_reserved_instances_exchange_quote(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptReservedInstancesExchangeQuoteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptReservedInstancesExchangeQuote.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_reserved_instances_exchange_quote,
        tracer: tracer
      )
      Telemetry::AcceptReservedInstancesExchangeQuote.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_reserved_instances_exchange_quote] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_reserved_instances_exchange_quote] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_reserved_instances_exchange_quote] #{output.data}")
        output
      end
    end

    # <p>Accepts a request to associate subnets with a transit gateway multicast domain.</p>
    # @param [Hash | Types::AcceptTransitGatewayMulticastDomainAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptTransitGatewayMulticastDomainAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_transit_gateway_multicast_domain_associations(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptTransitGatewayMulticastDomainAssociationsOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    def accept_transit_gateway_multicast_domain_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptTransitGatewayMulticastDomainAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptTransitGatewayMulticastDomainAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_transit_gateway_multicast_domain_associations,
        tracer: tracer
      )
      Telemetry::AcceptTransitGatewayMulticastDomainAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_multicast_domain_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_multicast_domain_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_multicast_domain_associations] #{output.data}")
        output
      end
    end

    # <p>Accepts a transit gateway peering attachment request. The peering attachment must be
    #             in the <code>pendingAcceptance</code> state.</p>
    # @param [Hash | Types::AcceptTransitGatewayPeeringAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptTransitGatewayPeeringAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_transit_gateway_peering_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.core_network_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.options #=> Types::TransitGatewayPeeringAttachmentOptions
    #   resp.data.transit_gateway_peering_attachment.options.dynamic_routing #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    def accept_transit_gateway_peering_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptTransitGatewayPeeringAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptTransitGatewayPeeringAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_transit_gateway_peering_attachment,
        tracer: tracer
      )
      Telemetry::AcceptTransitGatewayPeeringAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_peering_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_peering_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_peering_attachment] #{output.data}")
        output
      end
    end

    # <p>Accepts a request to attach a VPC to a transit gateway.</p>
    #          <p>The VPC attachment must be in the <code>pendingAcceptance</code> state.
    #          Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests.
    #          Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
    # @param [Hash | Types::AcceptTransitGatewayVpcAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptTransitGatewayVpcAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    def accept_transit_gateway_vpc_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptTransitGatewayVpcAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptTransitGatewayVpcAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_transit_gateway_vpc_attachment,
        tracer: tracer
      )
      Telemetry::AcceptTransitGatewayVpcAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_vpc_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_vpc_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_transit_gateway_vpc_attachment] #{output.data}")
        output
      end
    end

    # <p>Accepts connection requests to your VPC endpoint service.</p>
    # @param [Hash | Types::AcceptVpcEndpointConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptVpcEndpointConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_vpc_endpoint_connections(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     vpc_endpoint_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptVpcEndpointConnectionsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def accept_vpc_endpoint_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptVpcEndpointConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptVpcEndpointConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_vpc_endpoint_connections,
        tracer: tracer
      )
      Telemetry::AcceptVpcEndpointConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_vpc_endpoint_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_vpc_endpoint_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_vpc_endpoint_connections] #{output.data}")
        output
      end
    end

    # <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must
    #       be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC.
    #       Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC
    #       peering connection requests.</p>
    #          <p>For an inter-Region VPC peering connection request, you must accept the VPC peering
    #       connection in the Region of the accepter VPC.</p>
    # @param [Hash | Types::AcceptVpcPeeringConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::AcceptVpcPeeringConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.accept_vpc_peering_connection(
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AcceptVpcPeeringConnectionOutput
    #   resp.data.vpc_peering_connection #=> Types::VpcPeeringConnection
    #   resp.data.vpc_peering_connection.accepter_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set #=> Array<Ipv6CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0] #=> Types::Ipv6CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set #=> Array<CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0] #=> Types::CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0].cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.owner_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options #=> Types::VpcPeeringConnectionOptionsDescription
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.vpc_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.region #=> String
    #   resp.data.vpc_peering_connection.expiration_time #=> Time
    #   resp.data.vpc_peering_connection.requester_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.status #=> Types::VpcPeeringConnectionStateReason
    #   resp.data.vpc_peering_connection.status.code #=> String, one of ["initiating-request", "pending-acceptance", "active", "deleted", "rejected", "failed", "expired", "provisioning", "deleting"]
    #   resp.data.vpc_peering_connection.status.message #=> String
    #   resp.data.vpc_peering_connection.tags #=> Array<Tag>
    #   resp.data.vpc_peering_connection.tags[0] #=> Types::Tag
    #   resp.data.vpc_peering_connection.tags[0].key #=> String
    #   resp.data.vpc_peering_connection.tags[0].value #=> String
    #   resp.data.vpc_peering_connection.vpc_peering_connection_id #=> String
    def accept_vpc_peering_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AcceptVpcPeeringConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AcceptVpcPeeringConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :accept_vpc_peering_connection,
        tracer: tracer
      )
      Telemetry::AcceptVpcPeeringConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_vpc_peering_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#accept_vpc_peering_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#accept_vpc_peering_connection] #{output.data}")
        output
      end
    end

    # <p>Advertises an IPv4 or IPv6 address range that is provisioned for use with your Amazon Web Services resources through
    #          bring your own IP addresses (BYOIP).</p>
    #          <p>You can perform this operation at most once every 10 seconds, even if you specify different
    #          address ranges each time.</p>
    #          <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise
    #           it from Amazon Web Services. To minimize down time, you can configure your Amazon Web Services resources to use an address from a
    #          BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current
    #          location and start advertising it through Amazon Web Services.</p>
    #          <p>It can take a few minutes before traffic to the specified addresses starts routing to Amazon Web Services
    #          because of BGP propagation delays.</p>
    #          <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
    # @param [Hash | Types::AdvertiseByoipCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::AdvertiseByoipCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.advertise_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     asn: 'Asn',
    #     dry_run: false,
    #     network_border_group: 'NetworkBorderGroup'
    #   )
    # @example Response structure
    #   resp.data #=> Types::AdvertiseByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.asn_associations #=> Array<AsnAssociation>
    #   resp.data.byoip_cidr.asn_associations[0] #=> Types::AsnAssociation
    #   resp.data.byoip_cidr.asn_associations[0].asn #=> String
    #   resp.data.byoip_cidr.asn_associations[0].cidr #=> String
    #   resp.data.byoip_cidr.asn_associations[0].status_message #=> String
    #   resp.data.byoip_cidr.asn_associations[0].state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.byoip_cidr.network_border_group #=> String
    def advertise_byoip_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AdvertiseByoipCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AdvertiseByoipCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :advertise_byoip_cidr,
        tracer: tracer
      )
      Telemetry::AdvertiseByoipCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#advertise_byoip_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#advertise_byoip_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#advertise_byoip_cidr] #{output.data}")
        output
      end
    end

    # <p>Allocates an Elastic IP address to your Amazon Web Services account. After you allocate the Elastic IP address you can associate
    #          it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address
    #          pool and can be allocated to a different Amazon Web Services account.</p>
    #          <p>You can allocate an Elastic IP address from an address pool owned by Amazon Web Services or from an address pool created
    #        from a public IPv4 address range that you have brought to Amazon Web Services for use with your Amazon Web Services resources using bring your own
    #          IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>If you release an Elastic IP address, you might be able to recover it. You cannot recover
    #       an Elastic IP address that you released after it is allocated to another Amazon Web Services account. To attempt to recover an Elastic IP address that you released, specify
    #       it in this operation.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You can allocate a carrier IP address which is a public IP address from a telecommunication carrier,
    #        to a network interface which resides in a subnet in a Wavelength Zone (for example an EC2 instance).</p>
    # @param [Hash | Types::AllocateAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::AllocateAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.allocate_address(
    #     domain: 'vpc', # accepts ["vpc", "standard"]
    #     address: 'Address',
    #     public_ipv4_pool: 'PublicIpv4Pool',
    #     network_border_group: 'NetworkBorderGroup',
    #     customer_owned_ipv4_pool: 'CustomerOwnedIpv4Pool',
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::AllocateAddressOutput
    #   resp.data.public_ip #=> String
    #   resp.data.allocation_id #=> String
    #   resp.data.public_ipv4_pool #=> String
    #   resp.data.network_border_group #=> String
    #   resp.data.domain #=> String, one of ["vpc", "standard"]
    #   resp.data.customer_owned_ip #=> String
    #   resp.data.customer_owned_ipv4_pool #=> String
    #   resp.data.carrier_ip #=> String
    # @example To allocate an Elastic IP address
    #   resp = client.allocate_address()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     public_ip: "203.0.113.0",
    #     allocation_id: "eipalloc-64d5890a",
    #     public_ipv4_pool: "amazon",
    #     network_border_group: "us-east-1",
    #     domain: "vpc"
    #   }
    def allocate_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AllocateAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AllocateAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :allocate_address,
        tracer: tracer
      )
      Telemetry::AllocateAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#allocate_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#allocate_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#allocate_address] #{output.data}")
        output
      end
    end

    # <p>Allocates a Dedicated Host to your account. At a minimum, specify the supported
    #             instance type or instance family, the Availability Zone in which to allocate the host,
    #             and the number of hosts to allocate.</p>
    # @param [Hash | Types::AllocateHostsInput] params
    #   Request parameters for this operation.
    #   See {Types::AllocateHostsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.allocate_hosts(
    #     auto_placement: 'on', # accepts ["on", "off"]
    #     availability_zone: 'AvailabilityZone', # required
    #     client_token: 'ClientToken',
    #     instance_type: 'InstanceType',
    #     instance_family: 'InstanceFamily',
    #     quantity: 1,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     host_recovery: 'on', # accepts ["on", "off"]
    #     outpost_arn: 'OutpostArn',
    #     host_maintenance: 'on', # accepts ["on", "off"]
    #     asset_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::AllocateHostsOutput
    #   resp.data.host_ids #=> Array<String>
    #   resp.data.host_ids[0] #=> String
    def allocate_hosts(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AllocateHostsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AllocateHosts.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :allocate_hosts,
        tracer: tracer
      )
      Telemetry::AllocateHosts.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#allocate_hosts] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#allocate_hosts] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#allocate_hosts] #{output.data}")
        output
      end
    end

    # <p>Allocate a CIDR from an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations.</p>
    #          <p>In IPAM, an allocation is a CIDR assignment from an IPAM pool to another IPAM pool or to a resource. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/allocate-cidrs-ipam.html">Allocate CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    #          <note>
    #             <p>This action creates an allocation with strong consistency. The returned CIDR will not overlap with any other allocations from the same pool.</p>
    #          </note>
    # @param [Hash | Types::AllocateIpamPoolCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::AllocateIpamPoolCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.allocate_ipam_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr',
    #     netmask_length: 1,
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     preview_next_cidr: false,
    #     allowed_cidrs: [
    #       'member'
    #     ],
    #     disallowed_cidrs: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::AllocateIpamPoolCidrOutput
    #   resp.data.ipam_pool_allocation #=> Types::IpamPoolAllocation
    #   resp.data.ipam_pool_allocation.cidr #=> String
    #   resp.data.ipam_pool_allocation.ipam_pool_allocation_id #=> String
    #   resp.data.ipam_pool_allocation.description #=> String
    #   resp.data.ipam_pool_allocation.resource_id #=> String
    #   resp.data.ipam_pool_allocation.resource_type #=> String, one of ["ipam-pool", "vpc", "ec2-public-ipv4-pool", "custom", "subnet"]
    #   resp.data.ipam_pool_allocation.resource_region #=> String
    #   resp.data.ipam_pool_allocation.resource_owner #=> String
    def allocate_ipam_pool_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AllocateIpamPoolCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AllocateIpamPoolCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :allocate_ipam_pool_cidr,
        tracer: tracer
      )
      Telemetry::AllocateIpamPoolCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#allocate_ipam_pool_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#allocate_ipam_pool_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#allocate_ipam_pool_cidr] #{output.data}")
        output
      end
    end

    # <p>Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing
    # 			security groups with the specified security groups.</p>
    # @param [Hash | Types::ApplySecurityGroupsToClientVpnTargetNetworkInput] params
    #   Request parameters for this operation.
    #   See {Types::ApplySecurityGroupsToClientVpnTargetNetworkInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.apply_security_groups_to_client_vpn_target_network(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     vpc_id: 'VpcId', # required
    #     security_group_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ApplySecurityGroupsToClientVpnTargetNetworkOutput
    #   resp.data.security_group_ids #=> Array<String>
    #   resp.data.security_group_ids[0] #=> String
    def apply_security_groups_to_client_vpn_target_network(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ApplySecurityGroupsToClientVpnTargetNetworkInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ApplySecurityGroupsToClientVpnTargetNetwork.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :apply_security_groups_to_client_vpn_target_network,
        tracer: tracer
      )
      Telemetry::ApplySecurityGroupsToClientVpnTargetNetwork.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#apply_security_groups_to_client_vpn_target_network] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#apply_security_groups_to_client_vpn_target_network] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#apply_security_groups_to_client_vpn_target_network] #{output.data}")
        output
      end
    end

    # <p>Assigns one or more IPv6 addresses to the specified network interface. You can
    #             specify one or more specific IPv6 addresses, or you can specify the number of IPv6
    #             addresses to be automatically assigned from within the subnet's IPv6 CIDR block range.
    #             You can assign as many IPv6 addresses to a network interface as you can assign private
    #             IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a>
    #             in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You must specify either the IPv6 addresses or the IPv6 address count in the request. </p>
    #          <p>You can optionally use Prefix Delegation on the network interface. You must specify
    #             either the IPV6 Prefix Delegation prefixes, or the IPv6 Prefix Delegation count. For
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
    #                 Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::AssignIpv6AddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::AssignIpv6AddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.assign_ipv6_addresses(
    #     ipv6_address_count: 1,
    #     ipv6_addresses: [
    #       'member'
    #     ],
    #     ipv6_prefix_count: 1,
    #     ipv6_prefixes: [
    #       'member'
    #     ],
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssignIpv6AddressesOutput
    #   resp.data.assigned_ipv6_addresses #=> Array<String>
    #   resp.data.assigned_ipv6_addresses[0] #=> String
    #   resp.data.assigned_ipv6_prefixes #=> Array<String>
    #   resp.data.assigned_ipv6_prefixes[0] #=> String
    #   resp.data.network_interface_id #=> String
    def assign_ipv6_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssignIpv6AddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssignIpv6Addresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :assign_ipv6_addresses,
        tracer: tracer
      )
      Telemetry::AssignIpv6Addresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#assign_ipv6_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#assign_ipv6_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#assign_ipv6_addresses] #{output.data}")
        output
      end
    end

    # <p>Assigns one or more secondary private IP addresses to the specified network interface.</p>
    #          <p>You can specify one or more specific secondary IP addresses, or you can specify the number
    #             of secondary IP addresses to be automatically assigned within the subnet's CIDR block range.
    #             The number of secondary IP addresses that you can assign to an instance varies by instance type.
    #             For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about
    #             Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>When you move a secondary private IP address to another network interface, any Elastic IP address
    #             that is associated with the IP address is also moved.</p>
    #          <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network
    #             interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance
    #             metadata to confirm that the remapping is complete.</p>
    #          <p>You must specify either the IP addresses or the IP address count in the request.</p>
    #          <p>You can optionally use Prefix Delegation on the network interface. You must specify
    #             either the IPv4 Prefix Delegation prefixes, or the IPv4 Prefix Delegation count. For
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
    #                 Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::AssignPrivateIpAddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::AssignPrivateIpAddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.assign_private_ip_addresses(
    #     allow_reassignment: false,
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     private_ip_addresses: [
    #       'member'
    #     ],
    #     secondary_private_ip_address_count: 1,
    #     ipv4_prefixes: [
    #       'member'
    #     ],
    #     ipv4_prefix_count: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssignPrivateIpAddressesOutput
    #   resp.data.network_interface_id #=> String
    #   resp.data.assigned_private_ip_addresses #=> Array<AssignedPrivateIpAddress>
    #   resp.data.assigned_private_ip_addresses[0] #=> Types::AssignedPrivateIpAddress
    #   resp.data.assigned_private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.assigned_ipv4_prefixes #=> Array<Ipv4PrefixSpecification>
    #   resp.data.assigned_ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecification
    #   resp.data.assigned_ipv4_prefixes[0].ipv4_prefix #=> String
    # @example To assign a specific secondary private IP address to an interface
    #   # This example assigns the specified secondary private IP address to the specified network interface.
    #   resp = client.assign_private_ip_addresses({
    #     network_interface_id: "eni-e5aa89a3",
    #     private_ip_addresses: [
    #       "10.0.0.82"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To assign secondary private IP addresses that Amazon EC2 selects to an interface
    #   # This example assigns two secondary private IP addresses to the specified network interface. Amazon EC2 automatically assigns these IP addresses from the available IP addresses in the CIDR block range of the subnet the network interface is associated with.
    #   resp = client.assign_private_ip_addresses({
    #     network_interface_id: "eni-e5aa89a3",
    #     secondary_private_ip_address_count: 2
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def assign_private_ip_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssignPrivateIpAddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssignPrivateIpAddresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :assign_private_ip_addresses,
        tracer: tracer
      )
      Telemetry::AssignPrivateIpAddresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#assign_private_ip_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#assign_private_ip_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#assign_private_ip_addresses] #{output.data}")
        output
      end
    end

    # <p>Assigns one or more private IPv4 addresses to a private NAT gateway. For more information, see
    #             <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-working-with">Work with NAT gateways</a> in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::AssignPrivateNatGatewayAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::AssignPrivateNatGatewayAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.assign_private_nat_gateway_address(
    #     nat_gateway_id: 'NatGatewayId', # required
    #     private_ip_addresses: [
    #       'member'
    #     ],
    #     private_ip_address_count: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssignPrivateNatGatewayAddressOutput
    #   resp.data.nat_gateway_id #=> String
    #   resp.data.nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateway_addresses[0].association_id #=> String
    #   resp.data.nat_gateway_addresses[0].is_primary #=> Boolean
    #   resp.data.nat_gateway_addresses[0].failure_message #=> String
    #   resp.data.nat_gateway_addresses[0].status #=> String, one of ["assigning", "unassigning", "associating", "disassociating", "succeeded", "failed"]
    def assign_private_nat_gateway_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssignPrivateNatGatewayAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssignPrivateNatGatewayAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :assign_private_nat_gateway_address,
        tracer: tracer
      )
      Telemetry::AssignPrivateNatGatewayAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#assign_private_nat_gateway_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#assign_private_nat_gateway_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#assign_private_nat_gateway_address] #{output.data}")
        output
      end
    end

    # <p>Associates an Elastic IP address, or carrier IP address (for instances that are in
    #       subnets in Wavelength Zones) with an instance or a network interface. Before you can use an
    #       Elastic IP address, you must allocate it to your account.</p>
    #          <p>If the Elastic IP address is already
    #       associated with a different instance, it is disassociated from that instance and associated
    #       with the specified instance. If you associate an Elastic IP address with an instance that has
    #       an existing Elastic IP address, the existing address is disassociated from the instance, but
    #       remains allocated to your account.</p>
    #          <p>[Subnets in Wavelength Zones] You can associate an IP address from the telecommunication
    #       carrier to the instance or network interface. </p>
    #          <p>You cannot associate an Elastic IP address with an interface in a different network border group.</p>
    #          <important>
    #             <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2
    #         doesn't return an error, and you may be charged for each time the Elastic IP address is
    #         remapped to the same instance. For more information, see the <i>Elastic IP
    #           Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2
    #           Pricing</a>.</p>
    #          </important>
    # @param [Hash | Types::AssociateAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_address(
    #     allocation_id: 'AllocationId',
    #     instance_id: 'InstanceId',
    #     public_ip: 'PublicIp',
    #     allow_reassociation: false,
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId',
    #     private_ip_address: 'PrivateIpAddress'
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateAddressOutput
    #   resp.data.association_id #=> String
    # @example To associate an Elastic IP address
    #   # This example associates the specified Elastic IP address with the specified instance.
    #   resp = client.associate_address({
    #     allocation_id: "eipalloc-64d5890a",
    #     instance_id: "i-0b263919b6498b123"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     association_id: "eipassoc-2bebb745"
    #   }
    # @example To associate an Elastic IP address with a network interface
    #   # This example associates the specified Elastic IP address with the specified network interface.
    #   resp = client.associate_address({
    #     allocation_id: "eipalloc-64d5890a",
    #     network_interface_id: "eni-1a2b3c4d"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     association_id: "eipassoc-2bebb745"
    #   }
    def associate_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_address,
        tracer: tracer
      )
      Telemetry::AssociateAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_address] #{output.data}")
        output
      end
    end

    # <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p>
    #          <p>If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change the VPC that's associated with it.</p>
    # @param [Hash | Types::AssociateClientVpnTargetNetworkInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateClientVpnTargetNetworkInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_client_vpn_target_network(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     subnet_id: 'SubnetId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateClientVpnTargetNetworkOutput
    #   resp.data.association_id #=> String
    #   resp.data.status #=> Types::AssociationStatus
    #   resp.data.status.code #=> String, one of ["associating", "associated", "association-failed", "disassociating", "disassociated"]
    #   resp.data.status.message #=> String
    def associate_client_vpn_target_network(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateClientVpnTargetNetworkInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateClientVpnTargetNetwork.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_client_vpn_target_network,
        tracer: tracer
      )
      Telemetry::AssociateClientVpnTargetNetwork.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_client_vpn_target_network] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_client_vpn_target_network] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_client_vpn_target_network] #{output.data}")
        output
      end
    end

    # <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p>
    #          <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a>
    #           in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::AssociateDhcpOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateDhcpOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_dhcp_options(
    #     dhcp_options_id: 'DhcpOptionsId', # required
    #     vpc_id: 'VpcId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateDhcpOptionsOutput
    # @example To associate a DHCP options set with a VPC
    #   # This example associates the specified DHCP options set with the specified VPC.
    #   resp = client.associate_dhcp_options({
    #     dhcp_options_id: "dopt-d9070ebb",
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To associate the default DHCP options set with a VPC
    #   # This example associates the default DHCP options set with the specified VPC.
    #   resp = client.associate_dhcp_options({
    #     dhcp_options_id: "default",
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def associate_dhcp_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateDhcpOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateDhcpOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_dhcp_options,
        tracer: tracer
      )
      Telemetry::AssociateDhcpOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_dhcp_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_dhcp_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_dhcp_options] #{output.data}")
        output
      end
    end

    # <p>Associates an Identity and Access Management (IAM) role with an Certificate Manager (ACM) certificate.
    # 			This enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave. For more
    # 			information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html">Certificate Manager for Nitro Enclaves</a> in the <i>Amazon Web Services Nitro Enclaves
    # 					User Guide</i>.</p>
    #          <p>When the IAM role is associated with the ACM certificate, the certificate, certificate chain, and encrypted
    # 			private key are placed in an Amazon S3 location that only the associated IAM role can access. The private key of the certificate
    # 			is encrypted with an Amazon Web Services managed key that has an attached attestation-based key policy.</p>
    #          <p>To enable the IAM role to access the Amazon S3 object, you must grant it permission to call <code>s3:GetObject</code>
    # 			on the Amazon S3 bucket returned by the command. To enable the IAM role to access the KMS key,
    # 			you must grant it permission to call <code>kms:Decrypt</code> on the KMS key returned by the command.
    # 			For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html#add-policy">
    # 				Grant the role permission to access the certificate and encryption key</a> in the
    # 			<i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>
    # @param [Hash | Types::AssociateEnclaveCertificateIamRoleInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateEnclaveCertificateIamRoleInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_enclave_certificate_iam_role(
    #     certificate_arn: 'CertificateArn', # required
    #     role_arn: 'RoleArn', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateEnclaveCertificateIamRoleOutput
    #   resp.data.certificate_s3_bucket_name #=> String
    #   resp.data.certificate_s3_object_key #=> String
    #   resp.data.encryption_kms_key_id #=> String
    def associate_enclave_certificate_iam_role(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateEnclaveCertificateIamRoleInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateEnclaveCertificateIamRole.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_enclave_certificate_iam_role,
        tracer: tracer
      )
      Telemetry::AssociateEnclaveCertificateIamRole.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_enclave_certificate_iam_role] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_enclave_certificate_iam_role] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_enclave_certificate_iam_role] #{output.data}")
        output
      end
    end

    # <p>Associates an IAM instance profile with a running or stopped instance. You cannot
    #             associate more than one IAM instance profile with an instance.</p>
    # @param [Hash | Types::AssociateIamInstanceProfileInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateIamInstanceProfileInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_iam_instance_profile(
    #     iam_instance_profile: {
    #       arn: 'Arn',
    #       name: 'Name'
    #     }, # required
    #     instance_id: 'InstanceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateIamInstanceProfileOutput
    #   resp.data.iam_instance_profile_association #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_association.association_id #=> String
    #   resp.data.iam_instance_profile_association.instance_id #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_association.iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_association.timestamp #=> Time
    # @example To associate an IAM instance profile with an instance
    #   # This example associates an IAM instance profile named admin-role with the specified instance.
    #   resp = client.associate_iam_instance_profile({
    #     iam_instance_profile: {
    #       name: "admin-role"
    #     },
    #     instance_id: "i-123456789abcde123"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     iam_instance_profile_association: {
    #       instance_id: "i-123456789abcde123",
    #       state: "associating",
    #       association_id: "iip-assoc-0e7736511a163c209",
    #       iam_instance_profile: {
    #         id: "AIPAJBLK7RKJKWDXVHIEC",
    #         arn: "arn:aws:iam::123456789012:instance-profile/admin-role"
    #       }
    #     }
    #   }
    def associate_iam_instance_profile(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateIamInstanceProfileInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateIamInstanceProfile.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_iam_instance_profile,
        tracer: tracer
      )
      Telemetry::AssociateIamInstanceProfile.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_iam_instance_profile] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_iam_instance_profile] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_iam_instance_profile] #{output.data}")
        output
      end
    end

    # <p>Associates one or more targets with an event window. Only one type of target (instance IDs,
    #          Dedicated Host IDs, or tags) can be specified with an event window.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::AssociateInstanceEventWindowInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateInstanceEventWindowInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_instance_event_window(
    #     dry_run: false,
    #     instance_event_window_id: 'InstanceEventWindowId', # required
    #     association_target: {
    #       instance_ids: [
    #         'member'
    #       ],
    #       instance_tags: [
    #         {
    #           key: 'Key',
    #           value: 'Value'
    #         }
    #       ],
    #       dedicated_host_ids: [
    #         'member'
    #       ]
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    def associate_instance_event_window(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateInstanceEventWindowInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateInstanceEventWindow.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_instance_event_window,
        tracer: tracer
      )
      Telemetry::AssociateInstanceEventWindow.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_instance_event_window] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_instance_event_window] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_instance_event_window] #{output.data}")
        output
      end
    end

    # <p>Associates your Autonomous System Number (ASN) with a BYOIP CIDR that you own in the same Amazon Web Services Region.
    #             For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
    #          <p>After the association succeeds, the ASN is eligible for
    #             advertisement. You can view the association with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeByoipCidrs.html">DescribeByoipCidrs</a>. You can advertise the CIDR with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AdvertiseByoipCidr.html">AdvertiseByoipCidr</a>.</p>
    # @param [Hash | Types::AssociateIpamByoasnInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateIpamByoasnInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_ipam_byoasn(
    #     dry_run: false,
    #     asn: 'Asn', # required
    #     cidr: 'Cidr' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateIpamByoasnOutput
    #   resp.data.asn_association #=> Types::AsnAssociation
    #   resp.data.asn_association.asn #=> String
    #   resp.data.asn_association.cidr #=> String
    #   resp.data.asn_association.status_message #=> String
    #   resp.data.asn_association.state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    def associate_ipam_byoasn(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateIpamByoasnInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateIpamByoasn.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_ipam_byoasn,
        tracer: tracer
      )
      Telemetry::AssociateIpamByoasn.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_ipam_byoasn] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_ipam_byoasn] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_ipam_byoasn] #{output.data}")
        output
      end
    end

    # <p>Associates an IPAM resource discovery with an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::AssociateIpamResourceDiscoveryInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateIpamResourceDiscoveryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_ipam_resource_discovery(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     ipam_resource_discovery_id: 'IpamResourceDiscoveryId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateIpamResourceDiscoveryOutput
    #   resp.data.ipam_resource_discovery_association #=> Types::IpamResourceDiscoveryAssociation
    #   resp.data.ipam_resource_discovery_association.owner_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_resource_discovery_association_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_resource_discovery_association_arn #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_arn #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_region #=> String
    #   resp.data.ipam_resource_discovery_association.is_default #=> Boolean
    #   resp.data.ipam_resource_discovery_association.resource_discovery_status #=> String, one of ["active", "not-found"]
    #   resp.data.ipam_resource_discovery_association.state #=> String, one of ["associate-in-progress", "associate-complete", "associate-failed", "disassociate-in-progress", "disassociate-complete", "disassociate-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discovery_association.tags #=> Array<Tag>
    #   resp.data.ipam_resource_discovery_association.tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discovery_association.tags[0].key #=> String
    #   resp.data.ipam_resource_discovery_association.tags[0].value #=> String
    def associate_ipam_resource_discovery(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateIpamResourceDiscoveryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateIpamResourceDiscovery.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_ipam_resource_discovery,
        tracer: tracer
      )
      Telemetry::AssociateIpamResourceDiscovery.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_ipam_resource_discovery] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_ipam_resource_discovery] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_ipam_resource_discovery] #{output.data}")
        output
      end
    end

    # <p>Associates Elastic IP addresses (EIPs) and private IPv4 addresses with a public NAT gateway. For more information,
    #             see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-working-with">Work with NAT gateways</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <p>By default, you can associate up to 2 Elastic IP addresses per public NAT gateway. You can increase the limit by requesting a quota adjustment. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-eips">Elastic IP address quotas</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <important>
    #             <p>When you associate an EIP or secondary EIPs with a public NAT gateway, the network border group of the EIPs must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. If it's not the same, the EIP will fail to associate. You can see the network border group for the subnet's AZ by viewing the details of the subnet. Similarly, you can view the network border group of an EIP by viewing the details of the EIP address. For more information about network border groups and EIPs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#allocate-eip">Allocate an Elastic IP address</a> in the <i>Amazon VPC User Guide</i>.
    #         </p>
    #          </important>
    # @param [Hash | Types::AssociateNatGatewayAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateNatGatewayAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_nat_gateway_address(
    #     nat_gateway_id: 'NatGatewayId', # required
    #     allocation_ids: [
    #       'member'
    #     ], # required
    #     private_ip_addresses: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateNatGatewayAddressOutput
    #   resp.data.nat_gateway_id #=> String
    #   resp.data.nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateway_addresses[0].association_id #=> String
    #   resp.data.nat_gateway_addresses[0].is_primary #=> Boolean
    #   resp.data.nat_gateway_addresses[0].failure_message #=> String
    #   resp.data.nat_gateway_addresses[0].status #=> String, one of ["assigning", "unassigning", "associating", "disassociating", "succeeded", "failed"]
    def associate_nat_gateway_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateNatGatewayAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateNatGatewayAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_nat_gateway_address,
        tracer: tracer
      )
      Telemetry::AssociateNatGatewayAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_nat_gateway_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_nat_gateway_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_nat_gateway_address] #{output.data}")
        output
      end
    end

    # <p>Associates a subnet in your VPC or an internet gateway or virtual private gateway
    #             attached to your VPC with a route table in your VPC. This association causes traffic
    #             from the subnet or gateway to be routed according to the routes in the route table. The
    #             action returns an association ID, which you need in order to disassociate the route
    #             table later. A route table can be associated with multiple subnets.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    #                 <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::AssociateRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_route_table(
    #     dry_run: false,
    #     route_table_id: 'RouteTableId', # required
    #     subnet_id: 'SubnetId',
    #     gateway_id: 'GatewayId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateRouteTableOutput
    #   resp.data.association_id #=> String
    #   resp.data.association_state #=> Types::RouteTableAssociationState
    #   resp.data.association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.association_state.status_message #=> String
    # @example To associate a route table with a subnet
    #   # This example associates the specified route table with the specified subnet.
    #   resp = client.associate_route_table({
    #     subnet_id: "subnet-9d4a7b6",
    #     route_table_id: "rtb-22574640"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     association_id: "rtbassoc-781d0d1a"
    #   }
    def associate_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_route_table,
        tracer: tracer
      )
      Telemetry::AssociateRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_route_table] #{output.data}")
        output
      end
    end

    # <p>Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR
    #             block with your subnet.</p>
    # @param [Hash | Types::AssociateSubnetCidrBlockInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateSubnetCidrBlockInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_subnet_cidr_block(
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     subnet_id: 'SubnetId', # required
    #     ipv6_ipam_pool_id: 'Ipv6IpamPoolId',
    #     ipv6_netmask_length: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateSubnetCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet_id #=> String
    def associate_subnet_cidr_block(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateSubnetCidrBlockInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateSubnetCidrBlock.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_subnet_cidr_block,
        tracer: tracer
      )
      Telemetry::AssociateSubnetCidrBlock.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_subnet_cidr_block] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_subnet_cidr_block] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_subnet_cidr_block] #{output.data}")
        output
      end
    end

    # <p>Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.</p>
    #          <p>The transit gateway attachment must be in the available state before you can add a resource. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a>
    #             to see the state of the attachment.</p>
    # @param [Hash | Types::AssociateTransitGatewayMulticastDomainInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateTransitGatewayMulticastDomainInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_transit_gateway_multicast_domain(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     subnet_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateTransitGatewayMulticastDomainOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    def associate_transit_gateway_multicast_domain(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateTransitGatewayMulticastDomainInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateTransitGatewayMulticastDomain.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_transit_gateway_multicast_domain,
        tracer: tracer
      )
      Telemetry::AssociateTransitGatewayMulticastDomain.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_multicast_domain] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_multicast_domain] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_multicast_domain] #{output.data}")
        output
      end
    end

    # <p>Associates the specified transit gateway attachment with a transit gateway policy table.</p>
    # @param [Hash | Types::AssociateTransitGatewayPolicyTableInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateTransitGatewayPolicyTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_transit_gateway_policy_table(
    #     transit_gateway_policy_table_id: 'TransitGatewayPolicyTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateTransitGatewayPolicyTableOutput
    #   resp.data.association #=> Types::TransitGatewayPolicyTableAssociation
    #   resp.data.association.transit_gateway_policy_table_id #=> String
    #   resp.data.association.transit_gateway_attachment_id #=> String
    #   resp.data.association.resource_id #=> String
    #   resp.data.association.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    def associate_transit_gateway_policy_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateTransitGatewayPolicyTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateTransitGatewayPolicyTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_transit_gateway_policy_table,
        tracer: tracer
      )
      Telemetry::AssociateTransitGatewayPolicyTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_policy_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_policy_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_policy_table] #{output.data}")
        output
      end
    end

    # <p>Associates the specified attachment with the specified transit gateway route table. You can
    #         associate only one route table with an attachment.</p>
    # @param [Hash | Types::AssociateTransitGatewayRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateTransitGatewayRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_transit_gateway_route_table(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateTransitGatewayRouteTableOutput
    #   resp.data.association #=> Types::TransitGatewayAssociation
    #   resp.data.association.transit_gateway_route_table_id #=> String
    #   resp.data.association.transit_gateway_attachment_id #=> String
    #   resp.data.association.resource_id #=> String
    #   resp.data.association.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    def associate_transit_gateway_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateTransitGatewayRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateTransitGatewayRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_transit_gateway_route_table,
        tracer: tracer
      )
      Telemetry::AssociateTransitGatewayRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_transit_gateway_route_table] #{output.data}")
        output
      end
    end

    # <p>Associates a branch network interface with a trunk network interface.</p>
    #          <p>Before you create the association, run the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">create-network-interface</a> command and set
    #             <code>--interface-type</code> to <code>trunk</code>. You must also create a network interface for each branch network interface that you want to associate with the trunk network interface.</p>
    # @param [Hash | Types::AssociateTrunkInterfaceInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateTrunkInterfaceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_trunk_interface(
    #     branch_interface_id: 'BranchInterfaceId', # required
    #     trunk_interface_id: 'TrunkInterfaceId', # required
    #     vlan_id: 1,
    #     gre_key: 1,
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateTrunkInterfaceOutput
    #   resp.data.interface_association #=> Types::TrunkInterfaceAssociation
    #   resp.data.interface_association.association_id #=> String
    #   resp.data.interface_association.branch_interface_id #=> String
    #   resp.data.interface_association.trunk_interface_id #=> String
    #   resp.data.interface_association.interface_protocol #=> String, one of ["VLAN", "GRE"]
    #   resp.data.interface_association.vlan_id #=> Integer
    #   resp.data.interface_association.gre_key #=> Integer
    #   resp.data.interface_association.tags #=> Array<Tag>
    #   resp.data.interface_association.tags[0] #=> Types::Tag
    #   resp.data.interface_association.tags[0].key #=> String
    #   resp.data.interface_association.tags[0].value #=> String
    #   resp.data.client_token #=> String
    def associate_trunk_interface(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateTrunkInterfaceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateTrunkInterface.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_trunk_interface,
        tracer: tracer
      )
      Telemetry::AssociateTrunkInterface.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_trunk_interface] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_trunk_interface] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_trunk_interface] #{output.data}")
        output
      end
    end

    # <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block,
    #             an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that
    #             you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>). </p>
    #          <p>You must specify one of the following in the request: an IPv4 CIDR block, an IPv6
    #             pool, or an Amazon-provided IPv6 CIDR block.</p>
    #          <p>For more information about associating CIDR blocks with your VPC and applicable
    #             restrictions, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">IP addressing for your VPCs and subnets</a>
    #             in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::AssociateVpcCidrBlockInput] params
    #   Request parameters for this operation.
    #   See {Types::AssociateVpcCidrBlockInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.associate_vpc_cidr_block(
    #     amazon_provided_ipv6_cidr_block: false,
    #     cidr_block: 'CidrBlock',
    #     vpc_id: 'VpcId', # required
    #     ipv6_cidr_block_network_border_group: 'Ipv6CidrBlockNetworkBorderGroup',
    #     ipv6_pool: 'Ipv6Pool',
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     ipv4_ipam_pool_id: 'Ipv4IpamPoolId',
    #     ipv4_netmask_length: 1,
    #     ipv6_ipam_pool_id: 'Ipv6IpamPoolId',
    #     ipv6_netmask_length: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::AssociateVpcCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.ipv6_cidr_block_association.network_border_group #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_pool #=> String
    #   resp.data.cidr_block_association #=> Types::VpcCidrBlockAssociation
    #   resp.data.cidr_block_association.association_id #=> String
    #   resp.data.cidr_block_association.cidr_block #=> String
    #   resp.data.cidr_block_association.cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc_id #=> String
    def associate_vpc_cidr_block(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AssociateVpcCidrBlockInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AssociateVpcCidrBlock.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :associate_vpc_cidr_block,
        tracer: tracer
      )
      Telemetry::AssociateVpcCidrBlock.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_vpc_cidr_block] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#associate_vpc_cidr_block] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#associate_vpc_cidr_block] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC
    # 			security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You
    # 			can only link an instance that's in the <code>running</code> state. An instance is
    # 			automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when
    # 			you restart it.</p>
    #          <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p>
    #          <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
    # @param [Hash | Types::AttachClassicLinkVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::AttachClassicLinkVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.attach_classic_link_vpc(
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ], # required
    #     instance_id: 'InstanceId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AttachClassicLinkVpcOutput
    #   resp.data.return #=> Boolean
    def attach_classic_link_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AttachClassicLinkVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AttachClassicLinkVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :attach_classic_link_vpc,
        tracer: tracer
      )
      Telemetry::AttachClassicLinkVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_classic_link_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#attach_classic_link_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_classic_link_vpc] #{output.data}")
        output
      end
    end

    # <p>Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity
    # 		        between the internet and the VPC. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">Internet gateways</a> in the
    # 		        <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::AttachInternetGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::AttachInternetGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.attach_internet_gateway(
    #     dry_run: false,
    #     internet_gateway_id: 'InternetGatewayId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::AttachInternetGatewayOutput
    # @example To attach an Internet gateway to a VPC
    #   # This example attaches the specified Internet gateway to the specified VPC.
    #   resp = client.attach_internet_gateway({
    #     internet_gateway_id: "igw-c0a643a9",
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def attach_internet_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AttachInternetGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AttachInternetGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :attach_internet_gateway,
        tracer: tracer
      )
      Telemetry::AttachInternetGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_internet_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#attach_internet_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_internet_gateway] #{output.data}")
        output
      end
    end

    # <p>Attaches a network interface to an instance.</p>
    # @param [Hash | Types::AttachNetworkInterfaceInput] params
    #   Request parameters for this operation.
    #   See {Types::AttachNetworkInterfaceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.attach_network_interface(
    #     device_index: 1, # required
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     network_card_index: 1,
    #     ena_srd_specification: {
    #       ena_srd_enabled: false,
    #       ena_srd_udp_specification: {
    #         ena_srd_udp_enabled: false
    #       }
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::AttachNetworkInterfaceOutput
    #   resp.data.attachment_id #=> String
    #   resp.data.network_card_index #=> Integer
    # @example To attach a network interface to an instance
    #   # This example attaches the specified network interface to the specified instance.
    #   resp = client.attach_network_interface({
    #     network_interface_id: "eni-e5aa89a3",
    #     instance_id: "i-1234567890abcdef0",
    #     device_index: 1
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     attachment_id: "eni-attach-66c4350a"
    #   }
    def attach_network_interface(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AttachNetworkInterfaceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AttachNetworkInterface.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :attach_network_interface,
        tracer: tracer
      )
      Telemetry::AttachNetworkInterface.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_network_interface] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#attach_network_interface] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_network_interface] #{output.data}")
        output
      end
    end

    # <p>Attaches the specified Amazon Web Services Verified Access trust provider to the specified Amazon Web Services Verified Access instance.</p>
    # @param [Hash | Types::AttachVerifiedAccessTrustProviderInput] params
    #   Request parameters for this operation.
    #   See {Types::AttachVerifiedAccessTrustProviderInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.attach_verified_access_trust_provider(
    #     verified_access_instance_id: 'VerifiedAccessInstanceId', # required
    #     verified_access_trust_provider_id: 'VerifiedAccessTrustProviderId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AttachVerifiedAccessTrustProviderOutput
    #   resp.data.verified_access_trust_provider #=> Types::VerifiedAccessTrustProvider
    #   resp.data.verified_access_trust_provider.verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_trust_provider.description #=> String
    #   resp.data.verified_access_trust_provider.trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_trust_provider.user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_trust_provider.device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_trust_provider.oidc_options #=> Types::OidcOptions
    #   resp.data.verified_access_trust_provider.oidc_options.issuer #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.authorization_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.token_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.user_info_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_id #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_secret #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.scope #=> String
    #   resp.data.verified_access_trust_provider.device_options #=> Types::DeviceOptions
    #   resp.data.verified_access_trust_provider.device_options.tenant_id #=> String
    #   resp.data.verified_access_trust_provider.device_options.public_signing_key_url #=> String
    #   resp.data.verified_access_trust_provider.policy_reference_name #=> String
    #   resp.data.verified_access_trust_provider.creation_time #=> String
    #   resp.data.verified_access_trust_provider.last_updated_time #=> String
    #   resp.data.verified_access_trust_provider.tags #=> Array<Tag>
    #   resp.data.verified_access_trust_provider.tags[0] #=> Types::Tag
    #   resp.data.verified_access_trust_provider.tags[0].key #=> String
    #   resp.data.verified_access_trust_provider.tags[0].value #=> String
    #   resp.data.verified_access_trust_provider.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_trust_provider.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_trust_provider.sse_specification.kms_key_arn #=> String
    #   resp.data.verified_access_instance #=> Types::VerifiedAccessInstance
    #   resp.data.verified_access_instance.verified_access_instance_id #=> String
    #   resp.data.verified_access_instance.description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers #=> Array<VerifiedAccessTrustProviderCondensed>
    #   resp.data.verified_access_instance.verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProviderCondensed
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_instance.creation_time #=> String
    #   resp.data.verified_access_instance.last_updated_time #=> String
    #   resp.data.verified_access_instance.tags #=> Array<Tag>
    #   resp.data.verified_access_instance.fips_enabled #=> Boolean
    def attach_verified_access_trust_provider(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AttachVerifiedAccessTrustProviderInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AttachVerifiedAccessTrustProvider.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :attach_verified_access_trust_provider,
        tracer: tracer
      )
      Telemetry::AttachVerifiedAccessTrustProvider.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_verified_access_trust_provider] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#attach_verified_access_trust_provider] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_verified_access_trust_provider] #{output.data}")
        output
      end
    end

    # <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance
    #       with the specified device name.</p>
    #          <p>Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For
    #       more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>After you attach an EBS volume, you must make it available. For more information, see
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Make an EBS volume available for use</a>.</p>
    #          <p>If a volume has an Amazon Web Services Marketplace product code:</p>
    #          <ul>
    #             <li>
    #                <p>The volume can be attached only to a stopped instance.</p>
    #             </li>
    #             <li>
    #                <p>Amazon Web Services Marketplace product codes are copied from the volume to the instance.</p>
    #             </li>
    #             <li>
    #                <p>You must be subscribed to the product.</p>
    #             </li>
    #             <li>
    #                <p>The instance type and operating system of the instance must support the product. For
    #           example, you can't detach a volume from a Windows instance and attach it to a Linux
    #           instance.</p>
    #             </li>
    #          </ul>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attach an Amazon EBS volume to an instance</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::AttachVolumeInput] params
    #   Request parameters for this operation.
    #   See {Types::AttachVolumeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.attach_volume(
    #     device: 'Device', # required
    #     instance_id: 'InstanceId', # required
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AttachVolumeOutput
    #   resp.data.attach_time #=> Time
    #   resp.data.device #=> String
    #   resp.data.instance_id #=> String
    #   resp.data.state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.volume_id #=> String
    #   resp.data.delete_on_termination #=> Boolean
    #   resp.data.associated_resource #=> String
    #   resp.data.instance_owning_service #=> String
    # @example To attach a volume to an instance
    #   # This example attaches a volume (``vol-1234567890abcdef0``) to an instance (``i-01474ef662b89480``) as ``/dev/sdf``.
    #   resp = client.attach_volume({
    #     volume_id: "vol-1234567890abcdef0",
    #     instance_id: "i-01474ef662b89480",
    #     device: "/dev/sdf"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     attach_time: Time.parse('2016-08-29T18:52:32.724Z'),
    #     instance_id: "i-01474ef662b89480",
    #     volume_id: "vol-1234567890abcdef0",
    #     state: "attaching",
    #     device: "/dev/sdf"
    #   }
    def attach_volume(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AttachVolumeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AttachVolume.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :attach_volume,
        tracer: tracer
      )
      Telemetry::AttachVolume.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_volume] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#attach_volume] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_volume] #{output.data}")
        output
      end
    end

    # <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private
    #             gateway to one VPC at a time.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::AttachVpnGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::AttachVpnGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.attach_vpn_gateway(
    #     vpc_id: 'VpcId', # required
    #     vpn_gateway_id: 'VpnGatewayId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AttachVpnGatewayOutput
    #   resp.data.vpc_attachment #=> Types::VpcAttachment
    #   resp.data.vpc_attachment.state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.vpc_attachment.vpc_id #=> String
    def attach_vpn_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AttachVpnGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AttachVpnGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :attach_vpn_gateway,
        tracer: tracer
      )
      Telemetry::AttachVpnGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_vpn_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#attach_vpn_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#attach_vpn_gateway] #{output.data}")
        output
      end
    end

    # <p>Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as
    # 			firewall rules that grant access to networks. You must configure ingress authorization rules to
    # 			enable clients to access resources in Amazon Web Services or on-premises networks.</p>
    # @param [Hash | Types::AuthorizeClientVpnIngressInput] params
    #   Request parameters for this operation.
    #   See {Types::AuthorizeClientVpnIngressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.authorize_client_vpn_ingress(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     target_network_cidr: 'TargetNetworkCidr', # required
    #     access_group_id: 'AccessGroupId',
    #     authorize_all_groups: false,
    #     description: 'Description',
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::AuthorizeClientVpnIngressOutput
    #   resp.data.status #=> Types::ClientVpnAuthorizationRuleStatus
    #   resp.data.status.code #=> String, one of ["authorizing", "active", "failed", "revoking"]
    #   resp.data.status.message #=> String
    def authorize_client_vpn_ingress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AuthorizeClientVpnIngressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AuthorizeClientVpnIngress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :authorize_client_vpn_ingress,
        tracer: tracer
      )
      Telemetry::AuthorizeClientVpnIngress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#authorize_client_vpn_ingress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#authorize_client_vpn_ingress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#authorize_client_vpn_ingress] #{output.data}")
        output
      end
    end

    # <p>Adds the specified outbound (egress) rules to a security group for use with a VPC.</p>
    #          <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR
    #             address ranges, or to the instances that are associated with the specified source
    #             security groups. When specifying an outbound rule for your security group in a VPC, the
    #             <code>IpPermissions</code> must include a destination for the traffic.</p>
    #          <p>You specify a protocol for each rule (for example, TCP).
    #        For the TCP and UDP protocols, you must also specify the destination port or port range.
    #        For the ICMP protocol, you must also specify the ICMP type and code.
    #        You can use -1 for the type or code to mean all types or all codes.</p>
    #          <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p>
    #          <p>For information about VPC security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a>.</p>
    #          <note>
    #             <p>If you want to reference a security group across VPCs attached to a transit gateway using the
    #                     <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-transit-gateways.html#create-tgw">security group
    #                     referencing feature</a>, note that you can only reference security groups
    #                 for ingress rules. You cannot reference a security group for egress rules.</p>
    #          </note>
    # @param [Hash | Types::AuthorizeSecurityGroupEgressInput] params
    #   Request parameters for this operation.
    #   See {Types::AuthorizeSecurityGroupEgressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.authorize_security_group_egress(
    #     dry_run: false,
    #     group_id: 'GroupId', # required
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     ip_protocol: 'IpProtocol',
    #     to_port: 1,
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::AuthorizeSecurityGroupEgressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.security_group_rules #=> Array<SecurityGroupRule>
    #   resp.data.security_group_rules[0] #=> Types::SecurityGroupRule
    #   resp.data.security_group_rules[0].security_group_rule_id #=> String
    #   resp.data.security_group_rules[0].group_id #=> String
    #   resp.data.security_group_rules[0].group_owner_id #=> String
    #   resp.data.security_group_rules[0].is_egress #=> Boolean
    #   resp.data.security_group_rules[0].ip_protocol #=> String
    #   resp.data.security_group_rules[0].from_port #=> Integer
    #   resp.data.security_group_rules[0].to_port #=> Integer
    #   resp.data.security_group_rules[0].cidr_ipv4 #=> String
    #   resp.data.security_group_rules[0].cidr_ipv6 #=> String
    #   resp.data.security_group_rules[0].prefix_list_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info #=> Types::ReferencedSecurityGroup
    #   resp.data.security_group_rules[0].referenced_group_info.group_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.peering_status #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.user_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_peering_connection_id #=> String
    #   resp.data.security_group_rules[0].description #=> String
    #   resp.data.security_group_rules[0].tags #=> Array<Tag>
    #   resp.data.security_group_rules[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_rules[0].tags[0].key #=> String
    #   resp.data.security_group_rules[0].tags[0].value #=> String
    # @example To add a rule that allows outbound traffic to a specific address range
    #   # This example adds a rule that grants access to the specified address ranges on TCP port 80.
    #   resp = client.authorize_security_group_egress({
    #     group_id: "sg-1a2b3c4d",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 80,
    #         to_port: 80,
    #         ip_ranges: [
    #           {
    #             cidr_ip: "10.0.0.0/16"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To add a rule that allows outbound traffic to a specific security group
    #   # This example adds a rule that grants access to the specified security group on TCP port 80.
    #   resp = client.authorize_security_group_egress({
    #     group_id: "sg-1a2b3c4d",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 80,
    #         to_port: 80,
    #         user_id_group_pairs: [
    #           {
    #             group_id: "sg-4b51a32f"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def authorize_security_group_egress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AuthorizeSecurityGroupEgressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AuthorizeSecurityGroupEgress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :authorize_security_group_egress,
        tracer: tracer
      )
      Telemetry::AuthorizeSecurityGroupEgress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#authorize_security_group_egress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#authorize_security_group_egress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#authorize_security_group_egress] #{output.data}")
        output
      end
    end

    # <p>Adds the specified inbound (ingress) rules to a security group.</p>
    #          <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR
    #        address range, or from the instances that are associated with the specified destination security
    #        groups. When specifying an inbound rule for your security group in a VPC, the
    #          <code>IpPermissions</code> must include a source for the traffic.</p>
    #          <p>You specify a protocol for each rule (for example, TCP).
    #        For TCP and UDP, you must also specify the destination port or port range.
    #        For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code.
    #        You can use -1 to mean all types or all codes.</p>
    #          <p>Rule changes are propagated to instances within the security group as quickly as possible.
    #          However, a small delay might occur.</p>
    #          <p>For more information about VPC security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a>.</p>
    # @param [Hash | Types::AuthorizeSecurityGroupIngressInput] params
    #   Request parameters for this operation.
    #   See {Types::AuthorizeSecurityGroupIngressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.authorize_security_group_ingress(
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     ip_protocol: 'IpProtocol',
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId',
    #     to_port: 1,
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::AuthorizeSecurityGroupIngressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.security_group_rules #=> Array<SecurityGroupRule>
    #   resp.data.security_group_rules[0] #=> Types::SecurityGroupRule
    #   resp.data.security_group_rules[0].security_group_rule_id #=> String
    #   resp.data.security_group_rules[0].group_id #=> String
    #   resp.data.security_group_rules[0].group_owner_id #=> String
    #   resp.data.security_group_rules[0].is_egress #=> Boolean
    #   resp.data.security_group_rules[0].ip_protocol #=> String
    #   resp.data.security_group_rules[0].from_port #=> Integer
    #   resp.data.security_group_rules[0].to_port #=> Integer
    #   resp.data.security_group_rules[0].cidr_ipv4 #=> String
    #   resp.data.security_group_rules[0].cidr_ipv6 #=> String
    #   resp.data.security_group_rules[0].prefix_list_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info #=> Types::ReferencedSecurityGroup
    #   resp.data.security_group_rules[0].referenced_group_info.group_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.peering_status #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.user_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_peering_connection_id #=> String
    #   resp.data.security_group_rules[0].description #=> String
    #   resp.data.security_group_rules[0].tags #=> Array<Tag>
    #   resp.data.security_group_rules[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_rules[0].tags[0].key #=> String
    #   resp.data.security_group_rules[0].tags[0].value #=> String
    # @example To add a rule that allows inbound SSH traffic from an IPv4 address range
    #   # This example enables inbound traffic on TCP port 22 (SSH). The rule includes a description to help you identify it later.
    #   resp = client.authorize_security_group_ingress({
    #     group_id: "sg-903004f8",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 22,
    #         to_port: 22,
    #         ip_ranges: [
    #           {
    #             cidr_ip: "203.0.113.0/24",
    #             description: "SSH access from the LA office"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To add a rule that allows inbound HTTP traffic from another security group
    #   # This example enables inbound traffic on TCP port 80 from the specified security group. The group must be in the same VPC or a peer VPC. Incoming traffic is allowed based on the private IP addresses of instances that are associated with the specified security group.
    #   resp = client.authorize_security_group_ingress({
    #     group_id: "sg-111aaa22",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 80,
    #         to_port: 80,
    #         user_id_group_pairs: [
    #           {
    #             group_id: "sg-1a2b3c4d",
    #             description: "HTTP access from other instances"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To add a rule that allows inbound RDP traffic from an IPv6 address range
    #   # This example adds an inbound rule that allows RDP traffic from the specified IPv6 address range. The rule includes a description to help you identify it later.
    #   resp = client.authorize_security_group_ingress({
    #     group_id: "sg-123abc12 ",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 3389,
    #         to_port: 3389,
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: "2001:db8:1234:1a00::/64",
    #             description: "RDP access from the NY office"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def authorize_security_group_ingress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::AuthorizeSecurityGroupIngressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::AuthorizeSecurityGroupIngress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :authorize_security_group_ingress,
        tracer: tracer
      )
      Telemetry::AuthorizeSecurityGroupIngress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#authorize_security_group_ingress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#authorize_security_group_ingress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#authorize_security_group_ingress] #{output.data}")
        output
      end
    end

    # <p>Bundles an Amazon instance store-backed Windows instance.</p>
    #          <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p>
    #          <note>
    #             <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p>
    #          </note>
    # @param [Hash | Types::BundleInstanceInput] params
    #   Request parameters for this operation.
    #   See {Types::BundleInstanceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.bundle_instance(
    #     instance_id: 'InstanceId', # required
    #     storage: {
    #       s3: {
    #         aws_access_key_id: 'AWSAccessKeyId',
    #         bucket: 'Bucket',
    #         prefix: 'Prefix',
    #         upload_policy: 'UploadPolicy',
    #         upload_policy_signature: 'UploadPolicySignature'
    #       }
    #     }, # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::BundleInstanceOutput
    #   resp.data.bundle_task #=> Types::BundleTask
    #   resp.data.bundle_task.bundle_id #=> String
    #   resp.data.bundle_task.bundle_task_error #=> Types::BundleTaskError
    #   resp.data.bundle_task.bundle_task_error.code #=> String
    #   resp.data.bundle_task.bundle_task_error.message #=> String
    #   resp.data.bundle_task.instance_id #=> String
    #   resp.data.bundle_task.progress #=> String
    #   resp.data.bundle_task.start_time #=> Time
    #   resp.data.bundle_task.state #=> String, one of ["pending", "waiting-for-shutdown", "bundling", "storing", "cancelling", "complete", "failed"]
    #   resp.data.bundle_task.storage #=> Types::Storage
    #   resp.data.bundle_task.storage.s3 #=> Types::S3Storage
    #   resp.data.bundle_task.storage.s3.aws_access_key_id #=> String
    #   resp.data.bundle_task.storage.s3.bucket #=> String
    #   resp.data.bundle_task.storage.s3.prefix #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy_signature #=> String
    #   resp.data.bundle_task.update_time #=> Time
    def bundle_instance(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::BundleInstanceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::BundleInstance.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :bundle_instance,
        tracer: tracer
      )
      Telemetry::BundleInstance.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#bundle_instance] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#bundle_instance] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#bundle_instance] #{output.data}")
        output
      end
    end

    # <p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
    # @param [Hash | Types::CancelBundleTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelBundleTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_bundle_task(
    #     bundle_id: 'BundleId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelBundleTaskOutput
    #   resp.data.bundle_task #=> Types::BundleTask
    #   resp.data.bundle_task.bundle_id #=> String
    #   resp.data.bundle_task.bundle_task_error #=> Types::BundleTaskError
    #   resp.data.bundle_task.bundle_task_error.code #=> String
    #   resp.data.bundle_task.bundle_task_error.message #=> String
    #   resp.data.bundle_task.instance_id #=> String
    #   resp.data.bundle_task.progress #=> String
    #   resp.data.bundle_task.start_time #=> Time
    #   resp.data.bundle_task.state #=> String, one of ["pending", "waiting-for-shutdown", "bundling", "storing", "cancelling", "complete", "failed"]
    #   resp.data.bundle_task.storage #=> Types::Storage
    #   resp.data.bundle_task.storage.s3 #=> Types::S3Storage
    #   resp.data.bundle_task.storage.s3.aws_access_key_id #=> String
    #   resp.data.bundle_task.storage.s3.bucket #=> String
    #   resp.data.bundle_task.storage.s3.prefix #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy #=> String
    #   resp.data.bundle_task.storage.s3.upload_policy_signature #=> String
    #   resp.data.bundle_task.update_time #=> Time
    def cancel_bundle_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelBundleTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelBundleTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_bundle_task,
        tracer: tracer
      )
      Telemetry::CancelBundleTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_bundle_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_bundle_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_bundle_task] #{output.data}")
        output
      end
    end

    # <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to
    # 			<code>cancelled</code>.</p>
    #          <p>Instances running in the reserved capacity continue running until you stop them. Stopped
    # 			instances that target the Capacity Reservation can no longer launch. Modify these instances to either
    # 			target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation
    # 			that has matching attributes and sufficient capacity.</p>
    # @param [Hash | Types::CancelCapacityReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelCapacityReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_capacity_reservation(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelCapacityReservationOutput
    #   resp.data.return #=> Boolean
    def cancel_capacity_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelCapacityReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelCapacityReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_capacity_reservation,
        tracer: tracer
      )
      Telemetry::CancelCapacityReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_capacity_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_capacity_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_capacity_reservation] #{output.data}")
        output
      end
    end

    # <p>Cancels one or more Capacity Reservation Fleets. When you cancel a Capacity Reservation
    # 			Fleet, the following happens:</p>
    #          <ul>
    #             <li>
    #                <p>The Capacity Reservation Fleet's status changes to <code>cancelled</code>.</p>
    #             </li>
    #             <li>
    #                <p>The individual Capacity Reservations in the Fleet are cancelled. Instances running
    # 					in the Capacity Reservations at the time of cancelling the Fleet continue to run in
    # 					shared capacity.</p>
    #             </li>
    #             <li>
    #                <p>The Fleet stops creating new Capacity Reservations.</p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::CancelCapacityReservationFleetsInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelCapacityReservationFleetsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_capacity_reservation_fleets(
    #     dry_run: false,
    #     capacity_reservation_fleet_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelCapacityReservationFleetsOutput
    #   resp.data.successful_fleet_cancellations #=> Array<CapacityReservationFleetCancellationState>
    #   resp.data.successful_fleet_cancellations[0] #=> Types::CapacityReservationFleetCancellationState
    #   resp.data.successful_fleet_cancellations[0].current_fleet_state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.successful_fleet_cancellations[0].previous_fleet_state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.successful_fleet_cancellations[0].capacity_reservation_fleet_id #=> String
    #   resp.data.failed_fleet_cancellations #=> Array<FailedCapacityReservationFleetCancellationResult>
    #   resp.data.failed_fleet_cancellations[0] #=> Types::FailedCapacityReservationFleetCancellationResult
    #   resp.data.failed_fleet_cancellations[0].capacity_reservation_fleet_id #=> String
    #   resp.data.failed_fleet_cancellations[0].cancel_capacity_reservation_fleet_error #=> Types::CancelCapacityReservationFleetError
    #   resp.data.failed_fleet_cancellations[0].cancel_capacity_reservation_fleet_error.code #=> String
    #   resp.data.failed_fleet_cancellations[0].cancel_capacity_reservation_fleet_error.message #=> String
    def cancel_capacity_reservation_fleets(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelCapacityReservationFleetsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelCapacityReservationFleets.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_capacity_reservation_fleets,
        tracer: tracer
      )
      Telemetry::CancelCapacityReservationFleets.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_capacity_reservation_fleets] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_capacity_reservation_fleets] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_capacity_reservation_fleets] #{output.data}")
        output
      end
    end

    # <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all
    #    artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is
    #    in the process of transferring the final disk image, the command fails and returns an exception.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon
    #     EC2 CLI</a>.</p>
    # @param [Hash | Types::CancelConversionTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelConversionTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_conversion_task(
    #     conversion_task_id: 'ConversionTaskId', # required
    #     dry_run: false,
    #     reason_message: 'ReasonMessage'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelConversionTaskOutput
    def cancel_conversion_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelConversionTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelConversionTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_conversion_task,
        tracer: tracer
      )
      Telemetry::CancelConversionTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_conversion_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_conversion_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_conversion_task] #{output.data}")
        output
      end
    end

    # <p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created
    #    Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the
    #    command fails and returns an error.</p>
    # @param [Hash | Types::CancelExportTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelExportTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_export_task(
    #     export_task_id: 'ExportTaskId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelExportTaskOutput
    def cancel_export_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelExportTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelExportTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_export_task,
        tracer: tracer
      )
      Telemetry::CancelExportTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_export_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_export_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_export_task] #{output.data}")
        output
      end
    end

    # <p>Removes your Amazon Web Services account from the launch permissions for the specified AMI. For more
    #       information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cancel-sharing-an-AMI.html">
    #         Cancel having an AMI shared with your Amazon Web Services account</a> in the
    #       <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CancelImageLaunchPermissionInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelImageLaunchPermissionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_image_launch_permission(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelImageLaunchPermissionOutput
    #   resp.data.return #=> Boolean
    def cancel_image_launch_permission(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelImageLaunchPermissionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelImageLaunchPermission.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_image_launch_permission,
        tracer: tracer
      )
      Telemetry::CancelImageLaunchPermission.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_image_launch_permission] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_image_launch_permission] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_image_launch_permission] #{output.data}")
        output
      end
    end

    # <p>Cancels an in-process import virtual machine or import snapshot task.</p>
    # @param [Hash | Types::CancelImportTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelImportTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_import_task(
    #     cancel_reason: 'CancelReason',
    #     dry_run: false,
    #     import_task_id: 'ImportTaskId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelImportTaskOutput
    #   resp.data.import_task_id #=> String
    #   resp.data.previous_state #=> String
    #   resp.data.state #=> String
    def cancel_import_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelImportTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelImportTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_import_task,
        tracer: tracer
      )
      Telemetry::CancelImportTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_import_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_import_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_import_task] #{output.data}")
        output
      end
    end

    # <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p>
    #          <p>For more information, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    #         in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CancelReservedInstancesListingInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelReservedInstancesListingInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_reserved_instances_listing(
    #     reserved_instances_listing_id: 'ReservedInstancesListingId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelReservedInstancesListingOutput
    #   resp.data.reserved_instances_listings #=> Array<ReservedInstancesListing>
    #   resp.data.reserved_instances_listings[0] #=> Types::ReservedInstancesListing
    #   resp.data.reserved_instances_listings[0].client_token #=> String
    #   resp.data.reserved_instances_listings[0].create_date #=> Time
    #   resp.data.reserved_instances_listings[0].instance_counts #=> Array<InstanceCount>
    #   resp.data.reserved_instances_listings[0].instance_counts[0] #=> Types::InstanceCount
    #   resp.data.reserved_instances_listings[0].instance_counts[0].instance_count #=> Integer
    #   resp.data.reserved_instances_listings[0].instance_counts[0].state #=> String, one of ["available", "sold", "cancelled", "pending"]
    #   resp.data.reserved_instances_listings[0].price_schedules #=> Array<PriceSchedule>
    #   resp.data.reserved_instances_listings[0].price_schedules[0] #=> Types::PriceSchedule
    #   resp.data.reserved_instances_listings[0].price_schedules[0].active #=> Boolean
    #   resp.data.reserved_instances_listings[0].price_schedules[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_listings[0].price_schedules[0].price #=> Float
    #   resp.data.reserved_instances_listings[0].price_schedules[0].term #=> Integer
    #   resp.data.reserved_instances_listings[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_listings[0].reserved_instances_listing_id #=> String
    #   resp.data.reserved_instances_listings[0].status #=> String, one of ["active", "pending", "cancelled", "closed"]
    #   resp.data.reserved_instances_listings[0].status_message #=> String
    #   resp.data.reserved_instances_listings[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances_listings[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances_listings[0].tags[0].key #=> String
    #   resp.data.reserved_instances_listings[0].tags[0].value #=> String
    #   resp.data.reserved_instances_listings[0].update_date #=> Time
    def cancel_reserved_instances_listing(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelReservedInstancesListingInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelReservedInstancesListing.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_reserved_instances_listing,
        tracer: tracer
      )
      Telemetry::CancelReservedInstancesListing.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_reserved_instances_listing] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_reserved_instances_listing] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_reserved_instances_listing] #{output.data}")
        output
      end
    end

    # <p>Cancels the specified Spot Fleet requests.</p>
    #          <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new instances.</p>
    #          <p>You must also specify whether a canceled Spot Fleet request should terminate its instances. If you
    #             choose to terminate the instances, the Spot Fleet request enters the
    #                 <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters
    #             the <code>cancelled_running</code> state and the instances continue to run until they
    #             are interrupted or you terminate them manually.</p>
    # @param [Hash | Types::CancelSpotFleetRequestsInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelSpotFleetRequestsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_spot_fleet_requests(
    #     dry_run: false,
    #     spot_fleet_request_ids: [
    #       'member'
    #     ], # required
    #     terminate_instances: false # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelSpotFleetRequestsOutput
    #   resp.data.successful_fleet_requests #=> Array<CancelSpotFleetRequestsSuccessItem>
    #   resp.data.successful_fleet_requests[0] #=> Types::CancelSpotFleetRequestsSuccessItem
    #   resp.data.successful_fleet_requests[0].current_spot_fleet_request_state #=> String, one of ["submitted", "active", "cancelled", "failed", "cancelled_running", "cancelled_terminating", "modifying"]
    #   resp.data.successful_fleet_requests[0].previous_spot_fleet_request_state #=> String, one of ["submitted", "active", "cancelled", "failed", "cancelled_running", "cancelled_terminating", "modifying"]
    #   resp.data.successful_fleet_requests[0].spot_fleet_request_id #=> String
    #   resp.data.unsuccessful_fleet_requests #=> Array<CancelSpotFleetRequestsErrorItem>
    #   resp.data.unsuccessful_fleet_requests[0] #=> Types::CancelSpotFleetRequestsErrorItem
    #   resp.data.unsuccessful_fleet_requests[0].error #=> Types::CancelSpotFleetRequestsError
    #   resp.data.unsuccessful_fleet_requests[0].error.code #=> String, one of ["fleetRequestIdDoesNotExist", "fleetRequestIdMalformed", "fleetRequestNotInCancellableState", "unexpectedError"]
    #   resp.data.unsuccessful_fleet_requests[0].error.message #=> String
    #   resp.data.unsuccessful_fleet_requests[0].spot_fleet_request_id #=> String
    # @example To cancel a Spot fleet request
    #   # This example cancels the specified Spot fleet request and terminates its associated Spot Instances.
    #   resp = client.cancel_spot_fleet_requests({
    #     spot_fleet_request_ids: [
    #       "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #     ],
    #     terminate_instances: true
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     successful_fleet_requests: [
    #       {
    #         spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #         current_spot_fleet_request_state: "cancelled_running",
    #         previous_spot_fleet_request_state: "active"
    #       }
    #     ]
    #   }
    # @example To cancel a Spot fleet request without terminating its Spot Instances
    #   # This example cancels the specified Spot fleet request without terminating its associated Spot Instances.
    #   resp = client.cancel_spot_fleet_requests({
    #     spot_fleet_request_ids: [
    #       "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #     ],
    #     terminate_instances: false
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     successful_fleet_requests: [
    #       {
    #         spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #         current_spot_fleet_request_state: "cancelled_terminating",
    #         previous_spot_fleet_request_state: "active"
    #       }
    #     ]
    #   }
    def cancel_spot_fleet_requests(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelSpotFleetRequestsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelSpotFleetRequests.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_spot_fleet_requests,
        tracer: tracer
      )
      Telemetry::CancelSpotFleetRequests.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_spot_fleet_requests] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_spot_fleet_requests] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_spot_fleet_requests] #{output.data}")
        output
      end
    end

    # <p>Cancels one or more Spot Instance requests.</p>
    #          <important>
    #             <p>Canceling a Spot Instance request does not terminate running Spot Instances
    #                 associated with the request.</p>
    #          </important>
    # @param [Hash | Types::CancelSpotInstanceRequestsInput] params
    #   Request parameters for this operation.
    #   See {Types::CancelSpotInstanceRequestsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.cancel_spot_instance_requests(
    #     dry_run: false,
    #     spot_instance_request_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CancelSpotInstanceRequestsOutput
    #   resp.data.cancelled_spot_instance_requests #=> Array<CancelledSpotInstanceRequest>
    #   resp.data.cancelled_spot_instance_requests[0] #=> Types::CancelledSpotInstanceRequest
    #   resp.data.cancelled_spot_instance_requests[0].spot_instance_request_id #=> String
    #   resp.data.cancelled_spot_instance_requests[0].state #=> String, one of ["active", "open", "closed", "cancelled", "completed"]
    # @example To cancel Spot Instance requests
    #   # This example cancels a Spot Instance request.
    #   resp = client.cancel_spot_instance_requests({
    #     spot_instance_request_ids: [
    #       "sir-08b93456"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     cancelled_spot_instance_requests: [
    #       {
    #         state: "cancelled",
    #         spot_instance_request_id: "sir-08b93456"
    #       }
    #     ]
    #   }
    def cancel_spot_instance_requests(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CancelSpotInstanceRequestsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CancelSpotInstanceRequests.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :cancel_spot_instance_requests,
        tracer: tracer
      )
      Telemetry::CancelSpotInstanceRequests.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_spot_instance_requests] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#cancel_spot_instance_requests] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#cancel_spot_instance_requests] #{output.data}")
        output
      end
    end

    # <p>Determines whether a product code is associated with an instance. This action can only
    #             be used by the owner of the product code. It is useful when a product code owner must
    #             verify whether another user's instance is eligible for support.</p>
    # @param [Hash | Types::ConfirmProductInstanceInput] params
    #   Request parameters for this operation.
    #   See {Types::ConfirmProductInstanceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.confirm_product_instance(
    #     instance_id: 'InstanceId', # required
    #     product_code: 'ProductCode', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ConfirmProductInstanceOutput
    #   resp.data.owner_id #=> String
    #   resp.data.return #=> Boolean
    # @example To confirm the product instance
    #   # This example determines whether the specified product code is associated with the specified instance.
    #   resp = client.confirm_product_instance({
    #     product_code: "774F4FF8",
    #     instance_id: "i-1234567890abcdef0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     owner_id: "123456789012"
    #   }
    def confirm_product_instance(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ConfirmProductInstanceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ConfirmProductInstance.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :confirm_product_instance,
        tracer: tracer
      )
      Telemetry::ConfirmProductInstance.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#confirm_product_instance] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#confirm_product_instance] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#confirm_product_instance] #{output.data}")
        output
      end
    end

    # <p>Copies the specified Amazon FPGA Image (AFI) to the current Region.</p>
    # @param [Hash | Types::CopyFpgaImageInput] params
    #   Request parameters for this operation.
    #   See {Types::CopyFpgaImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.copy_fpga_image(
    #     dry_run: false,
    #     source_fpga_image_id: 'SourceFpgaImageId', # required
    #     description: 'Description',
    #     name: 'Name',
    #     source_region: 'SourceRegion', # required
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CopyFpgaImageOutput
    #   resp.data.fpga_image_id #=> String
    def copy_fpga_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CopyFpgaImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CopyFpgaImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :copy_fpga_image,
        tracer: tracer
      )
      Telemetry::CopyFpgaImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#copy_fpga_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#copy_fpga_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#copy_fpga_image] #{output.data}")
        output
      end
    end

    # <p>Initiates the copy of an AMI. You can copy an AMI from one Region to another, or from a
    #       Region to an Outpost. You can't copy an AMI from an Outpost to a Region, from one Outpost
    #       to another, or within the same Outpost. To copy an AMI to another partition, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p>
    #          <p>To copy an AMI from one Region to another, specify the source Region using the
    #      		<b>SourceRegion</b> parameter, and specify the
    #      		destination Region using its endpoint. Copies of encrypted backing snapshots for
    #      		the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted,
    #      		unless you set <code>Encrypted</code> during the copy operation. You cannot
    #      		create an unencrypted copy of an encrypted backing snapshot.</p>
    #          <p>To copy an AMI from a Region to an Outpost, specify the source Region using the
    #    		<b>SourceRegion</b> parameter, and specify the
    #    		ARN of the destination Outpost using <b>DestinationOutpostArn</b>.
    #    		Backing snapshots copied to an Outpost are encrypted by default using the default
    #    		encryption key for the Region, or a different key that you specify in the request using
    #    		<b>KmsKeyId</b>. Outposts do not support unencrypted
    #    		snapshots. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
    #    			Amazon EBS local snapshots on Outposts</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copy an AMI</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CopyImageInput] params
    #   Request parameters for this operation.
    #   See {Types::CopyImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.copy_image(
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     encrypted: false,
    #     kms_key_id: 'KmsKeyId',
    #     name: 'Name', # required
    #     source_image_id: 'SourceImageId', # required
    #     source_region: 'SourceRegion', # required
    #     destination_outpost_arn: 'DestinationOutpostArn',
    #     dry_run: false,
    #     copy_image_tags: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CopyImageOutput
    #   resp.data.image_id #=> String
    # @example To copy an AMI to another region
    #   # This example copies the specified AMI from the us-east-1 region to the current region.
    #   resp = client.copy_image({
    #     description: "",
    #     name: "My server",
    #     source_image_id: "ami-5731123e",
    #     source_region: "us-east-1"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     image_id: "ami-438bea42"
    #   }
    def copy_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CopyImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CopyImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :copy_image,
        tracer: tracer
      )
      Telemetry::CopyImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#copy_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#copy_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#copy_image] #{output.data}")
        output
      end
    end

    # <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy a
    #       snapshot within the same Region, from one Region to another, or from a Region to an Outpost.
    #       You can't copy a snapshot from an Outpost to a Region, from one Outpost to another, or within
    #       the same Outpost.</p>
    #          <p>You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).</p>
    #          <p>When copying snapshots to a Region, copies of encrypted EBS snapshots remain encrypted.
    #     	Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the
    #     	snapshot copy operation. By default, encrypted snapshot copies use the default Key Management Service (KMS)
    #     	KMS key; however, you can specify a different KMS key. To copy an encrypted
    #     	snapshot that has been shared from another account, you must have permissions for the KMS key
    #     	used to encrypt the snapshot.</p>
    #          <p>Snapshots copied to an Outpost are encrypted by default using the default
    #   		encryption key for the Region, or a different key that you specify in the request using
    #   		<b>KmsKeyId</b>. Outposts do not support unencrypted
    #   		snapshots. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
    #   			Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not
    #       be used for any purpose.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copy an Amazon EBS snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CopySnapshotInput] params
    #   Request parameters for this operation.
    #   See {Types::CopySnapshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.copy_snapshot(
    #     description: 'Description',
    #     destination_outpost_arn: 'DestinationOutpostArn',
    #     destination_region: 'DestinationRegion',
    #     encrypted: false,
    #     kms_key_id: 'KmsKeyId',
    #     presigned_url: 'PresignedUrl',
    #     source_region: 'SourceRegion', # required
    #     source_snapshot_id: 'SourceSnapshotId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CopySnapshotOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    # @example To copy a snapshot
    #   # This example copies a snapshot with the snapshot ID of ``snap-066877671789bd71b`` from the ``us-west-2`` region to the ``us-east-1`` region and adds a short description to identify the snapshot.
    #   resp = client.copy_snapshot({
    #     source_region: "us-west-2",
    #     source_snapshot_id: "snap-066877671789bd71b",
    #     description: "This is my copied snapshot.",
    #     destination_region: "us-east-1"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     snapshot_id: "snap-066877671789bd71b"
    #   }
    def copy_snapshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CopySnapshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CopySnapshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :copy_snapshot,
        tracer: tracer
      )
      Telemetry::CopySnapshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#copy_snapshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#copy_snapshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#copy_snapshot] #{output.data}")
        output
      end
    end

    # <p>Creates a new Capacity Reservation with the specified attributes.</p>
    #          <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This
    # 			gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage.
    # 			By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it.
    # 			For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to
    # 			fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try
    # 			again at a later time, try in a different Availability Zone, or request a smaller
    # 			capacity reservation. If your application is flexible across instance types and sizes,
    # 			try to create a Capacity Reservation with different instance attributes.</p>
    #          <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance
    # 			limit for the selected instance type. If your request fails due to limit constraints,
    # 			increase your On-Demand Instance limit for the required instance type and try again. For
    # 			more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service
    # 				Quotas</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateCapacityReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateCapacityReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_capacity_reservation(
    #     client_token: 'ClientToken',
    #     instance_type: 'InstanceType', # required
    #     instance_platform: 'Linux/UNIX', # required - accepts ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #     availability_zone: 'AvailabilityZone',
    #     availability_zone_id: 'AvailabilityZoneId',
    #     tenancy: 'default', # accepts ["default", "dedicated"]
    #     instance_count: 1, # required
    #     ebs_optimized: false,
    #     ephemeral_storage: false,
    #     end_date: Time.now,
    #     end_date_type: 'unlimited', # accepts ["unlimited", "limited"]
    #     instance_match_criteria: 'open', # accepts ["open", "targeted"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     outpost_arn: 'OutpostArn',
    #     placement_group_arn: 'PlacementGroupArn'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateCapacityReservationOutput
    #   resp.data.capacity_reservation #=> Types::CapacityReservation
    #   resp.data.capacity_reservation.capacity_reservation_id #=> String
    #   resp.data.capacity_reservation.owner_id #=> String
    #   resp.data.capacity_reservation.capacity_reservation_arn #=> String
    #   resp.data.capacity_reservation.availability_zone_id #=> String
    #   resp.data.capacity_reservation.instance_type #=> String
    #   resp.data.capacity_reservation.instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #   resp.data.capacity_reservation.availability_zone #=> String
    #   resp.data.capacity_reservation.tenancy #=> String, one of ["default", "dedicated"]
    #   resp.data.capacity_reservation.total_instance_count #=> Integer
    #   resp.data.capacity_reservation.available_instance_count #=> Integer
    #   resp.data.capacity_reservation.ebs_optimized #=> Boolean
    #   resp.data.capacity_reservation.ephemeral_storage #=> Boolean
    #   resp.data.capacity_reservation.state #=> String, one of ["active", "expired", "cancelled", "pending", "failed", "scheduled", "payment-pending", "payment-failed"]
    #   resp.data.capacity_reservation.start_date #=> Time
    #   resp.data.capacity_reservation.end_date #=> Time
    #   resp.data.capacity_reservation.end_date_type #=> String, one of ["unlimited", "limited"]
    #   resp.data.capacity_reservation.instance_match_criteria #=> String, one of ["open", "targeted"]
    #   resp.data.capacity_reservation.create_date #=> Time
    #   resp.data.capacity_reservation.tags #=> Array<Tag>
    #   resp.data.capacity_reservation.tags[0] #=> Types::Tag
    #   resp.data.capacity_reservation.tags[0].key #=> String
    #   resp.data.capacity_reservation.tags[0].value #=> String
    #   resp.data.capacity_reservation.outpost_arn #=> String
    #   resp.data.capacity_reservation.capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservation.placement_group_arn #=> String
    #   resp.data.capacity_reservation.capacity_allocations #=> Array<CapacityAllocation>
    #   resp.data.capacity_reservation.capacity_allocations[0] #=> Types::CapacityAllocation
    #   resp.data.capacity_reservation.capacity_allocations[0].allocation_type #=> String, one of ["used"]
    #   resp.data.capacity_reservation.capacity_allocations[0].count #=> Integer
    #   resp.data.capacity_reservation.reservation_type #=> String, one of ["default", "capacity-block"]
    def create_capacity_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateCapacityReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateCapacityReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_capacity_reservation,
        tracer: tracer
      )
      Telemetry::CreateCapacityReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_capacity_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_capacity_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_capacity_reservation] #{output.data}")
        output
      end
    end

    # <p>Creates a Capacity Reservation Fleet. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-cr-fleets.html#create-crfleet">Create a Capacity
    # 			Reservation Fleet</a> in the Amazon EC2 User Guide.</p>
    # @param [Hash | Types::CreateCapacityReservationFleetInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateCapacityReservationFleetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_capacity_reservation_fleet(
    #     allocation_strategy: 'AllocationStrategy',
    #     client_token: 'ClientToken',
    #     instance_type_specifications: [
    #       {
    #         instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #         instance_platform: 'Linux/UNIX', # accepts ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #         weight: 1.0,
    #         availability_zone: 'AvailabilityZone',
    #         availability_zone_id: 'AvailabilityZoneId',
    #         ebs_optimized: false,
    #         priority: 1
    #       }
    #     ], # required
    #     tenancy: 'default', # accepts ["default"]
    #     total_target_capacity: 1, # required
    #     end_date: Time.now,
    #     instance_match_criteria: 'open', # accepts ["open"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateCapacityReservationFleetOutput
    #   resp.data.capacity_reservation_fleet_id #=> String
    #   resp.data.state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.total_target_capacity #=> Integer
    #   resp.data.total_fulfilled_capacity #=> Float
    #   resp.data.instance_match_criteria #=> String, one of ["open"]
    #   resp.data.allocation_strategy #=> String
    #   resp.data.create_time #=> Time
    #   resp.data.end_date #=> Time
    #   resp.data.tenancy #=> String, one of ["default"]
    #   resp.data.fleet_capacity_reservations #=> Array<FleetCapacityReservation>
    #   resp.data.fleet_capacity_reservations[0] #=> Types::FleetCapacityReservation
    #   resp.data.fleet_capacity_reservations[0].capacity_reservation_id #=> String
    #   resp.data.fleet_capacity_reservations[0].availability_zone_id #=> String
    #   resp.data.fleet_capacity_reservations[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.fleet_capacity_reservations[0].instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #   resp.data.fleet_capacity_reservations[0].availability_zone #=> String
    #   resp.data.fleet_capacity_reservations[0].total_instance_count #=> Integer
    #   resp.data.fleet_capacity_reservations[0].fulfilled_capacity #=> Float
    #   resp.data.fleet_capacity_reservations[0].ebs_optimized #=> Boolean
    #   resp.data.fleet_capacity_reservations[0].create_date #=> Time
    #   resp.data.fleet_capacity_reservations[0].weight #=> Float
    #   resp.data.fleet_capacity_reservations[0].priority #=> Integer
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    def create_capacity_reservation_fleet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateCapacityReservationFleetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateCapacityReservationFleet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_capacity_reservation_fleet,
        tracer: tracer
      )
      Telemetry::CreateCapacityReservationFleet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_capacity_reservation_fleet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_capacity_reservation_fleet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_capacity_reservation_fleet] #{output.data}")
        output
      end
    end

    # <p>Creates a carrier gateway.   For more information about carrier gateways, see <a href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#wavelength-carrier-gateway">Carrier gateways</a> in the <i>Amazon Web Services Wavelength Developer Guide</i>.</p>
    # @param [Hash | Types::CreateCarrierGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateCarrierGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_carrier_gateway(
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateCarrierGatewayOutput
    #   resp.data.carrier_gateway #=> Types::CarrierGateway
    #   resp.data.carrier_gateway.carrier_gateway_id #=> String
    #   resp.data.carrier_gateway.vpc_id #=> String
    #   resp.data.carrier_gateway.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.carrier_gateway.owner_id #=> String
    #   resp.data.carrier_gateway.tags #=> Array<Tag>
    #   resp.data.carrier_gateway.tags[0] #=> Types::Tag
    #   resp.data.carrier_gateway.tags[0].key #=> String
    #   resp.data.carrier_gateway.tags[0].value #=> String
    def create_carrier_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateCarrierGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateCarrierGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_carrier_gateway,
        tracer: tracer
      )
      Telemetry::CreateCarrierGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_carrier_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_carrier_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_carrier_gateway] #{output.data}")
        output
      end
    end

    # <p>Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to
    # 			enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions
    # 			are terminated.</p>
    # @param [Hash | Types::CreateClientVpnEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateClientVpnEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_client_vpn_endpoint(
    #     client_cidr_block: 'ClientCidrBlock', # required
    #     server_certificate_arn: 'ServerCertificateArn', # required
    #     authentication_options: [
    #       {
    #         type: 'certificate-authentication', # accepts ["certificate-authentication", "directory-service-authentication", "federated-authentication"]
    #         active_directory: {
    #           directory_id: 'DirectoryId'
    #         },
    #         mutual_authentication: {
    #           client_root_certificate_chain_arn: 'ClientRootCertificateChainArn'
    #         },
    #         federated_authentication: {
    #           saml_provider_arn: 'SAMLProviderArn',
    #           self_service_saml_provider_arn: 'SelfServiceSAMLProviderArn'
    #         }
    #       }
    #     ], # required
    #     connection_log_options: {
    #       enabled: false,
    #       cloudwatch_log_group: 'CloudwatchLogGroup',
    #       cloudwatch_log_stream: 'CloudwatchLogStream'
    #     }, # required
    #     dns_servers: [
    #       'member'
    #     ],
    #     transport_protocol: 'tcp', # accepts ["tcp", "udp"]
    #     vpn_port: 1,
    #     description: 'Description',
    #     split_tunnel: false,
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_ids: [
    #       'member'
    #     ],
    #     vpc_id: 'VpcId',
    #     self_service_portal: 'enabled', # accepts ["enabled", "disabled"]
    #     client_connect_options: {
    #       enabled: false,
    #       lambda_function_arn: 'LambdaFunctionArn'
    #     },
    #     session_timeout_hours: 1,
    #     client_login_banner_options: {
    #       enabled: false,
    #       banner_text: 'BannerText'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateClientVpnEndpointOutput
    #   resp.data.client_vpn_endpoint_id #=> String
    #   resp.data.status #=> Types::ClientVpnEndpointStatus
    #   resp.data.status.code #=> String, one of ["pending-associate", "available", "deleting", "deleted"]
    #   resp.data.status.message #=> String
    #   resp.data.dns_name #=> String
    def create_client_vpn_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateClientVpnEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateClientVpnEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_client_vpn_endpoint,
        tracer: tracer
      )
      Telemetry::CreateClientVpnEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_client_vpn_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_client_vpn_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_client_vpn_endpoint] #{output.data}")
        output
      end
    end

    # <p>Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the
    # 			available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.</p>
    # @param [Hash | Types::CreateClientVpnRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateClientVpnRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_client_vpn_route(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     target_vpc_subnet_id: 'TargetVpcSubnetId', # required
    #     description: 'Description',
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateClientVpnRouteOutput
    #   resp.data.status #=> Types::ClientVpnRouteStatus
    #   resp.data.status.code #=> String, one of ["creating", "active", "failed", "deleting"]
    #   resp.data.status.message #=> String
    def create_client_vpn_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateClientVpnRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateClientVpnRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_client_vpn_route,
        tracer: tracer
      )
      Telemetry::CreateClientVpnRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_client_vpn_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_client_vpn_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_client_vpn_route] #{output.data}")
        output
      end
    end

    # <p>
    #      Creates a range of customer-owned IP addresses.
    #       </p>
    # @param [Hash | Types::CreateCoipCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateCoipCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_coip_cidr(
    #     cidr: 'Cidr', # required
    #     coip_pool_id: 'CoipPoolId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateCoipCidrOutput
    #   resp.data.coip_cidr #=> Types::CoipCidr
    #   resp.data.coip_cidr.cidr #=> String
    #   resp.data.coip_cidr.coip_pool_id #=> String
    #   resp.data.coip_cidr.local_gateway_route_table_id #=> String
    def create_coip_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateCoipCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateCoipCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_coip_cidr,
        tracer: tracer
      )
      Telemetry::CreateCoipCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_coip_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_coip_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_coip_cidr] #{output.data}")
        output
      end
    end

    # <p> Creates a pool of customer-owned IP (CoIP) addresses. </p>
    # @param [Hash | Types::CreateCoipPoolInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateCoipPoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_coip_pool(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateCoipPoolOutput
    #   resp.data.coip_pool #=> Types::CoipPool
    #   resp.data.coip_pool.pool_id #=> String
    #   resp.data.coip_pool.pool_cidrs #=> Array<String>
    #   resp.data.coip_pool.pool_cidrs[0] #=> String
    #   resp.data.coip_pool.local_gateway_route_table_id #=> String
    #   resp.data.coip_pool.tags #=> Array<Tag>
    #   resp.data.coip_pool.tags[0] #=> Types::Tag
    #   resp.data.coip_pool.tags[0].key #=> String
    #   resp.data.coip_pool.tags[0].value #=> String
    #   resp.data.coip_pool.pool_arn #=> String
    def create_coip_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateCoipPoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateCoipPool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_coip_pool,
        tracer: tracer
      )
      Telemetry::CreateCoipPool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_coip_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_coip_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_coip_pool] #{output.data}")
        output
      end
    end

    # <p>Provides information to Amazon Web Services about your customer gateway device. The
    #             customer gateway device is the appliance at your end of the VPN connection. You
    #             must provide the IP address of the customer gateway device’s external
    #             interface. The IP address must be static and can be behind a device performing network
    #             address translation (NAT).</p>
    #          <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's
    #             BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network.
    #             If you don't have an ASN already, you can use a private ASN. For more information, see
    #             <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/cgw-options.html">Customer gateway
    #                 options for your Site-to-Site VPN connection</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    #          <p>To create more than one customer gateway with the same VPN type, IP address, and
    #             BGP ASN, specify a unique device name for each customer gateway. An identical request
    #             returns information about the existing customer gateway; it doesn't create a new customer
    #             gateway.</p>
    # @param [Hash | Types::CreateCustomerGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateCustomerGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_customer_gateway(
    #     bgp_asn: 1,
    #     public_ip: 'PublicIp',
    #     certificate_arn: 'CertificateArn',
    #     type: 'ipsec.1', # required - accepts ["ipsec.1"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     device_name: 'DeviceName',
    #     ip_address: 'IpAddress',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateCustomerGatewayOutput
    #   resp.data.customer_gateway #=> Types::CustomerGateway
    #   resp.data.customer_gateway.bgp_asn #=> String
    #   resp.data.customer_gateway.customer_gateway_id #=> String
    #   resp.data.customer_gateway.ip_address #=> String
    #   resp.data.customer_gateway.certificate_arn #=> String
    #   resp.data.customer_gateway.state #=> String
    #   resp.data.customer_gateway.type #=> String
    #   resp.data.customer_gateway.device_name #=> String
    #   resp.data.customer_gateway.tags #=> Array<Tag>
    #   resp.data.customer_gateway.tags[0] #=> Types::Tag
    #   resp.data.customer_gateway.tags[0].key #=> String
    #   resp.data.customer_gateway.tags[0].value #=> String
    # @example To create a customer gateway
    #   # This example creates a customer gateway with the specified IP address for its outside interface.
    #   resp = client.create_customer_gateway({
    #     type: "ipsec.1",
    #     public_ip: "12.1.2.3",
    #     bgp_asn: 65534
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     customer_gateway: {
    #       customer_gateway_id: "cgw-0e11f167",
    #       ip_address: "12.1.2.3",
    #       state: "available",
    #       type: "ipsec.1",
    #       bgp_asn: "65534"
    #     }
    #   }
    def create_customer_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateCustomerGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateCustomerGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_customer_gateway,
        tracer: tracer
      )
      Telemetry::CreateCustomerGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_customer_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_customer_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_customer_gateway] #{output.data}")
        output
      end
    end

    # <p>Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the
    #             specified Availability Zone in your default VPC. You can have only one default subnet
    #             per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Create a default
    #                 subnet</a> in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateDefaultSubnetInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateDefaultSubnetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_default_subnet(
    #     availability_zone: 'AvailabilityZone', # required
    #     dry_run: false,
    #     ipv6_native: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateDefaultSubnetOutput
    #   resp.data.subnet #=> Types::Subnet
    #   resp.data.subnet.availability_zone #=> String
    #   resp.data.subnet.availability_zone_id #=> String
    #   resp.data.subnet.available_ip_address_count #=> Integer
    #   resp.data.subnet.cidr_block #=> String
    #   resp.data.subnet.default_for_az #=> Boolean
    #   resp.data.subnet.enable_lni_at_device_index #=> Integer
    #   resp.data.subnet.map_public_ip_on_launch #=> Boolean
    #   resp.data.subnet.map_customer_owned_ip_on_launch #=> Boolean
    #   resp.data.subnet.customer_owned_ipv4_pool #=> String
    #   resp.data.subnet.state #=> String, one of ["pending", "available", "unavailable"]
    #   resp.data.subnet.subnet_id #=> String
    #   resp.data.subnet.vpc_id #=> String
    #   resp.data.subnet.owner_id #=> String
    #   resp.data.subnet.assign_ipv6_address_on_creation #=> Boolean
    #   resp.data.subnet.ipv6_cidr_block_association_set #=> Array<SubnetIpv6CidrBlockAssociation>
    #   resp.data.subnet.ipv6_cidr_block_association_set[0] #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet.tags #=> Array<Tag>
    #   resp.data.subnet.tags[0] #=> Types::Tag
    #   resp.data.subnet.tags[0].key #=> String
    #   resp.data.subnet.tags[0].value #=> String
    #   resp.data.subnet.subnet_arn #=> String
    #   resp.data.subnet.outpost_arn #=> String
    #   resp.data.subnet.enable_dns64 #=> Boolean
    #   resp.data.subnet.ipv6_native #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch #=> Types::PrivateDnsNameOptionsOnLaunch
    #   resp.data.subnet.private_dns_name_options_on_launch.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_aaaa_record #=> Boolean
    def create_default_subnet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateDefaultSubnetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateDefaultSubnet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_default_subnet,
        tracer: tracer
      )
      Telemetry::CreateDefaultSubnet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_default_subnet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_default_subnet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_default_subnet] #{output.data}")
        output
      end
    end

    # <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet
    # 			in each Availability Zone. For more information about the components of a default VPC,
    # 			see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default VPCs</a>
    # 		    in the <i>Amazon VPC User Guide</i>. You cannot specify the components of the
    # 		    default VPC yourself.</p>
    #          <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have
    # 			more than one default VPC per Region.</p>
    # @param [Hash | Types::CreateDefaultVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateDefaultVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_default_vpc(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateDefaultVpcOutput
    #   resp.data.vpc #=> Types::Vpc
    #   resp.data.vpc.cidr_block #=> String
    #   resp.data.vpc.dhcp_options_id #=> String
    #   resp.data.vpc.state #=> String, one of ["pending", "available"]
    #   resp.data.vpc.vpc_id #=> String
    #   resp.data.vpc.owner_id #=> String
    #   resp.data.vpc.instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.vpc.ipv6_cidr_block_association_set #=> Array<VpcIpv6CidrBlockAssociation>
    #   resp.data.vpc.ipv6_cidr_block_association_set[0] #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].network_border_group #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_pool #=> String
    #   resp.data.vpc.cidr_block_association_set #=> Array<VpcCidrBlockAssociation>
    #   resp.data.vpc.cidr_block_association_set[0] #=> Types::VpcCidrBlockAssociation
    #   resp.data.vpc.cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.is_default #=> Boolean
    #   resp.data.vpc.tags #=> Array<Tag>
    #   resp.data.vpc.tags[0] #=> Types::Tag
    #   resp.data.vpc.tags[0].key #=> String
    #   resp.data.vpc.tags[0].value #=> String
    def create_default_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateDefaultVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateDefaultVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_default_vpc,
        tracer: tracer
      )
      Telemetry::CreateDefaultVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_default_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_default_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_default_vpc] #{output.data}")
        output
      end
    end

    # <p>Creates a set of DHCP options for your VPC. After creating the set, you must
    # 				associate it with the VPC, causing all existing and new instances that you launch in
    # 				the VPC to use this set of DHCP options. The following are the individual DHCP
    # 				options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>domain-name-servers</code> - The IP addresses of up to four domain name
    #                     servers, or AmazonProvidedDNS. The default DHCP option set specifies
    #                     AmazonProvidedDNS. If specifying more than one domain name server, specify the
    #                     IP addresses in a single parameter, separated by commas. To have your instance
    #                     receive a custom DNS hostname as specified in <code>domain-name</code>, you must
    #                     set <code>domain-name-servers</code> to a custom DNS server.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>domain-name</code> - If you're using AmazonProvidedDNS in
    #                    <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using
    #                    AmazonProvidedDNS in another Region, specify
    #                    <code>region.compute.internal</code> (for example,
    #                    <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain
    #                    name (for example, <code>ExampleCompany.com</code>). This value is used to complete
    #                    unqualified DNS hostnames. <b>Important</b>: Some
    #                    Linux operating systems accept multiple domain names separated by spaces.
    #                    However, Windows and other Linux operating systems treat the value as a single
    #                    domain, which results in unexpected behavior. If your DHCP options set is
    #                    associated with a VPC that has instances with multiple operating systems,
    #                    specify only one domain name.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP)
    #                    servers.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name
    #                    servers.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that
    #                    you specify 2 (broadcast and multicast are not currently supported). For more information
    #                    about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p>
    #             </li>
    #          </ul>
    #          <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS
    # 			server that we provide (AmazonProvidedDNS). If you create a set of options, and if your
    # 			VPC has an internet gateway, make sure to set the <code>domain-name-servers</code>
    # 			option either to <code>AmazonProvidedDNS</code> or to a domain name server of your
    # 			choice. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the
    # 			<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateDhcpOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateDhcpOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_dhcp_options(
    #     dhcp_configurations: [
    #       {
    #         key: 'Key',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ], # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateDhcpOptionsOutput
    #   resp.data.dhcp_options #=> Types::DhcpOptions
    #   resp.data.dhcp_options.dhcp_configurations #=> Array<DhcpConfiguration>
    #   resp.data.dhcp_options.dhcp_configurations[0] #=> Types::DhcpConfiguration
    #   resp.data.dhcp_options.dhcp_configurations[0].key #=> String
    #   resp.data.dhcp_options.dhcp_configurations[0].values #=> Array<AttributeValue>
    #   resp.data.dhcp_options.dhcp_configurations[0].values[0] #=> Types::AttributeValue
    #   resp.data.dhcp_options.dhcp_configurations[0].values[0].value #=> String
    #   resp.data.dhcp_options.dhcp_options_id #=> String
    #   resp.data.dhcp_options.owner_id #=> String
    #   resp.data.dhcp_options.tags #=> Array<Tag>
    #   resp.data.dhcp_options.tags[0] #=> Types::Tag
    #   resp.data.dhcp_options.tags[0].key #=> String
    #   resp.data.dhcp_options.tags[0].value #=> String
    # @example To create a DHCP options set
    #   # This example creates a DHCP options set.
    #   resp = client.create_dhcp_options({
    #     dhcp_configurations: [
    #       {
    #         key: "domain-name-servers",
    #         values: [
    #           "10.2.5.1",
    #           "10.2.5.2"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     dhcp_options: {
    #       dhcp_configurations: [
    #         {
    #           values: [
    #             {
    #               value: "10.2.5.2"
    #             },
    #             {
    #               value: "10.2.5.1"
    #             }
    #           ],
    #           key: "domain-name-servers"
    #         }
    #       ],
    #       dhcp_options_id: "dopt-d9070ebb"
    #     }
    #   }
    def create_dhcp_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateDhcpOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateDhcpOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_dhcp_options,
        tracer: tracer
      )
      Telemetry::CreateDhcpOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_dhcp_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_dhcp_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_dhcp_options] #{output.data}")
        output
      end
    end

    # <p>[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only
    # 			internet gateway is used to enable outbound communication over IPv6 from instances in
    # 			your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6
    # 			connection with your instance.</p>
    # @param [Hash | Types::CreateEgressOnlyInternetGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateEgressOnlyInternetGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_egress_only_internet_gateway(
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateEgressOnlyInternetGatewayOutput
    #   resp.data.client_token #=> String
    #   resp.data.egress_only_internet_gateway #=> Types::EgressOnlyInternetGateway
    #   resp.data.egress_only_internet_gateway.attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.egress_only_internet_gateway.attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.egress_only_internet_gateway.attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.egress_only_internet_gateway.attachments[0].vpc_id #=> String
    #   resp.data.egress_only_internet_gateway.egress_only_internet_gateway_id #=> String
    #   resp.data.egress_only_internet_gateway.tags #=> Array<Tag>
    #   resp.data.egress_only_internet_gateway.tags[0] #=> Types::Tag
    #   resp.data.egress_only_internet_gateway.tags[0].key #=> String
    #   resp.data.egress_only_internet_gateway.tags[0].value #=> String
    def create_egress_only_internet_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateEgressOnlyInternetGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateEgressOnlyInternetGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_egress_only_internet_gateway,
        tracer: tracer
      )
      Telemetry::CreateEgressOnlyInternetGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_egress_only_internet_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_egress_only_internet_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_egress_only_internet_gateway] #{output.data}")
        output
      end
    end

    # <p>Creates an EC2 Fleet that contains the configuration information for On-Demand Instances and Spot Instances.
    #          Instances are launched immediately if there is available capacity.</p>
    #          <p>A single EC2 Fleet can include multiple launch specifications that vary by instance type,
    #          AMI, Availability Zone, or subnet.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateFleetInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateFleetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_fleet(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     spot_options: {
    #       allocation_strategy: 'lowest-price', # accepts ["lowest-price", "diversified", "capacity-optimized", "capacity-optimized-prioritized", "price-capacity-optimized"]
    #       maintenance_strategies: {
    #         capacity_rebalance: {
    #           replacement_strategy: 'launch', # accepts ["launch", "launch-before-terminate"]
    #           termination_delay: 1
    #         }
    #       },
    #       instance_interruption_behavior: 'hibernate', # accepts ["hibernate", "stop", "terminate"]
    #       instance_pools_to_use_count: 1,
    #       single_instance_type: false,
    #       single_availability_zone: false,
    #       min_target_capacity: 1,
    #       max_total_price: 'MaxTotalPrice'
    #     },
    #     on_demand_options: {
    #       allocation_strategy: 'lowest-price', # accepts ["lowest-price", "prioritized"]
    #       capacity_reservation_options: {
    #         usage_strategy: 'use-capacity-reservations-first' # accepts ["use-capacity-reservations-first"]
    #       },
    #       single_instance_type: false,
    #       single_availability_zone: false,
    #       min_target_capacity: 1,
    #       max_total_price: 'MaxTotalPrice'
    #     },
    #     excess_capacity_termination_policy: 'no-termination', # accepts ["no-termination", "termination"]
    #     launch_template_configs: [
    #       {
    #         launch_template_specification: {
    #           launch_template_id: 'LaunchTemplateId',
    #           launch_template_name: 'LaunchTemplateName',
    #           version: 'Version'
    #         },
    #         overrides: [
    #           {
    #             instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #             max_price: 'MaxPrice',
    #             subnet_id: 'SubnetId',
    #             availability_zone: 'AvailabilityZone',
    #             weighted_capacity: 1.0,
    #             priority: 1.0,
    #             placement: {
    #               availability_zone: 'AvailabilityZone',
    #               affinity: 'Affinity',
    #               group_name: 'GroupName',
    #               partition_number: 1,
    #               host_id: 'HostId',
    #               tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #               spread_domain: 'SpreadDomain',
    #               host_resource_group_arn: 'HostResourceGroupArn',
    #               group_id: 'GroupId'
    #             },
    #             instance_requirements: {
    #               v_cpu_count: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               memory_mi_b: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               cpu_manufacturers: [
    #                 'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #               ],
    #               memory_gi_b_per_v_cpu: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               excluded_instance_types: [
    #                 'member'
    #               ],
    #               instance_generations: [
    #                 'current' # accepts ["current", "previous"]
    #               ],
    #               spot_max_price_percentage_over_lowest_price: 1,
    #               on_demand_max_price_percentage_over_lowest_price: 1,
    #               bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #               burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #               require_hibernate_support: false,
    #               network_interface_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               local_storage: 'included', # accepts ["included", "required", "excluded"]
    #               local_storage_types: [
    #                 'hdd' # accepts ["hdd", "ssd"]
    #               ],
    #               total_local_storage_gb: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               baseline_ebs_bandwidth_mbps: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_types: [
    #                 'gpu' # accepts ["gpu", "fpga", "inference"]
    #               ],
    #               accelerator_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_manufacturers: [
    #                 'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #               ],
    #               accelerator_names: [
    #                 'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #               ],
    #               accelerator_total_memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               network_bandwidth_gbps: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               allowed_instance_types: [
    #                 'member'
    #               ],
    #               max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #             },
    #             image_id: 'ImageId'
    #           }
    #         ]
    #       }
    #     ], # required
    #     target_capacity_specification: {
    #       total_target_capacity: 1, # required
    #       on_demand_target_capacity: 1,
    #       spot_target_capacity: 1,
    #       default_target_capacity_type: 'spot', # accepts ["spot", "on-demand", "capacity-block"]
    #       target_capacity_unit_type: 'vcpu' # accepts ["vcpu", "memory-mib", "units"]
    #     }, # required
    #     terminate_instances_with_expiration: false,
    #     type: 'request', # accepts ["request", "maintain", "instant"]
    #     valid_from: Time.now,
    #     valid_until: Time.now,
    #     replace_unhealthy_instances: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     context: 'Context'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateFleetOutput
    #   resp.data.fleet_id #=> String
    #   resp.data.errors #=> Array<CreateFleetError>
    #   resp.data.errors[0] #=> Types::CreateFleetError
    #   resp.data.errors[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification.launch_template_id #=> String
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification.launch_template_name #=> String
    #   resp.data.errors[0].launch_template_and_overrides.launch_template_specification.version #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides #=> Types::FleetLaunchTemplateOverrides
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.max_price #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.subnet_id #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.availability_zone #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.weighted_capacity #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.priority #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.placement #=> Types::PlacementResponse
    #   resp.data.errors[0].launch_template_and_overrides.overrides.placement.group_name #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_bandwidth_gbps #=> Types::NetworkBandwidthGbps
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_bandwidth_gbps.min #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.network_bandwidth_gbps.max #=> Float
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.allowed_instance_types #=> Array<String>
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.allowed_instance_types[0] #=> String
    #   resp.data.errors[0].launch_template_and_overrides.overrides.instance_requirements.max_spot_price_as_percentage_of_optimal_on_demand_price #=> Integer
    #   resp.data.errors[0].launch_template_and_overrides.overrides.image_id #=> String
    #   resp.data.errors[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.errors[0].error_code #=> String
    #   resp.data.errors[0].error_message #=> String
    #   resp.data.instances #=> Array<CreateFleetInstance>
    #   resp.data.instances[0] #=> Types::CreateFleetInstance
    #   resp.data.instances[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.instances[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.instances[0].instance_ids #=> Array<String>
    #   resp.data.instances[0].instance_ids[0] #=> String
    #   resp.data.instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.instances[0].platform #=> String, one of ["Windows"]
    def create_fleet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateFleetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateFleet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_fleet,
        tracer: tracer
      )
      Telemetry::CreateFleet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_fleet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_fleet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_fleet] #{output.data}")
        output
      end
    end

    # <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface,
    #             subnet, or VPC. </p>
    #          <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events
    #             consisting of fields that describe the traffic flow. For more information, see
    #             <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow log records</a>
    #             in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network
    #             interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all
    #             of the monitored network interfaces are published to a single log file object that is stored in the specified
    #             bucket.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateFlowLogsInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateFlowLogsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_flow_logs(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     deliver_logs_permission_arn: 'DeliverLogsPermissionArn',
    #     deliver_cross_account_role: 'DeliverCrossAccountRole',
    #     log_group_name: 'LogGroupName',
    #     resource_ids: [
    #       'member'
    #     ], # required
    #     resource_type: 'VPC', # required - accepts ["VPC", "Subnet", "NetworkInterface", "TransitGateway", "TransitGatewayAttachment"]
    #     traffic_type: 'ACCEPT', # accepts ["ACCEPT", "REJECT", "ALL"]
    #     log_destination_type: 'cloud-watch-logs', # accepts ["cloud-watch-logs", "s3", "kinesis-data-firehose"]
    #     log_destination: 'LogDestination',
    #     log_format: 'LogFormat',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     max_aggregation_interval: 1,
    #     destination_options: {
    #       file_format: 'plain-text', # accepts ["plain-text", "parquet"]
    #       hive_compatible_partitions: false,
    #       per_hour_partition: false
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateFlowLogsOutput
    #   resp.data.client_token #=> String
    #   resp.data.flow_log_ids #=> Array<String>
    #   resp.data.flow_log_ids[0] #=> String
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def create_flow_logs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateFlowLogsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateFlowLogs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_flow_logs,
        tracer: tracer
      )
      Telemetry::CreateFlowLogs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_flow_logs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_flow_logs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_flow_logs] #{output.data}")
        output
      end
    end

    # <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p>
    #          <p>The create operation is asynchronous. To verify that the AFI is ready for use,
    #          check the output logs.</p>
    #          <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA.
    #          You can securely deploy an AFI on multiple FPGA-accelerated instances.
    #          For more information, see the <a href="https://github.com/aws/aws-fpga/">Amazon Web Services FPGA Hardware Development Kit</a>.</p>
    # @param [Hash | Types::CreateFpgaImageInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateFpgaImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_fpga_image(
    #     dry_run: false,
    #     input_storage_location: {
    #       bucket: 'Bucket',
    #       key: 'Key'
    #     }, # required
    #     description: 'Description',
    #     name: 'Name',
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateFpgaImageOutput
    #   resp.data.fpga_image_id #=> String
    #   resp.data.fpga_image_global_id #=> String
    def create_fpga_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateFpgaImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateFpgaImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_fpga_image,
        tracer: tracer
      )
      Telemetry::CreateFpgaImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_fpga_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_fpga_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_fpga_image] #{output.data}")
        output
      end
    end

    # <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance
    #      	that is either running or stopped.</p>
    #          <p>If you customized your instance with instance store volumes or Amazon EBS volumes in addition to the root device volume, the
    #      	new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI,
    #      	the instance automatically launches with those additional volumes.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Create an Amazon EBS-backed Linux
    #         AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateImageInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_image(
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         virtual_name: 'VirtualName',
    #         ebs: {
    #           delete_on_termination: false,
    #           iops: 1,
    #           snapshot_id: 'SnapshotId',
    #           volume_size: 1,
    #           volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #           kms_key_id: 'KmsKeyId',
    #           throughput: 1,
    #           outpost_arn: 'OutpostArn',
    #           encrypted: false
    #         },
    #         no_device: 'NoDevice'
    #       }
    #     ],
    #     description: 'Description',
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     name: 'Name', # required
    #     no_reboot: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateImageOutput
    #   resp.data.image_id #=> String
    def create_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_image,
        tracer: tracer
      )
      Telemetry::CreateImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_image] #{output.data}")
        output
      end
    end

    # <p>Creates an EC2 Instance Connect Endpoint.</p>
    #          <p>An EC2 Instance Connect Endpoint allows you to connect to an instance, without
    #             requiring the instance to have a public IPv4 address. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect-Endpoint.html">Connect to your instances without requiring a public IPv4 address using EC2
    #                 Instance Connect Endpoint</a> in the <i>Amazon EC2 User
    #             Guide</i>.</p>
    # @param [Hash | Types::CreateInstanceConnectEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateInstanceConnectEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_instance_connect_endpoint(
    #     dry_run: false,
    #     subnet_id: 'SubnetId', # required
    #     security_group_ids: [
    #       'member'
    #     ],
    #     preserve_client_ip: false,
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateInstanceConnectEndpointOutput
    #   resp.data.instance_connect_endpoint #=> Types::Ec2InstanceConnectEndpoint
    #   resp.data.instance_connect_endpoint.owner_id #=> String
    #   resp.data.instance_connect_endpoint.instance_connect_endpoint_id #=> String
    #   resp.data.instance_connect_endpoint.instance_connect_endpoint_arn #=> String
    #   resp.data.instance_connect_endpoint.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.instance_connect_endpoint.state_message #=> String
    #   resp.data.instance_connect_endpoint.dns_name #=> String
    #   resp.data.instance_connect_endpoint.fips_dns_name #=> String
    #   resp.data.instance_connect_endpoint.network_interface_ids #=> Array<String>
    #   resp.data.instance_connect_endpoint.network_interface_ids[0] #=> String
    #   resp.data.instance_connect_endpoint.vpc_id #=> String
    #   resp.data.instance_connect_endpoint.availability_zone #=> String
    #   resp.data.instance_connect_endpoint.created_at #=> Time
    #   resp.data.instance_connect_endpoint.subnet_id #=> String
    #   resp.data.instance_connect_endpoint.preserve_client_ip #=> Boolean
    #   resp.data.instance_connect_endpoint.security_group_ids #=> Array<String>
    #   resp.data.instance_connect_endpoint.security_group_ids[0] #=> String
    #   resp.data.instance_connect_endpoint.tags #=> Array<Tag>
    #   resp.data.instance_connect_endpoint.tags[0] #=> Types::Tag
    #   resp.data.instance_connect_endpoint.tags[0].key #=> String
    #   resp.data.instance_connect_endpoint.tags[0].value #=> String
    #   resp.data.client_token #=> String
    def create_instance_connect_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateInstanceConnectEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateInstanceConnectEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_instance_connect_endpoint,
        tracer: tracer
      )
      Telemetry::CreateInstanceConnectEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_instance_connect_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_instance_connect_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_instance_connect_endpoint] #{output.data}")
        output
      end
    end

    # <p>Creates an event window in which scheduled events for the associated Amazon EC2 instances can
    #          run.</p>
    #          <p>You can define either a set of time ranges or a cron expression when creating the event
    #          window, but not both. All event window times are in UTC.</p>
    #          <p>You can create up to 200 event windows per Amazon Web Services Region.</p>
    #          <p>When you create the event window, targets (instance IDs, Dedicated Host IDs, or tags)
    #          are not yet associated with it. To ensure that the event window can be used, you must
    #          associate one or more targets with it by using the <a>AssociateInstanceEventWindow</a> API.</p>
    #          <important>
    #             <p>Event windows are applicable only for scheduled events that stop, reboot, or
    #             terminate instances.</p>
    #             <p>Event windows are <i>not</i> applicable for:</p>
    #             <ul>
    #                <li>
    #                   <p>Expedited scheduled events and network maintenance events. </p>
    #                </li>
    #                <li>
    #                   <p>Unscheduled maintenance such as AutoRecovery and unplanned reboots.</p>
    #                </li>
    #             </ul>
    #          </important>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateInstanceEventWindowInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateInstanceEventWindowInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_instance_event_window(
    #     dry_run: false,
    #     name: 'Name',
    #     time_ranges: [
    #       {
    #         start_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         start_hour: 1,
    #         end_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         end_hour: 1
    #       }
    #     ],
    #     cron_expression: 'CronExpression',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    def create_instance_event_window(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateInstanceEventWindowInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateInstanceEventWindow.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_instance_event_window,
        tracer: tracer
      )
      Telemetry::CreateInstanceEventWindow.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_instance_event_window] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_instance_event_window] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_instance_event_window] #{output.data}")
        output
      end
    end

    # <p>Exports a running or stopped instance to an Amazon S3 bucket.</p>
    #          <p>For information about the prerequisites for your Amazon S3 bucket, supported operating systems,
    #    image formats, and known limitations for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an instance as a VM Using VM
    #     Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    # @param [Hash | Types::CreateInstanceExportTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateInstanceExportTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_instance_export_task(
    #     description: 'Description',
    #     export_to_s3_task: {
    #       container_format: 'ova', # accepts ["ova"]
    #       disk_image_format: 'VMDK', # accepts ["VMDK", "RAW", "VHD"]
    #       s3_bucket: 'S3Bucket',
    #       s3_prefix: 'S3Prefix'
    #     }, # required
    #     instance_id: 'InstanceId', # required
    #     target_environment: 'citrix', # required - accepts ["citrix", "vmware", "microsoft"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateInstanceExportTaskOutput
    #   resp.data.export_task #=> Types::ExportTask
    #   resp.data.export_task.description #=> String
    #   resp.data.export_task.export_task_id #=> String
    #   resp.data.export_task.export_to_s3_task #=> Types::ExportToS3Task
    #   resp.data.export_task.export_to_s3_task.container_format #=> String, one of ["ova"]
    #   resp.data.export_task.export_to_s3_task.disk_image_format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.export_task.export_to_s3_task.s3_bucket #=> String
    #   resp.data.export_task.export_to_s3_task.s3_key #=> String
    #   resp.data.export_task.instance_export_details #=> Types::InstanceExportDetails
    #   resp.data.export_task.instance_export_details.instance_id #=> String
    #   resp.data.export_task.instance_export_details.target_environment #=> String, one of ["citrix", "vmware", "microsoft"]
    #   resp.data.export_task.state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.export_task.status_message #=> String
    #   resp.data.export_task.tags #=> Array<Tag>
    #   resp.data.export_task.tags[0] #=> Types::Tag
    #   resp.data.export_task.tags[0].key #=> String
    #   resp.data.export_task.tags[0].value #=> String
    def create_instance_export_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateInstanceExportTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateInstanceExportTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_instance_export_task,
        tracer: tracer
      )
      Telemetry::CreateInstanceExportTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_instance_export_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_instance_export_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_instance_export_task] #{output.data}")
        output
      end
    end

    # <p>Creates an internet gateway for use with a VPC. After creating the internet gateway,
    # 			you attach it to a VPC using <a>AttachInternetGateway</a>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">Internet gateways</a> in the
    #            <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateInternetGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateInternetGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_internet_gateway(
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateInternetGatewayOutput
    #   resp.data.internet_gateway #=> Types::InternetGateway
    #   resp.data.internet_gateway.attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.internet_gateway.attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.internet_gateway.attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.internet_gateway.attachments[0].vpc_id #=> String
    #   resp.data.internet_gateway.internet_gateway_id #=> String
    #   resp.data.internet_gateway.owner_id #=> String
    #   resp.data.internet_gateway.tags #=> Array<Tag>
    #   resp.data.internet_gateway.tags[0] #=> Types::Tag
    #   resp.data.internet_gateway.tags[0].key #=> String
    #   resp.data.internet_gateway.tags[0].value #=> String
    # @example To create an Internet gateway
    #   resp = client.create_internet_gateway()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     internet_gateway: {
    #       tags: [
    #
    #       ],
    #       internet_gateway_id: "igw-c0a643a9",
    #       attachments: [
    #
    #       ]
    #     }
    #   }
    def create_internet_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateInternetGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateInternetGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_internet_gateway,
        tracer: tracer
      )
      Telemetry::CreateInternetGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_internet_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_internet_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_internet_gateway] #{output.data}")
        output
      end
    end

    # <p>Create an IPAM. Amazon VPC IP Address Manager (IPAM) is a VPC feature that you can use
    #          to automate your IP address management workflows including assigning, tracking,
    #          troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts
    #          throughout your Amazon Web Services Organization.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::CreateIpamInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateIpamInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_ipam(
    #     dry_run: false,
    #     description: 'Description',
    #     operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     tier: 'free' # accepts ["free", "advanced"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateIpamOutput
    #   resp.data.ipam #=> Types::Ipam
    #   resp.data.ipam.owner_id #=> String
    #   resp.data.ipam.ipam_id #=> String
    #   resp.data.ipam.ipam_arn #=> String
    #   resp.data.ipam.ipam_region #=> String
    #   resp.data.ipam.public_default_scope_id #=> String
    #   resp.data.ipam.private_default_scope_id #=> String
    #   resp.data.ipam.scope_count #=> Integer
    #   resp.data.ipam.description #=> String
    #   resp.data.ipam.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam.operating_regions[0].region_name #=> String
    #   resp.data.ipam.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam.tags #=> Array<Tag>
    #   resp.data.ipam.tags[0] #=> Types::Tag
    #   resp.data.ipam.tags[0].key #=> String
    #   resp.data.ipam.tags[0].value #=> String
    #   resp.data.ipam.default_resource_discovery_id #=> String
    #   resp.data.ipam.default_resource_discovery_association_id #=> String
    #   resp.data.ipam.resource_discovery_association_count #=> Integer
    #   resp.data.ipam.state_message #=> String
    #   resp.data.ipam.tier #=> String, one of ["free", "advanced"]
    def create_ipam(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateIpamInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateIpam.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_ipam,
        tracer: tracer
      )
      Telemetry::CreateIpam.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_ipam] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam] #{output.data}")
        output
      end
    end

    # <p>Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-top-ipam.html">Create a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::CreateIpamPoolInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateIpamPoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_ipam_pool(
    #     dry_run: false,
    #     ipam_scope_id: 'IpamScopeId', # required
    #     locale: 'Locale',
    #     source_ipam_pool_id: 'SourceIpamPoolId',
    #     description: 'Description',
    #     address_family: 'ipv4', # required - accepts ["ipv4", "ipv6"]
    #     auto_import: false,
    #     publicly_advertisable: false,
    #     allocation_min_netmask_length: 1,
    #     allocation_max_netmask_length: 1,
    #     allocation_default_netmask_length: 1,
    #     allocation_resource_tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     aws_service: 'ec2', # accepts ["ec2"]
    #     public_ip_source: 'amazon', # accepts ["amazon", "byoip"]
    #     source_resource: {
    #       resource_id: 'ResourceId',
    #       resource_type: 'vpc', # accepts ["vpc"]
    #       resource_region: 'ResourceRegion',
    #       resource_owner: 'ResourceOwner'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateIpamPoolOutput
    #   resp.data.ipam_pool #=> Types::IpamPool
    #   resp.data.ipam_pool.owner_id #=> String
    #   resp.data.ipam_pool.ipam_pool_id #=> String
    #   resp.data.ipam_pool.source_ipam_pool_id #=> String
    #   resp.data.ipam_pool.ipam_pool_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pool.ipam_arn #=> String
    #   resp.data.ipam_pool.ipam_region #=> String
    #   resp.data.ipam_pool.locale #=> String
    #   resp.data.ipam_pool.pool_depth #=> Integer
    #   resp.data.ipam_pool.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_pool.state_message #=> String
    #   resp.data.ipam_pool.description #=> String
    #   resp.data.ipam_pool.auto_import #=> Boolean
    #   resp.data.ipam_pool.publicly_advertisable #=> Boolean
    #   resp.data.ipam_pool.address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pool.allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pool.allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pool.allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pool.allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pool.tags #=> Array<Tag>
    #   resp.data.ipam_pool.tags[0] #=> Types::Tag
    #   resp.data.ipam_pool.tags[0].key #=> String
    #   resp.data.ipam_pool.tags[0].value #=> String
    #   resp.data.ipam_pool.aws_service #=> String, one of ["ec2"]
    #   resp.data.ipam_pool.public_ip_source #=> String, one of ["amazon", "byoip"]
    #   resp.data.ipam_pool.source_resource #=> Types::IpamPoolSourceResource
    #   resp.data.ipam_pool.source_resource.resource_id #=> String
    #   resp.data.ipam_pool.source_resource.resource_type #=> String, one of ["vpc"]
    #   resp.data.ipam_pool.source_resource.resource_region #=> String
    #   resp.data.ipam_pool.source_resource.resource_owner #=> String
    def create_ipam_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateIpamPoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateIpamPool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_ipam_pool,
        tracer: tracer
      )
      Telemetry::CreateIpamPool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_ipam_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam_pool] #{output.data}")
        output
      end
    end

    # <p>Creates an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::CreateIpamResourceDiscoveryInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateIpamResourceDiscoveryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_ipam_resource_discovery(
    #     dry_run: false,
    #     description: 'Description',
    #     operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateIpamResourceDiscoveryOutput
    #   resp.data.ipam_resource_discovery #=> Types::IpamResourceDiscovery
    #   resp.data.ipam_resource_discovery.owner_id #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_arn #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_region #=> String
    #   resp.data.ipam_resource_discovery.description #=> String
    #   resp.data.ipam_resource_discovery.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam_resource_discovery.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam_resource_discovery.operating_regions[0].region_name #=> String
    #   resp.data.ipam_resource_discovery.is_default #=> Boolean
    #   resp.data.ipam_resource_discovery.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discovery.tags #=> Array<Tag>
    #   resp.data.ipam_resource_discovery.tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discovery.tags[0].key #=> String
    #   resp.data.ipam_resource_discovery.tags[0].value #=> String
    def create_ipam_resource_discovery(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateIpamResourceDiscoveryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateIpamResourceDiscovery.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_ipam_resource_discovery,
        tracer: tracer
      )
      Telemetry::CreateIpamResourceDiscovery.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam_resource_discovery] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_ipam_resource_discovery] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam_resource_discovery] #{output.data}")
        output
      end
    end

    # <p>Create an IPAM scope. In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/add-scope-ipam.html">Add a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    # @param [Hash | Types::CreateIpamScopeInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateIpamScopeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_ipam_scope(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateIpamScopeOutput
    #   resp.data.ipam_scope #=> Types::IpamScope
    #   resp.data.ipam_scope.owner_id #=> String
    #   resp.data.ipam_scope.ipam_scope_id #=> String
    #   resp.data.ipam_scope.ipam_scope_arn #=> String
    #   resp.data.ipam_scope.ipam_arn #=> String
    #   resp.data.ipam_scope.ipam_region #=> String
    #   resp.data.ipam_scope.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scope.is_default #=> Boolean
    #   resp.data.ipam_scope.description #=> String
    #   resp.data.ipam_scope.pool_count #=> Integer
    #   resp.data.ipam_scope.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_scope.tags #=> Array<Tag>
    #   resp.data.ipam_scope.tags[0] #=> Types::Tag
    #   resp.data.ipam_scope.tags[0].key #=> String
    #   resp.data.ipam_scope.tags[0].value #=> String
    def create_ipam_scope(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateIpamScopeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateIpamScope.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_ipam_scope,
        tracer: tracer
      )
      Telemetry::CreateIpamScope.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam_scope] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_ipam_scope] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_ipam_scope] #{output.data}")
        output
      end
    end

    # <p>Creates an ED25519 or 2048-bit RSA key pair with the specified name and in the
    #             specified PEM or PPK format. Amazon EC2 stores the public key and displays the private
    #             key for you to save to a file. The private key is returned as an unencrypted PEM encoded
    #             PKCS#1 private key or an unencrypted PPK formatted private key for use with PuTTY. If a
    #             key with the specified name already exists, Amazon EC2 returns an error.</p>
    #          <p>The key pair returned to you is available only in the Amazon Web Services Region in which you create it.
    #             If you prefer, you can create your own key pair using a third-party tool and upload it
    #             to any Region using <a>ImportKeyPair</a>.</p>
    #          <p>You can have up to 5,000 key pairs per Amazon Web Services Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateKeyPairInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateKeyPairInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_key_pair(
    #     key_name: 'KeyName', # required
    #     dry_run: false,
    #     key_type: 'rsa', # accepts ["rsa", "ed25519"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     key_format: 'pem' # accepts ["pem", "ppk"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateKeyPairOutput
    #   resp.data.key_fingerprint #=> String
    #   resp.data.key_material #=> String
    #   resp.data.key_name #=> String
    #   resp.data.key_pair_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    # @example To create a key pair
    #   # This example creates a key pair named my-key-pair.
    #   resp = client.create_key_pair({
    #     key_name: "my-key-pair"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def create_key_pair(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateKeyPairInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateKeyPair.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_key_pair,
        tracer: tracer
      )
      Telemetry::CreateKeyPair.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_key_pair] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_key_pair] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_key_pair] #{output.data}")
        output
      end
    end

    # <p>Creates a launch template.</p>
    #          <p>A launch template contains the parameters to launch an instance. When you launch an
    #             instance using <a>RunInstances</a>, you can specify a launch template instead
    #             of providing the launch parameters in the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launch
    #                 an instance from a launch template</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>If you want to clone an existing launch template as the basis for creating a new
    #             launch template, you can use the Amazon EC2 console. The API, SDKs, and CLI do not support
    #             cloning a template. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template-from-existing-launch-template">Create a launch template from an existing launch template</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateLaunchTemplateInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateLaunchTemplateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_launch_template(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     launch_template_name: 'LaunchTemplateName', # required
    #     version_description: 'VersionDescription',
    #     launch_template_data: {
    #       kernel_id: 'KernelId',
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           virtual_name: 'VirtualName',
    #           ebs: {
    #             encrypted: false,
    #             delete_on_termination: false,
    #             iops: 1,
    #             kms_key_id: 'KmsKeyId',
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #             throughput: 1
    #           },
    #           no_device: 'NoDevice'
    #         }
    #       ],
    #       network_interfaces: [
    #         {
    #           associate_carrier_ip_address: false,
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           interface_type: 'InterfaceType',
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_addresses: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId',
    #           network_card_index: 1,
    #           ipv4_prefixes: [
    #             {
    #               ipv4_prefix: 'Ipv4Prefix'
    #             }
    #           ],
    #           ipv4_prefix_count: 1,
    #           ipv6_prefixes: [
    #             {
    #               ipv6_prefix: 'Ipv6Prefix'
    #             }
    #           ],
    #           ipv6_prefix_count: 1,
    #           primary_ipv6: false,
    #           ena_srd_specification: {
    #             ena_srd_enabled: false,
    #             ena_srd_udp_specification: {
    #               ena_srd_udp_enabled: false
    #             }
    #           },
    #           connection_tracking_specification: {
    #             tcp_established_timeout: 1,
    #             udp_stream_timeout: 1,
    #             udp_timeout: 1
    #           }
    #         }
    #       ],
    #       image_id: 'ImageId',
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false
    #       },
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         affinity: 'Affinity',
    #         group_name: 'GroupName',
    #         host_id: 'HostId',
    #         tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #         spread_domain: 'SpreadDomain',
    #         host_resource_group_arn: 'HostResourceGroupArn',
    #         partition_number: 1,
    #         group_id: 'GroupId'
    #       },
    #       ram_disk_id: 'RamDiskId',
    #       disable_api_termination: false,
    #       instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #       user_data: 'UserData',
    #       tag_specifications: [
    #         {
    #           resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #           tags: [
    #             {
    #               key: 'Key',
    #               value: 'Value'
    #             }
    #           ]
    #         }
    #       ],
    #       elastic_gpu_specifications: [
    #         {
    #           type: 'Type' # required
    #         }
    #       ],
    #       elastic_inference_accelerators: [
    #         {
    #           type: 'Type', # required
    #           count: 1
    #         }
    #       ],
    #       security_groups: [
    #         'member'
    #       ],
    #       instance_market_options: {
    #         market_type: 'spot', # accepts ["spot", "capacity-block"]
    #         spot_options: {
    #           max_price: 'MaxPrice',
    #           spot_instance_type: 'one-time', # accepts ["one-time", "persistent"]
    #           block_duration_minutes: 1,
    #           valid_until: Time.now,
    #           instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #         }
    #       },
    #       credit_specification: {
    #         cpu_credits: 'CpuCredits' # required
    #       },
    #       cpu_options: {
    #         core_count: 1,
    #         threads_per_core: 1,
    #         amd_sev_snp: 'enabled' # accepts ["enabled", "disabled"]
    #       },
    #       capacity_reservation_specification: {
    #         capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #         capacity_reservation_target: {
    #           capacity_reservation_id: 'CapacityReservationId',
    #           capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #         }
    #       },
    #       license_specifications: [
    #         {
    #           license_configuration_arn: 'LicenseConfigurationArn'
    #         }
    #       ],
    #       hibernation_options: {
    #         configured: false
    #       },
    #       metadata_options: {
    #         http_tokens: 'optional', # accepts ["optional", "required"]
    #         http_put_response_hop_limit: 1,
    #         http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #         http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #         instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #       },
    #       enclave_options: {
    #         enabled: false
    #       },
    #       instance_requirements: {
    #         v_cpu_count: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         memory_mi_b: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         cpu_manufacturers: [
    #           'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #         ],
    #         memory_gi_b_per_v_cpu: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         excluded_instance_types: [
    #           'member'
    #         ],
    #         instance_generations: [
    #           'current' # accepts ["current", "previous"]
    #         ],
    #         spot_max_price_percentage_over_lowest_price: 1,
    #         on_demand_max_price_percentage_over_lowest_price: 1,
    #         bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #         burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #         require_hibernate_support: false,
    #         network_interface_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         local_storage: 'included', # accepts ["included", "required", "excluded"]
    #         local_storage_types: [
    #           'hdd' # accepts ["hdd", "ssd"]
    #         ],
    #         total_local_storage_gb: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         baseline_ebs_bandwidth_mbps: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_types: [
    #           'gpu' # accepts ["gpu", "fpga", "inference"]
    #         ],
    #         accelerator_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_manufacturers: [
    #           'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #         ],
    #         accelerator_names: [
    #           'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #         ],
    #         accelerator_total_memory_mi_b: {
    #           min: 1,
    #           max: 1
    #         },
    #         network_bandwidth_gbps: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         allowed_instance_types: [
    #           'member'
    #         ],
    #         max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #       },
    #       private_dns_name_options: {
    #         hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #         enable_resource_name_dns_a_record: false,
    #         enable_resource_name_dns_aaaa_record: false
    #       },
    #       maintenance_options: {
    #         auto_recovery: 'default' # accepts ["default", "disabled"]
    #       },
    #       disable_api_stop: false
    #     }, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateLaunchTemplateOutput
    #   resp.data.launch_template #=> Types::LaunchTemplate
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.create_time #=> Time
    #   resp.data.launch_template.created_by #=> String
    #   resp.data.launch_template.default_version_number #=> Integer
    #   resp.data.launch_template.latest_version_number #=> Integer
    #   resp.data.launch_template.tags #=> Array<Tag>
    #   resp.data.launch_template.tags[0] #=> Types::Tag
    #   resp.data.launch_template.tags[0].key #=> String
    #   resp.data.launch_template.tags[0].value #=> String
    #   resp.data.warning #=> Types::ValidationWarning
    #   resp.data.warning.errors #=> Array<ValidationError>
    #   resp.data.warning.errors[0] #=> Types::ValidationError
    #   resp.data.warning.errors[0].code #=> String
    #   resp.data.warning.errors[0].message #=> String
    # @example To create a launch template
    #   # This example creates a launch template that specifies the subnet in which to launch the instance, assigns a public IP address and an IPv6 address to the instance, and creates a tag for the instance.
    #   resp = client.create_launch_template({
    #     launch_template_name: "my-template",
    #     version_description: "WebVersion1",
    #     launch_template_data: {
    #       network_interfaces: [
    #         {
    #           associate_public_ip_address: true,
    #           device_index: 0,
    #           ipv6_address_count: 1,
    #           subnet_id: "subnet-7b16de0c"
    #         }
    #       ],
    #       image_id: "ami-8c1be5f6",
    #       instance_type: "t2.small",
    #       tag_specifications: [
    #         {
    #           resource_type: "instance",
    #           tags: [
    #             {
    #               key: "Name",
    #               value: "webserver"
    #             }
    #           ]
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_template: {
    #       latest_version_number: 1,
    #       launch_template_id: "lt-01238c059e3466abc",
    #       launch_template_name: "my-template",
    #       default_version_number: 1,
    #       created_by: "arn:aws:iam::123456789012:root",
    #       create_time: Time.parse('2017-11-27T09:13:24.000Z')
    #     }
    #   }
    def create_launch_template(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateLaunchTemplateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateLaunchTemplate.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_launch_template,
        tracer: tracer
      )
      Telemetry::CreateLaunchTemplate.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_launch_template] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_launch_template] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_launch_template] #{output.data}")
        output
      end
    end

    # <p>Creates a new version of a launch template. You can specify an existing version of
    #             launch template from which to base the new version.</p>
    #          <p>Launch template versions are numbered in the order in which they are created. You
    #             cannot specify, change, or replace the numbering of launch template versions.</p>
    #          <p>Launch templates are immutable; after you create a launch template, you can't modify
    #             it. Instead, you can create a new version of the launch template that includes any
    #             changes you require.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#manage-launch-template-versions">Modify a launch template (manage launch template versions)</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateLaunchTemplateVersionInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateLaunchTemplateVersionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_launch_template_version(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     source_version: 'SourceVersion',
    #     version_description: 'VersionDescription',
    #     launch_template_data: {
    #       kernel_id: 'KernelId',
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           virtual_name: 'VirtualName',
    #           ebs: {
    #             encrypted: false,
    #             delete_on_termination: false,
    #             iops: 1,
    #             kms_key_id: 'KmsKeyId',
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #             throughput: 1
    #           },
    #           no_device: 'NoDevice'
    #         }
    #       ],
    #       network_interfaces: [
    #         {
    #           associate_carrier_ip_address: false,
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           interface_type: 'InterfaceType',
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_addresses: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId',
    #           network_card_index: 1,
    #           ipv4_prefixes: [
    #             {
    #               ipv4_prefix: 'Ipv4Prefix'
    #             }
    #           ],
    #           ipv4_prefix_count: 1,
    #           ipv6_prefixes: [
    #             {
    #               ipv6_prefix: 'Ipv6Prefix'
    #             }
    #           ],
    #           ipv6_prefix_count: 1,
    #           primary_ipv6: false,
    #           ena_srd_specification: {
    #             ena_srd_enabled: false,
    #             ena_srd_udp_specification: {
    #               ena_srd_udp_enabled: false
    #             }
    #           },
    #           connection_tracking_specification: {
    #             tcp_established_timeout: 1,
    #             udp_stream_timeout: 1,
    #             udp_timeout: 1
    #           }
    #         }
    #       ],
    #       image_id: 'ImageId',
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false
    #       },
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         affinity: 'Affinity',
    #         group_name: 'GroupName',
    #         host_id: 'HostId',
    #         tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #         spread_domain: 'SpreadDomain',
    #         host_resource_group_arn: 'HostResourceGroupArn',
    #         partition_number: 1,
    #         group_id: 'GroupId'
    #       },
    #       ram_disk_id: 'RamDiskId',
    #       disable_api_termination: false,
    #       instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #       user_data: 'UserData',
    #       tag_specifications: [
    #         {
    #           resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #           tags: [
    #             {
    #               key: 'Key',
    #               value: 'Value'
    #             }
    #           ]
    #         }
    #       ],
    #       elastic_gpu_specifications: [
    #         {
    #           type: 'Type' # required
    #         }
    #       ],
    #       elastic_inference_accelerators: [
    #         {
    #           type: 'Type', # required
    #           count: 1
    #         }
    #       ],
    #       security_groups: [
    #         'member'
    #       ],
    #       instance_market_options: {
    #         market_type: 'spot', # accepts ["spot", "capacity-block"]
    #         spot_options: {
    #           max_price: 'MaxPrice',
    #           spot_instance_type: 'one-time', # accepts ["one-time", "persistent"]
    #           block_duration_minutes: 1,
    #           valid_until: Time.now,
    #           instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #         }
    #       },
    #       credit_specification: {
    #         cpu_credits: 'CpuCredits' # required
    #       },
    #       cpu_options: {
    #         core_count: 1,
    #         threads_per_core: 1,
    #         amd_sev_snp: 'enabled' # accepts ["enabled", "disabled"]
    #       },
    #       capacity_reservation_specification: {
    #         capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #         capacity_reservation_target: {
    #           capacity_reservation_id: 'CapacityReservationId',
    #           capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #         }
    #       },
    #       license_specifications: [
    #         {
    #           license_configuration_arn: 'LicenseConfigurationArn'
    #         }
    #       ],
    #       hibernation_options: {
    #         configured: false
    #       },
    #       metadata_options: {
    #         http_tokens: 'optional', # accepts ["optional", "required"]
    #         http_put_response_hop_limit: 1,
    #         http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #         http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #         instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #       },
    #       enclave_options: {
    #         enabled: false
    #       },
    #       instance_requirements: {
    #         v_cpu_count: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         memory_mi_b: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         cpu_manufacturers: [
    #           'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #         ],
    #         memory_gi_b_per_v_cpu: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         excluded_instance_types: [
    #           'member'
    #         ],
    #         instance_generations: [
    #           'current' # accepts ["current", "previous"]
    #         ],
    #         spot_max_price_percentage_over_lowest_price: 1,
    #         on_demand_max_price_percentage_over_lowest_price: 1,
    #         bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #         burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #         require_hibernate_support: false,
    #         network_interface_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         local_storage: 'included', # accepts ["included", "required", "excluded"]
    #         local_storage_types: [
    #           'hdd' # accepts ["hdd", "ssd"]
    #         ],
    #         total_local_storage_gb: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         baseline_ebs_bandwidth_mbps: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_types: [
    #           'gpu' # accepts ["gpu", "fpga", "inference"]
    #         ],
    #         accelerator_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_manufacturers: [
    #           'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #         ],
    #         accelerator_names: [
    #           'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #         ],
    #         accelerator_total_memory_mi_b: {
    #           min: 1,
    #           max: 1
    #         },
    #         network_bandwidth_gbps: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         allowed_instance_types: [
    #           'member'
    #         ],
    #         max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #       },
    #       private_dns_name_options: {
    #         hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #         enable_resource_name_dns_a_record: false,
    #         enable_resource_name_dns_aaaa_record: false
    #       },
    #       maintenance_options: {
    #         auto_recovery: 'default' # accepts ["default", "disabled"]
    #       },
    #       disable_api_stop: false
    #     }, # required
    #     resolve_alias: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateLaunchTemplateVersionOutput
    #   resp.data.launch_template_version #=> Types::LaunchTemplateVersion
    #   resp.data.launch_template_version.launch_template_id #=> String
    #   resp.data.launch_template_version.launch_template_name #=> String
    #   resp.data.launch_template_version.version_number #=> Integer
    #   resp.data.launch_template_version.version_description #=> String
    #   resp.data.launch_template_version.create_time #=> Time
    #   resp.data.launch_template_version.created_by #=> String
    #   resp.data.launch_template_version.default_version #=> Boolean
    #   resp.data.launch_template_version.launch_template_data #=> Types::ResponseLaunchTemplateData
    #   resp.data.launch_template_version.launch_template_data.kernel_id #=> String
    #   resp.data.launch_template_version.launch_template_data.ebs_optimized #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.iam_instance_profile #=> Types::LaunchTemplateIamInstanceProfileSpecification
    #   resp.data.launch_template_version.launch_template_data.iam_instance_profile.arn #=> String
    #   resp.data.launch_template_version.launch_template_data.iam_instance_profile.name #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings #=> Array<LaunchTemplateBlockDeviceMapping>
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0] #=> Types::LaunchTemplateBlockDeviceMapping
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].device_name #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs #=> Types::LaunchTemplateEbsBlockDevice
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.launch_template_version.launch_template_data.block_device_mappings[0].no_device #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces #=> Array<LaunchTemplateInstanceNetworkInterfaceSpecification>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0] #=> Types::LaunchTemplateInstanceNetworkInterfaceSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].description #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].device_index #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].groups #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].groups[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].interface_type #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].subnet_id #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationResponse>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationResponse>
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].primary_ipv6 #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ena_srd_specification #=> Types::LaunchTemplateEnaSrdSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification #=> Types::LaunchTemplateEnaSrdUdpSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].connection_tracking_specification #=> Types::ConnectionTrackingSpecification
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].connection_tracking_specification.tcp_established_timeout #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].connection_tracking_specification.udp_timeout #=> Integer
    #   resp.data.launch_template_version.launch_template_data.network_interfaces[0].connection_tracking_specification.udp_stream_timeout #=> Integer
    #   resp.data.launch_template_version.launch_template_data.image_id #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.launch_template_version.launch_template_data.key_name #=> String
    #   resp.data.launch_template_version.launch_template_data.monitoring #=> Types::LaunchTemplatesMonitoring
    #   resp.data.launch_template_version.launch_template_data.monitoring.enabled #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.placement #=> Types::LaunchTemplatePlacement
    #   resp.data.launch_template_version.launch_template_data.placement.availability_zone #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.affinity #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.group_name #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.host_id #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.launch_template_version.launch_template_data.placement.spread_domain #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.host_resource_group_arn #=> String
    #   resp.data.launch_template_version.launch_template_data.placement.partition_number #=> Integer
    #   resp.data.launch_template_version.launch_template_data.placement.group_id #=> String
    #   resp.data.launch_template_version.launch_template_data.ram_disk_id #=> String
    #   resp.data.launch_template_version.launch_template_data.disable_api_termination #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.instance_initiated_shutdown_behavior #=> String, one of ["stop", "terminate"]
    #   resp.data.launch_template_version.launch_template_data.user_data #=> String
    #   resp.data.launch_template_version.launch_template_data.tag_specifications #=> Array<LaunchTemplateTagSpecification>
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0] #=> Types::LaunchTemplateTagSpecification
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags[0].key #=> String
    #   resp.data.launch_template_version.launch_template_data.tag_specifications[0].tags[0].value #=> String
    #   resp.data.launch_template_version.launch_template_data.elastic_gpu_specifications #=> Array<ElasticGpuSpecificationResponse>
    #   resp.data.launch_template_version.launch_template_data.elastic_gpu_specifications[0] #=> Types::ElasticGpuSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.elastic_gpu_specifications[0].type #=> String
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators #=> Array<LaunchTemplateElasticInferenceAcceleratorResponse>
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators[0] #=> Types::LaunchTemplateElasticInferenceAcceleratorResponse
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators[0].type #=> String
    #   resp.data.launch_template_version.launch_template_data.elastic_inference_accelerators[0].count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.security_group_ids #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.security_group_ids[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.security_groups #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_market_options #=> Types::LaunchTemplateInstanceMarketOptions
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.market_type #=> String, one of ["spot", "capacity-block"]
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options #=> Types::LaunchTemplateSpotMarketOptions
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.max_price #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.spot_instance_type #=> String, one of ["one-time", "persistent"]
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.block_duration_minutes #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.valid_until #=> Time
    #   resp.data.launch_template_version.launch_template_data.instance_market_options.spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.launch_template_version.launch_template_data.credit_specification #=> Types::CreditSpecification
    #   resp.data.launch_template_version.launch_template_data.credit_specification.cpu_credits #=> String
    #   resp.data.launch_template_version.launch_template_data.cpu_options #=> Types::LaunchTemplateCpuOptions
    #   resp.data.launch_template_version.launch_template_data.cpu_options.core_count #=> Integer
    #   resp.data.launch_template_version.launch_template_data.cpu_options.threads_per_core #=> Integer
    #   resp.data.launch_template_version.launch_template_data.cpu_options.amd_sev_snp #=> String, one of ["enabled", "disabled"]
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification #=> Types::LaunchTemplateCapacityReservationSpecificationResponse
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.launch_template_version.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.launch_template_version.launch_template_data.license_specifications #=> Array<LaunchTemplateLicenseConfiguration>
    #   resp.data.launch_template_version.launch_template_data.license_specifications[0] #=> Types::LaunchTemplateLicenseConfiguration
    #   resp.data.launch_template_version.launch_template_data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.launch_template_version.launch_template_data.hibernation_options #=> Types::LaunchTemplateHibernationOptions
    #   resp.data.launch_template_version.launch_template_data.hibernation_options.configured #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.metadata_options #=> Types::LaunchTemplateInstanceMetadataOptions
    #   resp.data.launch_template_version.launch_template_data.metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_version.launch_template_data.metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_version.launch_template_data.enclave_options #=> Types::LaunchTemplateEnclaveOptions
    #   resp.data.launch_template_version.launch_template_data.enclave_options.enabled #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_bandwidth_gbps #=> Types::NetworkBandwidthGbps
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_bandwidth_gbps.min #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.network_bandwidth_gbps.max #=> Float
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.allowed_instance_types #=> Array<String>
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.allowed_instance_types[0] #=> String
    #   resp.data.launch_template_version.launch_template_data.instance_requirements.max_spot_price_as_percentage_of_optimal_on_demand_price #=> Integer
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options #=> Types::LaunchTemplatePrivateDnsNameOptions
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.launch_template_version.launch_template_data.maintenance_options #=> Types::LaunchTemplateInstanceMaintenanceOptions
    #   resp.data.launch_template_version.launch_template_data.maintenance_options.auto_recovery #=> String, one of ["default", "disabled"]
    #   resp.data.launch_template_version.launch_template_data.disable_api_stop #=> Boolean
    #   resp.data.warning #=> Types::ValidationWarning
    #   resp.data.warning.errors #=> Array<ValidationError>
    #   resp.data.warning.errors[0] #=> Types::ValidationError
    #   resp.data.warning.errors[0].code #=> String
    #   resp.data.warning.errors[0].message #=> String
    # @example To create a launch template version
    #   # This example creates a new launch template version based on version 1 of the specified launch template and specifies a different AMI ID.
    #   resp = client.create_launch_template_version({
    #     launch_template_id: "lt-0abcd290751193123",
    #     source_version: "1",
    #     version_description: "WebVersion2",
    #     launch_template_data: {
    #       image_id: "ami-c998b6b2"
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_template_version: {
    #       version_description: "WebVersion2",
    #       launch_template_id: "lt-0abcd290751193123",
    #       launch_template_name: "my-template",
    #       version_number: 2,
    #       created_by: "arn:aws:iam::123456789012:root",
    #       launch_template_data: {
    #         image_id: "ami-c998b6b2",
    #         instance_type: "t2.micro",
    #         network_interfaces: [
    #           {
    #             ipv6_addresses: [
    #               {
    #                 ipv6_address: "2001:db8:1234:1a00::123"
    #               }
    #             ],
    #             device_index: 0,
    #             subnet_id: "subnet-7b16de0c",
    #             associate_public_ip_address: true
    #           }
    #         ]
    #       },
    #       default_version: false,
    #       create_time: Time.parse('2017-12-01T13:35:46.000Z')
    #     }
    #   }
    def create_launch_template_version(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateLaunchTemplateVersionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateLaunchTemplateVersion.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_launch_template_version,
        tracer: tracer
      )
      Telemetry::CreateLaunchTemplateVersion.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_launch_template_version] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_launch_template_version] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_launch_template_version] #{output.data}")
        output
      end
    end

    # <p>Creates a static route for the specified local gateway route table. You must specify one of the
    #          following targets: </p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>LocalGatewayVirtualInterfaceGroupId</code>
    #                </p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>NetworkInterfaceId</code>
    #                </p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::CreateLocalGatewayRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateLocalGatewayRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_local_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     local_gateway_virtual_interface_group_id: 'LocalGatewayVirtualInterfaceGroupId',
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId',
    #     destination_prefix_list_id: 'DestinationPrefixListId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateLocalGatewayRouteOutput
    #   resp.data.route #=> Types::LocalGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.route.local_gateway_route_table_id #=> String
    #   resp.data.route.local_gateway_route_table_arn #=> String
    #   resp.data.route.owner_id #=> String
    #   resp.data.route.subnet_id #=> String
    #   resp.data.route.coip_pool_id #=> String
    #   resp.data.route.network_interface_id #=> String
    #   resp.data.route.destination_prefix_list_id #=> String
    def create_local_gateway_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateLocalGatewayRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateLocalGatewayRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_local_gateway_route,
        tracer: tracer
      )
      Telemetry::CreateLocalGatewayRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route] #{output.data}")
        output
      end
    end

    # <p>
    #       Creates a local gateway route table.
    #       </p>
    # @param [Hash | Types::CreateLocalGatewayRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateLocalGatewayRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_local_gateway_route_table(
    #     local_gateway_id: 'LocalGatewayId', # required
    #     mode: 'direct-vpc-routing', # accepts ["direct-vpc-routing", "coip"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateLocalGatewayRouteTableOutput
    #   resp.data.local_gateway_route_table #=> Types::LocalGatewayRouteTable
    #   resp.data.local_gateway_route_table.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table.outpost_arn #=> String
    #   resp.data.local_gateway_route_table.owner_id #=> String
    #   resp.data.local_gateway_route_table.state #=> String
    #   resp.data.local_gateway_route_table.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table.tags[0].key #=> String
    #   resp.data.local_gateway_route_table.tags[0].value #=> String
    #   resp.data.local_gateway_route_table.mode #=> String, one of ["direct-vpc-routing", "coip"]
    #   resp.data.local_gateway_route_table.state_reason #=> Types::StateReason
    #   resp.data.local_gateway_route_table.state_reason.code #=> String
    #   resp.data.local_gateway_route_table.state_reason.message #=> String
    def create_local_gateway_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateLocalGatewayRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateLocalGatewayRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_local_gateway_route_table,
        tracer: tracer
      )
      Telemetry::CreateLocalGatewayRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table] #{output.data}")
        output
      end
    end

    # <p>
    #       Creates a local gateway route table virtual interface group association.
    #       </p>
    # @param [Hash | Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_local_gateway_route_table_virtual_interface_group_association(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     local_gateway_virtual_interface_group_id: 'LocalGatewayVirtualInterfaceGroupId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
    #   resp.data.local_gateway_route_table_virtual_interface_group_association #=> Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_route_table_virtual_interface_group_association_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.owner_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.state #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags[0].key #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags[0].value #=> String
    def create_local_gateway_route_table_virtual_interface_group_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_local_gateway_route_table_virtual_interface_group_association,
        tracer: tracer
      )
      Telemetry::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table_virtual_interface_group_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table_virtual_interface_group_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table_virtual_interface_group_association] #{output.data}")
        output
      end
    end

    # <p>Associates the specified VPC with the specified local gateway route table.</p>
    # @param [Hash | Types::CreateLocalGatewayRouteTableVpcAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateLocalGatewayRouteTableVpcAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_local_gateway_route_table_vpc_association(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateLocalGatewayRouteTableVpcAssociationOutput
    #   resp.data.local_gateway_route_table_vpc_association #=> Types::LocalGatewayRouteTableVpcAssociation
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_vpc_association_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.vpc_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.owner_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.state #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_vpc_association.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].key #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].value #=> String
    def create_local_gateway_route_table_vpc_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateLocalGatewayRouteTableVpcAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateLocalGatewayRouteTableVpcAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_local_gateway_route_table_vpc_association,
        tracer: tracer
      )
      Telemetry::CreateLocalGatewayRouteTableVpcAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table_vpc_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table_vpc_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_local_gateway_route_table_vpc_association] #{output.data}")
        output
      end
    end

    # <p>Creates a managed prefix list. You can specify one or more entries for the prefix list.
    #             Each entry consists of a CIDR block and an optional description.</p>
    # @param [Hash | Types::CreateManagedPrefixListInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateManagedPrefixListInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_managed_prefix_list(
    #     dry_run: false,
    #     prefix_list_name: 'PrefixListName', # required
    #     entries: [
    #       {
    #         cidr: 'Cidr', # required
    #         description: 'Description'
    #       }
    #     ],
    #     max_entries: 1, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     address_family: 'AddressFamily', # required
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateManagedPrefixListOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    def create_managed_prefix_list(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateManagedPrefixListInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateManagedPrefixList.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_managed_prefix_list,
        tracer: tracer
      )
      Telemetry::CreateManagedPrefixList.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_managed_prefix_list] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_managed_prefix_list] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_managed_prefix_list] #{output.data}")
        output
      end
    end

    # <p>Creates a NAT gateway in the specified subnet. This action creates a network interface
    #           in the specified subnet with a private IP address from the IP address range of the
    #           subnet. You can create either a public NAT gateway or a private NAT gateway.</p>
    #          <p>With a public NAT gateway, internet-bound traffic from a private subnet can be routed
    #           to the NAT gateway, so that instances in a private subnet can connect to the internet.</p>
    #          <p>With a private NAT gateway, private communication is routed across VPCs and on-premises
    #             networks through a transit gateway or virtual private gateway. Common use cases include
    #             running large workloads behind a small pool of allowlisted IPv4 addresses, preserving
    #             private IPv4 addresses, and communicating between overlapping networks.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT gateways</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <important>
    #             <p>When you create a public NAT gateway and assign it an EIP or secondary EIPs, the network border group of the EIPs must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. If it's not the same, the NAT gateway will fail to launch. You can see the network border group for the subnet's AZ by viewing the details of the subnet. Similarly, you can view the network border group of an EIP by viewing the details of the EIP address. For more information about network border groups and EIPs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#allocate-eip">Allocate an Elastic IP address</a> in the <i>Amazon VPC User Guide</i>.
    #       </p>
    #          </important>
    # @param [Hash | Types::CreateNatGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNatGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_nat_gateway(
    #     allocation_id: 'AllocationId',
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     subnet_id: 'SubnetId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     connectivity_type: 'private', # accepts ["private", "public"]
    #     private_ip_address: 'PrivateIpAddress',
    #     secondary_allocation_ids: [
    #       'member'
    #     ],
    #     secondary_private_ip_addresses: [
    #       'member'
    #     ],
    #     secondary_private_ip_address_count: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNatGatewayOutput
    #   resp.data.client_token #=> String
    #   resp.data.nat_gateway #=> Types::NatGateway
    #   resp.data.nat_gateway.create_time #=> Time
    #   resp.data.nat_gateway.delete_time #=> Time
    #   resp.data.nat_gateway.failure_code #=> String
    #   resp.data.nat_gateway.failure_message #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateway.nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateway.nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].association_id #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].is_primary #=> Boolean
    #   resp.data.nat_gateway.nat_gateway_addresses[0].failure_message #=> String
    #   resp.data.nat_gateway.nat_gateway_addresses[0].status #=> String, one of ["assigning", "unassigning", "associating", "disassociating", "succeeded", "failed"]
    #   resp.data.nat_gateway.nat_gateway_id #=> String
    #   resp.data.nat_gateway.provisioned_bandwidth #=> Types::ProvisionedBandwidth
    #   resp.data.nat_gateway.provisioned_bandwidth.provision_time #=> Time
    #   resp.data.nat_gateway.provisioned_bandwidth.provisioned #=> String
    #   resp.data.nat_gateway.provisioned_bandwidth.request_time #=> Time
    #   resp.data.nat_gateway.provisioned_bandwidth.requested #=> String
    #   resp.data.nat_gateway.provisioned_bandwidth.status #=> String
    #   resp.data.nat_gateway.state #=> String, one of ["pending", "failed", "available", "deleting", "deleted"]
    #   resp.data.nat_gateway.subnet_id #=> String
    #   resp.data.nat_gateway.vpc_id #=> String
    #   resp.data.nat_gateway.tags #=> Array<Tag>
    #   resp.data.nat_gateway.tags[0] #=> Types::Tag
    #   resp.data.nat_gateway.tags[0].key #=> String
    #   resp.data.nat_gateway.tags[0].value #=> String
    #   resp.data.nat_gateway.connectivity_type #=> String, one of ["private", "public"]
    # @example To create a NAT gateway
    #   # This example creates a NAT gateway in subnet subnet-1a2b3c4d and associates an Elastic IP address with the allocation ID eipalloc-37fc1a52 with the NAT gateway.
    #   resp = client.create_nat_gateway({
    #     subnet_id: "subnet-1a2b3c4d",
    #     allocation_id: "eipalloc-37fc1a52"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     nat_gateway: {
    #       nat_gateway_addresses: [
    #         {
    #           allocation_id: "eipalloc-37fc1a52"
    #         }
    #       ],
    #       vpc_id: "vpc-1122aabb",
    #       state: "pending",
    #       nat_gateway_id: "nat-08d48af2a8e83edfd",
    #       subnet_id: "subnet-1a2b3c4d",
    #       create_time: Time.parse('2015-12-17T12:45:26.732Z')
    #     }
    #   }
    def create_nat_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNatGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNatGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_nat_gateway,
        tracer: tracer
      )
      Telemetry::CreateNatGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_nat_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_nat_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_nat_gateway] #{output.data}")
        output
      end
    end

    # <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateNetworkAclInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNetworkAclInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_network_acl(
    #     dry_run: false,
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNetworkAclOutput
    #   resp.data.network_acl #=> Types::NetworkAcl
    #   resp.data.network_acl.associations #=> Array<NetworkAclAssociation>
    #   resp.data.network_acl.associations[0] #=> Types::NetworkAclAssociation
    #   resp.data.network_acl.associations[0].network_acl_association_id #=> String
    #   resp.data.network_acl.associations[0].network_acl_id #=> String
    #   resp.data.network_acl.associations[0].subnet_id #=> String
    #   resp.data.network_acl.entries #=> Array<NetworkAclEntry>
    #   resp.data.network_acl.entries[0] #=> Types::NetworkAclEntry
    #   resp.data.network_acl.entries[0].cidr_block #=> String
    #   resp.data.network_acl.entries[0].egress #=> Boolean
    #   resp.data.network_acl.entries[0].icmp_type_code #=> Types::IcmpTypeCode
    #   resp.data.network_acl.entries[0].icmp_type_code.code #=> Integer
    #   resp.data.network_acl.entries[0].icmp_type_code.type #=> Integer
    #   resp.data.network_acl.entries[0].ipv6_cidr_block #=> String
    #   resp.data.network_acl.entries[0].port_range #=> Types::PortRange
    #   resp.data.network_acl.entries[0].port_range.from #=> Integer
    #   resp.data.network_acl.entries[0].port_range.to #=> Integer
    #   resp.data.network_acl.entries[0].protocol #=> String
    #   resp.data.network_acl.entries[0].rule_action #=> String, one of ["allow", "deny"]
    #   resp.data.network_acl.entries[0].rule_number #=> Integer
    #   resp.data.network_acl.is_default #=> Boolean
    #   resp.data.network_acl.network_acl_id #=> String
    #   resp.data.network_acl.tags #=> Array<Tag>
    #   resp.data.network_acl.tags[0] #=> Types::Tag
    #   resp.data.network_acl.tags[0].key #=> String
    #   resp.data.network_acl.tags[0].value #=> String
    #   resp.data.network_acl.vpc_id #=> String
    #   resp.data.network_acl.owner_id #=> String
    #   resp.data.client_token #=> String
    # @example To create a network ACL
    #   # This example creates a network ACL for the specified VPC.
    #   resp = client.create_network_acl({
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_acl: {
    #       associations: [
    #
    #       ],
    #       network_acl_id: "acl-5fb85d36",
    #       vpc_id: "vpc-a01106c2",
    #       tags: [
    #
    #       ],
    #       entries: [
    #         {
    #           cidr_block: "0.0.0.0/0",
    #           rule_number: 32767,
    #           protocol: "-1",
    #           egress: true,
    #           rule_action: "deny"
    #         },
    #         {
    #           cidr_block: "0.0.0.0/0",
    #           rule_number: 32767,
    #           protocol: "-1",
    #           egress: false,
    #           rule_action: "deny"
    #         }
    #       ],
    #       is_default: false
    #     }
    #   }
    def create_network_acl(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNetworkAclInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNetworkAcl.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_network_acl,
        tracer: tracer
      )
      Telemetry::CreateNetworkAcl.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_acl] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_network_acl] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_acl] #{output.data}")
        output
      end
    end

    # <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules
    # 		        and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated
    # 		        with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of
    # 		        ingress rules and a separate set of egress rules.</p>
    #          <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the
    # 		        other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p>
    #          <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p>
    #          <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a>
    #            in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateNetworkAclEntryInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNetworkAclEntryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_network_acl_entry(
    #     cidr_block: 'CidrBlock',
    #     dry_run: false,
    #     egress: false, # required
    #     icmp_type_code: {
    #       code: 1,
    #       type: 1
    #     },
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     network_acl_id: 'NetworkAclId', # required
    #     port_range: {
    #       from: 1,
    #       to: 1
    #     },
    #     protocol: 'Protocol', # required
    #     rule_action: 'allow', # required - accepts ["allow", "deny"]
    #     rule_number: 1 # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNetworkAclEntryOutput
    # @example To create a network ACL entry
    #   # This example creates an entry for the specified network ACL. The rule allows ingress traffic from anywhere (0.0.0.0/0) on UDP port 53 (DNS) into any associated subnet.
    #   resp = client.create_network_acl_entry({
    #     network_acl_id: "acl-5fb85d36",
    #     rule_number: 100,
    #     protocol: "17",
    #     rule_action: "allow",
    #     egress: false,
    #     cidr_block: "0.0.0.0/0",
    #     port_range: {
    #       from: 53,
    #       to: 53
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def create_network_acl_entry(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNetworkAclEntryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNetworkAclEntry.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_network_acl_entry,
        tracer: tracer
      )
      Telemetry::CreateNetworkAclEntry.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_acl_entry] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_network_acl_entry] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_acl_entry] #{output.data}")
        output
      end
    end

    # <p>Creates a Network Access Scope.</p>
    #          <p>Amazon Web Services Network Access Analyzer enables cloud networking and cloud operations teams
    #          to verify that their networks on Amazon Web Services conform to their network security and governance
    #          objectives. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/">Amazon Web Services Network Access Analyzer Guide</a>.</p>
    # @param [Hash | Types::CreateNetworkInsightsAccessScopeInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNetworkInsightsAccessScopeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_network_insights_access_scope(
    #     match_paths: [
    #       {
    #         source: {
    #           packet_header_statement: {
    #             source_addresses: [
    #               'member'
    #             ],
    #             protocols: [
    #               'tcp' # accepts ["tcp", "udp"]
    #             ]
    #           },
    #           resource_statement: {
    #           }
    #         },
    #         through_resources: [
    #           {
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNetworkInsightsAccessScopeOutput
    #   resp.data.network_insights_access_scope #=> Types::NetworkInsightsAccessScope
    #   resp.data.network_insights_access_scope.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope.network_insights_access_scope_arn #=> String
    #   resp.data.network_insights_access_scope.created_date #=> Time
    #   resp.data.network_insights_access_scope.updated_date #=> Time
    #   resp.data.network_insights_access_scope.tags #=> Array<Tag>
    #   resp.data.network_insights_access_scope.tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scope.tags[0].key #=> String
    #   resp.data.network_insights_access_scope.tags[0].value #=> String
    #   resp.data.network_insights_access_scope_content #=> Types::NetworkInsightsAccessScopeContent
    #   resp.data.network_insights_access_scope_content.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_content.match_paths #=> Array<AccessScopePath>
    #   resp.data.network_insights_access_scope_content.match_paths[0] #=> Types::AccessScopePath
    #   resp.data.network_insights_access_scope_content.match_paths[0].source #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement #=> Types::PacketHeaderStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses[0] #=> String
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols[0] #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resources #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resource_types #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].destination #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources #=> Array<ThroughResourcesStatement>
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0] #=> Types::ThroughResourcesStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0].resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.exclude_paths #=> Array<AccessScopePath>
    def create_network_insights_access_scope(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNetworkInsightsAccessScopeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNetworkInsightsAccessScope.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_network_insights_access_scope,
        tracer: tracer
      )
      Telemetry::CreateNetworkInsightsAccessScope.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_insights_access_scope] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_network_insights_access_scope] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_insights_access_scope] #{output.data}")
        output
      end
    end

    # <p>Creates a path to analyze for reachability.</p>
    #          <p>Reachability Analyzer enables you to analyze and debug network reachability between
    #           two resources in your virtual private cloud (VPC). For more information, see the
    #           <a href="https://docs.aws.amazon.com/vpc/latest/reachability/">Reachability Analyzer Guide</a>.</p>
    # @param [Hash | Types::CreateNetworkInsightsPathInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNetworkInsightsPathInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_network_insights_path(
    #     source_ip: 'SourceIp',
    #     destination_ip: 'DestinationIp',
    #     source: 'Source', # required
    #     destination: 'Destination',
    #     protocol: 'tcp', # required - accepts ["tcp", "udp"]
    #     destination_port: 1,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken', # required
    #     filter_at_source: {
    #       source_address: 'SourceAddress',
    #       source_port_range: {
    #         from_port: 1,
    #         to_port: 1
    #       },
    #       destination_address: 'DestinationAddress',
    #     },
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNetworkInsightsPathOutput
    #   resp.data.network_insights_path #=> Types::NetworkInsightsPath
    #   resp.data.network_insights_path.network_insights_path_id #=> String
    #   resp.data.network_insights_path.network_insights_path_arn #=> String
    #   resp.data.network_insights_path.created_date #=> Time
    #   resp.data.network_insights_path.source #=> String
    #   resp.data.network_insights_path.destination #=> String
    #   resp.data.network_insights_path.source_arn #=> String
    #   resp.data.network_insights_path.destination_arn #=> String
    #   resp.data.network_insights_path.source_ip #=> String
    #   resp.data.network_insights_path.destination_ip #=> String
    #   resp.data.network_insights_path.protocol #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_path.destination_port #=> Integer
    #   resp.data.network_insights_path.tags #=> Array<Tag>
    #   resp.data.network_insights_path.tags[0] #=> Types::Tag
    #   resp.data.network_insights_path.tags[0].key #=> String
    #   resp.data.network_insights_path.tags[0].value #=> String
    #   resp.data.network_insights_path.filter_at_source #=> Types::PathFilter
    #   resp.data.network_insights_path.filter_at_source.source_address #=> String
    #   resp.data.network_insights_path.filter_at_source.source_port_range #=> Types::FilterPortRange
    #   resp.data.network_insights_path.filter_at_source.source_port_range.from_port #=> Integer
    #   resp.data.network_insights_path.filter_at_source.source_port_range.to_port #=> Integer
    #   resp.data.network_insights_path.filter_at_source.destination_address #=> String
    #   resp.data.network_insights_path.filter_at_source.destination_port_range #=> Types::FilterPortRange
    #   resp.data.network_insights_path.filter_at_destination #=> Types::PathFilter
    def create_network_insights_path(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNetworkInsightsPathInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNetworkInsightsPath.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_network_insights_path,
        tracer: tracer
      )
      Telemetry::CreateNetworkInsightsPath.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_insights_path] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_network_insights_path] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_insights_path] #{output.data}")
        output
      end
    end

    # <p>Creates a network interface in the specified subnet.</p>
    #          <p>The number of IP addresses you can assign to a network interface varies by instance
    #             type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per ENI Per
    #                 Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic network interfaces</a>
    #             in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateNetworkInterfaceInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNetworkInterfaceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_network_interface(
    #     description: 'Description',
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ],
    #     ipv6_address_count: 1,
    #     ipv6_addresses: [
    #       {
    #         ipv6_address: 'Ipv6Address',
    #         is_primary_ipv6: false
    #       }
    #     ],
    #     private_ip_address: 'PrivateIpAddress',
    #     private_ip_addresses: [
    #       {
    #         primary: false,
    #         private_ip_address: 'PrivateIpAddress'
    #       }
    #     ],
    #     secondary_private_ip_address_count: 1,
    #     ipv4_prefixes: [
    #       {
    #         ipv4_prefix: 'Ipv4Prefix'
    #       }
    #     ],
    #     ipv4_prefix_count: 1,
    #     ipv6_prefixes: [
    #       {
    #         ipv6_prefix: 'Ipv6Prefix'
    #       }
    #     ],
    #     ipv6_prefix_count: 1,
    #     interface_type: 'efa', # accepts ["efa", "branch", "trunk"]
    #     subnet_id: 'SubnetId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     enable_primary_ipv6: false,
    #     connection_tracking_specification: {
    #       tcp_established_timeout: 1,
    #       udp_stream_timeout: 1,
    #       udp_timeout: 1
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNetworkInterfaceOutput
    #   resp.data.network_interface #=> Types::NetworkInterface
    #   resp.data.network_interface.association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interface.association.allocation_id #=> String
    #   resp.data.network_interface.association.association_id #=> String
    #   resp.data.network_interface.association.ip_owner_id #=> String
    #   resp.data.network_interface.association.public_dns_name #=> String
    #   resp.data.network_interface.association.public_ip #=> String
    #   resp.data.network_interface.association.customer_owned_ip #=> String
    #   resp.data.network_interface.association.carrier_ip #=> String
    #   resp.data.network_interface.attachment #=> Types::NetworkInterfaceAttachment
    #   resp.data.network_interface.attachment.attach_time #=> Time
    #   resp.data.network_interface.attachment.attachment_id #=> String
    #   resp.data.network_interface.attachment.delete_on_termination #=> Boolean
    #   resp.data.network_interface.attachment.device_index #=> Integer
    #   resp.data.network_interface.attachment.network_card_index #=> Integer
    #   resp.data.network_interface.attachment.instance_id #=> String
    #   resp.data.network_interface.attachment.instance_owner_id #=> String
    #   resp.data.network_interface.attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.network_interface.attachment.ena_srd_specification #=> Types::AttachmentEnaSrdSpecification
    #   resp.data.network_interface.attachment.ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.network_interface.attachment.ena_srd_specification.ena_srd_udp_specification #=> Types::AttachmentEnaSrdUdpSpecification
    #   resp.data.network_interface.attachment.ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.network_interface.availability_zone #=> String
    #   resp.data.network_interface.connection_tracking_configuration #=> Types::ConnectionTrackingConfiguration
    #   resp.data.network_interface.connection_tracking_configuration.tcp_established_timeout #=> Integer
    #   resp.data.network_interface.connection_tracking_configuration.udp_stream_timeout #=> Integer
    #   resp.data.network_interface.connection_tracking_configuration.udp_timeout #=> Integer
    #   resp.data.network_interface.description #=> String
    #   resp.data.network_interface.groups #=> Array<GroupIdentifier>
    #   resp.data.network_interface.groups[0] #=> Types::GroupIdentifier
    #   resp.data.network_interface.groups[0].group_name #=> String
    #   resp.data.network_interface.groups[0].group_id #=> String
    #   resp.data.network_interface.interface_type #=> String, one of ["interface", "natGateway", "efa", "trunk", "load_balancer", "network_load_balancer", "vpc_endpoint", "branch", "transit_gateway", "lambda", "quicksight", "global_accelerator_managed", "api_gateway_managed", "gateway_load_balancer", "gateway_load_balancer_endpoint", "iot_rules_managed", "aws_codestar_connections_managed"]
    #   resp.data.network_interface.ipv6_addresses #=> Array<NetworkInterfaceIpv6Address>
    #   resp.data.network_interface.ipv6_addresses[0] #=> Types::NetworkInterfaceIpv6Address
    #   resp.data.network_interface.ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.network_interface.ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.network_interface.mac_address #=> String
    #   resp.data.network_interface.network_interface_id #=> String
    #   resp.data.network_interface.outpost_arn #=> String
    #   resp.data.network_interface.owner_id #=> String
    #   resp.data.network_interface.private_dns_name #=> String
    #   resp.data.network_interface.private_ip_address #=> String
    #   resp.data.network_interface.private_ip_addresses #=> Array<NetworkInterfacePrivateIpAddress>
    #   resp.data.network_interface.private_ip_addresses[0] #=> Types::NetworkInterfacePrivateIpAddress
    #   resp.data.network_interface.private_ip_addresses[0].association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interface.private_ip_addresses[0].primary #=> Boolean
    #   resp.data.network_interface.private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.network_interface.private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.network_interface.ipv4_prefixes #=> Array<Ipv4PrefixSpecification>
    #   resp.data.network_interface.ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecification
    #   resp.data.network_interface.ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.network_interface.ipv6_prefixes #=> Array<Ipv6PrefixSpecification>
    #   resp.data.network_interface.ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecification
    #   resp.data.network_interface.ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.network_interface.requester_id #=> String
    #   resp.data.network_interface.requester_managed #=> Boolean
    #   resp.data.network_interface.source_dest_check #=> Boolean
    #   resp.data.network_interface.status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.network_interface.subnet_id #=> String
    #   resp.data.network_interface.tag_set #=> Array<Tag>
    #   resp.data.network_interface.tag_set[0] #=> Types::Tag
    #   resp.data.network_interface.tag_set[0].key #=> String
    #   resp.data.network_interface.tag_set[0].value #=> String
    #   resp.data.network_interface.vpc_id #=> String
    #   resp.data.network_interface.deny_all_igw_traffic #=> Boolean
    #   resp.data.network_interface.ipv6_native #=> Boolean
    #   resp.data.network_interface.ipv6_address #=> String
    #   resp.data.client_token #=> String
    def create_network_interface(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNetworkInterfaceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNetworkInterface.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_network_interface,
        tracer: tracer
      )
      Telemetry::CreateNetworkInterface.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_interface] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_network_interface] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_interface] #{output.data}")
        output
      end
    end

    # <p>Grants an Amazon Web Services-authorized account permission to attach the specified network interface to
    #             an instance in their account.</p>
    #          <p>You can grant permission to a single Amazon Web Services account only, and only one account at a time.</p>
    # @param [Hash | Types::CreateNetworkInterfacePermissionInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateNetworkInterfacePermissionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_network_interface_permission(
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     aws_account_id: 'AwsAccountId',
    #     aws_service: 'AwsService',
    #     permission: 'INSTANCE-ATTACH', # required - accepts ["INSTANCE-ATTACH", "EIP-ASSOCIATE"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateNetworkInterfacePermissionOutput
    #   resp.data.interface_permission #=> Types::NetworkInterfacePermission
    #   resp.data.interface_permission.network_interface_permission_id #=> String
    #   resp.data.interface_permission.network_interface_id #=> String
    #   resp.data.interface_permission.aws_account_id #=> String
    #   resp.data.interface_permission.aws_service #=> String
    #   resp.data.interface_permission.permission #=> String, one of ["INSTANCE-ATTACH", "EIP-ASSOCIATE"]
    #   resp.data.interface_permission.permission_state #=> Types::NetworkInterfacePermissionState
    #   resp.data.interface_permission.permission_state.state #=> String, one of ["pending", "granted", "revoking", "revoked"]
    #   resp.data.interface_permission.permission_state.status_message #=> String
    def create_network_interface_permission(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateNetworkInterfacePermissionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateNetworkInterfacePermission.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_network_interface_permission,
        tracer: tracer
      )
      Telemetry::CreateNetworkInterfacePermission.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_interface_permission] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_network_interface_permission] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_network_interface_permission] #{output.data}")
        output
      end
    end

    # <p>Creates a placement group in which to launch instances. The strategy of the placement
    #             group determines how the instances are organized within the group. </p>
    #          <p>A <code>cluster</code> placement group is a logical grouping of instances within a
    #             single Availability Zone that benefit from low network latency, high network throughput.
    #             A <code>spread</code> placement group places instances on distinct hardware. A
    #                 <code>partition</code> placement group places groups of instances in different
    #             partitions, where instances in one partition do not share the same hardware with
    #             instances in another partition.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreatePlacementGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::CreatePlacementGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_placement_group(
    #     dry_run: false,
    #     group_name: 'GroupName',
    #     strategy: 'cluster', # accepts ["cluster", "spread", "partition"]
    #     partition_count: 1,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     spread_level: 'host' # accepts ["host", "rack"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreatePlacementGroupOutput
    #   resp.data.placement_group #=> Types::PlacementGroup
    #   resp.data.placement_group.group_name #=> String
    #   resp.data.placement_group.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.placement_group.strategy #=> String, one of ["cluster", "spread", "partition"]
    #   resp.data.placement_group.partition_count #=> Integer
    #   resp.data.placement_group.group_id #=> String
    #   resp.data.placement_group.tags #=> Array<Tag>
    #   resp.data.placement_group.tags[0] #=> Types::Tag
    #   resp.data.placement_group.tags[0].key #=> String
    #   resp.data.placement_group.tags[0].value #=> String
    #   resp.data.placement_group.group_arn #=> String
    #   resp.data.placement_group.spread_level #=> String, one of ["host", "rack"]
    # @example To create a placement group
    #   # This example creates a placement group with the specified name.
    #   resp = client.create_placement_group({
    #     group_name: "my-cluster",
    #     strategy: "cluster"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def create_placement_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreatePlacementGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreatePlacementGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_placement_group,
        tracer: tracer
      )
      Telemetry::CreatePlacementGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_placement_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_placement_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_placement_group] #{output.data}")
        output
      end
    end

    # <p>Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only. To monitor the status of pool creation, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePublicIpv4Pools.html">DescribePublicIpv4Pools</a>.</p>
    # @param [Hash | Types::CreatePublicIpv4PoolInput] params
    #   Request parameters for this operation.
    #   See {Types::CreatePublicIpv4PoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_public_ipv4_pool(
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreatePublicIpv4PoolOutput
    #   resp.data.pool_id #=> String
    def create_public_ipv4_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreatePublicIpv4PoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreatePublicIpv4Pool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_public_ipv4_pool,
        tracer: tracer
      )
      Telemetry::CreatePublicIpv4Pool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_public_ipv4_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_public_ipv4_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_public_ipv4_pool] #{output.data}")
        output
      end
    end

    # <p>Replaces the EBS-backed root volume for a <code>running</code> instance with a new
    #       volume that is restored to the original root volume's launch state, that is restored to a
    #       specific snapshot taken from the original root volume, or that is restored from an AMI
    #       that has the same key characteristics as that of the instance.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html">Replace a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateReplaceRootVolumeTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateReplaceRootVolumeTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_replace_root_volume_task(
    #     instance_id: 'InstanceId', # required
    #     snapshot_id: 'SnapshotId',
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     image_id: 'ImageId',
    #     delete_replaced_root_volume: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateReplaceRootVolumeTaskOutput
    #   resp.data.replace_root_volume_task #=> Types::ReplaceRootVolumeTask
    #   resp.data.replace_root_volume_task.replace_root_volume_task_id #=> String
    #   resp.data.replace_root_volume_task.instance_id #=> String
    #   resp.data.replace_root_volume_task.task_state #=> String, one of ["pending", "in-progress", "failing", "succeeded", "failed", "failed-detached"]
    #   resp.data.replace_root_volume_task.start_time #=> String
    #   resp.data.replace_root_volume_task.complete_time #=> String
    #   resp.data.replace_root_volume_task.tags #=> Array<Tag>
    #   resp.data.replace_root_volume_task.tags[0] #=> Types::Tag
    #   resp.data.replace_root_volume_task.tags[0].key #=> String
    #   resp.data.replace_root_volume_task.tags[0].value #=> String
    #   resp.data.replace_root_volume_task.image_id #=> String
    #   resp.data.replace_root_volume_task.snapshot_id #=> String
    #   resp.data.replace_root_volume_task.delete_replaced_root_volume #=> Boolean
    def create_replace_root_volume_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateReplaceRootVolumeTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateReplaceRootVolumeTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_replace_root_volume_task,
        tracer: tracer
      )
      Telemetry::CreateReplaceRootVolumeTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_replace_root_volume_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_replace_root_volume_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_replace_root_volume_task] #{output.data}")
        output
      end
    end

    # <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance
    # 			Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your
    # 			Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p>
    #          <note>
    #             <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace.
    #        Convertible Reserved Instances cannot be sold.</p>
    #          </note>
    #          <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p>
    #          <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance
    #       Marketplace. After completing the registration process, you can create a Reserved Instance
    #       Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price
    #       to receive for them. Your Standard Reserved Instance listings then become available for purchase. To
    #       view the details of your Standard Reserved Instance listing, you can use the
    #         <a>DescribeReservedInstancesListings</a> operation.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the
    # 				<i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateReservedInstancesListingInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateReservedInstancesListingInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_reserved_instances_listing(
    #     client_token: 'ClientToken', # required
    #     instance_count: 1, # required
    #     price_schedules: [
    #       {
    #         currency_code: 'USD', # accepts ["USD"]
    #         price: 1.0,
    #         term: 1
    #       }
    #     ], # required
    #     reserved_instances_id: 'ReservedInstancesId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateReservedInstancesListingOutput
    #   resp.data.reserved_instances_listings #=> Array<ReservedInstancesListing>
    #   resp.data.reserved_instances_listings[0] #=> Types::ReservedInstancesListing
    #   resp.data.reserved_instances_listings[0].client_token #=> String
    #   resp.data.reserved_instances_listings[0].create_date #=> Time
    #   resp.data.reserved_instances_listings[0].instance_counts #=> Array<InstanceCount>
    #   resp.data.reserved_instances_listings[0].instance_counts[0] #=> Types::InstanceCount
    #   resp.data.reserved_instances_listings[0].instance_counts[0].instance_count #=> Integer
    #   resp.data.reserved_instances_listings[0].instance_counts[0].state #=> String, one of ["available", "sold", "cancelled", "pending"]
    #   resp.data.reserved_instances_listings[0].price_schedules #=> Array<PriceSchedule>
    #   resp.data.reserved_instances_listings[0].price_schedules[0] #=> Types::PriceSchedule
    #   resp.data.reserved_instances_listings[0].price_schedules[0].active #=> Boolean
    #   resp.data.reserved_instances_listings[0].price_schedules[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_listings[0].price_schedules[0].price #=> Float
    #   resp.data.reserved_instances_listings[0].price_schedules[0].term #=> Integer
    #   resp.data.reserved_instances_listings[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_listings[0].reserved_instances_listing_id #=> String
    #   resp.data.reserved_instances_listings[0].status #=> String, one of ["active", "pending", "cancelled", "closed"]
    #   resp.data.reserved_instances_listings[0].status_message #=> String
    #   resp.data.reserved_instances_listings[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances_listings[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances_listings[0].tags[0].key #=> String
    #   resp.data.reserved_instances_listings[0].tags[0].value #=> String
    #   resp.data.reserved_instances_listings[0].update_date #=> Time
    def create_reserved_instances_listing(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateReservedInstancesListingInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateReservedInstancesListing.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_reserved_instances_listing,
        tracer: tracer
      )
      Telemetry::CreateReservedInstancesListing.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_reserved_instances_listing] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_reserved_instances_listing] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_reserved_instances_listing] #{output.data}")
        output
      end
    end

    # <p>Starts a task that restores an AMI from an Amazon S3 object that was previously created by using
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p>
    #          <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
    #     	Amazon S3</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateRestoreImageTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateRestoreImageTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_restore_image_task(
    #     bucket: 'Bucket', # required
    #     object_key: 'ObjectKey', # required
    #     name: 'Name',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateRestoreImageTaskOutput
    #   resp.data.image_id #=> String
    def create_restore_image_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateRestoreImageTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateRestoreImageTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_restore_image_task,
        tracer: tracer
      )
      Telemetry::CreateRestoreImageTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_restore_image_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_restore_image_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_restore_image_task] #{output.data}")
        output
      end
    end

    # <p>Creates a route in a route table within a VPC.</p>
    #          <p>You must specify either a destination CIDR block or a prefix list ID. You must also specify
    #          exactly one of the resources from the parameter list.</p>
    #          <p>When determining how to route traffic, we use the route with the most specific match.
    #             For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the
    #             route table includes the following two IPv4 routes:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>192.0.2.0/24</code> (goes to some target A)</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>192.0.2.0/28</code> (goes to some target B)</p>
    #             </li>
    #          </ul>
    #          <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route
    # 				in the list covers a smaller number of IP addresses and is therefore more specific,
    # 				so we use that route to determine where to target the traffic.</p>
    #          <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    #          <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     destination_ipv6_cidr_block: 'DestinationIpv6CidrBlock',
    #     destination_prefix_list_id: 'DestinationPrefixListId',
    #     dry_run: false,
    #     vpc_endpoint_id: 'VpcEndpointId',
    #     egress_only_internet_gateway_id: 'EgressOnlyInternetGatewayId',
    #     gateway_id: 'GatewayId',
    #     instance_id: 'InstanceId',
    #     nat_gateway_id: 'NatGatewayId',
    #     transit_gateway_id: 'TransitGatewayId',
    #     local_gateway_id: 'LocalGatewayId',
    #     carrier_gateway_id: 'CarrierGatewayId',
    #     network_interface_id: 'NetworkInterfaceId',
    #     route_table_id: 'RouteTableId', # required
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId',
    #     core_network_arn: 'CoreNetworkArn'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateRouteOutput
    #   resp.data.return #=> Boolean
    # @example To create a route
    #   # This example creates a route for the specified route table. The route matches all traffic (0.0.0.0/0) and routes it to the specified Internet gateway.
    #   resp = client.create_route({
    #     route_table_id: "rtb-22574640",
    #     destination_cidr_block: "0.0.0.0/0",
    #     gateway_id: "igw-c0a643a9"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def create_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_route,
        tracer: tracer
      )
      Telemetry::CreateRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_route] #{output.data}")
        output
      end
    end

    # <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_route_table(
    #     dry_run: false,
    #     vpc_id: 'VpcId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateRouteTableOutput
    #   resp.data.route_table #=> Types::RouteTable
    #   resp.data.route_table.associations #=> Array<RouteTableAssociation>
    #   resp.data.route_table.associations[0] #=> Types::RouteTableAssociation
    #   resp.data.route_table.associations[0].main #=> Boolean
    #   resp.data.route_table.associations[0].route_table_association_id #=> String
    #   resp.data.route_table.associations[0].route_table_id #=> String
    #   resp.data.route_table.associations[0].subnet_id #=> String
    #   resp.data.route_table.associations[0].gateway_id #=> String
    #   resp.data.route_table.associations[0].association_state #=> Types::RouteTableAssociationState
    #   resp.data.route_table.associations[0].association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.route_table.associations[0].association_state.status_message #=> String
    #   resp.data.route_table.propagating_vgws #=> Array<PropagatingVgw>
    #   resp.data.route_table.propagating_vgws[0] #=> Types::PropagatingVgw
    #   resp.data.route_table.propagating_vgws[0].gateway_id #=> String
    #   resp.data.route_table.route_table_id #=> String
    #   resp.data.route_table.routes #=> Array<Route>
    #   resp.data.route_table.routes[0] #=> Types::Route
    #   resp.data.route_table.routes[0].destination_cidr_block #=> String
    #   resp.data.route_table.routes[0].destination_ipv6_cidr_block #=> String
    #   resp.data.route_table.routes[0].destination_prefix_list_id #=> String
    #   resp.data.route_table.routes[0].egress_only_internet_gateway_id #=> String
    #   resp.data.route_table.routes[0].gateway_id #=> String
    #   resp.data.route_table.routes[0].instance_id #=> String
    #   resp.data.route_table.routes[0].instance_owner_id #=> String
    #   resp.data.route_table.routes[0].nat_gateway_id #=> String
    #   resp.data.route_table.routes[0].transit_gateway_id #=> String
    #   resp.data.route_table.routes[0].local_gateway_id #=> String
    #   resp.data.route_table.routes[0].carrier_gateway_id #=> String
    #   resp.data.route_table.routes[0].network_interface_id #=> String
    #   resp.data.route_table.routes[0].origin #=> String, one of ["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"]
    #   resp.data.route_table.routes[0].state #=> String, one of ["active", "blackhole"]
    #   resp.data.route_table.routes[0].vpc_peering_connection_id #=> String
    #   resp.data.route_table.routes[0].core_network_arn #=> String
    #   resp.data.route_table.tags #=> Array<Tag>
    #   resp.data.route_table.tags[0] #=> Types::Tag
    #   resp.data.route_table.tags[0].key #=> String
    #   resp.data.route_table.tags[0].value #=> String
    #   resp.data.route_table.vpc_id #=> String
    #   resp.data.route_table.owner_id #=> String
    #   resp.data.client_token #=> String
    # @example To create a route table
    #   # This example creates a route table for the specified VPC.
    #   resp = client.create_route_table({
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     route_table: {
    #       associations: [
    #
    #       ],
    #       route_table_id: "rtb-22574640",
    #       vpc_id: "vpc-a01106c2",
    #       propagating_vgws: [
    #
    #       ],
    #       tags: [
    #
    #       ],
    #       routes: [
    #         {
    #           gateway_id: "local",
    #           destination_cidr_block: "10.0.0.0/16",
    #           state: "active"
    #         }
    #       ]
    #     }
    #   }
    def create_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_route_table,
        tracer: tracer
      )
      Telemetry::CreateRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_route_table] #{output.data}")
        output
      end
    end

    # <p>Creates a security group.</p>
    #          <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic.
    #          For more information, see
    # 				<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 security groups</a> in
    # 				the <i>Amazon Elastic Compute Cloud User Guide</i> and
    # 				<a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security groups for your VPC</a> in the
    # 				<i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>When you create a security group, you specify a friendly name of your choice.
    #          You can't have two security groups for the same VPC with the same name.</p>
    #          <p>You have a default security group for use in your VPC. If you don't specify a security group
    #          when you launch an instance, the instance is launched into the appropriate default security group.
    #          A default security group includes a default rule that grants instances unrestricted network access
    #          to each other.</p>
    #          <p>You can add or remove rules from your security groups using
    # 					<a>AuthorizeSecurityGroupIngress</a>,
    # 					<a>AuthorizeSecurityGroupEgress</a>,
    # 					<a>RevokeSecurityGroupIngress</a>, and
    # 					<a>RevokeSecurityGroupEgress</a>.</p>
    #          <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    # @param [Hash | Types::CreateSecurityGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateSecurityGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_security_group(
    #     description: 'Description', # required
    #     group_name: 'GroupName', # required
    #     vpc_id: 'VpcId',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateSecurityGroupOutput
    #   resp.data.group_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    # @example To create a security group for a VPC
    #   # This example creates a security group for the specified VPC.
    #   resp = client.create_security_group({
    #     description: "My security group",
    #     group_name: "my-security-group",
    #     vpc_id: "vpc-1a2b3c4d"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     group_id: "sg-903004f8"
    #   }
    def create_security_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateSecurityGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateSecurityGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_security_group,
        tracer: tracer
      )
      Telemetry::CreateSecurityGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_security_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_security_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_security_group] #{output.data}")
        output
      end
    end

    # <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for
    #   	backups, to make copies of EBS volumes, and to save data before shutting down an
    #   	instance.</p>
    #          <p>You can create snapshots of volumes in a Region and volumes on an Outpost. If you
    #     	create a snapshot of a volume in a Region, the snapshot must be stored in the same
    #     	Region as the volume. If you create a snapshot of a volume on an Outpost, the snapshot
    #     	can be stored on the same Outpost as the volume, or in the Region for that Outpost.</p>
    #          <p>When a snapshot is created, any Amazon Web Services Marketplace product codes that are associated with the
    #       source volume are propagated to the snapshot.</p>
    #          <p>You can take a snapshot of an attached volume that is in use. However, snapshots only
    #       capture data that has been written to your Amazon EBS volume at the time the snapshot command is
    #       issued; this might exclude any data that has been cached by any applications or the operating
    #       system. If you can pause any file systems on the volume long enough to take a snapshot, your
    #       snapshot should be complete. However, if you cannot pause all file writes to the volume, you
    #       should unmount the volume from within the instance, issue the snapshot command, and then
    #       remount the volume to ensure a consistent and complete snapshot. You may remount and use your
    #       volume while the snapshot status is <code>pending</code>.</p>
    #          <p>When you create a snapshot for an EBS volume that serves as a root device, we recommend
    #       that you stop the instance before taking the snapshot.</p>
    #          <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that
    #       are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes
    #       and any associated snapshots always remain protected.</p>
    #          <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2
    #         resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateSnapshotInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateSnapshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_snapshot(
    #     description: 'Description',
    #     outpost_arn: 'OutpostArn',
    #     volume_id: 'VolumeId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateSnapshotOutput
    #   resp.data.data_encryption_key_id #=> String
    #   resp.data.description #=> String
    #   resp.data.encrypted #=> Boolean
    #   resp.data.kms_key_id #=> String
    #   resp.data.owner_id #=> String
    #   resp.data.progress #=> String
    #   resp.data.snapshot_id #=> String
    #   resp.data.start_time #=> Time
    #   resp.data.state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.state_message #=> String
    #   resp.data.volume_id #=> String
    #   resp.data.volume_size #=> Integer
    #   resp.data.owner_alias #=> String
    #   resp.data.outpost_arn #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.storage_tier #=> String, one of ["archive", "standard"]
    #   resp.data.restore_expiry_time #=> Time
    #   resp.data.sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    # @example To create a snapshot
    #   # This example creates a snapshot of the volume with a volume ID of ``vol-1234567890abcdef0`` and a short description to identify the snapshot.
    #   resp = client.create_snapshot({
    #     volume_id: "vol-1234567890abcdef0",
    #     description: "This is my root volume snapshot."
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     description: "This is my root volume snapshot.",
    #     tags: [
    #
    #     ],
    #     volume_id: "vol-1234567890abcdef0",
    #     state: "pending",
    #     volume_size: 8,
    #     start_time: Time.parse('2014-02-28T21:06:01.000Z'),
    #     owner_id: "012345678910",
    #     snapshot_id: "snap-066877671789bd71b"
    #   }
    def create_snapshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateSnapshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateSnapshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_snapshot,
        tracer: tracer
      )
      Telemetry::CreateSnapshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_snapshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_snapshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_snapshot] #{output.data}")
        output
      end
    end

    # <p>Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3.
    #     Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot
    #     each that is crash-consistent across the instance.</p>
    #          <p>You can include all of the volumes currently attached to the instance, or you can exclude
    #     the root volume or specific data (non-root) volumes from the multi-volume snapshot set.</p>
    #          <p>You can create multi-volume snapshots of instances in a Region and instances on an
    #   	Outpost. If you create snapshots from an instance in a Region, the snapshots must be stored
    #   	in the same Region as the instance. If you create snapshots from an instance on an Outpost,
    #   	the snapshots can be stored on the same Outpost as the instance, or in the Region for that
    #   	Outpost.</p>
    # @param [Hash | Types::CreateSnapshotsInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateSnapshotsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_snapshots(
    #     description: 'Description',
    #     instance_specification: {
    #       instance_id: 'InstanceId', # required
    #       exclude_boot_volume: false,
    #       exclude_data_volume_ids: [
    #         'member'
    #       ]
    #     }, # required
    #     outpost_arn: 'OutpostArn',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     copy_tags_from_source: 'volume' # accepts ["volume"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateSnapshotsOutput
    #   resp.data.snapshots #=> Array<SnapshotInfo>
    #   resp.data.snapshots[0] #=> Types::SnapshotInfo
    #   resp.data.snapshots[0].description #=> String
    #   resp.data.snapshots[0].tags #=> Array<Tag>
    #   resp.data.snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.snapshots[0].tags[0].key #=> String
    #   resp.data.snapshots[0].tags[0].value #=> String
    #   resp.data.snapshots[0].encrypted #=> Boolean
    #   resp.data.snapshots[0].volume_id #=> String
    #   resp.data.snapshots[0].state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.snapshots[0].volume_size #=> Integer
    #   resp.data.snapshots[0].start_time #=> Time
    #   resp.data.snapshots[0].progress #=> String
    #   resp.data.snapshots[0].owner_id #=> String
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].outpost_arn #=> String
    #   resp.data.snapshots[0].sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    def create_snapshots(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateSnapshotsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateSnapshots.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_snapshots,
        tracer: tracer
      )
      Telemetry::CreateSnapshots.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_snapshots] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_snapshots] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_snapshots] #{output.data}")
        output
      end
    end

    # <p>Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs.
    #             You can create one data feed per Amazon Web Services account. For more information, see
    #             <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance data feed</a>
    #             in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    # @param [Hash | Types::CreateSpotDatafeedSubscriptionInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateSpotDatafeedSubscriptionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_spot_datafeed_subscription(
    #     bucket: 'Bucket', # required
    #     dry_run: false,
    #     prefix: 'Prefix'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateSpotDatafeedSubscriptionOutput
    #   resp.data.spot_datafeed_subscription #=> Types::SpotDatafeedSubscription
    #   resp.data.spot_datafeed_subscription.bucket #=> String
    #   resp.data.spot_datafeed_subscription.fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_datafeed_subscription.fault.code #=> String
    #   resp.data.spot_datafeed_subscription.fault.message #=> String
    #   resp.data.spot_datafeed_subscription.owner_id #=> String
    #   resp.data.spot_datafeed_subscription.prefix #=> String
    #   resp.data.spot_datafeed_subscription.state #=> String, one of ["Active", "Inactive"]
    # @example To create a Spot Instance datafeed
    #   # This example creates a Spot Instance data feed for your AWS account.
    #   resp = client.create_spot_datafeed_subscription({
    #     bucket: "my-s3-bucket",
    #     prefix: "spotdata"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_datafeed_subscription: {
    #       owner_id: "123456789012",
    #       prefix: "spotdata",
    #       bucket: "my-s3-bucket",
    #       state: "Active"
    #     }
    #   }
    def create_spot_datafeed_subscription(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateSpotDatafeedSubscriptionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateSpotDatafeedSubscription.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_spot_datafeed_subscription,
        tracer: tracer
      )
      Telemetry::CreateSpotDatafeedSubscription.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_spot_datafeed_subscription] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_spot_datafeed_subscription] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_spot_datafeed_subscription] #{output.data}")
        output
      end
    end

    # <p>Stores an AMI as a single object in an Amazon S3 bucket.</p>
    #          <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
    #     	Amazon S3</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateStoreImageTaskInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateStoreImageTaskInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_store_image_task(
    #     image_id: 'ImageId', # required
    #     bucket: 'Bucket', # required
    #     s3_object_tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateStoreImageTaskOutput
    #   resp.data.object_key #=> String
    def create_store_image_task(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateStoreImageTaskInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateStoreImageTask.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_store_image_task,
        tracer: tracer
      )
      Telemetry::CreateStoreImageTask.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_store_image_task] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_store_image_task] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_store_image_task] #{output.data}")
        output
      end
    end

    # <p>Creates a subnet in the specified VPC. For an IPv4 only subnet, specify an IPv4 CIDR block.
    #             If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead.
    #             For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both
    #             an IPv4 CIDR block and an IPv6 CIDR block.</p>
    #          <p>A subnet CIDR block must not overlap the CIDR block of an existing subnet in the VPC.
    #             After you create a subnet, you can't change its CIDR block.</p>
    #          <p>The allowed size for an IPv4 subnet is between a /28 netmask (16 IP addresses) and
    #             a /16 netmask (65,536 IP addresses). Amazon Web Services reserves both the first four and
    #             the last IPv4 address in each subnet's CIDR block. They're not available for your use.</p>
    #          <p>If you've associated an IPv6 CIDR block with your VPC, you can associate an IPv6 CIDR
    #             block with a subnet when you create it. </p>
    #          <p>If you add more than one subnet to a VPC, they're set up in a star topology with a
    #             logical router in the middle.</p>
    #          <p>When you stop an instance in a subnet, it retains its private IPv4 address. It's
    #             therefore possible to have a subnet with no running instances (they're all stopped), but
    #             no remaining IP addresses available.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html">Subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::CreateSubnetInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateSubnetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_subnet(
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     availability_zone: 'AvailabilityZone',
    #     availability_zone_id: 'AvailabilityZoneId',
    #     cidr_block: 'CidrBlock',
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     outpost_arn: 'OutpostArn',
    #     vpc_id: 'VpcId', # required
    #     dry_run: false,
    #     ipv6_native: false,
    #     ipv4_ipam_pool_id: 'Ipv4IpamPoolId',
    #     ipv4_netmask_length: 1,
    #     ipv6_ipam_pool_id: 'Ipv6IpamPoolId',
    #     ipv6_netmask_length: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateSubnetOutput
    #   resp.data.subnet #=> Types::Subnet
    #   resp.data.subnet.availability_zone #=> String
    #   resp.data.subnet.availability_zone_id #=> String
    #   resp.data.subnet.available_ip_address_count #=> Integer
    #   resp.data.subnet.cidr_block #=> String
    #   resp.data.subnet.default_for_az #=> Boolean
    #   resp.data.subnet.enable_lni_at_device_index #=> Integer
    #   resp.data.subnet.map_public_ip_on_launch #=> Boolean
    #   resp.data.subnet.map_customer_owned_ip_on_launch #=> Boolean
    #   resp.data.subnet.customer_owned_ipv4_pool #=> String
    #   resp.data.subnet.state #=> String, one of ["pending", "available", "unavailable"]
    #   resp.data.subnet.subnet_id #=> String
    #   resp.data.subnet.vpc_id #=> String
    #   resp.data.subnet.owner_id #=> String
    #   resp.data.subnet.assign_ipv6_address_on_creation #=> Boolean
    #   resp.data.subnet.ipv6_cidr_block_association_set #=> Array<SubnetIpv6CidrBlockAssociation>
    #   resp.data.subnet.ipv6_cidr_block_association_set[0] #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.subnet.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet.tags #=> Array<Tag>
    #   resp.data.subnet.tags[0] #=> Types::Tag
    #   resp.data.subnet.tags[0].key #=> String
    #   resp.data.subnet.tags[0].value #=> String
    #   resp.data.subnet.subnet_arn #=> String
    #   resp.data.subnet.outpost_arn #=> String
    #   resp.data.subnet.enable_dns64 #=> Boolean
    #   resp.data.subnet.ipv6_native #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch #=> Types::PrivateDnsNameOptionsOnLaunch
    #   resp.data.subnet.private_dns_name_options_on_launch.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.subnet.private_dns_name_options_on_launch.enable_resource_name_dns_aaaa_record #=> Boolean
    # @example To create a subnet
    #   # This example creates a subnet in the specified VPC with the specified CIDR block. We recommend that you let us select an Availability Zone for you.
    #   resp = client.create_subnet({
    #     vpc_id: "vpc-a01106c2",
    #     cidr_block: "10.0.1.0/24"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     subnet: {
    #       vpc_id: "vpc-a01106c2",
    #       cidr_block: "10.0.1.0/24",
    #       state: "pending",
    #       availability_zone: "us-west-2c",
    #       subnet_id: "subnet-9d4a7b6c",
    #       available_ip_address_count: 251
    #     }
    #   }
    def create_subnet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateSubnetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateSubnet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_subnet,
        tracer: tracer
      )
      Telemetry::CreateSubnet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_subnet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_subnet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_subnet] #{output.data}")
        output
      end
    end

    # <p>Creates a subnet CIDR reservation. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/subnet-cidr-reservation.html">Subnet CIDR reservations</a>
    #             in the <i>Amazon Virtual Private Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">Assign prefixes
    #                 to network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateSubnetCidrReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateSubnetCidrReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_subnet_cidr_reservation(
    #     subnet_id: 'SubnetId', # required
    #     cidr: 'Cidr', # required
    #     reservation_type: 'prefix', # required - accepts ["prefix", "explicit"]
    #     description: 'Description',
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateSubnetCidrReservationOutput
    #   resp.data.subnet_cidr_reservation #=> Types::SubnetCidrReservation
    #   resp.data.subnet_cidr_reservation.subnet_cidr_reservation_id #=> String
    #   resp.data.subnet_cidr_reservation.subnet_id #=> String
    #   resp.data.subnet_cidr_reservation.cidr #=> String
    #   resp.data.subnet_cidr_reservation.reservation_type #=> String, one of ["prefix", "explicit"]
    #   resp.data.subnet_cidr_reservation.owner_id #=> String
    #   resp.data.subnet_cidr_reservation.description #=> String
    #   resp.data.subnet_cidr_reservation.tags #=> Array<Tag>
    #   resp.data.subnet_cidr_reservation.tags[0] #=> Types::Tag
    #   resp.data.subnet_cidr_reservation.tags[0].key #=> String
    #   resp.data.subnet_cidr_reservation.tags[0].value #=> String
    def create_subnet_cidr_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateSubnetCidrReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateSubnetCidrReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_subnet_cidr_reservation,
        tracer: tracer
      )
      Telemetry::CreateSubnetCidrReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_subnet_cidr_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_subnet_cidr_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_subnet_cidr_reservation] #{output.data}")
        output
      end
    end

    # <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or
    #          resources. When you specify an existing tag key, the value is overwritten with
    #          the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and
    #          optional value. Tag keys must be unique per resource.</p>
    #          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the
    #             <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about
    #          creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported
    #             resource-level permissions for Amazon EC2 API actions</a> in the <i>Amazon
    #             Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateTagsInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTagsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_tags(
    #     dry_run: false,
    #     resources: [
    #       'member'
    #     ], # required
    #     tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTagsOutput
    # @example To add a tag to a resource
    #   # This example adds the tag Stack=production to the specified image, or overwrites an existing tag for the AMI where the tag key is Stack.
    #   resp = client.create_tags({
    #     resources: [
    #       "ami-78a54011"
    #     ],
    #     tags: [
    #       {
    #         key: "Stack",
    #         value: "production"
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def create_tags(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTagsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTags.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_tags,
        tracer: tracer
      )
      Telemetry::CreateTags.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_tags] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_tags] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_tags] #{output.data}")
        output
      end
    end

    # <p>Creates a Traffic Mirror filter.</p>
    #          <p>A Traffic Mirror filter is a set of rules that defines the traffic to mirror.</p>
    #          <p>By default, no traffic is mirrored. To mirror traffic, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a> to add Traffic Mirror rules to the filter. The rules you
    #          add define what traffic gets mirrored. You can also use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a> to mirror supported network services.</p>
    # @param [Hash | Types::CreateTrafficMirrorFilterInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTrafficMirrorFilterInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_traffic_mirror_filter(
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTrafficMirrorFilterOutput
    #   resp.data.traffic_mirror_filter #=> Types::TrafficMirrorFilter
    #   resp.data.traffic_mirror_filter.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0] #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_number #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].protocol #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].description #=> String
    #   resp.data.traffic_mirror_filter.egress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.network_services #=> Array<String>
    #   resp.data.traffic_mirror_filter.network_services[0] #=> String, one of ["amazon-dns"]
    #   resp.data.traffic_mirror_filter.description #=> String
    #   resp.data.traffic_mirror_filter.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_filter.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_filter.tags[0].key #=> String
    #   resp.data.traffic_mirror_filter.tags[0].value #=> String
    #   resp.data.client_token #=> String
    def create_traffic_mirror_filter(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTrafficMirrorFilterInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTrafficMirrorFilter.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_traffic_mirror_filter,
        tracer: tracer
      )
      Telemetry::CreateTrafficMirrorFilter.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_filter] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_filter] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_filter] #{output.data}")
        output
      end
    end

    # <p>Creates a Traffic Mirror filter rule.</p>
    #          <p>A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.</p>
    #          <p>You need the Traffic Mirror filter ID when you create the rule.</p>
    # @param [Hash | Types::CreateTrafficMirrorFilterRuleInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTrafficMirrorFilterRuleInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_traffic_mirror_filter_rule(
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     traffic_direction: 'ingress', # required - accepts ["ingress", "egress"]
    #     rule_number: 1, # required
    #     rule_action: 'accept', # required - accepts ["accept", "reject"]
    #     destination_port_range: {
    #       from_port: 1,
    #       to_port: 1
    #     },
    #     protocol: 1,
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     source_cidr_block: 'SourceCidrBlock', # required
    #     description: 'Description',
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTrafficMirrorFilterRuleOutput
    #   resp.data.traffic_mirror_filter_rule #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter_rule.rule_number #=> Integer
    #   resp.data.traffic_mirror_filter_rule.rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter_rule.protocol #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.description #=> String
    #   resp.data.client_token #=> String
    def create_traffic_mirror_filter_rule(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTrafficMirrorFilterRuleInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTrafficMirrorFilterRule.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_traffic_mirror_filter_rule,
        tracer: tracer
      )
      Telemetry::CreateTrafficMirrorFilterRule.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_filter_rule] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_filter_rule] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_filter_rule] #{output.data}")
        output
      end
    end

    # <p>Creates a Traffic Mirror session.</p>
    #          <p>A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it
    #          to the session to define a subset of the traffic to mirror, for example all TCP
    #          traffic.</p>
    #          <p>The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. </p>
    #          <p>By default, no traffic is mirrored. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a> to
    #          create filter rules that specify the traffic to mirror.</p>
    # @param [Hash | Types::CreateTrafficMirrorSessionInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTrafficMirrorSessionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_traffic_mirror_session(
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     traffic_mirror_target_id: 'TrafficMirrorTargetId', # required
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     packet_length: 1,
    #     session_number: 1, # required
    #     virtual_network_id: 1,
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTrafficMirrorSessionOutput
    #   resp.data.traffic_mirror_session #=> Types::TrafficMirrorSession
    #   resp.data.traffic_mirror_session.traffic_mirror_session_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_session.network_interface_id #=> String
    #   resp.data.traffic_mirror_session.owner_id #=> String
    #   resp.data.traffic_mirror_session.packet_length #=> Integer
    #   resp.data.traffic_mirror_session.session_number #=> Integer
    #   resp.data.traffic_mirror_session.virtual_network_id #=> Integer
    #   resp.data.traffic_mirror_session.description #=> String
    #   resp.data.traffic_mirror_session.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_session.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_session.tags[0].key #=> String
    #   resp.data.traffic_mirror_session.tags[0].value #=> String
    #   resp.data.client_token #=> String
    def create_traffic_mirror_session(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTrafficMirrorSessionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTrafficMirrorSession.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_traffic_mirror_session,
        tracer: tracer
      )
      Telemetry::CreateTrafficMirrorSession.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_session] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_session] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_session] #{output.data}")
        output
      end
    end

    # <p>Creates a target for your Traffic Mirror session.</p>
    #          <p>A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and
    #          the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in
    #          different VPCs connected via VPC peering or a transit gateway.</p>
    #          <p>A Traffic Mirror target can be a network interface, a Network Load Balancer, or a Gateway Load Balancer endpoint.</p>
    #          <p>To use the target in a Traffic Mirror session, use  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.</p>
    # @param [Hash | Types::CreateTrafficMirrorTargetInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTrafficMirrorTargetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_traffic_mirror_target(
    #     network_interface_id: 'NetworkInterfaceId',
    #     network_load_balancer_arn: 'NetworkLoadBalancerArn',
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     gateway_load_balancer_endpoint_id: 'GatewayLoadBalancerEndpointId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTrafficMirrorTargetOutput
    #   resp.data.traffic_mirror_target #=> Types::TrafficMirrorTarget
    #   resp.data.traffic_mirror_target.traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_target.network_interface_id #=> String
    #   resp.data.traffic_mirror_target.network_load_balancer_arn #=> String
    #   resp.data.traffic_mirror_target.type #=> String, one of ["network-interface", "network-load-balancer", "gateway-load-balancer-endpoint"]
    #   resp.data.traffic_mirror_target.description #=> String
    #   resp.data.traffic_mirror_target.owner_id #=> String
    #   resp.data.traffic_mirror_target.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_target.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_target.tags[0].key #=> String
    #   resp.data.traffic_mirror_target.tags[0].value #=> String
    #   resp.data.traffic_mirror_target.gateway_load_balancer_endpoint_id #=> String
    #   resp.data.client_token #=> String
    def create_traffic_mirror_target(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTrafficMirrorTargetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTrafficMirrorTarget.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_traffic_mirror_target,
        tracer: tracer
      )
      Telemetry::CreateTrafficMirrorTarget.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_target] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_target] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_traffic_mirror_target] #{output.data}")
        output
      end
    end

    # <p>Creates a transit gateway.</p>
    #          <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks.
    #           After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN
    #           connections to the transit gateway.</p>
    #          <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p>
    #          <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer
    #          gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to
    #          <a>CreateVpnConnection</a>.</p>
    #          <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table
    #          and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create
    #          additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table.
    #          You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource
    #          attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
    # @param [Hash | Types::CreateTransitGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway(
    #     description: 'Description',
    #     options: {
    #       amazon_side_asn: 1,
    #       auto_accept_shared_attachments: 'enable', # accepts ["enable", "disable"]
    #       default_route_table_association: 'enable', # accepts ["enable", "disable"]
    #       default_route_table_propagation: 'enable', # accepts ["enable", "disable"]
    #       vpn_ecmp_support: 'enable', # accepts ["enable", "disable"]
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       security_group_referencing_support: 'enable', # accepts ["enable", "disable"]
    #       multicast_support: 'enable', # accepts ["enable", "disable"]
    #       transit_gateway_cidr_blocks: [
    #         'member'
    #       ]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayOutput
    #   resp.data.transit_gateway #=> Types::TransitGateway
    #   resp.data.transit_gateway.transit_gateway_id #=> String
    #   resp.data.transit_gateway.transit_gateway_arn #=> String
    #   resp.data.transit_gateway.state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateway.owner_id #=> String
    #   resp.data.transit_gateway.description #=> String
    #   resp.data.transit_gateway.creation_time #=> Time
    #   resp.data.transit_gateway.options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateway.options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway.options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.association_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.tags #=> Array<Tag>
    #   resp.data.transit_gateway.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway.tags[0].key #=> String
    #   resp.data.transit_gateway.tags[0].value #=> String
    def create_transit_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway,
        tracer: tracer
      )
      Telemetry::CreateTransitGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway] #{output.data}")
        output
      end
    end

    # <p>Creates a Connect attachment from a specified transit gateway attachment. A Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a transit gateway and an appliance.</p>
    #          <p>A Connect attachment uses an existing VPC or Amazon Web Services Direct Connect attachment as the underlying transport mechanism.</p>
    # @param [Hash | Types::CreateTransitGatewayConnectInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayConnectInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_connect(
    #     transport_transit_gateway_attachment_id: 'TransportTransitGatewayAttachmentId', # required
    #     options: {
    #       protocol: 'gre' # required - accepts ["gre"]
    #     }, # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayConnectOutput
    #   resp.data.transit_gateway_connect #=> Types::TransitGatewayConnect
    #   resp.data.transit_gateway_connect.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transport_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transit_gateway_id #=> String
    #   resp.data.transit_gateway_connect.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_connect.creation_time #=> Time
    #   resp.data.transit_gateway_connect.options #=> Types::TransitGatewayConnectOptions
    #   resp.data.transit_gateway_connect.options.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect.tags[0].key #=> String
    #   resp.data.transit_gateway_connect.tags[0].value #=> String
    def create_transit_gateway_connect(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayConnectInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayConnect.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_connect,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayConnect.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_connect] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_connect] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_connect] #{output.data}")
        output
      end
    end

    # <p>Creates a Connect peer for a specified transit gateway Connect attachment between a
    #             transit gateway and an appliance.</p>
    #          <p>The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html#tgw-connect-peer">Connect peers</a> in the <i>Transit Gateways Guide</i>.</p>
    # @param [Hash | Types::CreateTransitGatewayConnectPeerInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayConnectPeerInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_connect_peer(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     transit_gateway_address: 'TransitGatewayAddress',
    #     peer_address: 'PeerAddress', # required
    #     bgp_options: {
    #       peer_asn: 1
    #     },
    #     inside_cidr_blocks: [
    #       'member'
    #     ], # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayConnectPeerOutput
    #   resp.data.transit_gateway_connect_peer #=> Types::TransitGatewayConnectPeer
    #   resp.data.transit_gateway_connect_peer.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect_peer.transit_gateway_connect_peer_id #=> String
    #   resp.data.transit_gateway_connect_peer.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_connect_peer.creation_time #=> Time
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration #=> Types::TransitGatewayConnectPeerConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations #=> Array<TransitGatewayAttachmentBgpConfiguration>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0] #=> Types::TransitGatewayAttachmentBgpConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].bgp_status #=> String, one of ["up", "down"]
    #   resp.data.transit_gateway_connect_peer.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect_peer.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect_peer.tags[0].key #=> String
    #   resp.data.transit_gateway_connect_peer.tags[0].value #=> String
    def create_transit_gateway_connect_peer(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayConnectPeerInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayConnectPeer.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_connect_peer,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayConnectPeer.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_connect_peer] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_connect_peer] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_connect_peer] #{output.data}")
        output
      end
    end

    # <p>Creates a multicast domain using the specified transit gateway.</p>
    #          <p>The transit gateway  must be in the available state before you create a domain. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a> to see the state of transit gateway.</p>
    # @param [Hash | Types::CreateTransitGatewayMulticastDomainInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayMulticastDomainInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_multicast_domain(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     options: {
    #       igmpv2_support: 'enable', # accepts ["enable", "disable"]
    #       static_sources_support: 'enable', # accepts ["enable", "disable"]
    #       auto_accept_shared_associations: 'enable' # accepts ["enable", "disable"]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayMulticastDomainOutput
    #   resp.data.transit_gateway_multicast_domain #=> Types::TransitGatewayMulticastDomain
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_arn #=> String
    #   resp.data.transit_gateway_multicast_domain.owner_id #=> String
    #   resp.data.transit_gateway_multicast_domain.options #=> Types::TransitGatewayMulticastDomainOptions
    #   resp.data.transit_gateway_multicast_domain.options.igmpv2_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.static_sources_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.auto_accept_shared_associations #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_multicast_domain.creation_time #=> Time
    #   resp.data.transit_gateway_multicast_domain.tags #=> Array<Tag>
    #   resp.data.transit_gateway_multicast_domain.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_multicast_domain.tags[0].key #=> String
    #   resp.data.transit_gateway_multicast_domain.tags[0].value #=> String
    def create_transit_gateway_multicast_domain(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayMulticastDomainInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayMulticastDomain.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_multicast_domain,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayMulticastDomain.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_multicast_domain] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_multicast_domain] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_multicast_domain] #{output.data}")
        output
      end
    end

    # <p>Requests a transit gateway peering attachment between the specified transit gateway
    #             (requester) and a peer transit gateway (accepter). The peer transit gateway can be in
    #             your account or a different Amazon Web Services account.</p>
    #          <p>After you create the peering attachment, the owner of the accepter transit gateway
    #             must accept the attachment request.</p>
    # @param [Hash | Types::CreateTransitGatewayPeeringAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayPeeringAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_peering_attachment(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     peer_transit_gateway_id: 'PeerTransitGatewayId', # required
    #     peer_account_id: 'PeerAccountId', # required
    #     peer_region: 'PeerRegion', # required
    #     options: {
    #       dynamic_routing: 'enable' # accepts ["enable", "disable"]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.core_network_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.options #=> Types::TransitGatewayPeeringAttachmentOptions
    #   resp.data.transit_gateway_peering_attachment.options.dynamic_routing #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    def create_transit_gateway_peering_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayPeeringAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayPeeringAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_peering_attachment,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayPeeringAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_peering_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_peering_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_peering_attachment] #{output.data}")
        output
      end
    end

    # <p>Creates a transit gateway policy table.</p>
    # @param [Hash | Types::CreateTransitGatewayPolicyTableInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayPolicyTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_policy_table(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayPolicyTableOutput
    #   resp.data.transit_gateway_policy_table #=> Types::TransitGatewayPolicyTable
    #   resp.data.transit_gateway_policy_table.transit_gateway_policy_table_id #=> String
    #   resp.data.transit_gateway_policy_table.transit_gateway_id #=> String
    #   resp.data.transit_gateway_policy_table.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_policy_table.creation_time #=> Time
    #   resp.data.transit_gateway_policy_table.tags #=> Array<Tag>
    #   resp.data.transit_gateway_policy_table.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_policy_table.tags[0].key #=> String
    #   resp.data.transit_gateway_policy_table.tags[0].value #=> String
    def create_transit_gateway_policy_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayPolicyTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayPolicyTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_policy_table,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayPolicyTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_policy_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_policy_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_policy_table] #{output.data}")
        output
      end
    end

    # <p>Creates a reference (route) to a prefix list in a specified transit gateway route table.</p>
    # @param [Hash | Types::CreateTransitGatewayPrefixListReferenceInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayPrefixListReferenceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_prefix_list_reference(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     prefix_list_id: 'PrefixListId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayPrefixListReferenceOutput
    #   resp.data.transit_gateway_prefix_list_reference #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_reference.blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_id #=> String
    def create_transit_gateway_prefix_list_reference(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayPrefixListReferenceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayPrefixListReference.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_prefix_list_reference,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayPrefixListReference.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_prefix_list_reference] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_prefix_list_reference] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_prefix_list_reference] #{output.data}")
        output
      end
    end

    # <p>Creates a static route for the specified transit gateway route table.</p>
    # @param [Hash | Types::CreateTransitGatewayRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayRouteOutput
    #   resp.data.route #=> Types::TransitGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.prefix_list_id #=> String
    #   resp.data.route.transit_gateway_route_table_announcement_id #=> String
    #   resp.data.route.transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.route.transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.route.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    def create_transit_gateway_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_route,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route] #{output.data}")
        output
      end
    end

    # <p>Creates a route table for the specified transit gateway.</p>
    # @param [Hash | Types::CreateTransitGatewayRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_route_table(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayRouteTableOutput
    #   resp.data.transit_gateway_route_table #=> Types::TransitGatewayRouteTable
    #   resp.data.transit_gateway_route_table.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table.transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table.default_association_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.default_propagation_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.creation_time #=> Time
    #   resp.data.transit_gateway_route_table.tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table.tags[0].key #=> String
    #   resp.data.transit_gateway_route_table.tags[0].value #=> String
    def create_transit_gateway_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_route_table,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route_table] #{output.data}")
        output
      end
    end

    # <p>Advertises a new transit gateway route table.</p>
    # @param [Hash | Types::CreateTransitGatewayRouteTableAnnouncementInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayRouteTableAnnouncementInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_route_table_announcement(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     peering_attachment_id: 'PeeringAttachmentId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayRouteTableAnnouncementOutput
    #   resp.data.transit_gateway_route_table_announcement #=> Types::TransitGatewayRouteTableAnnouncement
    #   resp.data.transit_gateway_route_table_announcement.transit_gateway_route_table_announcement_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.core_network_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.peer_transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.peer_core_network_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.peering_attachment_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.announcement_direction #=> String, one of ["outgoing", "incoming"]
    #   resp.data.transit_gateway_route_table_announcement.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.state #=> String, one of ["available", "pending", "failing", "failed", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table_announcement.creation_time #=> Time
    #   resp.data.transit_gateway_route_table_announcement.tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table_announcement.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table_announcement.tags[0].key #=> String
    #   resp.data.transit_gateway_route_table_announcement.tags[0].value #=> String
    def create_transit_gateway_route_table_announcement(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayRouteTableAnnouncementInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayRouteTableAnnouncement.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_route_table_announcement,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayRouteTableAnnouncement.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route_table_announcement] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route_table_announcement] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_route_table_announcement] #{output.data}")
        output
      end
    end

    # <p>Attaches the specified VPC to the specified transit gateway.</p>
    #          <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached,
    #          the new VPC CIDR range is not propagated to the default propagation route table.</p>
    #          <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
    # @param [Hash | Types::CreateTransitGatewayVpcAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateTransitGatewayVpcAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_transit_gateway_vpc_attachment(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     vpc_id: 'VpcId', # required
    #     subnet_ids: [
    #       'member'
    #     ], # required
    #     options: {
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       security_group_referencing_support: 'enable', # accepts ["enable", "disable"]
    #       ipv6_support: 'enable', # accepts ["enable", "disable"]
    #       appliance_mode_support: 'enable' # accepts ["enable", "disable"]
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    def create_transit_gateway_vpc_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateTransitGatewayVpcAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateTransitGatewayVpcAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_transit_gateway_vpc_attachment,
        tracer: tracer
      )
      Telemetry::CreateTransitGatewayVpcAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_vpc_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_vpc_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_transit_gateway_vpc_attachment] #{output.data}")
        output
      end
    end

    # <p>An Amazon Web Services Verified Access endpoint is where you define your application along with an optional endpoint-level access policy.</p>
    # @param [Hash | Types::CreateVerifiedAccessEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVerifiedAccessEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_verified_access_endpoint(
    #     verified_access_group_id: 'VerifiedAccessGroupId', # required
    #     endpoint_type: 'load-balancer', # required - accepts ["load-balancer", "network-interface"]
    #     attachment_type: 'vpc', # required - accepts ["vpc"]
    #     domain_certificate_arn: 'DomainCertificateArn', # required
    #     application_domain: 'ApplicationDomain', # required
    #     endpoint_domain_prefix: 'EndpointDomainPrefix', # required
    #     security_group_ids: [
    #       'member'
    #     ],
    #     load_balancer_options: {
    #       protocol: 'http', # accepts ["http", "https"]
    #       port: 1,
    #       load_balancer_arn: 'LoadBalancerArn',
    #       subnet_ids: [
    #         'member'
    #       ]
    #     },
    #     network_interface_options: {
    #       network_interface_id: 'NetworkInterfaceId',
    #       protocol: 'http', # accepts ["http", "https"]
    #       port: 1
    #     },
    #     description: 'Description',
    #     policy_document: 'PolicyDocument',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     sse_specification: {
    #       customer_managed_key_enabled: false,
    #       kms_key_arn: 'KmsKeyArn'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVerifiedAccessEndpointOutput
    #   resp.data.verified_access_endpoint #=> Types::VerifiedAccessEndpoint
    #   resp.data.verified_access_endpoint.verified_access_instance_id #=> String
    #   resp.data.verified_access_endpoint.verified_access_group_id #=> String
    #   resp.data.verified_access_endpoint.verified_access_endpoint_id #=> String
    #   resp.data.verified_access_endpoint.application_domain #=> String
    #   resp.data.verified_access_endpoint.endpoint_type #=> String, one of ["load-balancer", "network-interface"]
    #   resp.data.verified_access_endpoint.attachment_type #=> String, one of ["vpc"]
    #   resp.data.verified_access_endpoint.domain_certificate_arn #=> String
    #   resp.data.verified_access_endpoint.endpoint_domain #=> String
    #   resp.data.verified_access_endpoint.device_validation_domain #=> String
    #   resp.data.verified_access_endpoint.security_group_ids #=> Array<String>
    #   resp.data.verified_access_endpoint.security_group_ids[0] #=> String
    #   resp.data.verified_access_endpoint.load_balancer_options #=> Types::VerifiedAccessEndpointLoadBalancerOptions
    #   resp.data.verified_access_endpoint.load_balancer_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoint.load_balancer_options.port #=> Integer
    #   resp.data.verified_access_endpoint.load_balancer_options.load_balancer_arn #=> String
    #   resp.data.verified_access_endpoint.load_balancer_options.subnet_ids #=> Array<String>
    #   resp.data.verified_access_endpoint.load_balancer_options.subnet_ids[0] #=> String
    #   resp.data.verified_access_endpoint.network_interface_options #=> Types::VerifiedAccessEndpointEniOptions
    #   resp.data.verified_access_endpoint.network_interface_options.network_interface_id #=> String
    #   resp.data.verified_access_endpoint.network_interface_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoint.network_interface_options.port #=> Integer
    #   resp.data.verified_access_endpoint.status #=> Types::VerifiedAccessEndpointStatus
    #   resp.data.verified_access_endpoint.status.code #=> String, one of ["pending", "active", "updating", "deleting", "deleted"]
    #   resp.data.verified_access_endpoint.status.message #=> String
    #   resp.data.verified_access_endpoint.description #=> String
    #   resp.data.verified_access_endpoint.creation_time #=> String
    #   resp.data.verified_access_endpoint.last_updated_time #=> String
    #   resp.data.verified_access_endpoint.deletion_time #=> String
    #   resp.data.verified_access_endpoint.tags #=> Array<Tag>
    #   resp.data.verified_access_endpoint.tags[0] #=> Types::Tag
    #   resp.data.verified_access_endpoint.tags[0].key #=> String
    #   resp.data.verified_access_endpoint.tags[0].value #=> String
    #   resp.data.verified_access_endpoint.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_endpoint.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_endpoint.sse_specification.kms_key_arn #=> String
    def create_verified_access_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVerifiedAccessEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVerifiedAccessEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_verified_access_endpoint,
        tracer: tracer
      )
      Telemetry::CreateVerifiedAccessEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_verified_access_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_endpoint] #{output.data}")
        output
      end
    end

    # <p>An Amazon Web Services Verified Access group is a collection of Amazon Web Services Verified Access endpoints who's associated applications have
    #          similar security requirements. Each instance within a Verified Access group shares an Verified Access policy. For
    #          example, you can group all Verified Access instances associated with "sales" applications together and
    #          use one common Verified Access policy.</p>
    # @param [Hash | Types::CreateVerifiedAccessGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVerifiedAccessGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_verified_access_group(
    #     verified_access_instance_id: 'VerifiedAccessInstanceId', # required
    #     description: 'Description',
    #     policy_document: 'PolicyDocument',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     sse_specification: {
    #       customer_managed_key_enabled: false,
    #       kms_key_arn: 'KmsKeyArn'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVerifiedAccessGroupOutput
    #   resp.data.verified_access_group #=> Types::VerifiedAccessGroup
    #   resp.data.verified_access_group.verified_access_group_id #=> String
    #   resp.data.verified_access_group.verified_access_instance_id #=> String
    #   resp.data.verified_access_group.description #=> String
    #   resp.data.verified_access_group.owner #=> String
    #   resp.data.verified_access_group.verified_access_group_arn #=> String
    #   resp.data.verified_access_group.creation_time #=> String
    #   resp.data.verified_access_group.last_updated_time #=> String
    #   resp.data.verified_access_group.deletion_time #=> String
    #   resp.data.verified_access_group.tags #=> Array<Tag>
    #   resp.data.verified_access_group.tags[0] #=> Types::Tag
    #   resp.data.verified_access_group.tags[0].key #=> String
    #   resp.data.verified_access_group.tags[0].value #=> String
    #   resp.data.verified_access_group.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_group.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_group.sse_specification.kms_key_arn #=> String
    def create_verified_access_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVerifiedAccessGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVerifiedAccessGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_verified_access_group,
        tracer: tracer
      )
      Telemetry::CreateVerifiedAccessGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_verified_access_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_group] #{output.data}")
        output
      end
    end

    # <p>An Amazon Web Services Verified Access instance is a regional entity that evaluates application requests and grants
    #          access only when your security requirements are met.</p>
    # @param [Hash | Types::CreateVerifiedAccessInstanceInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVerifiedAccessInstanceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_verified_access_instance(
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     fips_enabled: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVerifiedAccessInstanceOutput
    #   resp.data.verified_access_instance #=> Types::VerifiedAccessInstance
    #   resp.data.verified_access_instance.verified_access_instance_id #=> String
    #   resp.data.verified_access_instance.description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers #=> Array<VerifiedAccessTrustProviderCondensed>
    #   resp.data.verified_access_instance.verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProviderCondensed
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_instance.creation_time #=> String
    #   resp.data.verified_access_instance.last_updated_time #=> String
    #   resp.data.verified_access_instance.tags #=> Array<Tag>
    #   resp.data.verified_access_instance.tags[0] #=> Types::Tag
    #   resp.data.verified_access_instance.tags[0].key #=> String
    #   resp.data.verified_access_instance.tags[0].value #=> String
    #   resp.data.verified_access_instance.fips_enabled #=> Boolean
    def create_verified_access_instance(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVerifiedAccessInstanceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVerifiedAccessInstance.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_verified_access_instance,
        tracer: tracer
      )
      Telemetry::CreateVerifiedAccessInstance.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_instance] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_verified_access_instance] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_instance] #{output.data}")
        output
      end
    end

    # <p>A trust provider is a third-party entity that creates, maintains, and manages identity
    #          information for users and devices. When an application request is made, the identity
    #          information sent by the trust provider is evaluated by Verified Access before allowing or
    #          denying the application request.</p>
    # @param [Hash | Types::CreateVerifiedAccessTrustProviderInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVerifiedAccessTrustProviderInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_verified_access_trust_provider(
    #     trust_provider_type: 'user', # required - accepts ["user", "device"]
    #     user_trust_provider_type: 'iam-identity-center', # accepts ["iam-identity-center", "oidc"]
    #     device_trust_provider_type: 'jamf', # accepts ["jamf", "crowdstrike", "jumpcloud"]
    #     oidc_options: {
    #       issuer: 'Issuer',
    #       authorization_endpoint: 'AuthorizationEndpoint',
    #       token_endpoint: 'TokenEndpoint',
    #       user_info_endpoint: 'UserInfoEndpoint',
    #       client_id: 'ClientId',
    #       client_secret: 'ClientSecret',
    #       scope: 'Scope'
    #     },
    #     device_options: {
    #       tenant_id: 'TenantId',
    #       public_signing_key_url: 'PublicSigningKeyUrl'
    #     },
    #     policy_reference_name: 'PolicyReferenceName', # required
    #     description: 'Description',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     sse_specification: {
    #       customer_managed_key_enabled: false,
    #       kms_key_arn: 'KmsKeyArn'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVerifiedAccessTrustProviderOutput
    #   resp.data.verified_access_trust_provider #=> Types::VerifiedAccessTrustProvider
    #   resp.data.verified_access_trust_provider.verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_trust_provider.description #=> String
    #   resp.data.verified_access_trust_provider.trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_trust_provider.user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_trust_provider.device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_trust_provider.oidc_options #=> Types::OidcOptions
    #   resp.data.verified_access_trust_provider.oidc_options.issuer #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.authorization_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.token_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.user_info_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_id #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_secret #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.scope #=> String
    #   resp.data.verified_access_trust_provider.device_options #=> Types::DeviceOptions
    #   resp.data.verified_access_trust_provider.device_options.tenant_id #=> String
    #   resp.data.verified_access_trust_provider.device_options.public_signing_key_url #=> String
    #   resp.data.verified_access_trust_provider.policy_reference_name #=> String
    #   resp.data.verified_access_trust_provider.creation_time #=> String
    #   resp.data.verified_access_trust_provider.last_updated_time #=> String
    #   resp.data.verified_access_trust_provider.tags #=> Array<Tag>
    #   resp.data.verified_access_trust_provider.tags[0] #=> Types::Tag
    #   resp.data.verified_access_trust_provider.tags[0].key #=> String
    #   resp.data.verified_access_trust_provider.tags[0].value #=> String
    #   resp.data.verified_access_trust_provider.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_trust_provider.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_trust_provider.sse_specification.kms_key_arn #=> String
    def create_verified_access_trust_provider(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVerifiedAccessTrustProviderInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVerifiedAccessTrustProvider.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_verified_access_trust_provider,
        tracer: tracer
      )
      Telemetry::CreateVerifiedAccessTrustProvider.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_trust_provider] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_verified_access_trust_provider] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_verified_access_trust_provider] #{output.data}")
        output
      end
    end

    # <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone.</p>
    #          <p>You can create a new empty volume or restore a volume from an EBS snapshot.
    #       Any Amazon Web Services Marketplace product codes from the snapshot are propagated to the volume.</p>
    #          <p>You can create encrypted volumes. Encrypted volumes must be attached to instances that
    #       support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically
    #       encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2
    #         resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Create an Amazon EBS volume</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::CreateVolumeInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVolumeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_volume(
    #     availability_zone: 'AvailabilityZone', # required
    #     encrypted: false,
    #     iops: 1,
    #     kms_key_id: 'KmsKeyId',
    #     outpost_arn: 'OutpostArn',
    #     size: 1,
    #     snapshot_id: 'SnapshotId',
    #     volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     multi_attach_enabled: false,
    #     throughput: 1,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVolumeOutput
    #   resp.data.attachments #=> Array<VolumeAttachment>
    #   resp.data.attachments[0] #=> Types::VolumeAttachment
    #   resp.data.attachments[0].attach_time #=> Time
    #   resp.data.attachments[0].device #=> String
    #   resp.data.attachments[0].instance_id #=> String
    #   resp.data.attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.attachments[0].volume_id #=> String
    #   resp.data.attachments[0].delete_on_termination #=> Boolean
    #   resp.data.attachments[0].associated_resource #=> String
    #   resp.data.attachments[0].instance_owning_service #=> String
    #   resp.data.availability_zone #=> String
    #   resp.data.create_time #=> Time
    #   resp.data.encrypted #=> Boolean
    #   resp.data.kms_key_id #=> String
    #   resp.data.outpost_arn #=> String
    #   resp.data.size #=> Integer
    #   resp.data.snapshot_id #=> String
    #   resp.data.state #=> String, one of ["creating", "available", "in-use", "deleting", "deleted", "error"]
    #   resp.data.volume_id #=> String
    #   resp.data.iops #=> Integer
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.fast_restored #=> Boolean
    #   resp.data.multi_attach_enabled #=> Boolean
    #   resp.data.throughput #=> Integer
    #   resp.data.sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    # @example To create a new volume
    #   # This example creates an 80 GiB General Purpose (SSD) volume in the Availability Zone ``us-east-1a``.
    #   resp = client.create_volume({
    #     availability_zone: "us-east-1a",
    #     size: 80,
    #     volume_type: "gp2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     availability_zone: "us-east-1a",
    #     encrypted: false,
    #     volume_type: "gp2",
    #     volume_id: "vol-6b60b7c7",
    #     state: "creating",
    #     iops: 240,
    #     snapshot_id: "",
    #     create_time: Time.parse('2016-08-29T18:52:32.724Z'),
    #     size: 80
    #   }
    # @example To create a new Provisioned IOPS (SSD) volume from a snapshot
    #   # This example creates a new Provisioned IOPS (SSD) volume with 1000 provisioned IOPS from a snapshot in the Availability Zone ``us-east-1a``.
    #   resp = client.create_volume({
    #     availability_zone: "us-east-1a",
    #     iops: 1000,
    #     volume_type: "io1",
    #     snapshot_id: "snap-066877671789bd71b"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     availability_zone: "us-east-1a",
    #     attachments: [
    #
    #     ],
    #     tags: [
    #
    #     ],
    #     volume_type: "io1",
    #     volume_id: "vol-1234567890abcdef0",
    #     state: "creating",
    #     iops: 1000,
    #     snapshot_id: "snap-066877671789bd71b",
    #     create_time: Time.parse('2016-08-29T18:52:32.724Z'),
    #     size: 500
    #   }
    def create_volume(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVolumeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVolume.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_volume,
        tracer: tracer
      )
      Telemetry::CreateVolume.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_volume] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_volume] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_volume] #{output.data}")
        output
      end
    end

    # <p>Creates a VPC with the specified CIDR blocks. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">IP addressing for your VPCs and subnets</a> in the
    #         <i>Amazon VPC User Guide</i>.</p>
    #          <p>You can optionally request an IPv6 CIDR block for the VPC. You can request an
    #             Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses or an IPv6 CIDR
    #             block from an IPv6 address pool that you provisioned through bring your own IP addresses
    #                 (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p>
    #          <p>By default, each instance that you launch in the VPC has the default DHCP options, which
    # 			include only a default DNS server that we provide (AmazonProvidedDNS). For more
    # 			information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP option sets</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <p>You can specify the instance tenancy value for the VPC when you create it. You can't change
    #           this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the
    #           <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::CreateVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpc(
    #     cidr_block: 'CidrBlock',
    #     amazon_provided_ipv6_cidr_block: false,
    #     ipv6_pool: 'Ipv6Pool',
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     ipv4_ipam_pool_id: 'Ipv4IpamPoolId',
    #     ipv4_netmask_length: 1,
    #     ipv6_ipam_pool_id: 'Ipv6IpamPoolId',
    #     ipv6_netmask_length: 1,
    #     dry_run: false,
    #     instance_tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #     ipv6_cidr_block_network_border_group: 'Ipv6CidrBlockNetworkBorderGroup',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpcOutput
    #   resp.data.vpc #=> Types::Vpc
    #   resp.data.vpc.cidr_block #=> String
    #   resp.data.vpc.dhcp_options_id #=> String
    #   resp.data.vpc.state #=> String, one of ["pending", "available"]
    #   resp.data.vpc.vpc_id #=> String
    #   resp.data.vpc.owner_id #=> String
    #   resp.data.vpc.instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.vpc.ipv6_cidr_block_association_set #=> Array<VpcIpv6CidrBlockAssociation>
    #   resp.data.vpc.ipv6_cidr_block_association_set[0] #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].network_border_group #=> String
    #   resp.data.vpc.ipv6_cidr_block_association_set[0].ipv6_pool #=> String
    #   resp.data.vpc.cidr_block_association_set #=> Array<VpcCidrBlockAssociation>
    #   resp.data.vpc.cidr_block_association_set[0] #=> Types::VpcCidrBlockAssociation
    #   resp.data.vpc.cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block #=> String
    #   resp.data.vpc.cidr_block_association_set[0].cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc.is_default #=> Boolean
    #   resp.data.vpc.tags #=> Array<Tag>
    #   resp.data.vpc.tags[0] #=> Types::Tag
    #   resp.data.vpc.tags[0].key #=> String
    #   resp.data.vpc.tags[0].value #=> String
    # @example To create a VPC
    #   # This example creates a VPC with the specified CIDR block.
    #   resp = client.create_vpc({
    #     cidr_block: "10.0.0.0/16"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     vpc: {
    #       instance_tenancy: "default",
    #       state: "pending",
    #       vpc_id: "vpc-a01106c2",
    #       cidr_block: "10.0.0.0/16",
    #       dhcp_options_id: "dopt-7a8b9c2d"
    #     }
    #   }
    def create_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpc,
        tracer: tracer
      )
      Telemetry::CreateVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc] #{output.data}")
        output
      end
    end

    # <p>Creates a VPC endpoint. A VPC endpoint provides a private connection between the
    #             specified VPC and the specified endpoint service. You can use an endpoint service
    #             provided by Amazon Web Services, an Amazon Web Services Marketplace Partner, or another
    #             Amazon Web Services account. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web Services PrivateLink User Guide</a>.</p>
    # @param [Hash | Types::CreateVpcEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpcEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpc_endpoint(
    #     dry_run: false,
    #     vpc_endpoint_type: 'Interface', # accepts ["Interface", "Gateway", "GatewayLoadBalancer"]
    #     vpc_id: 'VpcId', # required
    #     service_name: 'ServiceName', # required
    #     policy_document: 'PolicyDocument',
    #     route_table_ids: [
    #       'member'
    #     ],
    #     subnet_ids: [
    #       'member'
    #     ],
    #     security_group_ids: [
    #       'member'
    #     ],
    #     ip_address_type: 'ipv4', # accepts ["ipv4", "dualstack", "ipv6"]
    #     dns_options: {
    #       dns_record_ip_type: 'ipv4', # accepts ["ipv4", "dualstack", "ipv6", "service-defined"]
    #       private_dns_only_for_inbound_resolver_endpoint: false
    #     },
    #     client_token: 'ClientToken',
    #     private_dns_enabled: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     subnet_configurations: [
    #       {
    #         subnet_id: 'SubnetId',
    #         ipv4: 'Ipv4',
    #         ipv6: 'Ipv6'
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpcEndpointOutput
    #   resp.data.vpc_endpoint #=> Types::VpcEndpoint
    #   resp.data.vpc_endpoint.vpc_endpoint_id #=> String
    #   resp.data.vpc_endpoint.vpc_endpoint_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.vpc_endpoint.vpc_id #=> String
    #   resp.data.vpc_endpoint.service_name #=> String
    #   resp.data.vpc_endpoint.state #=> String, one of ["PendingAcceptance", "Pending", "Available", "Deleting", "Deleted", "Rejected", "Failed", "Expired"]
    #   resp.data.vpc_endpoint.policy_document #=> String
    #   resp.data.vpc_endpoint.route_table_ids #=> Array<String>
    #   resp.data.vpc_endpoint.route_table_ids[0] #=> String
    #   resp.data.vpc_endpoint.subnet_ids #=> Array<String>
    #   resp.data.vpc_endpoint.groups #=> Array<SecurityGroupIdentifier>
    #   resp.data.vpc_endpoint.groups[0] #=> Types::SecurityGroupIdentifier
    #   resp.data.vpc_endpoint.groups[0].group_id #=> String
    #   resp.data.vpc_endpoint.groups[0].group_name #=> String
    #   resp.data.vpc_endpoint.ip_address_type #=> String, one of ["ipv4", "dualstack", "ipv6"]
    #   resp.data.vpc_endpoint.dns_options #=> Types::DnsOptions
    #   resp.data.vpc_endpoint.dns_options.dns_record_ip_type #=> String, one of ["ipv4", "dualstack", "ipv6", "service-defined"]
    #   resp.data.vpc_endpoint.dns_options.private_dns_only_for_inbound_resolver_endpoint #=> Boolean
    #   resp.data.vpc_endpoint.private_dns_enabled #=> Boolean
    #   resp.data.vpc_endpoint.requester_managed #=> Boolean
    #   resp.data.vpc_endpoint.network_interface_ids #=> Array<String>
    #   resp.data.vpc_endpoint.dns_entries #=> Array<DnsEntry>
    #   resp.data.vpc_endpoint.dns_entries[0] #=> Types::DnsEntry
    #   resp.data.vpc_endpoint.dns_entries[0].dns_name #=> String
    #   resp.data.vpc_endpoint.dns_entries[0].hosted_zone_id #=> String
    #   resp.data.vpc_endpoint.creation_timestamp #=> Time
    #   resp.data.vpc_endpoint.tags #=> Array<Tag>
    #   resp.data.vpc_endpoint.tags[0] #=> Types::Tag
    #   resp.data.vpc_endpoint.tags[0].key #=> String
    #   resp.data.vpc_endpoint.tags[0].value #=> String
    #   resp.data.vpc_endpoint.owner_id #=> String
    #   resp.data.vpc_endpoint.last_error #=> Types::LastError
    #   resp.data.vpc_endpoint.last_error.message #=> String
    #   resp.data.vpc_endpoint.last_error.code #=> String
    #   resp.data.client_token #=> String
    def create_vpc_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpcEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpcEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpc_endpoint,
        tracer: tracer
      )
      Telemetry::CreateVpcEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint] #{output.data}")
        output
      end
    end

    # <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint
    #             service. A connection notification notifies you of specific endpoint events. You must
    #             create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in
    #             the <i>Amazon Simple Notification Service Developer Guide</i>.</p>
    #          <p>You can create a connection notification for interface endpoints only.</p>
    # @param [Hash | Types::CreateVpcEndpointConnectionNotificationInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpcEndpointConnectionNotificationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpc_endpoint_connection_notification(
    #     dry_run: false,
    #     service_id: 'ServiceId',
    #     vpc_endpoint_id: 'VpcEndpointId',
    #     connection_notification_arn: 'ConnectionNotificationArn', # required
    #     connection_events: [
    #       'member'
    #     ], # required
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpcEndpointConnectionNotificationOutput
    #   resp.data.connection_notification #=> Types::ConnectionNotification
    #   resp.data.connection_notification.connection_notification_id #=> String
    #   resp.data.connection_notification.service_id #=> String
    #   resp.data.connection_notification.vpc_endpoint_id #=> String
    #   resp.data.connection_notification.connection_notification_type #=> String, one of ["Topic"]
    #   resp.data.connection_notification.connection_notification_arn #=> String
    #   resp.data.connection_notification.connection_events #=> Array<String>
    #   resp.data.connection_notification.connection_events[0] #=> String
    #   resp.data.connection_notification.connection_notification_state #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.client_token #=> String
    def create_vpc_endpoint_connection_notification(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpcEndpointConnectionNotificationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpcEndpointConnectionNotification.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpc_endpoint_connection_notification,
        tracer: tracer
      )
      Telemetry::CreateVpcEndpointConnectionNotification.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint_connection_notification] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint_connection_notification] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint_connection_notification] #{output.data}")
        output
      end
    end

    # <p>Creates a VPC endpoint service to which service consumers (Amazon Web Services accounts,
    #             users, and IAM roles) can connect.</p>
    #          <p>Before you create an endpoint service, you must create one of the following for your service:</p>
    #          <ul>
    #             <li>
    #                <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/">Network Load Balancer</a>.
    #                     Service consumers connect to your service using an interface endpoint.</p>
    #             </li>
    #             <li>
    #                <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/">Gateway Load Balancer</a>.
    #                     Service consumers connect to your service using a Gateway Load Balancer endpoint.</p>
    #             </li>
    #          </ul>
    #          <p>If you set the private DNS name, you must prove that you own the private DNS domain
    #             name.</p>
    #          <p>For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web Services PrivateLink
    # 	        Guide</a>.</p>
    # @param [Hash | Types::CreateVpcEndpointServiceConfigurationInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpcEndpointServiceConfigurationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpc_endpoint_service_configuration(
    #     dry_run: false,
    #     acceptance_required: false,
    #     private_dns_name: 'PrivateDnsName',
    #     network_load_balancer_arns: [
    #       'member'
    #     ],
    #     client_token: 'ClientToken',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpcEndpointServiceConfigurationOutput
    #   resp.data.service_configuration #=> Types::ServiceConfiguration
    #   resp.data.service_configuration.service_type #=> Array<ServiceTypeDetail>
    #   resp.data.service_configuration.service_type[0] #=> Types::ServiceTypeDetail
    #   resp.data.service_configuration.service_type[0].service_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.service_configuration.service_id #=> String
    #   resp.data.service_configuration.service_name #=> String
    #   resp.data.service_configuration.service_state #=> String, one of ["Pending", "Available", "Deleting", "Deleted", "Failed"]
    #   resp.data.service_configuration.availability_zones #=> Array<String>
    #   resp.data.service_configuration.availability_zones[0] #=> String
    #   resp.data.service_configuration.acceptance_required #=> Boolean
    #   resp.data.service_configuration.manages_vpc_endpoints #=> Boolean
    #   resp.data.service_configuration.network_load_balancer_arns #=> Array<String>
    #   resp.data.service_configuration.gateway_load_balancer_arns #=> Array<String>
    #   resp.data.service_configuration.supported_ip_address_types #=> Array<String>
    #   resp.data.service_configuration.supported_ip_address_types[0] #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.service_configuration.base_endpoint_dns_names #=> Array<String>
    #   resp.data.service_configuration.private_dns_name #=> String
    #   resp.data.service_configuration.private_dns_name_configuration #=> Types::PrivateDnsNameConfiguration
    #   resp.data.service_configuration.private_dns_name_configuration.state #=> String, one of ["pendingVerification", "verified", "failed"]
    #   resp.data.service_configuration.private_dns_name_configuration.type #=> String
    #   resp.data.service_configuration.private_dns_name_configuration.value #=> String
    #   resp.data.service_configuration.private_dns_name_configuration.name #=> String
    #   resp.data.service_configuration.payer_responsibility #=> String, one of ["ServiceOwner"]
    #   resp.data.service_configuration.tags #=> Array<Tag>
    #   resp.data.service_configuration.tags[0] #=> Types::Tag
    #   resp.data.service_configuration.tags[0].key #=> String
    #   resp.data.service_configuration.tags[0].value #=> String
    #   resp.data.client_token #=> String
    def create_vpc_endpoint_service_configuration(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpcEndpointServiceConfigurationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpcEndpointServiceConfiguration.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpc_endpoint_service_configuration,
        tracer: tracer
      )
      Telemetry::CreateVpcEndpointServiceConfiguration.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint_service_configuration] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint_service_configuration] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_endpoint_service_configuration] #{output.data}")
        output
      end
    end

    # <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and
    # 		  an accepter VPC with which to create the connection. The accepter VPC can belong to
    # 		  another Amazon Web Services account and can be in a different Region to the requester VPC.
    #           The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p>
    #          <note>
    #             <p>Limitations and rules apply to a VPC peering connection. For more information, see
    #           the <a href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p>
    #          </note>
    #          <p>The owner of the accepter VPC must accept the peering request to activate the peering
    #             connection. The VPC peering connection request expires after 7 days, after which it
    #             cannot be accepted or rejected.</p>
    #          <p>If you create a VPC peering connection request between VPCs with overlapping CIDR
    #             blocks, the VPC peering connection has a status of <code>failed</code>.</p>
    # @param [Hash | Types::CreateVpcPeeringConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpcPeeringConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpc_peering_connection(
    #     dry_run: false,
    #     peer_owner_id: 'PeerOwnerId',
    #     peer_vpc_id: 'PeerVpcId',
    #     vpc_id: 'VpcId', # required
    #     peer_region: 'PeerRegion',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpcPeeringConnectionOutput
    #   resp.data.vpc_peering_connection #=> Types::VpcPeeringConnection
    #   resp.data.vpc_peering_connection.accepter_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set #=> Array<Ipv6CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0] #=> Types::Ipv6CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.ipv6_cidr_block_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set #=> Array<CidrBlock>
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0] #=> Types::CidrBlock
    #   resp.data.vpc_peering_connection.accepter_vpc_info.cidr_block_set[0].cidr_block #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.owner_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options #=> Types::VpcPeeringConnectionOptionsDescription
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.peering_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.vpc_peering_connection.accepter_vpc_info.vpc_id #=> String
    #   resp.data.vpc_peering_connection.accepter_vpc_info.region #=> String
    #   resp.data.vpc_peering_connection.expiration_time #=> Time
    #   resp.data.vpc_peering_connection.requester_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connection.status #=> Types::VpcPeeringConnectionStateReason
    #   resp.data.vpc_peering_connection.status.code #=> String, one of ["initiating-request", "pending-acceptance", "active", "deleted", "rejected", "failed", "expired", "provisioning", "deleting"]
    #   resp.data.vpc_peering_connection.status.message #=> String
    #   resp.data.vpc_peering_connection.tags #=> Array<Tag>
    #   resp.data.vpc_peering_connection.tags[0] #=> Types::Tag
    #   resp.data.vpc_peering_connection.tags[0].key #=> String
    #   resp.data.vpc_peering_connection.tags[0].value #=> String
    #   resp.data.vpc_peering_connection.vpc_peering_connection_id #=> String
    def create_vpc_peering_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpcPeeringConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpcPeeringConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpc_peering_connection,
        tracer: tracer
      )
      Telemetry::CreateVpcPeeringConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_peering_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpc_peering_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpc_peering_connection] #{output.data}")
        output
      end
    end

    # <p>Creates a VPN connection between an existing virtual private gateway or transit
    #             gateway and a customer gateway. The supported connection type is
    #             <code>ipsec.1</code>.</p>
    #          <p>The response includes information that you need to give to your network administrator
    #             to configure your customer gateway.</p>
    #          <important>
    #             <p>We strongly recommend that you use HTTPS when calling this operation because the
    #                 response contains sensitive cryptographic information for configuring your customer
    #                 gateway device.</p>
    #          </important>
    #          <p>If you decide to shut down your VPN connection for any reason and later create a new
    #             VPN connection, you must reconfigure your customer gateway with the new information
    #             returned from this call.</p>
    #          <p>This is an idempotent operation. If you perform the operation more than once, Amazon
    #             EC2 doesn't return an error.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::CreateVpnConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpnConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpn_connection(
    #     customer_gateway_id: 'CustomerGatewayId', # required
    #     type: 'Type', # required
    #     vpn_gateway_id: 'VpnGatewayId',
    #     transit_gateway_id: 'TransitGatewayId',
    #     dry_run: false,
    #     options: {
    #       enable_acceleration: false,
    #       static_routes_only: false,
    #       tunnel_inside_ip_version: 'ipv4', # accepts ["ipv4", "ipv6"]
    #       tunnel_options: [
    #         {
    #           tunnel_inside_cidr: 'TunnelInsideCidr',
    #           tunnel_inside_ipv6_cidr: 'TunnelInsideIpv6Cidr',
    #           pre_shared_key: 'PreSharedKey',
    #           phase1_lifetime_seconds: 1,
    #           phase2_lifetime_seconds: 1,
    #           rekey_margin_time_seconds: 1,
    #           rekey_fuzz_percentage: 1,
    #           replay_window_size: 1,
    #           dpd_timeout_seconds: 1,
    #           dpd_timeout_action: 'DPDTimeoutAction',
    #           phase1_encryption_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase2_encryption_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase1_integrity_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase2_integrity_algorithms: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           phase1_dh_group_numbers: [
    #             {
    #               value: 1
    #             }
    #           ],
    #           phase2_dh_group_numbers: [
    #             {
    #               value: 1
    #             }
    #           ],
    #           ike_versions: [
    #             {
    #               value: 'Value'
    #             }
    #           ],
    #           startup_action: 'StartupAction',
    #           log_options: {
    #             cloud_watch_log_options: {
    #               log_enabled: false,
    #               log_group_arn: 'LogGroupArn',
    #               log_output_format: 'LogOutputFormat'
    #             }
    #           },
    #           enable_tunnel_lifecycle_control: false
    #         }
    #       ],
    #       local_ipv4_network_cidr: 'LocalIpv4NetworkCidr',
    #       remote_ipv4_network_cidr: 'RemoteIpv4NetworkCidr',
    #       local_ipv6_network_cidr: 'LocalIpv6NetworkCidr',
    #       remote_ipv6_network_cidr: 'RemoteIpv6NetworkCidr',
    #       outside_ip_address_type: 'OutsideIpAddressType',
    #       transport_transit_gateway_attachment_id: 'TransportTransitGatewayAttachmentId'
    #     },
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpnConnectionOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.outside_ip_address_type #=> String
    #   resp.data.vpn_connection.options.transport_transit_gateway_attachment_id #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options #=> Types::VpnTunnelLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options #=> Types::CloudWatchLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_enabled #=> Boolean
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_group_arn #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_output_format #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].enable_tunnel_lifecycle_control #=> Boolean
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    def create_vpn_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpnConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpnConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpn_connection,
        tracer: tracer
      )
      Telemetry::CreateVpnConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpn_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpn_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpn_connection] #{output.data}")
        output
      end
    end

    # <p>Creates a static route associated with a VPN connection between an existing virtual
    #             private gateway and a VPN customer gateway. The static route allows traffic to be routed
    #             from the virtual private gateway to the VPN customer gateway.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::CreateVpnConnectionRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpnConnectionRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpn_connection_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     vpn_connection_id: 'VpnConnectionId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpnConnectionRouteOutput
    def create_vpn_connection_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpnConnectionRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpnConnectionRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpn_connection_route,
        tracer: tracer
      )
      Telemetry::CreateVpnConnectionRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpn_connection_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpn_connection_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpn_connection_route] #{output.data}")
        output
      end
    end

    # <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the
    #             VPC side of your VPN connection. You can create a virtual private gateway before
    #             creating the VPC itself.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::CreateVpnGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::CreateVpnGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.create_vpn_gateway(
    #     availability_zone: 'AvailabilityZone',
    #     type: 'ipsec.1', # required - accepts ["ipsec.1"]
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     amazon_side_asn: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::CreateVpnGatewayOutput
    #   resp.data.vpn_gateway #=> Types::VpnGateway
    #   resp.data.vpn_gateway.availability_zone #=> String
    #   resp.data.vpn_gateway.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_gateway.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_gateway.vpc_attachments #=> Array<VpcAttachment>
    #   resp.data.vpn_gateway.vpc_attachments[0] #=> Types::VpcAttachment
    #   resp.data.vpn_gateway.vpc_attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.vpn_gateway.vpc_attachments[0].vpc_id #=> String
    #   resp.data.vpn_gateway.vpn_gateway_id #=> String
    #   resp.data.vpn_gateway.amazon_side_asn #=> Integer
    #   resp.data.vpn_gateway.tags #=> Array<Tag>
    #   resp.data.vpn_gateway.tags[0] #=> Types::Tag
    #   resp.data.vpn_gateway.tags[0].key #=> String
    #   resp.data.vpn_gateway.tags[0].value #=> String
    def create_vpn_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::CreateVpnGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::CreateVpnGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :create_vpn_gateway,
        tracer: tracer
      )
      Telemetry::CreateVpnGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpn_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#create_vpn_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#create_vpn_gateway] #{output.data}")
        output
      end
    end

    # <p>Deletes a carrier gateway.</p>
    #          <important>
    #             <p>If you do not delete the route that contains the carrier gateway as the
    #                 Target, the route is a blackhole route. For information about how to delete a route, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteRoute.html">DeleteRoute</a>.</p>
    #          </important>
    # @param [Hash | Types::DeleteCarrierGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteCarrierGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_carrier_gateway(
    #     carrier_gateway_id: 'CarrierGatewayId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteCarrierGatewayOutput
    #   resp.data.carrier_gateway #=> Types::CarrierGateway
    #   resp.data.carrier_gateway.carrier_gateway_id #=> String
    #   resp.data.carrier_gateway.vpc_id #=> String
    #   resp.data.carrier_gateway.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.carrier_gateway.owner_id #=> String
    #   resp.data.carrier_gateway.tags #=> Array<Tag>
    #   resp.data.carrier_gateway.tags[0] #=> Types::Tag
    #   resp.data.carrier_gateway.tags[0].key #=> String
    #   resp.data.carrier_gateway.tags[0].value #=> String
    def delete_carrier_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteCarrierGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteCarrierGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_carrier_gateway,
        tracer: tracer
      )
      Telemetry::DeleteCarrierGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_carrier_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_carrier_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_carrier_gateway] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Client VPN endpoint. You must disassociate all target networks before you
    # 			can delete a Client VPN endpoint.</p>
    # @param [Hash | Types::DeleteClientVpnEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteClientVpnEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_client_vpn_endpoint(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteClientVpnEndpointOutput
    #   resp.data.status #=> Types::ClientVpnEndpointStatus
    #   resp.data.status.code #=> String, one of ["pending-associate", "available", "deleting", "deleted"]
    #   resp.data.status.message #=> String
    def delete_client_vpn_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteClientVpnEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteClientVpnEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_client_vpn_endpoint,
        tracer: tracer
      )
      Telemetry::DeleteClientVpnEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_client_vpn_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_client_vpn_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_client_vpn_endpoint] #{output.data}")
        output
      end
    end

    # <p>Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using
    # 			the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were
    # 			automatically added when associating a subnet. To remove routes that have been automatically added,
    # 			disassociate the target subnet from the Client VPN endpoint.</p>
    # @param [Hash | Types::DeleteClientVpnRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteClientVpnRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_client_vpn_route(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     target_vpc_subnet_id: 'TargetVpcSubnetId',
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteClientVpnRouteOutput
    #   resp.data.status #=> Types::ClientVpnRouteStatus
    #   resp.data.status.code #=> String, one of ["creating", "active", "failed", "deleting"]
    #   resp.data.status.message #=> String
    def delete_client_vpn_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteClientVpnRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteClientVpnRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_client_vpn_route,
        tracer: tracer
      )
      Telemetry::DeleteClientVpnRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_client_vpn_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_client_vpn_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_client_vpn_route] #{output.data}")
        output
      end
    end

    # <p>
    #       Deletes a range of customer-owned IP addresses.
    #       </p>
    # @param [Hash | Types::DeleteCoipCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteCoipCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_coip_cidr(
    #     cidr: 'Cidr', # required
    #     coip_pool_id: 'CoipPoolId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteCoipCidrOutput
    #   resp.data.coip_cidr #=> Types::CoipCidr
    #   resp.data.coip_cidr.cidr #=> String
    #   resp.data.coip_cidr.coip_pool_id #=> String
    #   resp.data.coip_cidr.local_gateway_route_table_id #=> String
    def delete_coip_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteCoipCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteCoipCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_coip_cidr,
        tracer: tracer
      )
      Telemetry::DeleteCoipCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_coip_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_coip_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_coip_cidr] #{output.data}")
        output
      end
    end

    # <p>Deletes a pool of customer-owned IP (CoIP) addresses. </p>
    # @param [Hash | Types::DeleteCoipPoolInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteCoipPoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_coip_pool(
    #     coip_pool_id: 'CoipPoolId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteCoipPoolOutput
    #   resp.data.coip_pool #=> Types::CoipPool
    #   resp.data.coip_pool.pool_id #=> String
    #   resp.data.coip_pool.pool_cidrs #=> Array<String>
    #   resp.data.coip_pool.pool_cidrs[0] #=> String
    #   resp.data.coip_pool.local_gateway_route_table_id #=> String
    #   resp.data.coip_pool.tags #=> Array<Tag>
    #   resp.data.coip_pool.tags[0] #=> Types::Tag
    #   resp.data.coip_pool.tags[0].key #=> String
    #   resp.data.coip_pool.tags[0].value #=> String
    #   resp.data.coip_pool.pool_arn #=> String
    def delete_coip_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteCoipPoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteCoipPool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_coip_pool,
        tracer: tracer
      )
      Telemetry::DeleteCoipPool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_coip_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_coip_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_coip_pool] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified customer gateway. You must delete the VPN connection before you
    #             can delete the customer gateway.</p>
    # @param [Hash | Types::DeleteCustomerGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteCustomerGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_customer_gateway(
    #     customer_gateway_id: 'CustomerGatewayId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteCustomerGatewayOutput
    # @example To delete a customer gateway
    #   # This example deletes the specified customer gateway.
    #   resp = client.delete_customer_gateway({
    #     customer_gateway_id: "cgw-0e11f167"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_customer_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteCustomerGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteCustomerGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_customer_gateway,
        tracer: tracer
      )
      Telemetry::DeleteCustomerGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_customer_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_customer_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_customer_gateway] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
    # @param [Hash | Types::DeleteDhcpOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteDhcpOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_dhcp_options(
    #     dhcp_options_id: 'DhcpOptionsId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteDhcpOptionsOutput
    # @example To delete a DHCP options set
    #   # This example deletes the specified DHCP options set.
    #   resp = client.delete_dhcp_options({
    #     dhcp_options_id: "dopt-d9070ebb"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_dhcp_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteDhcpOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteDhcpOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_dhcp_options,
        tracer: tracer
      )
      Telemetry::DeleteDhcpOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_dhcp_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_dhcp_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_dhcp_options] #{output.data}")
        output
      end
    end

    # <p>Deletes an egress-only internet gateway.</p>
    # @param [Hash | Types::DeleteEgressOnlyInternetGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteEgressOnlyInternetGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_egress_only_internet_gateway(
    #     dry_run: false,
    #     egress_only_internet_gateway_id: 'EgressOnlyInternetGatewayId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteEgressOnlyInternetGatewayOutput
    #   resp.data.return_code #=> Boolean
    def delete_egress_only_internet_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteEgressOnlyInternetGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteEgressOnlyInternetGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_egress_only_internet_gateway,
        tracer: tracer
      )
      Telemetry::DeleteEgressOnlyInternetGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_egress_only_internet_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_egress_only_internet_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_egress_only_internet_gateway] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified EC2 Fleets.</p>
    #          <p>After you delete an EC2 Fleet, it launches no new instances.</p>
    #          <p>You must also specify whether a deleted EC2 Fleet should terminate its instances. If you
    #          choose to terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code>
    #          state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances
    #          continue to run until they are interrupted or you terminate them manually.</p>
    #          <p>For <code>instant</code> fleets, EC2 Fleet must terminate the instances when the fleet is
    #          deleted. A deleted <code>instant</code> fleet with running instances is not
    #          supported.</p>
    #          <p class="title">
    #             <b>Restrictions</b>
    #          </p>
    #          <ul>
    #             <li>
    #                <p>You can delete up to 25 <code>instant</code> fleets in a single request. If you exceed this
    #                number, no <code>instant</code> fleets are deleted and an error is returned. There is no
    #                restriction on the number of fleets of type <code>maintain</code> or <code>request</code> that can be deleted
    #                in a single request.</p>
    #             </li>
    #             <li>
    #                <p>Up to 1000 instances can be terminated in a single request to delete
    #                <code>instant</code> fleets.</p>
    #             </li>
    #          </ul>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#delete-fleet">Delete an EC2
    #          Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DeleteFleetsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteFleetsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_fleets(
    #     dry_run: false,
    #     fleet_ids: [
    #       'member'
    #     ], # required
    #     terminate_instances: false # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteFleetsOutput
    #   resp.data.successful_fleet_deletions #=> Array<DeleteFleetSuccessItem>
    #   resp.data.successful_fleet_deletions[0] #=> Types::DeleteFleetSuccessItem
    #   resp.data.successful_fleet_deletions[0].current_fleet_state #=> String, one of ["submitted", "active", "deleted", "failed", "deleted_running", "deleted_terminating", "modifying"]
    #   resp.data.successful_fleet_deletions[0].previous_fleet_state #=> String, one of ["submitted", "active", "deleted", "failed", "deleted_running", "deleted_terminating", "modifying"]
    #   resp.data.successful_fleet_deletions[0].fleet_id #=> String
    #   resp.data.unsuccessful_fleet_deletions #=> Array<DeleteFleetErrorItem>
    #   resp.data.unsuccessful_fleet_deletions[0] #=> Types::DeleteFleetErrorItem
    #   resp.data.unsuccessful_fleet_deletions[0].error #=> Types::DeleteFleetError
    #   resp.data.unsuccessful_fleet_deletions[0].error.code #=> String, one of ["fleetIdDoesNotExist", "fleetIdMalformed", "fleetNotInDeletableState", "unexpectedError"]
    #   resp.data.unsuccessful_fleet_deletions[0].error.message #=> String
    #   resp.data.unsuccessful_fleet_deletions[0].fleet_id #=> String
    def delete_fleets(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteFleetsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteFleets.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_fleets,
        tracer: tracer
      )
      Telemetry::DeleteFleets.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_fleets] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_fleets] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_fleets] #{output.data}")
        output
      end
    end

    # <p>Deletes one or more flow logs.</p>
    # @param [Hash | Types::DeleteFlowLogsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteFlowLogsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_flow_logs(
    #     dry_run: false,
    #     flow_log_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteFlowLogsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def delete_flow_logs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteFlowLogsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteFlowLogs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_flow_logs,
        tracer: tracer
      )
      Telemetry::DeleteFlowLogs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_flow_logs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_flow_logs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_flow_logs] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Amazon FPGA Image (AFI).</p>
    # @param [Hash | Types::DeleteFpgaImageInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteFpgaImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_fpga_image(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteFpgaImageOutput
    #   resp.data.return #=> Boolean
    def delete_fpga_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteFpgaImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteFpgaImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_fpga_image,
        tracer: tracer
      )
      Telemetry::DeleteFpgaImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_fpga_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_fpga_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_fpga_image] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified EC2 Instance Connect Endpoint.</p>
    # @param [Hash | Types::DeleteInstanceConnectEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteInstanceConnectEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_instance_connect_endpoint(
    #     dry_run: false,
    #     instance_connect_endpoint_id: 'InstanceConnectEndpointId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteInstanceConnectEndpointOutput
    #   resp.data.instance_connect_endpoint #=> Types::Ec2InstanceConnectEndpoint
    #   resp.data.instance_connect_endpoint.owner_id #=> String
    #   resp.data.instance_connect_endpoint.instance_connect_endpoint_id #=> String
    #   resp.data.instance_connect_endpoint.instance_connect_endpoint_arn #=> String
    #   resp.data.instance_connect_endpoint.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.instance_connect_endpoint.state_message #=> String
    #   resp.data.instance_connect_endpoint.dns_name #=> String
    #   resp.data.instance_connect_endpoint.fips_dns_name #=> String
    #   resp.data.instance_connect_endpoint.network_interface_ids #=> Array<String>
    #   resp.data.instance_connect_endpoint.network_interface_ids[0] #=> String
    #   resp.data.instance_connect_endpoint.vpc_id #=> String
    #   resp.data.instance_connect_endpoint.availability_zone #=> String
    #   resp.data.instance_connect_endpoint.created_at #=> Time
    #   resp.data.instance_connect_endpoint.subnet_id #=> String
    #   resp.data.instance_connect_endpoint.preserve_client_ip #=> Boolean
    #   resp.data.instance_connect_endpoint.security_group_ids #=> Array<String>
    #   resp.data.instance_connect_endpoint.security_group_ids[0] #=> String
    #   resp.data.instance_connect_endpoint.tags #=> Array<Tag>
    #   resp.data.instance_connect_endpoint.tags[0] #=> Types::Tag
    #   resp.data.instance_connect_endpoint.tags[0].key #=> String
    #   resp.data.instance_connect_endpoint.tags[0].value #=> String
    def delete_instance_connect_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteInstanceConnectEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteInstanceConnectEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_instance_connect_endpoint,
        tracer: tracer
      )
      Telemetry::DeleteInstanceConnectEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_instance_connect_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_instance_connect_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_instance_connect_endpoint] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified event window.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DeleteInstanceEventWindowInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteInstanceEventWindowInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_instance_event_window(
    #     dry_run: false,
    #     force_delete: false,
    #     instance_event_window_id: 'InstanceEventWindowId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteInstanceEventWindowOutput
    #   resp.data.instance_event_window_state #=> Types::InstanceEventWindowStateChange
    #   resp.data.instance_event_window_state.instance_event_window_id #=> String
    #   resp.data.instance_event_window_state.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    def delete_instance_event_window(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteInstanceEventWindowInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteInstanceEventWindow.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_instance_event_window,
        tracer: tracer
      )
      Telemetry::DeleteInstanceEventWindow.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_instance_event_window] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_instance_event_window] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_instance_event_window] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified internet gateway. You must detach the internet gateway from the
    # 			VPC before you can delete it.</p>
    # @param [Hash | Types::DeleteInternetGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteInternetGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_internet_gateway(
    #     dry_run: false,
    #     internet_gateway_id: 'InternetGatewayId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteInternetGatewayOutput
    # @example To delete an Internet gateway
    #   # This example deletes the specified Internet gateway.
    #   resp = client.delete_internet_gateway({
    #     internet_gateway_id: "igw-c0a643a9"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_internet_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteInternetGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteInternetGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_internet_gateway,
        tracer: tracer
      )
      Telemetry::DeleteInternetGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_internet_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_internet_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_internet_gateway] #{output.data}")
        output
      end
    end

    # <p>Delete an IPAM. Deleting an IPAM removes all monitored data associated with the IPAM including the historical data for CIDRs.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-ipam.html">Delete an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::DeleteIpamInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteIpamInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_ipam(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     cascade: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteIpamOutput
    #   resp.data.ipam #=> Types::Ipam
    #   resp.data.ipam.owner_id #=> String
    #   resp.data.ipam.ipam_id #=> String
    #   resp.data.ipam.ipam_arn #=> String
    #   resp.data.ipam.ipam_region #=> String
    #   resp.data.ipam.public_default_scope_id #=> String
    #   resp.data.ipam.private_default_scope_id #=> String
    #   resp.data.ipam.scope_count #=> Integer
    #   resp.data.ipam.description #=> String
    #   resp.data.ipam.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam.operating_regions[0].region_name #=> String
    #   resp.data.ipam.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam.tags #=> Array<Tag>
    #   resp.data.ipam.tags[0] #=> Types::Tag
    #   resp.data.ipam.tags[0].key #=> String
    #   resp.data.ipam.tags[0].value #=> String
    #   resp.data.ipam.default_resource_discovery_id #=> String
    #   resp.data.ipam.default_resource_discovery_association_id #=> String
    #   resp.data.ipam.resource_discovery_association_count #=> Integer
    #   resp.data.ipam.state_message #=> String
    #   resp.data.ipam.tier #=> String, one of ["free", "advanced"]
    def delete_ipam(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteIpamInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteIpam.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_ipam,
        tracer: tracer
      )
      Telemetry::DeleteIpam.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_ipam] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam] #{output.data}")
        output
      end
    end

    # <p>Delete an IPAM pool.</p>
    #          <note>
    #             <p>You cannot delete an IPAM pool if there are allocations in it or CIDRs provisioned to it. To release
    #          allocations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>. To deprovision pool
    #          CIDRs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeprovisionIpamPoolCidr.html">DeprovisionIpamPoolCidr</a>.</p>
    #          </note>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-pool-ipam.html">Delete a pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::DeleteIpamPoolInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteIpamPoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_ipam_pool(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cascade: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteIpamPoolOutput
    #   resp.data.ipam_pool #=> Types::IpamPool
    #   resp.data.ipam_pool.owner_id #=> String
    #   resp.data.ipam_pool.ipam_pool_id #=> String
    #   resp.data.ipam_pool.source_ipam_pool_id #=> String
    #   resp.data.ipam_pool.ipam_pool_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pool.ipam_arn #=> String
    #   resp.data.ipam_pool.ipam_region #=> String
    #   resp.data.ipam_pool.locale #=> String
    #   resp.data.ipam_pool.pool_depth #=> Integer
    #   resp.data.ipam_pool.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_pool.state_message #=> String
    #   resp.data.ipam_pool.description #=> String
    #   resp.data.ipam_pool.auto_import #=> Boolean
    #   resp.data.ipam_pool.publicly_advertisable #=> Boolean
    #   resp.data.ipam_pool.address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pool.allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pool.allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pool.allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pool.allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pool.tags #=> Array<Tag>
    #   resp.data.ipam_pool.tags[0] #=> Types::Tag
    #   resp.data.ipam_pool.tags[0].key #=> String
    #   resp.data.ipam_pool.tags[0].value #=> String
    #   resp.data.ipam_pool.aws_service #=> String, one of ["ec2"]
    #   resp.data.ipam_pool.public_ip_source #=> String, one of ["amazon", "byoip"]
    #   resp.data.ipam_pool.source_resource #=> Types::IpamPoolSourceResource
    #   resp.data.ipam_pool.source_resource.resource_id #=> String
    #   resp.data.ipam_pool.source_resource.resource_type #=> String, one of ["vpc"]
    #   resp.data.ipam_pool.source_resource.resource_region #=> String
    #   resp.data.ipam_pool.source_resource.resource_owner #=> String
    def delete_ipam_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteIpamPoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteIpamPool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_ipam_pool,
        tracer: tracer
      )
      Telemetry::DeleteIpamPool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_ipam_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam_pool] #{output.data}")
        output
      end
    end

    # <p>Deletes an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::DeleteIpamResourceDiscoveryInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteIpamResourceDiscoveryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_ipam_resource_discovery(
    #     dry_run: false,
    #     ipam_resource_discovery_id: 'IpamResourceDiscoveryId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteIpamResourceDiscoveryOutput
    #   resp.data.ipam_resource_discovery #=> Types::IpamResourceDiscovery
    #   resp.data.ipam_resource_discovery.owner_id #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_arn #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_region #=> String
    #   resp.data.ipam_resource_discovery.description #=> String
    #   resp.data.ipam_resource_discovery.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam_resource_discovery.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam_resource_discovery.operating_regions[0].region_name #=> String
    #   resp.data.ipam_resource_discovery.is_default #=> Boolean
    #   resp.data.ipam_resource_discovery.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discovery.tags #=> Array<Tag>
    #   resp.data.ipam_resource_discovery.tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discovery.tags[0].key #=> String
    #   resp.data.ipam_resource_discovery.tags[0].value #=> String
    def delete_ipam_resource_discovery(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteIpamResourceDiscoveryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteIpamResourceDiscovery.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_ipam_resource_discovery,
        tracer: tracer
      )
      Telemetry::DeleteIpamResourceDiscovery.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam_resource_discovery] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_ipam_resource_discovery] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam_resource_discovery] #{output.data}")
        output
      end
    end

    # <p>Delete the scope for an IPAM. You cannot delete the default scopes.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-scope-ipam.html">Delete a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::DeleteIpamScopeInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteIpamScopeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_ipam_scope(
    #     dry_run: false,
    #     ipam_scope_id: 'IpamScopeId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteIpamScopeOutput
    #   resp.data.ipam_scope #=> Types::IpamScope
    #   resp.data.ipam_scope.owner_id #=> String
    #   resp.data.ipam_scope.ipam_scope_id #=> String
    #   resp.data.ipam_scope.ipam_scope_arn #=> String
    #   resp.data.ipam_scope.ipam_arn #=> String
    #   resp.data.ipam_scope.ipam_region #=> String
    #   resp.data.ipam_scope.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scope.is_default #=> Boolean
    #   resp.data.ipam_scope.description #=> String
    #   resp.data.ipam_scope.pool_count #=> Integer
    #   resp.data.ipam_scope.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_scope.tags #=> Array<Tag>
    #   resp.data.ipam_scope.tags[0] #=> Types::Tag
    #   resp.data.ipam_scope.tags[0].key #=> String
    #   resp.data.ipam_scope.tags[0].value #=> String
    def delete_ipam_scope(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteIpamScopeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteIpamScope.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_ipam_scope,
        tracer: tracer
      )
      Telemetry::DeleteIpamScope.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam_scope] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_ipam_scope] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_ipam_scope] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
    # @param [Hash | Types::DeleteKeyPairInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteKeyPairInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_key_pair(
    #     key_name: 'KeyName',
    #     key_pair_id: 'KeyPairId',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteKeyPairOutput
    #   resp.data.return #=> Boolean
    #   resp.data.key_pair_id #=> String
    # @example To delete a key pair
    #   # This example deletes the specified key pair.
    #   resp = client.delete_key_pair({
    #     key_name: "my-key-pair"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_key_pair(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteKeyPairInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteKeyPair.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_key_pair,
        tracer: tracer
      )
      Telemetry::DeleteKeyPair.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_key_pair] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_key_pair] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_key_pair] #{output.data}")
        output
      end
    end

    # <p>Deletes a launch template. Deleting a launch template deletes all of its
    #             versions.</p>
    # @param [Hash | Types::DeleteLaunchTemplateInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteLaunchTemplateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_launch_template(
    #     dry_run: false,
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteLaunchTemplateOutput
    #   resp.data.launch_template #=> Types::LaunchTemplate
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.create_time #=> Time
    #   resp.data.launch_template.created_by #=> String
    #   resp.data.launch_template.default_version_number #=> Integer
    #   resp.data.launch_template.latest_version_number #=> Integer
    #   resp.data.launch_template.tags #=> Array<Tag>
    #   resp.data.launch_template.tags[0] #=> Types::Tag
    #   resp.data.launch_template.tags[0].key #=> String
    #   resp.data.launch_template.tags[0].value #=> String
    # @example To delete a launch template
    #   # This example deletes the specified launch template.
    #   resp = client.delete_launch_template({
    #     launch_template_id: "lt-0abcd290751193123"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_template: {
    #       latest_version_number: 2,
    #       launch_template_id: "lt-0abcd290751193123",
    #       launch_template_name: "my-template",
    #       default_version_number: 2,
    #       created_by: "arn:aws:iam::123456789012:root",
    #       create_time: Time.parse('2017-11-23T16:46:25.000Z')
    #     }
    #   }
    def delete_launch_template(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteLaunchTemplateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteLaunchTemplate.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_launch_template,
        tracer: tracer
      )
      Telemetry::DeleteLaunchTemplate.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_launch_template] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_launch_template] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_launch_template] #{output.data}")
        output
      end
    end

    # <p>Deletes one or more versions of a launch template.</p>
    #          <p>You can't delete the default version of a launch template; you must first assign a
    #             different version as the default. If the default version is the only version for the
    #             launch template, you must delete the entire launch template using <a>DeleteLaunchTemplate</a>.</p>
    #          <p>You can delete up to 200 launch template versions in a single request. To delete more
    #             than 200 versions in a single request, use <a>DeleteLaunchTemplate</a>, which
    #             deletes the launch template and all of its versions.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-launch-template-versions.html#delete-launch-template-version">Delete a launch template version</a> in the <i>EC2 User
    #             Guide</i>.</p>
    # @param [Hash | Types::DeleteLaunchTemplateVersionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteLaunchTemplateVersionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_launch_template_versions(
    #     dry_run: false,
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     versions: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteLaunchTemplateVersionsOutput
    #   resp.data.successfully_deleted_launch_template_versions #=> Array<DeleteLaunchTemplateVersionsResponseSuccessItem>
    #   resp.data.successfully_deleted_launch_template_versions[0] #=> Types::DeleteLaunchTemplateVersionsResponseSuccessItem
    #   resp.data.successfully_deleted_launch_template_versions[0].launch_template_id #=> String
    #   resp.data.successfully_deleted_launch_template_versions[0].launch_template_name #=> String
    #   resp.data.successfully_deleted_launch_template_versions[0].version_number #=> Integer
    #   resp.data.unsuccessfully_deleted_launch_template_versions #=> Array<DeleteLaunchTemplateVersionsResponseErrorItem>
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0] #=> Types::DeleteLaunchTemplateVersionsResponseErrorItem
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].launch_template_id #=> String
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].launch_template_name #=> String
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].version_number #=> Integer
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].response_error #=> Types::ResponseError
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].response_error.code #=> String, one of ["launchTemplateIdDoesNotExist", "launchTemplateIdMalformed", "launchTemplateNameDoesNotExist", "launchTemplateNameMalformed", "launchTemplateVersionDoesNotExist", "unexpectedError"]
    #   resp.data.unsuccessfully_deleted_launch_template_versions[0].response_error.message #=> String
    # @example To delete a launch template version
    #   # This example deletes the specified launch template version.
    #   resp = client.delete_launch_template_versions({
    #     launch_template_id: "lt-0abcd290751193123",
    #     versions: [
    #       "1"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     successfully_deleted_launch_template_versions: [
    #       {
    #         launch_template_name: "my-template",
    #         version_number: 1,
    #         launch_template_id: "lt-0abcd290751193123"
    #       }
    #     ],
    #     unsuccessfully_deleted_launch_template_versions: [
    #
    #     ]
    #   }
    def delete_launch_template_versions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteLaunchTemplateVersionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteLaunchTemplateVersions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_launch_template_versions,
        tracer: tracer
      )
      Telemetry::DeleteLaunchTemplateVersions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_launch_template_versions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_launch_template_versions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_launch_template_versions] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified route from the specified local gateway route table.</p>
    # @param [Hash | Types::DeleteLocalGatewayRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteLocalGatewayRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_local_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     dry_run: false,
    #     destination_prefix_list_id: 'DestinationPrefixListId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteLocalGatewayRouteOutput
    #   resp.data.route #=> Types::LocalGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.route.local_gateway_route_table_id #=> String
    #   resp.data.route.local_gateway_route_table_arn #=> String
    #   resp.data.route.owner_id #=> String
    #   resp.data.route.subnet_id #=> String
    #   resp.data.route.coip_pool_id #=> String
    #   resp.data.route.network_interface_id #=> String
    #   resp.data.route.destination_prefix_list_id #=> String
    def delete_local_gateway_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteLocalGatewayRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteLocalGatewayRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_local_gateway_route,
        tracer: tracer
      )
      Telemetry::DeleteLocalGatewayRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route] #{output.data}")
        output
      end
    end

    # <p>
    #       Deletes a local gateway route table.
    #       </p>
    # @param [Hash | Types::DeleteLocalGatewayRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteLocalGatewayRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_local_gateway_route_table(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteLocalGatewayRouteTableOutput
    #   resp.data.local_gateway_route_table #=> Types::LocalGatewayRouteTable
    #   resp.data.local_gateway_route_table.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table.outpost_arn #=> String
    #   resp.data.local_gateway_route_table.owner_id #=> String
    #   resp.data.local_gateway_route_table.state #=> String
    #   resp.data.local_gateway_route_table.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table.tags[0].key #=> String
    #   resp.data.local_gateway_route_table.tags[0].value #=> String
    #   resp.data.local_gateway_route_table.mode #=> String, one of ["direct-vpc-routing", "coip"]
    #   resp.data.local_gateway_route_table.state_reason #=> Types::StateReason
    #   resp.data.local_gateway_route_table.state_reason.code #=> String
    #   resp.data.local_gateway_route_table.state_reason.message #=> String
    def delete_local_gateway_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteLocalGatewayRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteLocalGatewayRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_local_gateway_route_table,
        tracer: tracer
      )
      Telemetry::DeleteLocalGatewayRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table] #{output.data}")
        output
      end
    end

    # <p>
    #       Deletes a local gateway route table virtual interface group association.
    #       </p>
    # @param [Hash | Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_local_gateway_route_table_virtual_interface_group_association(
    #     local_gateway_route_table_virtual_interface_group_association_id: 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
    #   resp.data.local_gateway_route_table_virtual_interface_group_association #=> Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_route_table_virtual_interface_group_association_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.owner_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.state #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags[0].key #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_association.tags[0].value #=> String
    def delete_local_gateway_route_table_virtual_interface_group_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_local_gateway_route_table_virtual_interface_group_association,
        tracer: tracer
      )
      Telemetry::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table_virtual_interface_group_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table_virtual_interface_group_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table_virtual_interface_group_association] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified association between a VPC and local gateway route table.</p>
    # @param [Hash | Types::DeleteLocalGatewayRouteTableVpcAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteLocalGatewayRouteTableVpcAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_local_gateway_route_table_vpc_association(
    #     local_gateway_route_table_vpc_association_id: 'LocalGatewayRouteTableVpcAssociationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteLocalGatewayRouteTableVpcAssociationOutput
    #   resp.data.local_gateway_route_table_vpc_association #=> Types::LocalGatewayRouteTableVpcAssociation
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_vpc_association_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_vpc_association.local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.vpc_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.owner_id #=> String
    #   resp.data.local_gateway_route_table_vpc_association.state #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_vpc_association.tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].key #=> String
    #   resp.data.local_gateway_route_table_vpc_association.tags[0].value #=> String
    def delete_local_gateway_route_table_vpc_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteLocalGatewayRouteTableVpcAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteLocalGatewayRouteTableVpcAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_local_gateway_route_table_vpc_association,
        tracer: tracer
      )
      Telemetry::DeleteLocalGatewayRouteTableVpcAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table_vpc_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table_vpc_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_local_gateway_route_table_vpc_association] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified managed prefix list. You must first remove all references to the prefix list in your resources.</p>
    # @param [Hash | Types::DeleteManagedPrefixListInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteManagedPrefixListInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_managed_prefix_list(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteManagedPrefixListOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    def delete_managed_prefix_list(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteManagedPrefixListInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteManagedPrefixList.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_managed_prefix_list,
        tracer: tracer
      )
      Telemetry::DeleteManagedPrefixList.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_managed_prefix_list] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_managed_prefix_list] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_managed_prefix_list] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates its Elastic IP address,
    #           but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway
    #           routes in your route tables.</p>
    # @param [Hash | Types::DeleteNatGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNatGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_nat_gateway(
    #     dry_run: false,
    #     nat_gateway_id: 'NatGatewayId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNatGatewayOutput
    #   resp.data.nat_gateway_id #=> String
    # @example To delete a NAT gateway
    #   # This example deletes the specified NAT gateway.
    #   resp = client.delete_nat_gateway({
    #     nat_gateway_id: "nat-04ae55e711cec5680"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     nat_gateway_id: "nat-04ae55e711cec5680"
    #   }
    def delete_nat_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNatGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNatGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_nat_gateway,
        tracer: tracer
      )
      Telemetry::DeleteNatGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_nat_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_nat_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_nat_gateway] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
    # @param [Hash | Types::DeleteNetworkAclInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkAclInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_acl(
    #     dry_run: false,
    #     network_acl_id: 'NetworkAclId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkAclOutput
    # @example To delete a network ACL
    #   # This example deletes the specified network ACL.
    #   resp = client.delete_network_acl({
    #     network_acl_id: "acl-5fb85d36"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_network_acl(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkAclInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkAcl.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_acl,
        tracer: tracer
      )
      Telemetry::DeleteNetworkAcl.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_acl] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_acl] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_acl] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
    # @param [Hash | Types::DeleteNetworkAclEntryInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkAclEntryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_acl_entry(
    #     dry_run: false,
    #     egress: false, # required
    #     network_acl_id: 'NetworkAclId', # required
    #     rule_number: 1 # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkAclEntryOutput
    # @example To delete a network ACL entry
    #   # This example deletes ingress rule number 100 from the specified network ACL.
    #   resp = client.delete_network_acl_entry({
    #     network_acl_id: "acl-5fb85d36",
    #     rule_number: 100,
    #     egress: true
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_network_acl_entry(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkAclEntryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkAclEntry.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_acl_entry,
        tracer: tracer
      )
      Telemetry::DeleteNetworkAclEntry.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_acl_entry] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_acl_entry] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_acl_entry] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Network Access Scope.</p>
    # @param [Hash | Types::DeleteNetworkInsightsAccessScopeInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkInsightsAccessScopeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_insights_access_scope(
    #     dry_run: false,
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkInsightsAccessScopeOutput
    #   resp.data.network_insights_access_scope_id #=> String
    def delete_network_insights_access_scope(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkInsightsAccessScopeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkInsightsAccessScope.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_insights_access_scope,
        tracer: tracer
      )
      Telemetry::DeleteNetworkInsightsAccessScope.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_access_scope] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_insights_access_scope] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_access_scope] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Network Access Scope analysis.</p>
    # @param [Hash | Types::DeleteNetworkInsightsAccessScopeAnalysisInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkInsightsAccessScopeAnalysisInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_insights_access_scope_analysis(
    #     network_insights_access_scope_analysis_id: 'NetworkInsightsAccessScopeAnalysisId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkInsightsAccessScopeAnalysisOutput
    #   resp.data.network_insights_access_scope_analysis_id #=> String
    def delete_network_insights_access_scope_analysis(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkInsightsAccessScopeAnalysisInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkInsightsAccessScopeAnalysis.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_insights_access_scope_analysis,
        tracer: tracer
      )
      Telemetry::DeleteNetworkInsightsAccessScopeAnalysis.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_access_scope_analysis] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_insights_access_scope_analysis] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_access_scope_analysis] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified network insights analysis.</p>
    # @param [Hash | Types::DeleteNetworkInsightsAnalysisInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkInsightsAnalysisInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_insights_analysis(
    #     dry_run: false,
    #     network_insights_analysis_id: 'NetworkInsightsAnalysisId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkInsightsAnalysisOutput
    #   resp.data.network_insights_analysis_id #=> String
    def delete_network_insights_analysis(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkInsightsAnalysisInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkInsightsAnalysis.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_insights_analysis,
        tracer: tracer
      )
      Telemetry::DeleteNetworkInsightsAnalysis.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_analysis] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_insights_analysis] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_analysis] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified path.</p>
    # @param [Hash | Types::DeleteNetworkInsightsPathInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkInsightsPathInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_insights_path(
    #     dry_run: false,
    #     network_insights_path_id: 'NetworkInsightsPathId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkInsightsPathOutput
    #   resp.data.network_insights_path_id #=> String
    def delete_network_insights_path(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkInsightsPathInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkInsightsPath.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_insights_path,
        tracer: tracer
      )
      Telemetry::DeleteNetworkInsightsPath.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_path] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_insights_path] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_insights_path] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
    # @param [Hash | Types::DeleteNetworkInterfaceInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkInterfaceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_interface(
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkInterfaceOutput
    # @example To delete a network interface
    #   # This example deletes the specified network interface.
    #   resp = client.delete_network_interface({
    #     network_interface_id: "eni-e5aa89a3"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_network_interface(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkInterfaceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkInterface.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_interface,
        tracer: tracer
      )
      Telemetry::DeleteNetworkInterface.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_interface] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_interface] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_interface] #{output.data}")
        output
      end
    end

    # <p>Deletes a permission for a network interface. By default, you cannot delete the
    # 			permission if the account for which you're removing the permission has attached the
    # 			network interface to an instance. However, you can force delete the permission,
    # 			regardless of any attachment.</p>
    # @param [Hash | Types::DeleteNetworkInterfacePermissionInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteNetworkInterfacePermissionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_network_interface_permission(
    #     network_interface_permission_id: 'NetworkInterfacePermissionId', # required
    #     force: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteNetworkInterfacePermissionOutput
    #   resp.data.return #=> Boolean
    def delete_network_interface_permission(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteNetworkInterfacePermissionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteNetworkInterfacePermission.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_network_interface_permission,
        tracer: tracer
      )
      Telemetry::DeleteNetworkInterfacePermission.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_interface_permission] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_network_interface_permission] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_network_interface_permission] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified placement group. You must terminate all instances in the
    #             placement group before you can delete the placement group. For more information, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DeletePlacementGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::DeletePlacementGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_placement_group(
    #     dry_run: false,
    #     group_name: 'GroupName' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeletePlacementGroupOutput
    # @example To delete a placement group
    #   # This example deletes the specified placement group.
    #   #
    #   resp = client.delete_placement_group({
    #     group_name: "my-cluster"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def delete_placement_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeletePlacementGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeletePlacementGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_placement_group,
        tracer: tracer
      )
      Telemetry::DeletePlacementGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_placement_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_placement_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_placement_group] #{output.data}")
        output
      end
    end

    # <p>Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only.</p>
    # @param [Hash | Types::DeletePublicIpv4PoolInput] params
    #   Request parameters for this operation.
    #   See {Types::DeletePublicIpv4PoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_public_ipv4_pool(
    #     dry_run: false,
    #     pool_id: 'PoolId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeletePublicIpv4PoolOutput
    #   resp.data.return_value #=> Boolean
    def delete_public_ipv4_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeletePublicIpv4PoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeletePublicIpv4Pool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_public_ipv4_pool,
        tracer: tracer
      )
      Telemetry::DeletePublicIpv4Pool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_public_ipv4_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_public_ipv4_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_public_ipv4_pool] #{output.data}")
        output
      end
    end

    # <p>Deletes the queued purchases for the specified Reserved Instances.</p>
    # @param [Hash | Types::DeleteQueuedReservedInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteQueuedReservedInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_queued_reserved_instances(
    #     dry_run: false,
    #     reserved_instances_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteQueuedReservedInstancesOutput
    #   resp.data.successful_queued_purchase_deletions #=> Array<SuccessfulQueuedPurchaseDeletion>
    #   resp.data.successful_queued_purchase_deletions[0] #=> Types::SuccessfulQueuedPurchaseDeletion
    #   resp.data.successful_queued_purchase_deletions[0].reserved_instances_id #=> String
    #   resp.data.failed_queued_purchase_deletions #=> Array<FailedQueuedPurchaseDeletion>
    #   resp.data.failed_queued_purchase_deletions[0] #=> Types::FailedQueuedPurchaseDeletion
    #   resp.data.failed_queued_purchase_deletions[0].error #=> Types::DeleteQueuedReservedInstancesError
    #   resp.data.failed_queued_purchase_deletions[0].error.code #=> String, one of ["reserved-instances-id-invalid", "reserved-instances-not-in-queued-state", "unexpected-error"]
    #   resp.data.failed_queued_purchase_deletions[0].error.message #=> String
    #   resp.data.failed_queued_purchase_deletions[0].reserved_instances_id #=> String
    def delete_queued_reserved_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteQueuedReservedInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteQueuedReservedInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_queued_reserved_instances,
        tracer: tracer
      )
      Telemetry::DeleteQueuedReservedInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_queued_reserved_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_queued_reserved_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_queued_reserved_instances] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified route from the specified route table.</p>
    # @param [Hash | Types::DeleteRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     destination_ipv6_cidr_block: 'DestinationIpv6CidrBlock',
    #     destination_prefix_list_id: 'DestinationPrefixListId',
    #     dry_run: false,
    #     route_table_id: 'RouteTableId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteRouteOutput
    # @example To delete a route
    #   # This example deletes the specified route from the specified route table.
    #   resp = client.delete_route({
    #     route_table_id: "rtb-22574640",
    #     destination_cidr_block: "0.0.0.0/0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_route,
        tracer: tracer
      )
      Telemetry::DeleteRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_route] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
    # @param [Hash | Types::DeleteRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_route_table(
    #     dry_run: false,
    #     route_table_id: 'RouteTableId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteRouteTableOutput
    # @example To delete a route table
    #   # This example deletes the specified route table.
    #   resp = client.delete_route_table({
    #     route_table_id: "rtb-22574640"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_route_table,
        tracer: tracer
      )
      Telemetry::DeleteRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_route_table] #{output.data}")
        output
      end
    end

    # <p>Deletes a security group.</p>
    #          <p>If you attempt to delete a security group that is associated with an instance or network interface or is
    # 			  referenced by another security group, the operation fails with
    # 				<code>DependencyViolation</code>.</p>
    # @param [Hash | Types::DeleteSecurityGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteSecurityGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_security_group(
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteSecurityGroupOutput
    # @example To delete a security group
    #   # This example deletes the specified security group.
    #   resp = client.delete_security_group({
    #     group_id: "sg-903004f8"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def delete_security_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteSecurityGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteSecurityGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_security_group,
        tracer: tracer
      )
      Telemetry::DeleteSecurityGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_security_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_security_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_security_group] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified snapshot.</p>
    #          <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the
    #       blocks on the device that have changed since your last snapshot are saved in the new snapshot.
    #       When you delete a snapshot, only the data not needed for any other snapshot is removed. So
    #       regardless of which prior snapshots have been deleted, all active snapshots will have access
    #       to all the information needed to restore the volume.</p>
    #          <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI.
    #       You must first de-register the AMI before you can delete the snapshot.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Delete an Amazon EBS snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DeleteSnapshotInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteSnapshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_snapshot(
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteSnapshotOutput
    # @example To delete a snapshot
    #   # This example deletes a snapshot with the snapshot ID of ``snap-1234567890abcdef0``. If the command succeeds, no output is returned.
    #   resp = client.delete_snapshot({
    #     snapshot_id: "snap-1234567890abcdef0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def delete_snapshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteSnapshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteSnapshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_snapshot,
        tracer: tracer
      )
      Telemetry::DeleteSnapshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_snapshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_snapshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_snapshot] #{output.data}")
        output
      end
    end

    # <p>Deletes the data feed for Spot Instances.</p>
    # @param [Hash | Types::DeleteSpotDatafeedSubscriptionInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteSpotDatafeedSubscriptionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_spot_datafeed_subscription(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteSpotDatafeedSubscriptionOutput
    # @example To cancel a Spot Instance data feed subscription
    #   resp = client.delete_spot_datafeed_subscription()
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_spot_datafeed_subscription(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteSpotDatafeedSubscriptionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteSpotDatafeedSubscription.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_spot_datafeed_subscription,
        tracer: tracer
      )
      Telemetry::DeleteSpotDatafeedSubscription.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_spot_datafeed_subscription] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_spot_datafeed_subscription] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_spot_datafeed_subscription] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
    # @param [Hash | Types::DeleteSubnetInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteSubnetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_subnet(
    #     subnet_id: 'SubnetId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteSubnetOutput
    # @example To delete a subnet
    #   # This example deletes the specified subnet.
    #   resp = client.delete_subnet({
    #     subnet_id: "subnet-9d4a7b6c"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_subnet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteSubnetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteSubnet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_subnet,
        tracer: tracer
      )
      Telemetry::DeleteSubnet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_subnet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_subnet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_subnet] #{output.data}")
        output
      end
    end

    # <p>Deletes a subnet CIDR reservation.</p>
    # @param [Hash | Types::DeleteSubnetCidrReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteSubnetCidrReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_subnet_cidr_reservation(
    #     subnet_cidr_reservation_id: 'SubnetCidrReservationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteSubnetCidrReservationOutput
    #   resp.data.deleted_subnet_cidr_reservation #=> Types::SubnetCidrReservation
    #   resp.data.deleted_subnet_cidr_reservation.subnet_cidr_reservation_id #=> String
    #   resp.data.deleted_subnet_cidr_reservation.subnet_id #=> String
    #   resp.data.deleted_subnet_cidr_reservation.cidr #=> String
    #   resp.data.deleted_subnet_cidr_reservation.reservation_type #=> String, one of ["prefix", "explicit"]
    #   resp.data.deleted_subnet_cidr_reservation.owner_id #=> String
    #   resp.data.deleted_subnet_cidr_reservation.description #=> String
    #   resp.data.deleted_subnet_cidr_reservation.tags #=> Array<Tag>
    #   resp.data.deleted_subnet_cidr_reservation.tags[0] #=> Types::Tag
    #   resp.data.deleted_subnet_cidr_reservation.tags[0].key #=> String
    #   resp.data.deleted_subnet_cidr_reservation.tags[0].value #=> String
    def delete_subnet_cidr_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteSubnetCidrReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteSubnetCidrReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_subnet_cidr_reservation,
        tracer: tracer
      )
      Telemetry::DeleteSubnetCidrReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_subnet_cidr_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_subnet_cidr_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_subnet_cidr_reservation] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified set of tags from the specified set of resources.</p>
    #          <p>To list the current tags, use <a>DescribeTags</a>. For more information about
    #          tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag
    #             your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User
    #             Guide</i>.</p>
    # @param [Hash | Types::DeleteTagsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTagsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_tags(
    #     dry_run: false,
    #     resources: [
    #       'member'
    #     ], # required
    #     tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTagsOutput
    # @example To delete a tag from a resource
    #   # This example deletes the tag Stack=test from the specified image.
    #   resp = client.delete_tags({
    #     resources: [
    #       "ami-78a54011"
    #     ],
    #     tags: [
    #       {
    #         key: "Stack",
    #         value: "test"
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_tags(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTagsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTags.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_tags,
        tracer: tracer
      )
      Telemetry::DeleteTags.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_tags] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_tags] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_tags] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Traffic Mirror filter.</p>
    #          <p>You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.</p>
    # @param [Hash | Types::DeleteTrafficMirrorFilterInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTrafficMirrorFilterInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_traffic_mirror_filter(
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTrafficMirrorFilterOutput
    #   resp.data.traffic_mirror_filter_id #=> String
    def delete_traffic_mirror_filter(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTrafficMirrorFilterInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTrafficMirrorFilter.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_traffic_mirror_filter,
        tracer: tracer
      )
      Telemetry::DeleteTrafficMirrorFilter.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_filter] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_filter] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_filter] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Traffic Mirror rule.</p>
    # @param [Hash | Types::DeleteTrafficMirrorFilterRuleInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTrafficMirrorFilterRuleInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_traffic_mirror_filter_rule(
    #     traffic_mirror_filter_rule_id: 'TrafficMirrorFilterRuleId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTrafficMirrorFilterRuleOutput
    #   resp.data.traffic_mirror_filter_rule_id #=> String
    def delete_traffic_mirror_filter_rule(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTrafficMirrorFilterRuleInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTrafficMirrorFilterRule.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_traffic_mirror_filter_rule,
        tracer: tracer
      )
      Telemetry::DeleteTrafficMirrorFilterRule.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_filter_rule] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_filter_rule] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_filter_rule] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Traffic Mirror session.</p>
    # @param [Hash | Types::DeleteTrafficMirrorSessionInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTrafficMirrorSessionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_traffic_mirror_session(
    #     traffic_mirror_session_id: 'TrafficMirrorSessionId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTrafficMirrorSessionOutput
    #   resp.data.traffic_mirror_session_id #=> String
    def delete_traffic_mirror_session(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTrafficMirrorSessionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTrafficMirrorSession.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_traffic_mirror_session,
        tracer: tracer
      )
      Telemetry::DeleteTrafficMirrorSession.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_session] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_session] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_session] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Traffic Mirror target.</p>
    #          <p>You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.</p>
    # @param [Hash | Types::DeleteTrafficMirrorTargetInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTrafficMirrorTargetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_traffic_mirror_target(
    #     traffic_mirror_target_id: 'TrafficMirrorTargetId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTrafficMirrorTargetOutput
    #   resp.data.traffic_mirror_target_id #=> String
    def delete_traffic_mirror_target(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTrafficMirrorTargetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTrafficMirrorTarget.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_traffic_mirror_target,
        tracer: tracer
      )
      Telemetry::DeleteTrafficMirrorTarget.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_target] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_target] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_traffic_mirror_target] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified transit gateway.</p>
    # @param [Hash | Types::DeleteTransitGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayOutput
    #   resp.data.transit_gateway #=> Types::TransitGateway
    #   resp.data.transit_gateway.transit_gateway_id #=> String
    #   resp.data.transit_gateway.transit_gateway_arn #=> String
    #   resp.data.transit_gateway.state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateway.owner_id #=> String
    #   resp.data.transit_gateway.description #=> String
    #   resp.data.transit_gateway.creation_time #=> Time
    #   resp.data.transit_gateway.options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateway.options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway.options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.association_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.tags #=> Array<Tag>
    #   resp.data.transit_gateway.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway.tags[0].key #=> String
    #   resp.data.transit_gateway.tags[0].value #=> String
    def delete_transit_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway,
        tracer: tracer
      )
      Telemetry::DeleteTransitGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Connect attachment. You must first delete any Connect peers for
    #             the attachment.</p>
    # @param [Hash | Types::DeleteTransitGatewayConnectInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayConnectInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_connect(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayConnectOutput
    #   resp.data.transit_gateway_connect #=> Types::TransitGatewayConnect
    #   resp.data.transit_gateway_connect.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transport_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect.transit_gateway_id #=> String
    #   resp.data.transit_gateway_connect.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_connect.creation_time #=> Time
    #   resp.data.transit_gateway_connect.options #=> Types::TransitGatewayConnectOptions
    #   resp.data.transit_gateway_connect.options.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect.tags[0].key #=> String
    #   resp.data.transit_gateway_connect.tags[0].value #=> String
    def delete_transit_gateway_connect(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayConnectInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayConnect.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_connect,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayConnect.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_connect] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_connect] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_connect] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified Connect peer.</p>
    # @param [Hash | Types::DeleteTransitGatewayConnectPeerInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayConnectPeerInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_connect_peer(
    #     transit_gateway_connect_peer_id: 'TransitGatewayConnectPeerId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayConnectPeerOutput
    #   resp.data.transit_gateway_connect_peer #=> Types::TransitGatewayConnectPeer
    #   resp.data.transit_gateway_connect_peer.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect_peer.transit_gateway_connect_peer_id #=> String
    #   resp.data.transit_gateway_connect_peer.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_connect_peer.creation_time #=> Time
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration #=> Types::TransitGatewayConnectPeerConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.inside_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations #=> Array<TransitGatewayAttachmentBgpConfiguration>
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0] #=> Types::TransitGatewayAttachmentBgpConfiguration
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_asn #=> Integer
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].peer_address #=> String
    #   resp.data.transit_gateway_connect_peer.connect_peer_configuration.bgp_configurations[0].bgp_status #=> String, one of ["up", "down"]
    #   resp.data.transit_gateway_connect_peer.tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect_peer.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect_peer.tags[0].key #=> String
    #   resp.data.transit_gateway_connect_peer.tags[0].value #=> String
    def delete_transit_gateway_connect_peer(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayConnectPeerInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayConnectPeer.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_connect_peer,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayConnectPeer.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_connect_peer] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_connect_peer] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_connect_peer] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified transit gateway multicast domain.</p>
    # @param [Hash | Types::DeleteTransitGatewayMulticastDomainInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayMulticastDomainInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_multicast_domain(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayMulticastDomainOutput
    #   resp.data.transit_gateway_multicast_domain #=> Types::TransitGatewayMulticastDomain
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_id #=> String
    #   resp.data.transit_gateway_multicast_domain.transit_gateway_multicast_domain_arn #=> String
    #   resp.data.transit_gateway_multicast_domain.owner_id #=> String
    #   resp.data.transit_gateway_multicast_domain.options #=> Types::TransitGatewayMulticastDomainOptions
    #   resp.data.transit_gateway_multicast_domain.options.igmpv2_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.static_sources_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.options.auto_accept_shared_associations #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domain.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_multicast_domain.creation_time #=> Time
    #   resp.data.transit_gateway_multicast_domain.tags #=> Array<Tag>
    #   resp.data.transit_gateway_multicast_domain.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_multicast_domain.tags[0].key #=> String
    #   resp.data.transit_gateway_multicast_domain.tags[0].value #=> String
    def delete_transit_gateway_multicast_domain(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayMulticastDomainInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayMulticastDomain.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_multicast_domain,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayMulticastDomain.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_multicast_domain] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_multicast_domain] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_multicast_domain] #{output.data}")
        output
      end
    end

    # <p>Deletes a transit gateway peering attachment.</p>
    # @param [Hash | Types::DeleteTransitGatewayPeeringAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayPeeringAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_peering_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.core_network_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.options #=> Types::TransitGatewayPeeringAttachmentOptions
    #   resp.data.transit_gateway_peering_attachment.options.dynamic_routing #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    def delete_transit_gateway_peering_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayPeeringAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayPeeringAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_peering_attachment,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayPeeringAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_peering_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_peering_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_peering_attachment] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified transit gateway policy table.</p>
    # @param [Hash | Types::DeleteTransitGatewayPolicyTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayPolicyTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_policy_table(
    #     transit_gateway_policy_table_id: 'TransitGatewayPolicyTableId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayPolicyTableOutput
    #   resp.data.transit_gateway_policy_table #=> Types::TransitGatewayPolicyTable
    #   resp.data.transit_gateway_policy_table.transit_gateway_policy_table_id #=> String
    #   resp.data.transit_gateway_policy_table.transit_gateway_id #=> String
    #   resp.data.transit_gateway_policy_table.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_policy_table.creation_time #=> Time
    #   resp.data.transit_gateway_policy_table.tags #=> Array<Tag>
    #   resp.data.transit_gateway_policy_table.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_policy_table.tags[0].key #=> String
    #   resp.data.transit_gateway_policy_table.tags[0].value #=> String
    def delete_transit_gateway_policy_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayPolicyTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayPolicyTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_policy_table,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayPolicyTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_policy_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_policy_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_policy_table] #{output.data}")
        output
      end
    end

    # <p>Deletes a reference (route) to a prefix list in a specified transit gateway route table.</p>
    # @param [Hash | Types::DeleteTransitGatewayPrefixListReferenceInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayPrefixListReferenceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_prefix_list_reference(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     prefix_list_id: 'PrefixListId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayPrefixListReferenceOutput
    #   resp.data.transit_gateway_prefix_list_reference #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_reference.blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_id #=> String
    def delete_transit_gateway_prefix_list_reference(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayPrefixListReferenceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayPrefixListReference.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_prefix_list_reference,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayPrefixListReference.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_prefix_list_reference] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_prefix_list_reference] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_prefix_list_reference] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified route from the specified transit gateway route table.</p>
    # @param [Hash | Types::DeleteTransitGatewayRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_route(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayRouteOutput
    #   resp.data.route #=> Types::TransitGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.prefix_list_id #=> String
    #   resp.data.route.transit_gateway_route_table_announcement_id #=> String
    #   resp.data.route.transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.route.transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.route.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    def delete_transit_gateway_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_route,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified transit gateway route table. You must disassociate the route table from any
    #           transit gateway route tables before you can delete it.</p>
    # @param [Hash | Types::DeleteTransitGatewayRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_route_table(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayRouteTableOutput
    #   resp.data.transit_gateway_route_table #=> Types::TransitGatewayRouteTable
    #   resp.data.transit_gateway_route_table.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table.transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table.default_association_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.default_propagation_route_table #=> Boolean
    #   resp.data.transit_gateway_route_table.creation_time #=> Time
    #   resp.data.transit_gateway_route_table.tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table.tags[0].key #=> String
    #   resp.data.transit_gateway_route_table.tags[0].value #=> String
    def delete_transit_gateway_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_route_table,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route_table] #{output.data}")
        output
      end
    end

    # <p>Advertises to the transit gateway that a transit gateway route table is deleted.</p>
    # @param [Hash | Types::DeleteTransitGatewayRouteTableAnnouncementInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayRouteTableAnnouncementInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_route_table_announcement(
    #     transit_gateway_route_table_announcement_id: 'TransitGatewayRouteTableAnnouncementId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayRouteTableAnnouncementOutput
    #   resp.data.transit_gateway_route_table_announcement #=> Types::TransitGatewayRouteTableAnnouncement
    #   resp.data.transit_gateway_route_table_announcement.transit_gateway_route_table_announcement_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.core_network_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.peer_transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.peer_core_network_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.peering_attachment_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.announcement_direction #=> String, one of ["outgoing", "incoming"]
    #   resp.data.transit_gateway_route_table_announcement.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table_announcement.state #=> String, one of ["available", "pending", "failing", "failed", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table_announcement.creation_time #=> Time
    #   resp.data.transit_gateway_route_table_announcement.tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table_announcement.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table_announcement.tags[0].key #=> String
    #   resp.data.transit_gateway_route_table_announcement.tags[0].value #=> String
    def delete_transit_gateway_route_table_announcement(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayRouteTableAnnouncementInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayRouteTableAnnouncement.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_route_table_announcement,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayRouteTableAnnouncement.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route_table_announcement] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route_table_announcement] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_route_table_announcement] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified VPC attachment.</p>
    # @param [Hash | Types::DeleteTransitGatewayVpcAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteTransitGatewayVpcAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    def delete_transit_gateway_vpc_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteTransitGatewayVpcAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteTransitGatewayVpcAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_transit_gateway_vpc_attachment,
        tracer: tracer
      )
      Telemetry::DeleteTransitGatewayVpcAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_vpc_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_vpc_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_transit_gateway_vpc_attachment] #{output.data}")
        output
      end
    end

    # <p>Delete an Amazon Web Services Verified Access endpoint.</p>
    # @param [Hash | Types::DeleteVerifiedAccessEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVerifiedAccessEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_verified_access_endpoint(
    #     verified_access_endpoint_id: 'VerifiedAccessEndpointId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVerifiedAccessEndpointOutput
    #   resp.data.verified_access_endpoint #=> Types::VerifiedAccessEndpoint
    #   resp.data.verified_access_endpoint.verified_access_instance_id #=> String
    #   resp.data.verified_access_endpoint.verified_access_group_id #=> String
    #   resp.data.verified_access_endpoint.verified_access_endpoint_id #=> String
    #   resp.data.verified_access_endpoint.application_domain #=> String
    #   resp.data.verified_access_endpoint.endpoint_type #=> String, one of ["load-balancer", "network-interface"]
    #   resp.data.verified_access_endpoint.attachment_type #=> String, one of ["vpc"]
    #   resp.data.verified_access_endpoint.domain_certificate_arn #=> String
    #   resp.data.verified_access_endpoint.endpoint_domain #=> String
    #   resp.data.verified_access_endpoint.device_validation_domain #=> String
    #   resp.data.verified_access_endpoint.security_group_ids #=> Array<String>
    #   resp.data.verified_access_endpoint.security_group_ids[0] #=> String
    #   resp.data.verified_access_endpoint.load_balancer_options #=> Types::VerifiedAccessEndpointLoadBalancerOptions
    #   resp.data.verified_access_endpoint.load_balancer_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoint.load_balancer_options.port #=> Integer
    #   resp.data.verified_access_endpoint.load_balancer_options.load_balancer_arn #=> String
    #   resp.data.verified_access_endpoint.load_balancer_options.subnet_ids #=> Array<String>
    #   resp.data.verified_access_endpoint.load_balancer_options.subnet_ids[0] #=> String
    #   resp.data.verified_access_endpoint.network_interface_options #=> Types::VerifiedAccessEndpointEniOptions
    #   resp.data.verified_access_endpoint.network_interface_options.network_interface_id #=> String
    #   resp.data.verified_access_endpoint.network_interface_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoint.network_interface_options.port #=> Integer
    #   resp.data.verified_access_endpoint.status #=> Types::VerifiedAccessEndpointStatus
    #   resp.data.verified_access_endpoint.status.code #=> String, one of ["pending", "active", "updating", "deleting", "deleted"]
    #   resp.data.verified_access_endpoint.status.message #=> String
    #   resp.data.verified_access_endpoint.description #=> String
    #   resp.data.verified_access_endpoint.creation_time #=> String
    #   resp.data.verified_access_endpoint.last_updated_time #=> String
    #   resp.data.verified_access_endpoint.deletion_time #=> String
    #   resp.data.verified_access_endpoint.tags #=> Array<Tag>
    #   resp.data.verified_access_endpoint.tags[0] #=> Types::Tag
    #   resp.data.verified_access_endpoint.tags[0].key #=> String
    #   resp.data.verified_access_endpoint.tags[0].value #=> String
    #   resp.data.verified_access_endpoint.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_endpoint.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_endpoint.sse_specification.kms_key_arn #=> String
    def delete_verified_access_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVerifiedAccessEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVerifiedAccessEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_verified_access_endpoint,
        tracer: tracer
      )
      Telemetry::DeleteVerifiedAccessEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_verified_access_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_endpoint] #{output.data}")
        output
      end
    end

    # <p>Delete an Amazon Web Services Verified Access group.</p>
    # @param [Hash | Types::DeleteVerifiedAccessGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVerifiedAccessGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_verified_access_group(
    #     verified_access_group_id: 'VerifiedAccessGroupId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVerifiedAccessGroupOutput
    #   resp.data.verified_access_group #=> Types::VerifiedAccessGroup
    #   resp.data.verified_access_group.verified_access_group_id #=> String
    #   resp.data.verified_access_group.verified_access_instance_id #=> String
    #   resp.data.verified_access_group.description #=> String
    #   resp.data.verified_access_group.owner #=> String
    #   resp.data.verified_access_group.verified_access_group_arn #=> String
    #   resp.data.verified_access_group.creation_time #=> String
    #   resp.data.verified_access_group.last_updated_time #=> String
    #   resp.data.verified_access_group.deletion_time #=> String
    #   resp.data.verified_access_group.tags #=> Array<Tag>
    #   resp.data.verified_access_group.tags[0] #=> Types::Tag
    #   resp.data.verified_access_group.tags[0].key #=> String
    #   resp.data.verified_access_group.tags[0].value #=> String
    #   resp.data.verified_access_group.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_group.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_group.sse_specification.kms_key_arn #=> String
    def delete_verified_access_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVerifiedAccessGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVerifiedAccessGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_verified_access_group,
        tracer: tracer
      )
      Telemetry::DeleteVerifiedAccessGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_verified_access_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_group] #{output.data}")
        output
      end
    end

    # <p>Delete an Amazon Web Services Verified Access instance.</p>
    # @param [Hash | Types::DeleteVerifiedAccessInstanceInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVerifiedAccessInstanceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_verified_access_instance(
    #     verified_access_instance_id: 'VerifiedAccessInstanceId', # required
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVerifiedAccessInstanceOutput
    #   resp.data.verified_access_instance #=> Types::VerifiedAccessInstance
    #   resp.data.verified_access_instance.verified_access_instance_id #=> String
    #   resp.data.verified_access_instance.description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers #=> Array<VerifiedAccessTrustProviderCondensed>
    #   resp.data.verified_access_instance.verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProviderCondensed
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_instance.creation_time #=> String
    #   resp.data.verified_access_instance.last_updated_time #=> String
    #   resp.data.verified_access_instance.tags #=> Array<Tag>
    #   resp.data.verified_access_instance.tags[0] #=> Types::Tag
    #   resp.data.verified_access_instance.tags[0].key #=> String
    #   resp.data.verified_access_instance.tags[0].value #=> String
    #   resp.data.verified_access_instance.fips_enabled #=> Boolean
    def delete_verified_access_instance(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVerifiedAccessInstanceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVerifiedAccessInstance.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_verified_access_instance,
        tracer: tracer
      )
      Telemetry::DeleteVerifiedAccessInstance.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_instance] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_verified_access_instance] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_instance] #{output.data}")
        output
      end
    end

    # <p>Delete an Amazon Web Services Verified Access trust provider.</p>
    # @param [Hash | Types::DeleteVerifiedAccessTrustProviderInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVerifiedAccessTrustProviderInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_verified_access_trust_provider(
    #     verified_access_trust_provider_id: 'VerifiedAccessTrustProviderId', # required
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVerifiedAccessTrustProviderOutput
    #   resp.data.verified_access_trust_provider #=> Types::VerifiedAccessTrustProvider
    #   resp.data.verified_access_trust_provider.verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_trust_provider.description #=> String
    #   resp.data.verified_access_trust_provider.trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_trust_provider.user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_trust_provider.device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_trust_provider.oidc_options #=> Types::OidcOptions
    #   resp.data.verified_access_trust_provider.oidc_options.issuer #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.authorization_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.token_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.user_info_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_id #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_secret #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.scope #=> String
    #   resp.data.verified_access_trust_provider.device_options #=> Types::DeviceOptions
    #   resp.data.verified_access_trust_provider.device_options.tenant_id #=> String
    #   resp.data.verified_access_trust_provider.device_options.public_signing_key_url #=> String
    #   resp.data.verified_access_trust_provider.policy_reference_name #=> String
    #   resp.data.verified_access_trust_provider.creation_time #=> String
    #   resp.data.verified_access_trust_provider.last_updated_time #=> String
    #   resp.data.verified_access_trust_provider.tags #=> Array<Tag>
    #   resp.data.verified_access_trust_provider.tags[0] #=> Types::Tag
    #   resp.data.verified_access_trust_provider.tags[0].key #=> String
    #   resp.data.verified_access_trust_provider.tags[0].value #=> String
    #   resp.data.verified_access_trust_provider.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_trust_provider.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_trust_provider.sse_specification.kms_key_arn #=> String
    def delete_verified_access_trust_provider(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVerifiedAccessTrustProviderInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVerifiedAccessTrustProvider.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_verified_access_trust_provider,
        tracer: tracer
      )
      Telemetry::DeleteVerifiedAccessTrustProvider.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_trust_provider] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_verified_access_trust_provider] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_verified_access_trust_provider] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state
    #       (not attached to an instance).</p>
    #          <p>The volume can remain in the <code>deleting</code> state for several minutes.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Delete an Amazon EBS volume</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DeleteVolumeInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVolumeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_volume(
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVolumeOutput
    # @example To delete a volume
    #   # This example deletes an available volume with the volume ID of ``vol-049df61146c4d7901``. If the command succeeds, no output is returned.
    #   resp = client.delete_volume({
    #     volume_id: "vol-049df61146c4d7901"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def delete_volume(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVolumeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVolume.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_volume,
        tracer: tracer
      )
      Telemetry::DeleteVolume.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_volume] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_volume] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_volume] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on. When you delete the VPC, it deletes the VPC's default security group, network ACL, and route table.</p>
    # @param [Hash | Types::DeleteVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpc(
    #     vpc_id: 'VpcId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpcOutput
    # @example To delete a VPC
    #   # This example deletes the specified VPC.
    #   resp = client.delete_vpc({
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def delete_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpc,
        tracer: tracer
      )
      Telemetry::DeleteVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified VPC endpoint connection notifications.</p>
    # @param [Hash | Types::DeleteVpcEndpointConnectionNotificationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpcEndpointConnectionNotificationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpc_endpoint_connection_notifications(
    #     dry_run: false,
    #     connection_notification_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpcEndpointConnectionNotificationsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def delete_vpc_endpoint_connection_notifications(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpcEndpointConnectionNotificationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpcEndpointConnectionNotifications.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpc_endpoint_connection_notifications,
        tracer: tracer
      )
      Telemetry::DeleteVpcEndpointConnectionNotifications.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoint_connection_notifications] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoint_connection_notifications] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoint_connection_notifications] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified VPC endpoint service configurations. Before you can delete
    #             an endpoint service configuration, you must reject any <code>Available</code> or
    #             <code>PendingAcceptance</code> interface endpoint connections that are attached to
    #             the service.</p>
    # @param [Hash | Types::DeleteVpcEndpointServiceConfigurationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpcEndpointServiceConfigurationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpc_endpoint_service_configurations(
    #     dry_run: false,
    #     service_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpcEndpointServiceConfigurationsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def delete_vpc_endpoint_service_configurations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpcEndpointServiceConfigurationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpcEndpointServiceConfigurations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpc_endpoint_service_configurations,
        tracer: tracer
      )
      Telemetry::DeleteVpcEndpointServiceConfigurations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoint_service_configurations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoint_service_configurations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoint_service_configurations] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified VPC endpoints.</p>
    #          <p>When you delete a gateway endpoint, we delete the endpoint routes in the route tables for the endpoint.</p>
    #          <p>When you delete a Gateway Load Balancer endpoint, we delete its endpoint network interfaces.
    #           You can only delete Gateway Load Balancer endpoints when the routes that are associated with the endpoint are deleted.</p>
    #          <p>When you delete an interface endpoint, we delete its endpoint network interfaces.</p>
    # @param [Hash | Types::DeleteVpcEndpointsInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpcEndpointsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpc_endpoints(
    #     dry_run: false,
    #     vpc_endpoint_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpcEndpointsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def delete_vpc_endpoints(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpcEndpointsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpcEndpoints.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpc_endpoints,
        tracer: tracer
      )
      Telemetry::DeleteVpcEndpoints.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoints] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoints] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_endpoints] #{output.data}")
        output
      end
    end

    # <p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner
    #             of the accepter VPC can delete the VPC peering connection if it's in the
    #                 <code>active</code> state. The owner of the requester VPC can delete a VPC peering
    #             connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering
    #           connection that's in the <code>failed</code> or <code>rejected</code> state.</p>
    # @param [Hash | Types::DeleteVpcPeeringConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpcPeeringConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpc_peering_connection(
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpcPeeringConnectionOutput
    #   resp.data.return #=> Boolean
    def delete_vpc_peering_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpcPeeringConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpcPeeringConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpc_peering_connection,
        tracer: tracer
      )
      Telemetry::DeleteVpcPeeringConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_peering_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpc_peering_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpc_peering_connection] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified VPN connection.</p>
    #          <p>If you're deleting the VPC and its associated components, we recommend that you detach
    #             the virtual private gateway from the VPC and delete the VPC before deleting the VPN
    #             connection. If you believe that the tunnel credentials for your VPN connection have been
    #             compromised, you can delete the VPN connection and create a new one that has new keys,
    #             without needing to delete the VPC or virtual private gateway. If you create a new VPN
    #             connection, you must reconfigure the customer gateway device using the new configuration
    #             information returned with the new VPN connection ID.</p>
    #          <p>For certificate-based authentication, delete all Certificate Manager (ACM) private
    #             certificates used for the Amazon Web Services-side tunnel endpoints for the VPN
    #             connection before deleting the VPN connection.</p>
    # @param [Hash | Types::DeleteVpnConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpnConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpn_connection(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpnConnectionOutput
    def delete_vpn_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpnConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpnConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpn_connection,
        tracer: tracer
      )
      Telemetry::DeleteVpnConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpn_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpn_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpn_connection] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified static route associated with a VPN connection between an
    #             existing virtual private gateway and a VPN customer gateway. The static route allows
    #             traffic to be routed from the virtual private gateway to the VPN customer
    #             gateway.</p>
    # @param [Hash | Types::DeleteVpnConnectionRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpnConnectionRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpn_connection_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     vpn_connection_id: 'VpnConnectionId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpnConnectionRouteOutput
    def delete_vpn_connection_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpnConnectionRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpnConnectionRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpn_connection_route,
        tracer: tracer
      )
      Telemetry::DeleteVpnConnectionRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpn_connection_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpn_connection_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpn_connection_route] #{output.data}")
        output
      end
    end

    # <p>Deletes the specified virtual private gateway. You must first detach the virtual
    #             private gateway from the VPC. Note that you don't need to delete the virtual private
    #             gateway if you plan to delete and recreate the VPN connection between your VPC and your
    #             network.</p>
    # @param [Hash | Types::DeleteVpnGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DeleteVpnGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.delete_vpn_gateway(
    #     vpn_gateway_id: 'VpnGatewayId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeleteVpnGatewayOutput
    def delete_vpn_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeleteVpnGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeleteVpnGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :delete_vpn_gateway,
        tracer: tracer
      )
      Telemetry::DeleteVpnGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpn_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#delete_vpn_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#delete_vpn_gateway] #{output.data}")
        output
      end
    end

    # <p>Releases the specified address range that you provisioned for use with your Amazon Web Services resources
    #          through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p>
    #          <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its
    #          address range.</p>
    # @param [Hash | Types::DeprovisionByoipCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::DeprovisionByoipCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deprovision_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeprovisionByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.asn_associations #=> Array<AsnAssociation>
    #   resp.data.byoip_cidr.asn_associations[0] #=> Types::AsnAssociation
    #   resp.data.byoip_cidr.asn_associations[0].asn #=> String
    #   resp.data.byoip_cidr.asn_associations[0].cidr #=> String
    #   resp.data.byoip_cidr.asn_associations[0].status_message #=> String
    #   resp.data.byoip_cidr.asn_associations[0].state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.byoip_cidr.network_border_group #=> String
    def deprovision_byoip_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeprovisionByoipCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeprovisionByoipCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deprovision_byoip_cidr,
        tracer: tracer
      )
      Telemetry::DeprovisionByoipCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_byoip_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deprovision_byoip_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_byoip_cidr] #{output.data}")
        output
      end
    end

    # <p>Deprovisions your Autonomous System Number (ASN) from your Amazon Web Services account. This action can only be called after any BYOIP CIDR associations are removed from your Amazon Web Services account with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIpamByoasn.html">DisassociateIpamByoasn</a>.
    #             For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
    # @param [Hash | Types::DeprovisionIpamByoasnInput] params
    #   Request parameters for this operation.
    #   See {Types::DeprovisionIpamByoasnInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deprovision_ipam_byoasn(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     asn: 'Asn' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeprovisionIpamByoasnOutput
    #   resp.data.byoasn #=> Types::Byoasn
    #   resp.data.byoasn.asn #=> String
    #   resp.data.byoasn.ipam_id #=> String
    #   resp.data.byoasn.status_message #=> String
    #   resp.data.byoasn.state #=> String, one of ["deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned"]
    def deprovision_ipam_byoasn(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeprovisionIpamByoasnInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeprovisionIpamByoasn.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deprovision_ipam_byoasn,
        tracer: tracer
      )
      Telemetry::DeprovisionIpamByoasn.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_ipam_byoasn] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deprovision_ipam_byoasn] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_ipam_byoasn] #{output.data}")
        output
      end
    end

    # <p>Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a CIDR from a pool that has a source pool, the CIDR is recycled back into the source pool. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/depro-pool-cidr-ipam.html">Deprovision pool CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    # @param [Hash | Types::DeprovisionIpamPoolCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::DeprovisionIpamPoolCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deprovision_ipam_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeprovisionIpamPoolCidrOutput
    #   resp.data.ipam_pool_cidr #=> Types::IpamPoolCidr
    #   resp.data.ipam_pool_cidr.cidr #=> String
    #   resp.data.ipam_pool_cidr.state #=> String, one of ["pending-provision", "provisioned", "failed-provision", "pending-deprovision", "deprovisioned", "failed-deprovision", "pending-import", "failed-import"]
    #   resp.data.ipam_pool_cidr.failure_reason #=> Types::IpamPoolCidrFailureReason
    #   resp.data.ipam_pool_cidr.failure_reason.code #=> String, one of ["cidr-not-available", "limit-exceeded"]
    #   resp.data.ipam_pool_cidr.failure_reason.message #=> String
    #   resp.data.ipam_pool_cidr.ipam_pool_cidr_id #=> String
    #   resp.data.ipam_pool_cidr.netmask_length #=> Integer
    def deprovision_ipam_pool_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeprovisionIpamPoolCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeprovisionIpamPoolCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deprovision_ipam_pool_cidr,
        tracer: tracer
      )
      Telemetry::DeprovisionIpamPoolCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_ipam_pool_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deprovision_ipam_pool_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_ipam_pool_cidr] #{output.data}")
        output
      end
    end

    # <p>Deprovision a CIDR from a public IPv4 pool.</p>
    # @param [Hash | Types::DeprovisionPublicIpv4PoolCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::DeprovisionPublicIpv4PoolCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deprovision_public_ipv4_pool_cidr(
    #     dry_run: false,
    #     pool_id: 'PoolId', # required
    #     cidr: 'Cidr' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeprovisionPublicIpv4PoolCidrOutput
    #   resp.data.pool_id #=> String
    #   resp.data.deprovisioned_addresses #=> Array<String>
    #   resp.data.deprovisioned_addresses[0] #=> String
    def deprovision_public_ipv4_pool_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeprovisionPublicIpv4PoolCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeprovisionPublicIpv4PoolCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deprovision_public_ipv4_pool_cidr,
        tracer: tracer
      )
      Telemetry::DeprovisionPublicIpv4PoolCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_public_ipv4_pool_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deprovision_public_ipv4_pool_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deprovision_public_ipv4_pool_cidr] #{output.data}")
        output
      end
    end

    # <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to
    #        launch new instances.</p>
    #          <p>If you deregister an AMI that matches a Recycle Bin retention rule, the AMI is retained
    #       in the Recycle Bin for the specified retention period. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle Bin</a> in
    #       the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>When you deregister an AMI, it doesn't affect any instances that you've already
    #        launched from the AMI. You'll continue to incur usage costs for those instances until
    #        you terminate them.</p>
    #          <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was
    # 			created for the root volume of the instance during the AMI creation process. When you
    # 			deregister an instance store-backed AMI, it doesn't affect the files that you uploaded
    # 			to Amazon S3 when you created the AMI.</p>
    # @param [Hash | Types::DeregisterImageInput] params
    #   Request parameters for this operation.
    #   See {Types::DeregisterImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deregister_image(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeregisterImageOutput
    def deregister_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeregisterImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeregisterImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deregister_image,
        tracer: tracer
      )
      Telemetry::DeregisterImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deregister_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_image] #{output.data}")
        output
      end
    end

    # <p>Deregisters tag keys to prevent tags that have the specified tag keys from being included
    # 			in scheduled event notifications for resources in the Region.</p>
    # @param [Hash | Types::DeregisterInstanceEventNotificationAttributesInput] params
    #   Request parameters for this operation.
    #   See {Types::DeregisterInstanceEventNotificationAttributesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deregister_instance_event_notification_attributes(
    #     dry_run: false,
    #     instance_tag_attribute: {
    #       include_all_tags_of_instance: false,
    #       instance_tag_keys: [
    #         'member'
    #       ]
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeregisterInstanceEventNotificationAttributesOutput
    #   resp.data.instance_tag_attribute #=> Types::InstanceTagNotificationAttribute
    #   resp.data.instance_tag_attribute.instance_tag_keys #=> Array<String>
    #   resp.data.instance_tag_attribute.instance_tag_keys[0] #=> String
    #   resp.data.instance_tag_attribute.include_all_tags_of_instance #=> Boolean
    def deregister_instance_event_notification_attributes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeregisterInstanceEventNotificationAttributesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeregisterInstanceEventNotificationAttributes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deregister_instance_event_notification_attributes,
        tracer: tracer
      )
      Telemetry::DeregisterInstanceEventNotificationAttributes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_instance_event_notification_attributes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deregister_instance_event_notification_attributes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_instance_event_notification_attributes] #{output.data}")
        output
      end
    end

    # <p>Deregisters the specified members (network interfaces) from the  transit gateway multicast group.</p>
    # @param [Hash | Types::DeregisterTransitGatewayMulticastGroupMembersInput] params
    #   Request parameters for this operation.
    #   See {Types::DeregisterTransitGatewayMulticastGroupMembersInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deregister_transit_gateway_multicast_group_members(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeregisterTransitGatewayMulticastGroupMembersOutput
    #   resp.data.deregistered_multicast_group_members #=> Types::TransitGatewayMulticastDeregisteredGroupMembers
    #   resp.data.deregistered_multicast_group_members.transit_gateway_multicast_domain_id #=> String
    #   resp.data.deregistered_multicast_group_members.deregistered_network_interface_ids #=> Array<String>
    #   resp.data.deregistered_multicast_group_members.deregistered_network_interface_ids[0] #=> String
    #   resp.data.deregistered_multicast_group_members.group_ip_address #=> String
    def deregister_transit_gateway_multicast_group_members(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeregisterTransitGatewayMulticastGroupMembersInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeregisterTransitGatewayMulticastGroupMembers.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deregister_transit_gateway_multicast_group_members,
        tracer: tracer
      )
      Telemetry::DeregisterTransitGatewayMulticastGroupMembers.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_transit_gateway_multicast_group_members] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deregister_transit_gateway_multicast_group_members] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_transit_gateway_multicast_group_members] #{output.data}")
        output
      end
    end

    # <p>Deregisters the specified sources (network interfaces) from the  transit gateway multicast group.</p>
    # @param [Hash | Types::DeregisterTransitGatewayMulticastGroupSourcesInput] params
    #   Request parameters for this operation.
    #   See {Types::DeregisterTransitGatewayMulticastGroupSourcesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.deregister_transit_gateway_multicast_group_sources(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DeregisterTransitGatewayMulticastGroupSourcesOutput
    #   resp.data.deregistered_multicast_group_sources #=> Types::TransitGatewayMulticastDeregisteredGroupSources
    #   resp.data.deregistered_multicast_group_sources.transit_gateway_multicast_domain_id #=> String
    #   resp.data.deregistered_multicast_group_sources.deregistered_network_interface_ids #=> Array<String>
    #   resp.data.deregistered_multicast_group_sources.deregistered_network_interface_ids[0] #=> String
    #   resp.data.deregistered_multicast_group_sources.group_ip_address #=> String
    def deregister_transit_gateway_multicast_group_sources(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DeregisterTransitGatewayMulticastGroupSourcesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DeregisterTransitGatewayMulticastGroupSources.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :deregister_transit_gateway_multicast_group_sources,
        tracer: tracer
      )
      Telemetry::DeregisterTransitGatewayMulticastGroupSources.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_transit_gateway_multicast_group_sources] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#deregister_transit_gateway_multicast_group_sources] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#deregister_transit_gateway_multicast_group_sources] #{output.data}")
        output
      end
    end

    # <p>Describes attributes of your Amazon Web Services account. The following are the supported account attributes:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>max-instances</code>: This attribute is no longer supported. The returned
    #                     value does not reflect your actual vCPU limit for running On-Demand Instances.
    #                     For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand Instance Limits</a> in the
    #                         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>supported-platforms</code>: This attribute is deprecated.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups
    #                   that you can assign to a network interface.</p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::DescribeAccountAttributesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAccountAttributesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_account_attributes(
    #     attribute_names: [
    #       'supported-platforms' # accepts ["supported-platforms", "default-vpc"]
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAccountAttributesOutput
    #   resp.data.account_attributes #=> Array<AccountAttribute>
    #   resp.data.account_attributes[0] #=> Types::AccountAttribute
    #   resp.data.account_attributes[0].attribute_name #=> String
    #   resp.data.account_attributes[0].attribute_values #=> Array<AccountAttributeValue>
    #   resp.data.account_attributes[0].attribute_values[0] #=> Types::AccountAttributeValue
    #   resp.data.account_attributes[0].attribute_values[0].attribute_value #=> String
    # @example To describe a single attribute for your AWS account
    #   # This example describes the supported-platforms attribute for your AWS account.
    #   resp = client.describe_account_attributes({
    #     attribute_names: [
    #       "supported-platforms"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     account_attributes: [
    #       {
    #         attribute_name: "supported-platforms",
    #         attribute_values: [
    #           {
    #             attribute_value: "EC2"
    #           },
    #           {
    #             attribute_value: "VPC"
    #           }
    #         ]
    #       }
    #     ]
    #   }
    # @example To describe all attributes for your AWS account
    #   resp = client.describe_account_attributes()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     account_attributes: [
    #       {
    #         attribute_name: "supported-platforms",
    #         attribute_values: [
    #           {
    #             attribute_value: "EC2"
    #           },
    #           {
    #             attribute_value: "VPC"
    #           }
    #         ]
    #       },
    #       {
    #         attribute_name: "vpc-max-security-groups-per-interface",
    #         attribute_values: [
    #           {
    #             attribute_value: "5"
    #           }
    #         ]
    #       },
    #       {
    #         attribute_name: "max-elastic-ips",
    #         attribute_values: [
    #           {
    #             attribute_value: "5"
    #           }
    #         ]
    #       },
    #       {
    #         attribute_name: "max-instances",
    #         attribute_values: [
    #           {
    #             attribute_value: "20"
    #           }
    #         ]
    #       },
    #       {
    #         attribute_name: "vpc-max-elastic-ips",
    #         attribute_values: [
    #           {
    #             attribute_value: "5"
    #           }
    #         ]
    #       },
    #       {
    #         attribute_name: "default-vpc",
    #         attribute_values: [
    #           {
    #             attribute_value: "none"
    #           }
    #         ]
    #       }
    #     ]
    #   }
    def describe_account_attributes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAccountAttributesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAccountAttributes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_account_attributes,
        tracer: tracer
      )
      Telemetry::DescribeAccountAttributes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_account_attributes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_account_attributes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_account_attributes] #{output.data}")
        output
      end
    end

    # <p>Describes an Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    #          <p>When you transfer an Elastic IP address, there is a two-step handshake
    #       between the source and transfer Amazon Web Services accounts. When the source account starts the transfer,
    #       the transfer account has seven days to accept the Elastic IP address
    #       transfer. During those seven days, the source account can view the
    #       pending transfer by using this action. After seven days, the
    #       transfer expires and ownership of the Elastic IP
    #       address returns to the source
    #       account. Accepted transfers are visible to the source account for three days
    #         after the transfers have been accepted.</p>
    # @param [Hash | Types::DescribeAddressTransfersInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAddressTransfersInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_address_transfers(
    #     allocation_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAddressTransfersOutput
    #   resp.data.address_transfers #=> Array<AddressTransfer>
    #   resp.data.address_transfers[0] #=> Types::AddressTransfer
    #   resp.data.address_transfers[0].public_ip #=> String
    #   resp.data.address_transfers[0].allocation_id #=> String
    #   resp.data.address_transfers[0].transfer_account_id #=> String
    #   resp.data.address_transfers[0].transfer_offer_expiration_timestamp #=> Time
    #   resp.data.address_transfers[0].transfer_offer_accepted_timestamp #=> Time
    #   resp.data.address_transfers[0].address_transfer_status #=> String, one of ["pending", "disabled", "accepted"]
    #   resp.data.next_token #=> String
    def describe_address_transfers(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAddressTransfersInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAddressTransfers.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_address_transfers,
        tracer: tracer
      )
      Telemetry::DescribeAddressTransfers.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_address_transfers] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_address_transfers] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_address_transfers] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p>
    # @param [Hash | Types::DescribeAddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_addresses(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     public_ips: [
    #       'member'
    #     ],
    #     allocation_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAddressesOutput
    #   resp.data.addresses #=> Array<Address>
    #   resp.data.addresses[0] #=> Types::Address
    #   resp.data.addresses[0].instance_id #=> String
    #   resp.data.addresses[0].public_ip #=> String
    #   resp.data.addresses[0].allocation_id #=> String
    #   resp.data.addresses[0].association_id #=> String
    #   resp.data.addresses[0].domain #=> String, one of ["vpc", "standard"]
    #   resp.data.addresses[0].network_interface_id #=> String
    #   resp.data.addresses[0].network_interface_owner_id #=> String
    #   resp.data.addresses[0].private_ip_address #=> String
    #   resp.data.addresses[0].tags #=> Array<Tag>
    #   resp.data.addresses[0].tags[0] #=> Types::Tag
    #   resp.data.addresses[0].tags[0].key #=> String
    #   resp.data.addresses[0].tags[0].value #=> String
    #   resp.data.addresses[0].public_ipv4_pool #=> String
    #   resp.data.addresses[0].network_border_group #=> String
    #   resp.data.addresses[0].customer_owned_ip #=> String
    #   resp.data.addresses[0].customer_owned_ipv4_pool #=> String
    #   resp.data.addresses[0].carrier_ip #=> String
    # @example To describe your Elastic IP addresses
    #   resp = client.describe_addresses()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     addresses: [
    #       {
    #         instance_id: "i-1234567890abcdef0",
    #         public_ip: "198.51.100.0",
    #         domain: "standard"
    #       },
    #       {
    #         domain: "vpc",
    #         instance_id: "i-1234567890abcdef0",
    #         network_interface_id: "eni-12345678",
    #         association_id: "eipassoc-12345678",
    #         network_interface_owner_id: "123456789012",
    #         public_ip: "203.0.113.0",
    #         allocation_id: "eipalloc-12345678",
    #         private_ip_address: "10.0.1.241"
    #       }
    #     ]
    #   }
    def describe_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAddresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_addresses,
        tracer: tracer
      )
      Telemetry::DescribeAddresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_addresses] #{output.data}")
        output
      end
    end

    # <p>Describes the attributes of the specified Elastic IP addresses. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
    # @param [Hash | Types::DescribeAddressesAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAddressesAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_addresses_attribute(
    #     allocation_ids: [
    #       'member'
    #     ],
    #     attribute: 'domain-name', # accepts ["domain-name"]
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAddressesAttributeOutput
    #   resp.data.addresses #=> Array<AddressAttribute>
    #   resp.data.addresses[0] #=> Types::AddressAttribute
    #   resp.data.addresses[0].public_ip #=> String
    #   resp.data.addresses[0].allocation_id #=> String
    #   resp.data.addresses[0].ptr_record #=> String
    #   resp.data.addresses[0].ptr_record_update #=> Types::PtrUpdateStatus
    #   resp.data.addresses[0].ptr_record_update.value #=> String
    #   resp.data.addresses[0].ptr_record_update.status #=> String
    #   resp.data.addresses[0].ptr_record_update.reason #=> String
    #   resp.data.next_token #=> String
    def describe_addresses_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAddressesAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAddressesAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_addresses_attribute,
        tracer: tracer
      )
      Telemetry::DescribeAddressesAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_addresses_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_addresses_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_addresses_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the longer ID format settings for all resource types in a specific
    #          Region. This request is useful for performing a quick audit to determine whether a
    #          specific Region is fully opted in for longer IDs (17-character IDs).</p>
    #          <p>This request only returns information about resource types that support longer IDs.</p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #         <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #         <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #         <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #         <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #         <code>network-acl</code> | <code>network-acl-association</code> |
    #         <code>network-interface</code> | <code>network-interface-attachment</code> |
    #         <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #         <code>route-table-association</code> | <code>security-group</code> |
    #         <code>snapshot</code> | <code>subnet</code> |
    #         <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> |
    #         <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #         <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    # @param [Hash | Types::DescribeAggregateIdFormatInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAggregateIdFormatInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_aggregate_id_format(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAggregateIdFormatOutput
    #   resp.data.use_long_ids_aggregated #=> Boolean
    #   resp.data.statuses #=> Array<IdFormat>
    #   resp.data.statuses[0] #=> Types::IdFormat
    #   resp.data.statuses[0].deadline #=> Time
    #   resp.data.statuses[0].resource #=> String
    #   resp.data.statuses[0].use_long_ids #=> Boolean
    def describe_aggregate_id_format(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAggregateIdFormatInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAggregateIdFormat.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_aggregate_id_format,
        tracer: tracer
      )
      Telemetry::DescribeAggregateIdFormat.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_aggregate_id_format] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_aggregate_id_format] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_aggregate_id_format] #{output.data}")
        output
      end
    end

    # <p>Describes the Availability Zones, Local Zones, and Wavelength Zones that are available to
    #       you. If there is an event impacting a zone, you can use this request to view the state and any
    #       provided messages for that zone.</p>
    #          <p>For more information about Availability Zones, Local Zones, and Wavelength Zones, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and zones</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeAvailabilityZonesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAvailabilityZonesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_availability_zones(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     zone_names: [
    #       'member'
    #     ],
    #     zone_ids: [
    #       'member'
    #     ],
    #     all_availability_zones: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAvailabilityZonesOutput
    #   resp.data.availability_zones #=> Array<AvailabilityZone>
    #   resp.data.availability_zones[0] #=> Types::AvailabilityZone
    #   resp.data.availability_zones[0].state #=> String, one of ["available", "information", "impaired", "unavailable", "constrained"]
    #   resp.data.availability_zones[0].opt_in_status #=> String, one of ["opt-in-not-required", "opted-in", "not-opted-in"]
    #   resp.data.availability_zones[0].messages #=> Array<AvailabilityZoneMessage>
    #   resp.data.availability_zones[0].messages[0] #=> Types::AvailabilityZoneMessage
    #   resp.data.availability_zones[0].messages[0].message #=> String
    #   resp.data.availability_zones[0].region_name #=> String
    #   resp.data.availability_zones[0].zone_name #=> String
    #   resp.data.availability_zones[0].zone_id #=> String
    #   resp.data.availability_zones[0].group_name #=> String
    #   resp.data.availability_zones[0].network_border_group #=> String
    #   resp.data.availability_zones[0].zone_type #=> String
    #   resp.data.availability_zones[0].parent_zone_name #=> String
    #   resp.data.availability_zones[0].parent_zone_id #=> String
    # @example To describe your Availability Zones
    #   resp = client.describe_availability_zones()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     availability_zones: [
    #       {
    #         state: "available",
    #         region_name: "us-east-1",
    #         messages: [
    #
    #         ],
    #         zone_name: "us-east-1b"
    #       },
    #       {
    #         state: "available",
    #         region_name: "us-east-1",
    #         messages: [
    #
    #         ],
    #         zone_name: "us-east-1c"
    #       },
    #       {
    #         state: "available",
    #         region_name: "us-east-1",
    #         messages: [
    #
    #         ],
    #         zone_name: "us-east-1d"
    #       },
    #       {
    #         state: "available",
    #         region_name: "us-east-1",
    #         messages: [
    #
    #         ],
    #         zone_name: "us-east-1e"
    #       }
    #     ]
    #   }
    def describe_availability_zones(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAvailabilityZonesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAvailabilityZones.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_availability_zones,
        tracer: tracer
      )
      Telemetry::DescribeAvailabilityZones.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_availability_zones] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_availability_zones] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_availability_zones] #{output.data}")
        output
      end
    end

    # <p>Describes the current Infrastructure Performance metric subscriptions.</p>
    # @param [Hash | Types::DescribeAwsNetworkPerformanceMetricSubscriptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeAwsNetworkPerformanceMetricSubscriptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_aws_network_performance_metric_subscriptions(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput
    #   resp.data.next_token #=> String
    #   resp.data.subscriptions #=> Array<Subscription>
    #   resp.data.subscriptions[0] #=> Types::Subscription
    #   resp.data.subscriptions[0].source #=> String
    #   resp.data.subscriptions[0].destination #=> String
    #   resp.data.subscriptions[0].metric #=> String, one of ["aggregate-latency"]
    #   resp.data.subscriptions[0].statistic #=> String, one of ["p50"]
    #   resp.data.subscriptions[0].period #=> String, one of ["five-minutes", "fifteen-minutes", "one-hour", "three-hours", "one-day", "one-week"]
    def describe_aws_network_performance_metric_subscriptions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeAwsNetworkPerformanceMetricSubscriptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeAwsNetworkPerformanceMetricSubscriptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_aws_network_performance_metric_subscriptions,
        tracer: tracer
      )
      Telemetry::DescribeAwsNetworkPerformanceMetricSubscriptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_aws_network_performance_metric_subscriptions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_aws_network_performance_metric_subscriptions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_aws_network_performance_metric_subscriptions] #{output.data}")
        output
      end
    end

    # <p>Describes the specified bundle tasks or all of your bundle tasks.</p>
    #          <note>
    #             <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p>
    #          </note>
    # @param [Hash | Types::DescribeBundleTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeBundleTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_bundle_tasks(
    #     bundle_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeBundleTasksOutput
    #   resp.data.bundle_tasks #=> Array<BundleTask>
    #   resp.data.bundle_tasks[0] #=> Types::BundleTask
    #   resp.data.bundle_tasks[0].bundle_id #=> String
    #   resp.data.bundle_tasks[0].bundle_task_error #=> Types::BundleTaskError
    #   resp.data.bundle_tasks[0].bundle_task_error.code #=> String
    #   resp.data.bundle_tasks[0].bundle_task_error.message #=> String
    #   resp.data.bundle_tasks[0].instance_id #=> String
    #   resp.data.bundle_tasks[0].progress #=> String
    #   resp.data.bundle_tasks[0].start_time #=> Time
    #   resp.data.bundle_tasks[0].state #=> String, one of ["pending", "waiting-for-shutdown", "bundling", "storing", "cancelling", "complete", "failed"]
    #   resp.data.bundle_tasks[0].storage #=> Types::Storage
    #   resp.data.bundle_tasks[0].storage.s3 #=> Types::S3Storage
    #   resp.data.bundle_tasks[0].storage.s3.aws_access_key_id #=> String
    #   resp.data.bundle_tasks[0].storage.s3.bucket #=> String
    #   resp.data.bundle_tasks[0].storage.s3.prefix #=> String
    #   resp.data.bundle_tasks[0].storage.s3.upload_policy #=> String
    #   resp.data.bundle_tasks[0].storage.s3.upload_policy_signature #=> String
    #   resp.data.bundle_tasks[0].update_time #=> Time
    def describe_bundle_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeBundleTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeBundleTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_bundle_tasks,
        tracer: tracer
      )
      Telemetry::DescribeBundleTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_bundle_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_bundle_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_bundle_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p>
    #          <p>To describe the address pools that were created when you provisioned the address
    #           ranges, use <a>DescribePublicIpv4Pools</a> or <a>DescribeIpv6Pools</a>.</p>
    # @param [Hash | Types::DescribeByoipCidrsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeByoipCidrsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_byoip_cidrs(
    #     dry_run: false,
    #     max_results: 1, # required
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeByoipCidrsOutput
    #   resp.data.byoip_cidrs #=> Array<ByoipCidr>
    #   resp.data.byoip_cidrs[0] #=> Types::ByoipCidr
    #   resp.data.byoip_cidrs[0].cidr #=> String
    #   resp.data.byoip_cidrs[0].description #=> String
    #   resp.data.byoip_cidrs[0].asn_associations #=> Array<AsnAssociation>
    #   resp.data.byoip_cidrs[0].asn_associations[0] #=> Types::AsnAssociation
    #   resp.data.byoip_cidrs[0].asn_associations[0].asn #=> String
    #   resp.data.byoip_cidrs[0].asn_associations[0].cidr #=> String
    #   resp.data.byoip_cidrs[0].asn_associations[0].status_message #=> String
    #   resp.data.byoip_cidrs[0].asn_associations[0].state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    #   resp.data.byoip_cidrs[0].status_message #=> String
    #   resp.data.byoip_cidrs[0].state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.byoip_cidrs[0].network_border_group #=> String
    #   resp.data.next_token #=> String
    def describe_byoip_cidrs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeByoipCidrsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeByoipCidrs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_byoip_cidrs,
        tracer: tracer
      )
      Telemetry::DescribeByoipCidrs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_byoip_cidrs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_byoip_cidrs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_byoip_cidrs] #{output.data}")
        output
      end
    end

    # <p>Describes Capacity Block offerings available for purchase. With Capacity Blocks, you purchase a specific instance type for a period of time.</p>
    # @param [Hash | Types::DescribeCapacityBlockOfferingsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeCapacityBlockOfferingsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_capacity_block_offerings(
    #     dry_run: false,
    #     instance_type: 'InstanceType', # required
    #     instance_count: 1, # required
    #     start_date_range: Time.now,
    #     end_date_range: Time.now,
    #     capacity_duration_hours: 1, # required
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeCapacityBlockOfferingsOutput
    #   resp.data.capacity_block_offerings #=> Array<CapacityBlockOffering>
    #   resp.data.capacity_block_offerings[0] #=> Types::CapacityBlockOffering
    #   resp.data.capacity_block_offerings[0].capacity_block_offering_id #=> String
    #   resp.data.capacity_block_offerings[0].instance_type #=> String
    #   resp.data.capacity_block_offerings[0].availability_zone #=> String
    #   resp.data.capacity_block_offerings[0].instance_count #=> Integer
    #   resp.data.capacity_block_offerings[0].start_date #=> Time
    #   resp.data.capacity_block_offerings[0].end_date #=> Time
    #   resp.data.capacity_block_offerings[0].capacity_block_duration_hours #=> Integer
    #   resp.data.capacity_block_offerings[0].upfront_fee #=> String
    #   resp.data.capacity_block_offerings[0].currency_code #=> String
    #   resp.data.capacity_block_offerings[0].tenancy #=> String, one of ["default", "dedicated"]
    #   resp.data.next_token #=> String
    def describe_capacity_block_offerings(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeCapacityBlockOfferingsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeCapacityBlockOfferings.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_capacity_block_offerings,
        tracer: tracer
      )
      Telemetry::DescribeCapacityBlockOfferings.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_capacity_block_offerings] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_capacity_block_offerings] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_capacity_block_offerings] #{output.data}")
        output
      end
    end

    # <p>Describes one or more Capacity Reservation Fleets.</p>
    # @param [Hash | Types::DescribeCapacityReservationFleetsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeCapacityReservationFleetsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_capacity_reservation_fleets(
    #     capacity_reservation_fleet_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeCapacityReservationFleetsOutput
    #   resp.data.capacity_reservation_fleets #=> Array<CapacityReservationFleet>
    #   resp.data.capacity_reservation_fleets[0] #=> Types::CapacityReservationFleet
    #   resp.data.capacity_reservation_fleets[0].capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservation_fleets[0].capacity_reservation_fleet_arn #=> String
    #   resp.data.capacity_reservation_fleets[0].state #=> String, one of ["submitted", "modifying", "active", "partially_fulfilled", "expiring", "expired", "cancelling", "cancelled", "failed"]
    #   resp.data.capacity_reservation_fleets[0].total_target_capacity #=> Integer
    #   resp.data.capacity_reservation_fleets[0].total_fulfilled_capacity #=> Float
    #   resp.data.capacity_reservation_fleets[0].tenancy #=> String, one of ["default"]
    #   resp.data.capacity_reservation_fleets[0].end_date #=> Time
    #   resp.data.capacity_reservation_fleets[0].create_time #=> Time
    #   resp.data.capacity_reservation_fleets[0].instance_match_criteria #=> String, one of ["open"]
    #   resp.data.capacity_reservation_fleets[0].allocation_strategy #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications #=> Array<FleetCapacityReservation>
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0] #=> Types::FleetCapacityReservation
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].capacity_reservation_id #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].availability_zone_id #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].availability_zone #=> String
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].total_instance_count #=> Integer
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].fulfilled_capacity #=> Float
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].ebs_optimized #=> Boolean
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].create_date #=> Time
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].weight #=> Float
    #   resp.data.capacity_reservation_fleets[0].instance_type_specifications[0].priority #=> Integer
    #   resp.data.capacity_reservation_fleets[0].tags #=> Array<Tag>
    #   resp.data.capacity_reservation_fleets[0].tags[0] #=> Types::Tag
    #   resp.data.capacity_reservation_fleets[0].tags[0].key #=> String
    #   resp.data.capacity_reservation_fleets[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_capacity_reservation_fleets(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeCapacityReservationFleetsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeCapacityReservationFleets.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_capacity_reservation_fleets,
        tracer: tracer
      )
      Telemetry::DescribeCapacityReservationFleets.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_capacity_reservation_fleets] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_capacity_reservation_fleets] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_capacity_reservation_fleets] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the
    # 		    	Amazon Web Services Region that you're currently using.</p>
    # @param [Hash | Types::DescribeCapacityReservationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeCapacityReservationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_capacity_reservations(
    #     capacity_reservation_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeCapacityReservationsOutput
    #   resp.data.next_token #=> String
    #   resp.data.capacity_reservations #=> Array<CapacityReservation>
    #   resp.data.capacity_reservations[0] #=> Types::CapacityReservation
    #   resp.data.capacity_reservations[0].capacity_reservation_id #=> String
    #   resp.data.capacity_reservations[0].owner_id #=> String
    #   resp.data.capacity_reservations[0].capacity_reservation_arn #=> String
    #   resp.data.capacity_reservations[0].availability_zone_id #=> String
    #   resp.data.capacity_reservations[0].instance_type #=> String
    #   resp.data.capacity_reservations[0].instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #   resp.data.capacity_reservations[0].availability_zone #=> String
    #   resp.data.capacity_reservations[0].tenancy #=> String, one of ["default", "dedicated"]
    #   resp.data.capacity_reservations[0].total_instance_count #=> Integer
    #   resp.data.capacity_reservations[0].available_instance_count #=> Integer
    #   resp.data.capacity_reservations[0].ebs_optimized #=> Boolean
    #   resp.data.capacity_reservations[0].ephemeral_storage #=> Boolean
    #   resp.data.capacity_reservations[0].state #=> String, one of ["active", "expired", "cancelled", "pending", "failed", "scheduled", "payment-pending", "payment-failed"]
    #   resp.data.capacity_reservations[0].start_date #=> Time
    #   resp.data.capacity_reservations[0].end_date #=> Time
    #   resp.data.capacity_reservations[0].end_date_type #=> String, one of ["unlimited", "limited"]
    #   resp.data.capacity_reservations[0].instance_match_criteria #=> String, one of ["open", "targeted"]
    #   resp.data.capacity_reservations[0].create_date #=> Time
    #   resp.data.capacity_reservations[0].tags #=> Array<Tag>
    #   resp.data.capacity_reservations[0].tags[0] #=> Types::Tag
    #   resp.data.capacity_reservations[0].tags[0].key #=> String
    #   resp.data.capacity_reservations[0].tags[0].value #=> String
    #   resp.data.capacity_reservations[0].outpost_arn #=> String
    #   resp.data.capacity_reservations[0].capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservations[0].placement_group_arn #=> String
    #   resp.data.capacity_reservations[0].capacity_allocations #=> Array<CapacityAllocation>
    #   resp.data.capacity_reservations[0].capacity_allocations[0] #=> Types::CapacityAllocation
    #   resp.data.capacity_reservations[0].capacity_allocations[0].allocation_type #=> String, one of ["used"]
    #   resp.data.capacity_reservations[0].capacity_allocations[0].count #=> Integer
    #   resp.data.capacity_reservations[0].reservation_type #=> String, one of ["default", "capacity-block"]
    def describe_capacity_reservations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeCapacityReservationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeCapacityReservations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_capacity_reservations,
        tracer: tracer
      )
      Telemetry::DescribeCapacityReservations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_capacity_reservations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_capacity_reservations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_capacity_reservations] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your carrier gateways.</p>
    # @param [Hash | Types::DescribeCarrierGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeCarrierGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_carrier_gateways(
    #     carrier_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeCarrierGatewaysOutput
    #   resp.data.carrier_gateways #=> Array<CarrierGateway>
    #   resp.data.carrier_gateways[0] #=> Types::CarrierGateway
    #   resp.data.carrier_gateways[0].carrier_gateway_id #=> String
    #   resp.data.carrier_gateways[0].vpc_id #=> String
    #   resp.data.carrier_gateways[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.carrier_gateways[0].owner_id #=> String
    #   resp.data.carrier_gateways[0].tags #=> Array<Tag>
    #   resp.data.carrier_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.carrier_gateways[0].tags[0].key #=> String
    #   resp.data.carrier_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_carrier_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeCarrierGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeCarrierGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_carrier_gateways,
        tracer: tracer
      )
      Telemetry::DescribeCarrierGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_carrier_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_carrier_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_carrier_gateways] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Describes one or more of your linked EC2-Classic instances. This request only returns
    # 			information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot
    # 			use this request to return information about other instances.</p>
    # @param [Hash | Types::DescribeClassicLinkInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeClassicLinkInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_classic_link_instances(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeClassicLinkInstancesOutput
    #   resp.data.instances #=> Array<ClassicLinkInstance>
    #   resp.data.instances[0] #=> Types::ClassicLinkInstance
    #   resp.data.instances[0].groups #=> Array<GroupIdentifier>
    #   resp.data.instances[0].groups[0] #=> Types::GroupIdentifier
    #   resp.data.instances[0].groups[0].group_name #=> String
    #   resp.data.instances[0].groups[0].group_id #=> String
    #   resp.data.instances[0].instance_id #=> String
    #   resp.data.instances[0].tags #=> Array<Tag>
    #   resp.data.instances[0].tags[0] #=> Types::Tag
    #   resp.data.instances[0].tags[0].key #=> String
    #   resp.data.instances[0].tags[0].value #=> String
    #   resp.data.instances[0].vpc_id #=> String
    #   resp.data.next_token #=> String
    def describe_classic_link_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeClassicLinkInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeClassicLinkInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_classic_link_instances,
        tracer: tracer
      )
      Telemetry::DescribeClassicLinkInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_classic_link_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_classic_link_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_classic_link_instances] #{output.data}")
        output
      end
    end

    # <p>Describes the authorization rules for a specified Client VPN endpoint.</p>
    # @param [Hash | Types::DescribeClientVpnAuthorizationRulesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeClientVpnAuthorizationRulesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_client_vpn_authorization_rules(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeClientVpnAuthorizationRulesOutput
    #   resp.data.authorization_rules #=> Array<AuthorizationRule>
    #   resp.data.authorization_rules[0] #=> Types::AuthorizationRule
    #   resp.data.authorization_rules[0].client_vpn_endpoint_id #=> String
    #   resp.data.authorization_rules[0].description #=> String
    #   resp.data.authorization_rules[0].group_id #=> String
    #   resp.data.authorization_rules[0].access_all #=> Boolean
    #   resp.data.authorization_rules[0].destination_cidr #=> String
    #   resp.data.authorization_rules[0].status #=> Types::ClientVpnAuthorizationRuleStatus
    #   resp.data.authorization_rules[0].status.code #=> String, one of ["authorizing", "active", "failed", "revoking"]
    #   resp.data.authorization_rules[0].status.message #=> String
    #   resp.data.next_token #=> String
    def describe_client_vpn_authorization_rules(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeClientVpnAuthorizationRulesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeClientVpnAuthorizationRules.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_client_vpn_authorization_rules,
        tracer: tracer
      )
      Telemetry::DescribeClientVpnAuthorizationRules.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_authorization_rules] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_authorization_rules] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_authorization_rules] #{output.data}")
        output
      end
    end

    # <p>Describes active client connections and connections that have been terminated within the last 60
    # 			minutes for the specified Client VPN endpoint.</p>
    # @param [Hash | Types::DescribeClientVpnConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeClientVpnConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_client_vpn_connections(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeClientVpnConnectionsOutput
    #   resp.data.connections #=> Array<ClientVpnConnection>
    #   resp.data.connections[0] #=> Types::ClientVpnConnection
    #   resp.data.connections[0].client_vpn_endpoint_id #=> String
    #   resp.data.connections[0].timestamp #=> String
    #   resp.data.connections[0].connection_id #=> String
    #   resp.data.connections[0].username #=> String
    #   resp.data.connections[0].connection_established_time #=> String
    #   resp.data.connections[0].ingress_bytes #=> String
    #   resp.data.connections[0].egress_bytes #=> String
    #   resp.data.connections[0].ingress_packets #=> String
    #   resp.data.connections[0].egress_packets #=> String
    #   resp.data.connections[0].client_ip #=> String
    #   resp.data.connections[0].common_name #=> String
    #   resp.data.connections[0].status #=> Types::ClientVpnConnectionStatus
    #   resp.data.connections[0].status.code #=> String, one of ["active", "failed-to-terminate", "terminating", "terminated"]
    #   resp.data.connections[0].status.message #=> String
    #   resp.data.connections[0].connection_end_time #=> String
    #   resp.data.connections[0].posture_compliance_statuses #=> Array<String>
    #   resp.data.connections[0].posture_compliance_statuses[0] #=> String
    #   resp.data.next_token #=> String
    def describe_client_vpn_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeClientVpnConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeClientVpnConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_client_vpn_connections,
        tracer: tracer
      )
      Telemetry::DescribeClientVpnConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_connections] #{output.data}")
        output
      end
    end

    # <p>Describes one or more Client VPN endpoints in the account.</p>
    # @param [Hash | Types::DescribeClientVpnEndpointsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeClientVpnEndpointsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_client_vpn_endpoints(
    #     client_vpn_endpoint_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeClientVpnEndpointsOutput
    #   resp.data.client_vpn_endpoints #=> Array<ClientVpnEndpoint>
    #   resp.data.client_vpn_endpoints[0] #=> Types::ClientVpnEndpoint
    #   resp.data.client_vpn_endpoints[0].client_vpn_endpoint_id #=> String
    #   resp.data.client_vpn_endpoints[0].description #=> String
    #   resp.data.client_vpn_endpoints[0].status #=> Types::ClientVpnEndpointStatus
    #   resp.data.client_vpn_endpoints[0].status.code #=> String, one of ["pending-associate", "available", "deleting", "deleted"]
    #   resp.data.client_vpn_endpoints[0].status.message #=> String
    #   resp.data.client_vpn_endpoints[0].creation_time #=> String
    #   resp.data.client_vpn_endpoints[0].deletion_time #=> String
    #   resp.data.client_vpn_endpoints[0].dns_name #=> String
    #   resp.data.client_vpn_endpoints[0].client_cidr_block #=> String
    #   resp.data.client_vpn_endpoints[0].dns_servers #=> Array<String>
    #   resp.data.client_vpn_endpoints[0].dns_servers[0] #=> String
    #   resp.data.client_vpn_endpoints[0].split_tunnel #=> Boolean
    #   resp.data.client_vpn_endpoints[0].vpn_protocol #=> String, one of ["openvpn"]
    #   resp.data.client_vpn_endpoints[0].transport_protocol #=> String, one of ["tcp", "udp"]
    #   resp.data.client_vpn_endpoints[0].vpn_port #=> Integer
    #   resp.data.client_vpn_endpoints[0].associated_target_networks #=> Array<AssociatedTargetNetwork>
    #   resp.data.client_vpn_endpoints[0].associated_target_networks[0] #=> Types::AssociatedTargetNetwork
    #   resp.data.client_vpn_endpoints[0].associated_target_networks[0].network_id #=> String
    #   resp.data.client_vpn_endpoints[0].associated_target_networks[0].network_type #=> String, one of ["vpc"]
    #   resp.data.client_vpn_endpoints[0].server_certificate_arn #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options #=> Array<ClientVpnAuthentication>
    #   resp.data.client_vpn_endpoints[0].authentication_options[0] #=> Types::ClientVpnAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].type #=> String, one of ["certificate-authentication", "directory-service-authentication", "federated-authentication"]
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].active_directory #=> Types::DirectoryServiceAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].active_directory.directory_id #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].mutual_authentication #=> Types::CertificateAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].mutual_authentication.client_root_certificate_chain #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].federated_authentication #=> Types::FederatedAuthentication
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].federated_authentication.saml_provider_arn #=> String
    #   resp.data.client_vpn_endpoints[0].authentication_options[0].federated_authentication.self_service_saml_provider_arn #=> String
    #   resp.data.client_vpn_endpoints[0].connection_log_options #=> Types::ConnectionLogResponseOptions
    #   resp.data.client_vpn_endpoints[0].connection_log_options.enabled #=> Boolean
    #   resp.data.client_vpn_endpoints[0].connection_log_options.cloudwatch_log_group #=> String
    #   resp.data.client_vpn_endpoints[0].connection_log_options.cloudwatch_log_stream #=> String
    #   resp.data.client_vpn_endpoints[0].tags #=> Array<Tag>
    #   resp.data.client_vpn_endpoints[0].tags[0] #=> Types::Tag
    #   resp.data.client_vpn_endpoints[0].tags[0].key #=> String
    #   resp.data.client_vpn_endpoints[0].tags[0].value #=> String
    #   resp.data.client_vpn_endpoints[0].security_group_ids #=> Array<String>
    #   resp.data.client_vpn_endpoints[0].security_group_ids[0] #=> String
    #   resp.data.client_vpn_endpoints[0].vpc_id #=> String
    #   resp.data.client_vpn_endpoints[0].self_service_portal_url #=> String
    #   resp.data.client_vpn_endpoints[0].client_connect_options #=> Types::ClientConnectResponseOptions
    #   resp.data.client_vpn_endpoints[0].client_connect_options.enabled #=> Boolean
    #   resp.data.client_vpn_endpoints[0].client_connect_options.lambda_function_arn #=> String
    #   resp.data.client_vpn_endpoints[0].client_connect_options.status #=> Types::ClientVpnEndpointAttributeStatus
    #   resp.data.client_vpn_endpoints[0].client_connect_options.status.code #=> String, one of ["applying", "applied"]
    #   resp.data.client_vpn_endpoints[0].client_connect_options.status.message #=> String
    #   resp.data.client_vpn_endpoints[0].session_timeout_hours #=> Integer
    #   resp.data.client_vpn_endpoints[0].client_login_banner_options #=> Types::ClientLoginBannerResponseOptions
    #   resp.data.client_vpn_endpoints[0].client_login_banner_options.enabled #=> Boolean
    #   resp.data.client_vpn_endpoints[0].client_login_banner_options.banner_text #=> String
    #   resp.data.next_token #=> String
    def describe_client_vpn_endpoints(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeClientVpnEndpointsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeClientVpnEndpoints.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_client_vpn_endpoints,
        tracer: tracer
      )
      Telemetry::DescribeClientVpnEndpoints.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_endpoints] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_endpoints] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_endpoints] #{output.data}")
        output
      end
    end

    # <p>Describes the routes for the specified Client VPN endpoint.</p>
    # @param [Hash | Types::DescribeClientVpnRoutesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeClientVpnRoutesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_client_vpn_routes(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeClientVpnRoutesOutput
    #   resp.data.routes #=> Array<ClientVpnRoute>
    #   resp.data.routes[0] #=> Types::ClientVpnRoute
    #   resp.data.routes[0].client_vpn_endpoint_id #=> String
    #   resp.data.routes[0].destination_cidr #=> String
    #   resp.data.routes[0].target_subnet #=> String
    #   resp.data.routes[0].type #=> String
    #   resp.data.routes[0].origin #=> String
    #   resp.data.routes[0].status #=> Types::ClientVpnRouteStatus
    #   resp.data.routes[0].status.code #=> String, one of ["creating", "active", "failed", "deleting"]
    #   resp.data.routes[0].status.message #=> String
    #   resp.data.routes[0].description #=> String
    #   resp.data.next_token #=> String
    def describe_client_vpn_routes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeClientVpnRoutesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeClientVpnRoutes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_client_vpn_routes,
        tracer: tracer
      )
      Telemetry::DescribeClientVpnRoutes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_routes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_routes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_routes] #{output.data}")
        output
      end
    end

    # <p>Describes the target networks associated with the specified Client VPN endpoint.</p>
    # @param [Hash | Types::DescribeClientVpnTargetNetworksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeClientVpnTargetNetworksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_client_vpn_target_networks(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     association_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeClientVpnTargetNetworksOutput
    #   resp.data.client_vpn_target_networks #=> Array<TargetNetwork>
    #   resp.data.client_vpn_target_networks[0] #=> Types::TargetNetwork
    #   resp.data.client_vpn_target_networks[0].association_id #=> String
    #   resp.data.client_vpn_target_networks[0].vpc_id #=> String
    #   resp.data.client_vpn_target_networks[0].target_network_id #=> String
    #   resp.data.client_vpn_target_networks[0].client_vpn_endpoint_id #=> String
    #   resp.data.client_vpn_target_networks[0].status #=> Types::AssociationStatus
    #   resp.data.client_vpn_target_networks[0].status.code #=> String, one of ["associating", "associated", "association-failed", "disassociating", "disassociated"]
    #   resp.data.client_vpn_target_networks[0].status.message #=> String
    #   resp.data.client_vpn_target_networks[0].security_groups #=> Array<String>
    #   resp.data.client_vpn_target_networks[0].security_groups[0] #=> String
    #   resp.data.next_token #=> String
    def describe_client_vpn_target_networks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeClientVpnTargetNetworksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeClientVpnTargetNetworks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_client_vpn_target_networks,
        tracer: tracer
      )
      Telemetry::DescribeClientVpnTargetNetworks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_target_networks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_target_networks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_client_vpn_target_networks] #{output.data}")
        output
      end
    end

    # <p>Describes the specified customer-owned address pools or all of your customer-owned address pools.</p>
    # @param [Hash | Types::DescribeCoipPoolsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeCoipPoolsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_coip_pools(
    #     pool_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeCoipPoolsOutput
    #   resp.data.coip_pools #=> Array<CoipPool>
    #   resp.data.coip_pools[0] #=> Types::CoipPool
    #   resp.data.coip_pools[0].pool_id #=> String
    #   resp.data.coip_pools[0].pool_cidrs #=> Array<String>
    #   resp.data.coip_pools[0].pool_cidrs[0] #=> String
    #   resp.data.coip_pools[0].local_gateway_route_table_id #=> String
    #   resp.data.coip_pools[0].tags #=> Array<Tag>
    #   resp.data.coip_pools[0].tags[0] #=> Types::Tag
    #   resp.data.coip_pools[0].tags[0].key #=> String
    #   resp.data.coip_pools[0].tags[0].value #=> String
    #   resp.data.coip_pools[0].pool_arn #=> String
    #   resp.data.next_token #=> String
    def describe_coip_pools(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeCoipPoolsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeCoipPools.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_coip_pools,
        tracer: tracer
      )
      Telemetry::DescribeCoipPools.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_coip_pools] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_coip_pools] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_coip_pools] #{output.data}")
        output
      end
    end

    # <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the
    #    <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p>
    #          <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    # @param [Hash | Types::DescribeConversionTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeConversionTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_conversion_tasks(
    #     conversion_task_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeConversionTasksOutput
    #   resp.data.conversion_tasks #=> Array<ConversionTask>
    #   resp.data.conversion_tasks[0] #=> Types::ConversionTask
    #   resp.data.conversion_tasks[0].conversion_task_id #=> String
    #   resp.data.conversion_tasks[0].expiration_time #=> String
    #   resp.data.conversion_tasks[0].import_instance #=> Types::ImportInstanceTaskDetails
    #   resp.data.conversion_tasks[0].import_instance.description #=> String
    #   resp.data.conversion_tasks[0].import_instance.instance_id #=> String
    #   resp.data.conversion_tasks[0].import_instance.platform #=> String, one of ["Windows"]
    #   resp.data.conversion_tasks[0].import_instance.volumes #=> Array<ImportInstanceVolumeDetailItem>
    #   resp.data.conversion_tasks[0].import_instance.volumes[0] #=> Types::ImportInstanceVolumeDetailItem
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].availability_zone #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].bytes_converted #=> Integer
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].description #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image #=> Types::DiskImageDescription
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.checksum #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.import_manifest_url #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].image.size #=> Integer
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].status #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].status_message #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].volume.id #=> String
    #   resp.data.conversion_tasks[0].import_instance.volumes[0].volume.size #=> Integer
    #   resp.data.conversion_tasks[0].import_volume #=> Types::ImportVolumeTaskDetails
    #   resp.data.conversion_tasks[0].import_volume.availability_zone #=> String
    #   resp.data.conversion_tasks[0].import_volume.bytes_converted #=> Integer
    #   resp.data.conversion_tasks[0].import_volume.description #=> String
    #   resp.data.conversion_tasks[0].import_volume.image #=> Types::DiskImageDescription
    #   resp.data.conversion_tasks[0].import_volume.volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_tasks[0].state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.conversion_tasks[0].status_message #=> String
    #   resp.data.conversion_tasks[0].tags #=> Array<Tag>
    #   resp.data.conversion_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.conversion_tasks[0].tags[0].key #=> String
    #   resp.data.conversion_tasks[0].tags[0].value #=> String
    def describe_conversion_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeConversionTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeConversionTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_conversion_tasks,
        tracer: tracer
      )
      Telemetry::DescribeConversionTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_conversion_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_conversion_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_conversion_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your VPN customer gateways.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::DescribeCustomerGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeCustomerGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_customer_gateways(
    #     customer_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeCustomerGatewaysOutput
    #   resp.data.customer_gateways #=> Array<CustomerGateway>
    #   resp.data.customer_gateways[0] #=> Types::CustomerGateway
    #   resp.data.customer_gateways[0].bgp_asn #=> String
    #   resp.data.customer_gateways[0].customer_gateway_id #=> String
    #   resp.data.customer_gateways[0].ip_address #=> String
    #   resp.data.customer_gateways[0].certificate_arn #=> String
    #   resp.data.customer_gateways[0].state #=> String
    #   resp.data.customer_gateways[0].type #=> String
    #   resp.data.customer_gateways[0].device_name #=> String
    #   resp.data.customer_gateways[0].tags #=> Array<Tag>
    #   resp.data.customer_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.customer_gateways[0].tags[0].key #=> String
    #   resp.data.customer_gateways[0].tags[0].value #=> String
    # @example To describe a customer gateway
    #   # This example describes the specified customer gateway.
    #   resp = client.describe_customer_gateways({
    #     customer_gateway_ids: [
    #       "cgw-0e11f167"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     customer_gateways: [
    #       {
    #         customer_gateway_id: "cgw-0e11f167",
    #         ip_address: "12.1.2.3",
    #         state: "available",
    #         type: "ipsec.1",
    #         bgp_asn: "65534"
    #       }
    #     ]
    #   }
    def describe_customer_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeCustomerGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeCustomerGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_customer_gateways,
        tracer: tracer
      )
      Telemetry::DescribeCustomerGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_customer_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_customer_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_customer_gateways] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your DHCP options sets.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::DescribeDhcpOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeDhcpOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_dhcp_options(
    #     dhcp_options_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeDhcpOptionsOutput
    #   resp.data.dhcp_options #=> Array<DhcpOptions>
    #   resp.data.dhcp_options[0] #=> Types::DhcpOptions
    #   resp.data.dhcp_options[0].dhcp_configurations #=> Array<DhcpConfiguration>
    #   resp.data.dhcp_options[0].dhcp_configurations[0] #=> Types::DhcpConfiguration
    #   resp.data.dhcp_options[0].dhcp_configurations[0].key #=> String
    #   resp.data.dhcp_options[0].dhcp_configurations[0].values #=> Array<AttributeValue>
    #   resp.data.dhcp_options[0].dhcp_configurations[0].values[0] #=> Types::AttributeValue
    #   resp.data.dhcp_options[0].dhcp_configurations[0].values[0].value #=> String
    #   resp.data.dhcp_options[0].dhcp_options_id #=> String
    #   resp.data.dhcp_options[0].owner_id #=> String
    #   resp.data.dhcp_options[0].tags #=> Array<Tag>
    #   resp.data.dhcp_options[0].tags[0] #=> Types::Tag
    #   resp.data.dhcp_options[0].tags[0].key #=> String
    #   resp.data.dhcp_options[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    # @example To describe a DHCP options set
    #   # This example describes the specified DHCP options set.
    #   resp = client.describe_dhcp_options({
    #     dhcp_options_ids: [
    #       "dopt-d9070ebb"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     dhcp_options: [
    #       {
    #         dhcp_configurations: [
    #           {
    #             values: [
    #               {
    #                 value: "10.2.5.2"
    #               },
    #               {
    #                 value: "10.2.5.1"
    #               }
    #             ],
    #             key: "domain-name-servers"
    #           }
    #         ],
    #         dhcp_options_id: "dopt-d9070ebb"
    #       }
    #     ]
    #   }
    def describe_dhcp_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeDhcpOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeDhcpOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_dhcp_options,
        tracer: tracer
      )
      Telemetry::DescribeDhcpOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_dhcp_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_dhcp_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_dhcp_options] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your egress-only internet gateways.</p>
    # @param [Hash | Types::DescribeEgressOnlyInternetGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeEgressOnlyInternetGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_egress_only_internet_gateways(
    #     dry_run: false,
    #     egress_only_internet_gateway_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeEgressOnlyInternetGatewaysOutput
    #   resp.data.egress_only_internet_gateways #=> Array<EgressOnlyInternetGateway>
    #   resp.data.egress_only_internet_gateways[0] #=> Types::EgressOnlyInternetGateway
    #   resp.data.egress_only_internet_gateways[0].attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.egress_only_internet_gateways[0].attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.egress_only_internet_gateways[0].attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.egress_only_internet_gateways[0].attachments[0].vpc_id #=> String
    #   resp.data.egress_only_internet_gateways[0].egress_only_internet_gateway_id #=> String
    #   resp.data.egress_only_internet_gateways[0].tags #=> Array<Tag>
    #   resp.data.egress_only_internet_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.egress_only_internet_gateways[0].tags[0].key #=> String
    #   resp.data.egress_only_internet_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_egress_only_internet_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeEgressOnlyInternetGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeEgressOnlyInternetGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_egress_only_internet_gateways,
        tracer: tracer
      )
      Telemetry::DescribeEgressOnlyInternetGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_egress_only_internet_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_egress_only_internet_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_egress_only_internet_gateways] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>Amazon Elastic Graphics reached end of life on January 8, 2024. For
    #                 workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad,
    #                 G4dn, or G5 instances.</p>
    #          </note>
    #          <p>Describes the Elastic Graphics accelerator associated with your instances. For more information
    #             about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.</p>
    # @param [Hash | Types::DescribeElasticGpusInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeElasticGpusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_elastic_gpus(
    #     elastic_gpu_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeElasticGpusOutput
    #   resp.data.elastic_gpu_set #=> Array<ElasticGpus>
    #   resp.data.elastic_gpu_set[0] #=> Types::ElasticGpus
    #   resp.data.elastic_gpu_set[0].elastic_gpu_id #=> String
    #   resp.data.elastic_gpu_set[0].availability_zone #=> String
    #   resp.data.elastic_gpu_set[0].elastic_gpu_type #=> String
    #   resp.data.elastic_gpu_set[0].elastic_gpu_health #=> Types::ElasticGpuHealth
    #   resp.data.elastic_gpu_set[0].elastic_gpu_health.status #=> String, one of ["OK", "IMPAIRED"]
    #   resp.data.elastic_gpu_set[0].elastic_gpu_state #=> String, one of ["ATTACHED"]
    #   resp.data.elastic_gpu_set[0].instance_id #=> String
    #   resp.data.elastic_gpu_set[0].tags #=> Array<Tag>
    #   resp.data.elastic_gpu_set[0].tags[0] #=> Types::Tag
    #   resp.data.elastic_gpu_set[0].tags[0].key #=> String
    #   resp.data.elastic_gpu_set[0].tags[0].value #=> String
    #   resp.data.max_results #=> Integer
    #   resp.data.next_token #=> String
    def describe_elastic_gpus(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeElasticGpusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeElasticGpus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_elastic_gpus,
        tracer: tracer
      )
      Telemetry::DescribeElasticGpus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_elastic_gpus] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_elastic_gpus] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_elastic_gpus] #{output.data}")
        output
      end
    end

    # <p>Describes the specified export image tasks or all of your export image tasks.</p>
    # @param [Hash | Types::DescribeExportImageTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeExportImageTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_export_image_tasks(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     export_image_task_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeExportImageTasksOutput
    #   resp.data.export_image_tasks #=> Array<ExportImageTask>
    #   resp.data.export_image_tasks[0] #=> Types::ExportImageTask
    #   resp.data.export_image_tasks[0].description #=> String
    #   resp.data.export_image_tasks[0].export_image_task_id #=> String
    #   resp.data.export_image_tasks[0].image_id #=> String
    #   resp.data.export_image_tasks[0].progress #=> String
    #   resp.data.export_image_tasks[0].s3_export_location #=> Types::ExportTaskS3Location
    #   resp.data.export_image_tasks[0].s3_export_location.s3_bucket #=> String
    #   resp.data.export_image_tasks[0].s3_export_location.s3_prefix #=> String
    #   resp.data.export_image_tasks[0].status #=> String
    #   resp.data.export_image_tasks[0].status_message #=> String
    #   resp.data.export_image_tasks[0].tags #=> Array<Tag>
    #   resp.data.export_image_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.export_image_tasks[0].tags[0].key #=> String
    #   resp.data.export_image_tasks[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_export_image_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeExportImageTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeExportImageTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_export_image_tasks,
        tracer: tracer
      )
      Telemetry::DescribeExportImageTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_export_image_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_export_image_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_export_image_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes the specified export instance tasks or all of your export instance tasks.</p>
    # @param [Hash | Types::DescribeExportTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeExportTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_export_tasks(
    #     export_task_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeExportTasksOutput
    #   resp.data.export_tasks #=> Array<ExportTask>
    #   resp.data.export_tasks[0] #=> Types::ExportTask
    #   resp.data.export_tasks[0].description #=> String
    #   resp.data.export_tasks[0].export_task_id #=> String
    #   resp.data.export_tasks[0].export_to_s3_task #=> Types::ExportToS3Task
    #   resp.data.export_tasks[0].export_to_s3_task.container_format #=> String, one of ["ova"]
    #   resp.data.export_tasks[0].export_to_s3_task.disk_image_format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.export_tasks[0].export_to_s3_task.s3_bucket #=> String
    #   resp.data.export_tasks[0].export_to_s3_task.s3_key #=> String
    #   resp.data.export_tasks[0].instance_export_details #=> Types::InstanceExportDetails
    #   resp.data.export_tasks[0].instance_export_details.instance_id #=> String
    #   resp.data.export_tasks[0].instance_export_details.target_environment #=> String, one of ["citrix", "vmware", "microsoft"]
    #   resp.data.export_tasks[0].state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.export_tasks[0].status_message #=> String
    #   resp.data.export_tasks[0].tags #=> Array<Tag>
    #   resp.data.export_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.export_tasks[0].tags[0].key #=> String
    #   resp.data.export_tasks[0].tags[0].value #=> String
    def describe_export_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeExportTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeExportTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_export_tasks,
        tracer: tracer
      )
      Telemetry::DescribeExportTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_export_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_export_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_export_tasks] #{output.data}")
        output
      end
    end

    # <p>Describe details for Windows AMIs that are configured for Windows fast launch.</p>
    # @param [Hash | Types::DescribeFastLaunchImagesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFastLaunchImagesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fast_launch_images(
    #     image_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFastLaunchImagesOutput
    #   resp.data.fast_launch_images #=> Array<DescribeFastLaunchImagesSuccessItem>
    #   resp.data.fast_launch_images[0] #=> Types::DescribeFastLaunchImagesSuccessItem
    #   resp.data.fast_launch_images[0].image_id #=> String
    #   resp.data.fast_launch_images[0].resource_type #=> String, one of ["snapshot"]
    #   resp.data.fast_launch_images[0].snapshot_configuration #=> Types::FastLaunchSnapshotConfigurationResponse
    #   resp.data.fast_launch_images[0].snapshot_configuration.target_resource_count #=> Integer
    #   resp.data.fast_launch_images[0].launch_template #=> Types::FastLaunchLaunchTemplateSpecificationResponse
    #   resp.data.fast_launch_images[0].launch_template.launch_template_id #=> String
    #   resp.data.fast_launch_images[0].launch_template.launch_template_name #=> String
    #   resp.data.fast_launch_images[0].launch_template.version #=> String
    #   resp.data.fast_launch_images[0].max_parallel_launches #=> Integer
    #   resp.data.fast_launch_images[0].owner_id #=> String
    #   resp.data.fast_launch_images[0].state #=> String, one of ["enabling", "enabling-failed", "enabled", "enabled-failed", "disabling", "disabling-failed"]
    #   resp.data.fast_launch_images[0].state_transition_reason #=> String
    #   resp.data.fast_launch_images[0].state_transition_time #=> Time
    #   resp.data.next_token #=> String
    def describe_fast_launch_images(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFastLaunchImagesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFastLaunchImages.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fast_launch_images,
        tracer: tracer
      )
      Telemetry::DescribeFastLaunchImages.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fast_launch_images] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fast_launch_images] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fast_launch_images] #{output.data}")
        output
      end
    end

    # <p>Describes the state of fast snapshot restores for your snapshots.</p>
    # @param [Hash | Types::DescribeFastSnapshotRestoresInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFastSnapshotRestoresInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fast_snapshot_restores(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFastSnapshotRestoresOutput
    #   resp.data.fast_snapshot_restores #=> Array<DescribeFastSnapshotRestoreSuccessItem>
    #   resp.data.fast_snapshot_restores[0] #=> Types::DescribeFastSnapshotRestoreSuccessItem
    #   resp.data.fast_snapshot_restores[0].snapshot_id #=> String
    #   resp.data.fast_snapshot_restores[0].availability_zone #=> String
    #   resp.data.fast_snapshot_restores[0].state #=> String, one of ["enabling", "optimizing", "enabled", "disabling", "disabled"]
    #   resp.data.fast_snapshot_restores[0].state_transition_reason #=> String
    #   resp.data.fast_snapshot_restores[0].owner_id #=> String
    #   resp.data.fast_snapshot_restores[0].owner_alias #=> String
    #   resp.data.fast_snapshot_restores[0].enabling_time #=> Time
    #   resp.data.fast_snapshot_restores[0].optimizing_time #=> Time
    #   resp.data.fast_snapshot_restores[0].enabled_time #=> Time
    #   resp.data.fast_snapshot_restores[0].disabling_time #=> Time
    #   resp.data.fast_snapshot_restores[0].disabled_time #=> Time
    #   resp.data.next_token #=> String
    def describe_fast_snapshot_restores(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFastSnapshotRestoresInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFastSnapshotRestores.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fast_snapshot_restores,
        tracer: tracer
      )
      Telemetry::DescribeFastSnapshotRestores.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fast_snapshot_restores] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fast_snapshot_restores] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fast_snapshot_restores] #{output.data}")
        output
      end
    end

    # <p>Describes the events for the specified EC2 Fleet during the specified time.</p>
    #          <p>EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures
    #          that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events
    #          are available for 48 hours.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor fleet events using Amazon EventBridge</a> in the
    #             <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeFleetHistoryInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFleetHistoryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fleet_history(
    #     dry_run: false,
    #     event_type: 'instance-change', # accepts ["instance-change", "fleet-change", "service-error"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     fleet_id: 'FleetId', # required
    #     start_time: Time.now # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFleetHistoryOutput
    #   resp.data.history_records #=> Array<HistoryRecordEntry>
    #   resp.data.history_records[0] #=> Types::HistoryRecordEntry
    #   resp.data.history_records[0].event_information #=> Types::EventInformation
    #   resp.data.history_records[0].event_information.event_description #=> String
    #   resp.data.history_records[0].event_information.event_sub_type #=> String
    #   resp.data.history_records[0].event_information.instance_id #=> String
    #   resp.data.history_records[0].event_type #=> String, one of ["instance-change", "fleet-change", "service-error"]
    #   resp.data.history_records[0].timestamp #=> Time
    #   resp.data.last_evaluated_time #=> Time
    #   resp.data.next_token #=> String
    #   resp.data.fleet_id #=> String
    #   resp.data.start_time #=> Time
    def describe_fleet_history(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFleetHistoryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFleetHistory.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fleet_history,
        tracer: tracer
      )
      Telemetry::DescribeFleetHistory.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fleet_history] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fleet_history] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fleet_history] #{output.data}")
        output
      end
    end

    # <p>Describes the running instances for the specified EC2 Fleet.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#monitor-ec2-fleet">Monitor your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeFleetInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFleetInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fleet_instances(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     fleet_id: 'FleetId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFleetInstancesOutput
    #   resp.data.active_instances #=> Array<ActiveInstance>
    #   resp.data.active_instances[0] #=> Types::ActiveInstance
    #   resp.data.active_instances[0].instance_id #=> String
    #   resp.data.active_instances[0].instance_type #=> String
    #   resp.data.active_instances[0].spot_instance_request_id #=> String
    #   resp.data.active_instances[0].instance_health #=> String, one of ["healthy", "unhealthy"]
    #   resp.data.next_token #=> String
    #   resp.data.fleet_id #=> String
    def describe_fleet_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFleetInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFleetInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fleet_instances,
        tracer: tracer
      )
      Telemetry::DescribeFleetInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fleet_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fleet_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fleet_instances] #{output.data}")
        output
      end
    end

    # <p>Describes the specified EC2 Fleets or all of your EC2 Fleets.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#monitor-ec2-fleet">Monitor your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeFleetsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFleetsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fleets(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     fleet_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFleetsOutput
    #   resp.data.next_token #=> String
    #   resp.data.fleets #=> Array<FleetData>
    #   resp.data.fleets[0] #=> Types::FleetData
    #   resp.data.fleets[0].activity_status #=> String, one of ["error", "pending_fulfillment", "pending_termination", "fulfilled"]
    #   resp.data.fleets[0].create_time #=> Time
    #   resp.data.fleets[0].fleet_id #=> String
    #   resp.data.fleets[0].fleet_state #=> String, one of ["submitted", "active", "deleted", "failed", "deleted_running", "deleted_terminating", "modifying"]
    #   resp.data.fleets[0].client_token #=> String
    #   resp.data.fleets[0].excess_capacity_termination_policy #=> String, one of ["no-termination", "termination"]
    #   resp.data.fleets[0].fulfilled_capacity #=> Float
    #   resp.data.fleets[0].fulfilled_on_demand_capacity #=> Float
    #   resp.data.fleets[0].launch_template_configs #=> Array<FleetLaunchTemplateConfig>
    #   resp.data.fleets[0].launch_template_configs[0] #=> Types::FleetLaunchTemplateConfig
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification.launch_template_id #=> String
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification.launch_template_name #=> String
    #   resp.data.fleets[0].launch_template_configs[0].launch_template_specification.version #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides #=> Array<FleetLaunchTemplateOverrides>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0] #=> Types::FleetLaunchTemplateOverrides
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].max_price #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].subnet_id #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].availability_zone #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].weighted_capacity #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].priority #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].placement #=> Types::PlacementResponse
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].placement.group_name #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements #=> Types::InstanceRequirements
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.instance_generations #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_manufacturers[0] #=> String, one of ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_names[0] #=> String, one of ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_bandwidth_gbps #=> Types::NetworkBandwidthGbps
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_bandwidth_gbps.min #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.network_bandwidth_gbps.max #=> Float
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.allowed_instance_types #=> Array<String>
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.allowed_instance_types[0] #=> String
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].instance_requirements.max_spot_price_as_percentage_of_optimal_on_demand_price #=> Integer
    #   resp.data.fleets[0].launch_template_configs[0].overrides[0].image_id #=> String
    #   resp.data.fleets[0].target_capacity_specification #=> Types::TargetCapacitySpecification
    #   resp.data.fleets[0].target_capacity_specification.total_target_capacity #=> Integer
    #   resp.data.fleets[0].target_capacity_specification.on_demand_target_capacity #=> Integer
    #   resp.data.fleets[0].target_capacity_specification.spot_target_capacity #=> Integer
    #   resp.data.fleets[0].target_capacity_specification.default_target_capacity_type #=> String, one of ["spot", "on-demand", "capacity-block"]
    #   resp.data.fleets[0].target_capacity_specification.target_capacity_unit_type #=> String, one of ["vcpu", "memory-mib", "units"]
    #   resp.data.fleets[0].terminate_instances_with_expiration #=> Boolean
    #   resp.data.fleets[0].type #=> String, one of ["request", "maintain", "instant"]
    #   resp.data.fleets[0].valid_from #=> Time
    #   resp.data.fleets[0].valid_until #=> Time
    #   resp.data.fleets[0].replace_unhealthy_instances #=> Boolean
    #   resp.data.fleets[0].spot_options #=> Types::SpotOptions
    #   resp.data.fleets[0].spot_options.allocation_strategy #=> String, one of ["lowest-price", "diversified", "capacity-optimized", "capacity-optimized-prioritized", "price-capacity-optimized"]
    #   resp.data.fleets[0].spot_options.maintenance_strategies #=> Types::FleetSpotMaintenanceStrategies
    #   resp.data.fleets[0].spot_options.maintenance_strategies.capacity_rebalance #=> Types::FleetSpotCapacityRebalance
    #   resp.data.fleets[0].spot_options.maintenance_strategies.capacity_rebalance.replacement_strategy #=> String, one of ["launch", "launch-before-terminate"]
    #   resp.data.fleets[0].spot_options.maintenance_strategies.capacity_rebalance.termination_delay #=> Integer
    #   resp.data.fleets[0].spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.fleets[0].spot_options.instance_pools_to_use_count #=> Integer
    #   resp.data.fleets[0].spot_options.single_instance_type #=> Boolean
    #   resp.data.fleets[0].spot_options.single_availability_zone #=> Boolean
    #   resp.data.fleets[0].spot_options.min_target_capacity #=> Integer
    #   resp.data.fleets[0].spot_options.max_total_price #=> String
    #   resp.data.fleets[0].on_demand_options #=> Types::OnDemandOptions
    #   resp.data.fleets[0].on_demand_options.allocation_strategy #=> String, one of ["lowest-price", "prioritized"]
    #   resp.data.fleets[0].on_demand_options.capacity_reservation_options #=> Types::CapacityReservationOptions
    #   resp.data.fleets[0].on_demand_options.capacity_reservation_options.usage_strategy #=> String, one of ["use-capacity-reservations-first"]
    #   resp.data.fleets[0].on_demand_options.single_instance_type #=> Boolean
    #   resp.data.fleets[0].on_demand_options.single_availability_zone #=> Boolean
    #   resp.data.fleets[0].on_demand_options.min_target_capacity #=> Integer
    #   resp.data.fleets[0].on_demand_options.max_total_price #=> String
    #   resp.data.fleets[0].tags #=> Array<Tag>
    #   resp.data.fleets[0].tags[0] #=> Types::Tag
    #   resp.data.fleets[0].tags[0].key #=> String
    #   resp.data.fleets[0].tags[0].value #=> String
    #   resp.data.fleets[0].errors #=> Array<DescribeFleetError>
    #   resp.data.fleets[0].errors[0] #=> Types::DescribeFleetError
    #   resp.data.fleets[0].errors[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.fleets[0].errors[0].launch_template_and_overrides.launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.fleets[0].errors[0].launch_template_and_overrides.overrides #=> Types::FleetLaunchTemplateOverrides
    #   resp.data.fleets[0].errors[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.fleets[0].errors[0].error_code #=> String
    #   resp.data.fleets[0].errors[0].error_message #=> String
    #   resp.data.fleets[0].instances #=> Array<DescribeFleetsInstances>
    #   resp.data.fleets[0].instances[0] #=> Types::DescribeFleetsInstances
    #   resp.data.fleets[0].instances[0].launch_template_and_overrides #=> Types::LaunchTemplateAndOverridesResponse
    #   resp.data.fleets[0].instances[0].lifecycle #=> String, one of ["spot", "on-demand"]
    #   resp.data.fleets[0].instances[0].instance_ids #=> Array<String>
    #   resp.data.fleets[0].instances[0].instance_ids[0] #=> String
    #   resp.data.fleets[0].instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.fleets[0].instances[0].platform #=> String, one of ["Windows"]
    #   resp.data.fleets[0].context #=> String
    def describe_fleets(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFleetsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFleets.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fleets,
        tracer: tracer
      )
      Telemetry::DescribeFleets.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fleets] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fleets] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fleets] #{output.data}")
        output
      end
    end

    # <p>Describes one or more flow logs.</p>
    #          <p>To view the published flow log records, you must view the log destination. For example,
    #             the CloudWatch Logs log group, the Amazon S3 bucket, or the Kinesis Data Firehose delivery stream.</p>
    # @param [Hash | Types::DescribeFlowLogsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFlowLogsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_flow_logs(
    #     dry_run: false,
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     flow_log_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFlowLogsOutput
    #   resp.data.flow_logs #=> Array<FlowLog>
    #   resp.data.flow_logs[0] #=> Types::FlowLog
    #   resp.data.flow_logs[0].creation_time #=> Time
    #   resp.data.flow_logs[0].deliver_logs_error_message #=> String
    #   resp.data.flow_logs[0].deliver_logs_permission_arn #=> String
    #   resp.data.flow_logs[0].deliver_cross_account_role #=> String
    #   resp.data.flow_logs[0].deliver_logs_status #=> String
    #   resp.data.flow_logs[0].flow_log_id #=> String
    #   resp.data.flow_logs[0].flow_log_status #=> String
    #   resp.data.flow_logs[0].log_group_name #=> String
    #   resp.data.flow_logs[0].resource_id #=> String
    #   resp.data.flow_logs[0].traffic_type #=> String, one of ["ACCEPT", "REJECT", "ALL"]
    #   resp.data.flow_logs[0].log_destination_type #=> String, one of ["cloud-watch-logs", "s3", "kinesis-data-firehose"]
    #   resp.data.flow_logs[0].log_destination #=> String
    #   resp.data.flow_logs[0].log_format #=> String
    #   resp.data.flow_logs[0].tags #=> Array<Tag>
    #   resp.data.flow_logs[0].tags[0] #=> Types::Tag
    #   resp.data.flow_logs[0].tags[0].key #=> String
    #   resp.data.flow_logs[0].tags[0].value #=> String
    #   resp.data.flow_logs[0].max_aggregation_interval #=> Integer
    #   resp.data.flow_logs[0].destination_options #=> Types::DestinationOptionsResponse
    #   resp.data.flow_logs[0].destination_options.file_format #=> String, one of ["plain-text", "parquet"]
    #   resp.data.flow_logs[0].destination_options.hive_compatible_partitions #=> Boolean
    #   resp.data.flow_logs[0].destination_options.per_hour_partition #=> Boolean
    #   resp.data.next_token #=> String
    def describe_flow_logs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFlowLogsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFlowLogs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_flow_logs,
        tracer: tracer
      )
      Telemetry::DescribeFlowLogs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_flow_logs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_flow_logs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_flow_logs] #{output.data}")
        output
      end
    end

    # <p>Describes the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    # @param [Hash | Types::DescribeFpgaImageAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFpgaImageAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fpga_image_attribute(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId', # required
    #     attribute: 'description' # required - accepts ["description", "name", "loadPermission", "productCodes"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFpgaImageAttributeOutput
    #   resp.data.fpga_image_attribute #=> Types::FpgaImageAttribute
    #   resp.data.fpga_image_attribute.fpga_image_id #=> String
    #   resp.data.fpga_image_attribute.name #=> String
    #   resp.data.fpga_image_attribute.description #=> String
    #   resp.data.fpga_image_attribute.load_permissions #=> Array<LoadPermission>
    #   resp.data.fpga_image_attribute.load_permissions[0] #=> Types::LoadPermission
    #   resp.data.fpga_image_attribute.load_permissions[0].user_id #=> String
    #   resp.data.fpga_image_attribute.load_permissions[0].group #=> String, one of ["all"]
    #   resp.data.fpga_image_attribute.product_codes #=> Array<ProductCode>
    #   resp.data.fpga_image_attribute.product_codes[0] #=> Types::ProductCode
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_id #=> String
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    def describe_fpga_image_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFpgaImageAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFpgaImageAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fpga_image_attribute,
        tracer: tracer
      )
      Telemetry::DescribeFpgaImageAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fpga_image_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fpga_image_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fpga_image_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs,
    # 			private AFIs that you own, and AFIs owned by other Amazon Web Services accounts for which you have load
    # 			permissions.</p>
    # @param [Hash | Types::DescribeFpgaImagesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeFpgaImagesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_fpga_images(
    #     dry_run: false,
    #     fpga_image_ids: [
    #       'member'
    #     ],
    #     owners: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeFpgaImagesOutput
    #   resp.data.fpga_images #=> Array<FpgaImage>
    #   resp.data.fpga_images[0] #=> Types::FpgaImage
    #   resp.data.fpga_images[0].fpga_image_id #=> String
    #   resp.data.fpga_images[0].fpga_image_global_id #=> String
    #   resp.data.fpga_images[0].name #=> String
    #   resp.data.fpga_images[0].description #=> String
    #   resp.data.fpga_images[0].shell_version #=> String
    #   resp.data.fpga_images[0].pci_id #=> Types::PciId
    #   resp.data.fpga_images[0].pci_id.device_id #=> String
    #   resp.data.fpga_images[0].pci_id.vendor_id #=> String
    #   resp.data.fpga_images[0].pci_id.subsystem_id #=> String
    #   resp.data.fpga_images[0].pci_id.subsystem_vendor_id #=> String
    #   resp.data.fpga_images[0].state #=> Types::FpgaImageState
    #   resp.data.fpga_images[0].state.code #=> String, one of ["pending", "failed", "available", "unavailable"]
    #   resp.data.fpga_images[0].state.message #=> String
    #   resp.data.fpga_images[0].create_time #=> Time
    #   resp.data.fpga_images[0].update_time #=> Time
    #   resp.data.fpga_images[0].owner_id #=> String
    #   resp.data.fpga_images[0].owner_alias #=> String
    #   resp.data.fpga_images[0].product_codes #=> Array<ProductCode>
    #   resp.data.fpga_images[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.fpga_images[0].product_codes[0].product_code_id #=> String
    #   resp.data.fpga_images[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.fpga_images[0].tags #=> Array<Tag>
    #   resp.data.fpga_images[0].tags[0] #=> Types::Tag
    #   resp.data.fpga_images[0].tags[0].key #=> String
    #   resp.data.fpga_images[0].tags[0].value #=> String
    #   resp.data.fpga_images[0].public #=> Boolean
    #   resp.data.fpga_images[0].data_retention_support #=> Boolean
    #   resp.data.fpga_images[0].instance_types #=> Array<String>
    #   resp.data.fpga_images[0].instance_types[0] #=> String
    #   resp.data.next_token #=> String
    def describe_fpga_images(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeFpgaImagesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeFpgaImages.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_fpga_images,
        tracer: tracer
      )
      Telemetry::DescribeFpgaImages.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fpga_images] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_fpga_images] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_fpga_images] #{output.data}")
        output
      end
    end

    # <p>Describes the Dedicated Host reservations that are available to purchase.</p>
    #          <p>The results describe all of the Dedicated Host reservation offerings, including
    #             offerings that might not match the instance family and Region of your Dedicated Hosts.
    #             When purchasing an offering, ensure that the instance family and Region of the offering
    #             matches that of the Dedicated Hosts with which it is to be associated. For more
    #             information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts</a>
    #             in the <i>Amazon EC2 User Guide</i>. </p>
    # @param [Hash | Types::DescribeHostReservationOfferingsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeHostReservationOfferingsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_host_reservation_offerings(
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_duration: 1,
    #     max_results: 1,
    #     min_duration: 1,
    #     next_token: 'NextToken',
    #     offering_id: 'OfferingId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeHostReservationOfferingsOutput
    #   resp.data.next_token #=> String
    #   resp.data.offering_set #=> Array<HostOffering>
    #   resp.data.offering_set[0] #=> Types::HostOffering
    #   resp.data.offering_set[0].currency_code #=> String, one of ["USD"]
    #   resp.data.offering_set[0].duration #=> Integer
    #   resp.data.offering_set[0].hourly_price #=> String
    #   resp.data.offering_set[0].instance_family #=> String
    #   resp.data.offering_set[0].offering_id #=> String
    #   resp.data.offering_set[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.offering_set[0].upfront_price #=> String
    def describe_host_reservation_offerings(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeHostReservationOfferingsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeHostReservationOfferings.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_host_reservation_offerings,
        tracer: tracer
      )
      Telemetry::DescribeHostReservationOfferings.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_host_reservation_offerings] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_host_reservation_offerings] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_host_reservation_offerings] #{output.data}")
        output
      end
    end

    # <p>Describes reservations that are associated with Dedicated Hosts in your
    #             account.</p>
    # @param [Hash | Types::DescribeHostReservationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeHostReservationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_host_reservations(
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     host_reservation_id_set: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeHostReservationsOutput
    #   resp.data.host_reservation_set #=> Array<HostReservation>
    #   resp.data.host_reservation_set[0] #=> Types::HostReservation
    #   resp.data.host_reservation_set[0].count #=> Integer
    #   resp.data.host_reservation_set[0].currency_code #=> String, one of ["USD"]
    #   resp.data.host_reservation_set[0].duration #=> Integer
    #   resp.data.host_reservation_set[0].end #=> Time
    #   resp.data.host_reservation_set[0].host_id_set #=> Array<String>
    #   resp.data.host_reservation_set[0].host_id_set[0] #=> String
    #   resp.data.host_reservation_set[0].host_reservation_id #=> String
    #   resp.data.host_reservation_set[0].hourly_price #=> String
    #   resp.data.host_reservation_set[0].instance_family #=> String
    #   resp.data.host_reservation_set[0].offering_id #=> String
    #   resp.data.host_reservation_set[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.host_reservation_set[0].start #=> Time
    #   resp.data.host_reservation_set[0].state #=> String, one of ["payment-pending", "payment-failed", "active", "retired"]
    #   resp.data.host_reservation_set[0].upfront_price #=> String
    #   resp.data.host_reservation_set[0].tags #=> Array<Tag>
    #   resp.data.host_reservation_set[0].tags[0] #=> Types::Tag
    #   resp.data.host_reservation_set[0].tags[0].key #=> String
    #   resp.data.host_reservation_set[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_host_reservations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeHostReservationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeHostReservations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_host_reservations,
        tracer: tracer
      )
      Telemetry::DescribeHostReservations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_host_reservations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_host_reservations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_host_reservations] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p>
    #          <p>The results describe only the Dedicated Hosts in the Region you're currently using.
    #             All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have
    #             recently been released are listed with the state <code>released</code>.</p>
    # @param [Hash | Types::DescribeHostsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeHostsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_hosts(
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     host_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeHostsOutput
    #   resp.data.hosts #=> Array<Host>
    #   resp.data.hosts[0] #=> Types::Host
    #   resp.data.hosts[0].auto_placement #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].availability_zone #=> String
    #   resp.data.hosts[0].available_capacity #=> Types::AvailableCapacity
    #   resp.data.hosts[0].available_capacity.available_instance_capacity #=> Array<InstanceCapacity>
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0] #=> Types::InstanceCapacity
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0].available_capacity #=> Integer
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0].instance_type #=> String
    #   resp.data.hosts[0].available_capacity.available_instance_capacity[0].total_capacity #=> Integer
    #   resp.data.hosts[0].available_capacity.available_v_cpus #=> Integer
    #   resp.data.hosts[0].client_token #=> String
    #   resp.data.hosts[0].host_id #=> String
    #   resp.data.hosts[0].host_properties #=> Types::HostProperties
    #   resp.data.hosts[0].host_properties.cores #=> Integer
    #   resp.data.hosts[0].host_properties.instance_type #=> String
    #   resp.data.hosts[0].host_properties.instance_family #=> String
    #   resp.data.hosts[0].host_properties.sockets #=> Integer
    #   resp.data.hosts[0].host_properties.total_v_cpus #=> Integer
    #   resp.data.hosts[0].host_reservation_id #=> String
    #   resp.data.hosts[0].instances #=> Array<HostInstance>
    #   resp.data.hosts[0].instances[0] #=> Types::HostInstance
    #   resp.data.hosts[0].instances[0].instance_id #=> String
    #   resp.data.hosts[0].instances[0].instance_type #=> String
    #   resp.data.hosts[0].instances[0].owner_id #=> String
    #   resp.data.hosts[0].state #=> String, one of ["available", "under-assessment", "permanent-failure", "released", "released-permanent-failure", "pending"]
    #   resp.data.hosts[0].allocation_time #=> Time
    #   resp.data.hosts[0].release_time #=> Time
    #   resp.data.hosts[0].tags #=> Array<Tag>
    #   resp.data.hosts[0].tags[0] #=> Types::Tag
    #   resp.data.hosts[0].tags[0].key #=> String
    #   resp.data.hosts[0].tags[0].value #=> String
    #   resp.data.hosts[0].host_recovery #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].allows_multiple_instance_types #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].owner_id #=> String
    #   resp.data.hosts[0].availability_zone_id #=> String
    #   resp.data.hosts[0].member_of_service_linked_resource_group #=> Boolean
    #   resp.data.hosts[0].outpost_arn #=> String
    #   resp.data.hosts[0].host_maintenance #=> String, one of ["on", "off"]
    #   resp.data.hosts[0].asset_id #=> String
    #   resp.data.next_token #=> String
    def describe_hosts(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeHostsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeHosts.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_hosts,
        tracer: tracer
      )
      Telemetry::DescribeHosts.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_hosts] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_hosts] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_hosts] #{output.data}")
        output
      end
    end

    # <p>Describes your IAM instance profile associations.</p>
    # @param [Hash | Types::DescribeIamInstanceProfileAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIamInstanceProfileAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_iam_instance_profile_associations(
    #     association_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIamInstanceProfileAssociationsOutput
    #   resp.data.iam_instance_profile_associations #=> Array<IamInstanceProfileAssociation>
    #   resp.data.iam_instance_profile_associations[0] #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_associations[0].association_id #=> String
    #   resp.data.iam_instance_profile_associations[0].instance_id #=> String
    #   resp.data.iam_instance_profile_associations[0].iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_associations[0].iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_associations[0].iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_associations[0].state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_associations[0].timestamp #=> Time
    #   resp.data.next_token #=> String
    # @example To describe an IAM instance profile association
    #   # This example describes the specified IAM instance profile association.
    #   resp = client.describe_iam_instance_profile_associations({
    #     association_ids: [
    #       "iip-assoc-0db249b1f25fa24b8"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     iam_instance_profile_associations: [
    #       {
    #         instance_id: "i-09eb09efa73ec1dee",
    #         state: "associated",
    #         association_id: "iip-assoc-0db249b1f25fa24b8",
    #         iam_instance_profile: {
    #           id: "AIPAJVQN4F5WVLGCJDRGM",
    #           arn: "arn:aws:iam::123456789012:instance-profile/admin-role"
    #         }
    #       }
    #     ]
    #   }
    def describe_iam_instance_profile_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIamInstanceProfileAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIamInstanceProfileAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_iam_instance_profile_associations,
        tracer: tracer
      )
      Telemetry::DescribeIamInstanceProfileAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_iam_instance_profile_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_iam_instance_profile_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_iam_instance_profile_associations] #{output.data}")
        output
      end
    end

    # <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #            <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #            <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #            <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #            <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #            <code>network-acl</code> | <code>network-acl-association</code> |
    #            <code>network-interface</code> | <code>network-interface-attachment</code> |
    #            <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #            <code>route-table-association</code> | <code>security-group</code> |
    #            <code>snapshot</code> | <code>subnet</code> |
    #            <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #            | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #            <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #          <p>These settings apply to the IAM user who makes the request; they do not apply to the entire
    #       Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user, unless
    #       they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources
    #       created with longer IDs are visible to all IAM users, regardless of these settings and
    #       provided that they have permission to use the relevant <code>Describe</code> command for the
    #       resource type.</p>
    # @param [Hash | Types::DescribeIdFormatInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIdFormatInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_id_format(
    #     resource: 'Resource'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIdFormatOutput
    #   resp.data.statuses #=> Array<IdFormat>
    #   resp.data.statuses[0] #=> Types::IdFormat
    #   resp.data.statuses[0].deadline #=> Time
    #   resp.data.statuses[0].resource #=> String
    #   resp.data.statuses[0].use_long_ids #=> Boolean
    def describe_id_format(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIdFormatInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIdFormat.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_id_format,
        tracer: tracer
      )
      Telemetry::DescribeIdFormat.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_id_format] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_id_format] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_id_format] #{output.data}")
        output
      end
    end

    # <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root
    #       user. For example, you can view the resource types that are enabled for longer IDs. This request only
    #       returns information about resource types whose ID formats can be modified; it does not return
    #       information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #           <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #           <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #           <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #           <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #           <code>network-acl</code> | <code>network-acl-association</code> |
    #           <code>network-interface</code> | <code>network-interface-attachment</code> |
    #           <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #           <code>route-table-association</code> | <code>security-group</code> |
    #           <code>snapshot</code> | <code>subnet</code> |
    #           <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #           | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #           <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #          <p>These settings apply to the principal specified in the request. They do not apply to the
    #       principal that makes the request.</p>
    # @param [Hash | Types::DescribeIdentityIdFormatInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIdentityIdFormatInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_identity_id_format(
    #     principal_arn: 'PrincipalArn', # required
    #     resource: 'Resource'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIdentityIdFormatOutput
    #   resp.data.statuses #=> Array<IdFormat>
    #   resp.data.statuses[0] #=> Types::IdFormat
    #   resp.data.statuses[0].deadline #=> Time
    #   resp.data.statuses[0].resource #=> String
    #   resp.data.statuses[0].use_long_ids #=> Boolean
    def describe_identity_id_format(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIdentityIdFormatInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIdentityIdFormat.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_identity_id_format,
        tracer: tracer
      )
      Telemetry::DescribeIdentityIdFormat.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_identity_id_format] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_identity_id_format] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_identity_id_format] #{output.data}")
        output
      end
    end

    # <p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
    # @param [Hash | Types::DescribeImageAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeImageAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_image_attribute(
    #     attribute: 'description', # required - accepts ["description", "kernel", "ramdisk", "launchPermission", "productCodes", "blockDeviceMapping", "sriovNetSupport", "bootMode", "tpmSupport", "uefiData", "lastLaunchedTime", "imdsSupport"]
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeImageAttributeOutput
    #   resp.data.block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.block_device_mappings[0].device_name #=> String
    #   resp.data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.block_device_mappings[0].no_device #=> String
    #   resp.data.image_id #=> String
    #   resp.data.launch_permissions #=> Array<LaunchPermission>
    #   resp.data.launch_permissions[0] #=> Types::LaunchPermission
    #   resp.data.launch_permissions[0].group #=> String, one of ["all"]
    #   resp.data.launch_permissions[0].user_id #=> String
    #   resp.data.launch_permissions[0].organization_arn #=> String
    #   resp.data.launch_permissions[0].organizational_unit_arn #=> String
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.description #=> Types::AttributeValue
    #   resp.data.description.value #=> String
    #   resp.data.kernel_id #=> Types::AttributeValue
    #   resp.data.ramdisk_id #=> Types::AttributeValue
    #   resp.data.sriov_net_support #=> Types::AttributeValue
    #   resp.data.boot_mode #=> Types::AttributeValue
    #   resp.data.tpm_support #=> Types::AttributeValue
    #   resp.data.uefi_data #=> Types::AttributeValue
    #   resp.data.last_launched_time #=> Types::AttributeValue
    #   resp.data.imds_support #=> Types::AttributeValue
    # @example To describe the launch permissions for an AMI
    #   # This example describes the launch permissions for the specified AMI.
    #   resp = client.describe_image_attribute({
    #     attribute: "launchPermission",
    #     image_id: "ami-5731123e"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     image_id: "ami-5731123e",
    #     launch_permissions: [
    #       {
    #         user_id: "123456789012"
    #       }
    #     ]
    #   }
    def describe_image_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeImageAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeImageAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_image_attribute,
        tracer: tracer
      )
      Telemetry::DescribeImageAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_image_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_image_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_image_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p>
    #          <p>The images available to you include public images, private images that you own, and private images owned by other
    #        Amazon Web Services accounts for which you have explicit launch permissions.</p>
    #          <p>Recently deregistered images appear in the returned results for a short interval and then
    #       return empty results. After all instances that reference a deregistered AMI are terminated,
    #       specifying the ID of the image will eventually return an error indicating that the AMI ID
    #       cannot be found.</p>
    # @param [Hash | Types::DescribeImagesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeImagesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_images(
    #     executable_users: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     image_ids: [
    #       'member'
    #     ],
    #     owners: [
    #       'member'
    #     ],
    #     include_deprecated: false,
    #     include_disabled: false,
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeImagesOutput
    #   resp.data.images #=> Array<Image>
    #   resp.data.images[0] #=> Types::Image
    #   resp.data.images[0].architecture #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #   resp.data.images[0].creation_date #=> String
    #   resp.data.images[0].image_id #=> String
    #   resp.data.images[0].image_location #=> String
    #   resp.data.images[0].image_type #=> String, one of ["machine", "kernel", "ramdisk"]
    #   resp.data.images[0].public #=> Boolean
    #   resp.data.images[0].kernel_id #=> String
    #   resp.data.images[0].owner_id #=> String
    #   resp.data.images[0].platform #=> String, one of ["Windows"]
    #   resp.data.images[0].platform_details #=> String
    #   resp.data.images[0].usage_operation #=> String
    #   resp.data.images[0].product_codes #=> Array<ProductCode>
    #   resp.data.images[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.images[0].product_codes[0].product_code_id #=> String
    #   resp.data.images[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.images[0].ramdisk_id #=> String
    #   resp.data.images[0].state #=> String, one of ["pending", "available", "invalid", "deregistered", "transient", "failed", "error", "disabled"]
    #   resp.data.images[0].block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.images[0].block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.images[0].block_device_mappings[0].device_name #=> String
    #   resp.data.images[0].block_device_mappings[0].virtual_name #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.images[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.images[0].block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.images[0].block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.images[0].block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.images[0].block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.images[0].block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.images[0].block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.images[0].block_device_mappings[0].no_device #=> String
    #   resp.data.images[0].description #=> String
    #   resp.data.images[0].ena_support #=> Boolean
    #   resp.data.images[0].hypervisor #=> String, one of ["ovm", "xen"]
    #   resp.data.images[0].image_owner_alias #=> String
    #   resp.data.images[0].name #=> String
    #   resp.data.images[0].root_device_name #=> String
    #   resp.data.images[0].root_device_type #=> String, one of ["ebs", "instance-store"]
    #   resp.data.images[0].sriov_net_support #=> String
    #   resp.data.images[0].state_reason #=> Types::StateReason
    #   resp.data.images[0].state_reason.code #=> String
    #   resp.data.images[0].state_reason.message #=> String
    #   resp.data.images[0].tags #=> Array<Tag>
    #   resp.data.images[0].tags[0] #=> Types::Tag
    #   resp.data.images[0].tags[0].key #=> String
    #   resp.data.images[0].tags[0].value #=> String
    #   resp.data.images[0].virtualization_type #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.images[0].boot_mode #=> String, one of ["legacy-bios", "uefi", "uefi-preferred"]
    #   resp.data.images[0].tpm_support #=> String, one of ["v2.0"]
    #   resp.data.images[0].deprecation_time #=> String
    #   resp.data.images[0].imds_support #=> String, one of ["v2.0"]
    #   resp.data.images[0].source_instance_id #=> String
    #   resp.data.next_token #=> String
    # @example To describe an AMI
    #   # This example describes the specified AMI.
    #   resp = client.describe_images({
    #     image_ids: [
    #       "ami-5731123e"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     images: [
    #       {
    #         virtualization_type: "paravirtual",
    #         name: "My server",
    #         hypervisor: "xen",
    #         image_id: "ami-5731123e",
    #         root_device_type: "ebs",
    #         state: "available",
    #         block_device_mappings: [
    #           {
    #             device_name: "/dev/sda1",
    #             ebs: {
    #               delete_on_termination: true,
    #               snapshot_id: "snap-1234567890abcdef0",
    #               volume_size: 8,
    #               volume_type: "standard"
    #             }
    #           }
    #         ],
    #         architecture: "x86_64",
    #         image_location: "123456789012/My server",
    #         kernel_id: "aki-88aa75e1",
    #         owner_id: "123456789012",
    #         root_device_name: "/dev/sda1",
    #         public: false,
    #         image_type: "machine",
    #         description: "An AMI for my server"
    #       }
    #     ]
    #   }
    def describe_images(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeImagesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeImages.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_images,
        tracer: tracer
      )
      Telemetry::DescribeImages.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_images] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_images] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_images] #{output.data}")
        output
      end
    end

    # <p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
    # @param [Hash | Types::DescribeImportImageTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeImportImageTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_import_image_tasks(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     import_task_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeImportImageTasksOutput
    #   resp.data.import_image_tasks #=> Array<ImportImageTask>
    #   resp.data.import_image_tasks[0] #=> Types::ImportImageTask
    #   resp.data.import_image_tasks[0].architecture #=> String
    #   resp.data.import_image_tasks[0].description #=> String
    #   resp.data.import_image_tasks[0].encrypted #=> Boolean
    #   resp.data.import_image_tasks[0].hypervisor #=> String
    #   resp.data.import_image_tasks[0].image_id #=> String
    #   resp.data.import_image_tasks[0].import_task_id #=> String
    #   resp.data.import_image_tasks[0].kms_key_id #=> String
    #   resp.data.import_image_tasks[0].license_type #=> String
    #   resp.data.import_image_tasks[0].platform #=> String
    #   resp.data.import_image_tasks[0].progress #=> String
    #   resp.data.import_image_tasks[0].snapshot_details #=> Array<SnapshotDetail>
    #   resp.data.import_image_tasks[0].snapshot_details[0] #=> Types::SnapshotDetail
    #   resp.data.import_image_tasks[0].snapshot_details[0].description #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].device_name #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].disk_image_size #=> Float
    #   resp.data.import_image_tasks[0].snapshot_details[0].format #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].progress #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].snapshot_id #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].status #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].status_message #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].url #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].user_bucket #=> Types::UserBucketDetails
    #   resp.data.import_image_tasks[0].snapshot_details[0].user_bucket.s3_bucket #=> String
    #   resp.data.import_image_tasks[0].snapshot_details[0].user_bucket.s3_key #=> String
    #   resp.data.import_image_tasks[0].status #=> String
    #   resp.data.import_image_tasks[0].status_message #=> String
    #   resp.data.import_image_tasks[0].tags #=> Array<Tag>
    #   resp.data.import_image_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.import_image_tasks[0].tags[0].key #=> String
    #   resp.data.import_image_tasks[0].tags[0].value #=> String
    #   resp.data.import_image_tasks[0].license_specifications #=> Array<ImportImageLicenseConfigurationResponse>
    #   resp.data.import_image_tasks[0].license_specifications[0] #=> Types::ImportImageLicenseConfigurationResponse
    #   resp.data.import_image_tasks[0].license_specifications[0].license_configuration_arn #=> String
    #   resp.data.import_image_tasks[0].usage_operation #=> String
    #   resp.data.import_image_tasks[0].boot_mode #=> String, one of ["legacy-bios", "uefi", "uefi-preferred"]
    #   resp.data.next_token #=> String
    def describe_import_image_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeImportImageTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeImportImageTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_import_image_tasks,
        tracer: tracer
      )
      Telemetry::DescribeImportImageTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_import_image_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_import_image_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_import_image_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes your import snapshot tasks.</p>
    # @param [Hash | Types::DescribeImportSnapshotTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeImportSnapshotTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_import_snapshot_tasks(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     import_task_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeImportSnapshotTasksOutput
    #   resp.data.import_snapshot_tasks #=> Array<ImportSnapshotTask>
    #   resp.data.import_snapshot_tasks[0] #=> Types::ImportSnapshotTask
    #   resp.data.import_snapshot_tasks[0].description #=> String
    #   resp.data.import_snapshot_tasks[0].import_task_id #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail #=> Types::SnapshotTaskDetail
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.description #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.disk_image_size #=> Float
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.encrypted #=> Boolean
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.format #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.kms_key_id #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.progress #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.snapshot_id #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.status #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.status_message #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.url #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.user_bucket #=> Types::UserBucketDetails
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.user_bucket.s3_bucket #=> String
    #   resp.data.import_snapshot_tasks[0].snapshot_task_detail.user_bucket.s3_key #=> String
    #   resp.data.import_snapshot_tasks[0].tags #=> Array<Tag>
    #   resp.data.import_snapshot_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.import_snapshot_tasks[0].tags[0].key #=> String
    #   resp.data.import_snapshot_tasks[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_import_snapshot_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeImportSnapshotTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeImportSnapshotTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_import_snapshot_tasks,
        tracer: tracer
      )
      Telemetry::DescribeImportSnapshotTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_import_snapshot_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_import_snapshot_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_import_snapshot_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes the specified attribute of the specified instance. You can specify only one
    #             attribute at a time. Valid attribute values are: <code>instanceType</code> |
    #                 <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> |
    #                 <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code>
    #             | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> |
    #                 <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> |
    #                 <code>ebsOptimized</code> | <code>sriovNetSupport</code>
    #          </p>
    # @param [Hash | Types::DescribeInstanceAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_attribute(
    #     attribute: 'instanceType', # required - accepts ["instanceType", "kernel", "ramdisk", "userData", "disableApiTermination", "instanceInitiatedShutdownBehavior", "rootDeviceName", "blockDeviceMapping", "productCodes", "sourceDestCheck", "groupSet", "ebsOptimized", "sriovNetSupport", "enaSupport", "enclaveOptions", "disableApiStop"]
    #     dry_run: false,
    #     instance_id: 'InstanceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceAttributeOutput
    #   resp.data.groups #=> Array<GroupIdentifier>
    #   resp.data.groups[0] #=> Types::GroupIdentifier
    #   resp.data.groups[0].group_name #=> String
    #   resp.data.groups[0].group_id #=> String
    #   resp.data.block_device_mappings #=> Array<InstanceBlockDeviceMapping>
    #   resp.data.block_device_mappings[0] #=> Types::InstanceBlockDeviceMapping
    #   resp.data.block_device_mappings[0].device_name #=> String
    #   resp.data.block_device_mappings[0].ebs #=> Types::EbsInstanceBlockDevice
    #   resp.data.block_device_mappings[0].ebs.attach_time #=> Time
    #   resp.data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.block_device_mappings[0].ebs.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.block_device_mappings[0].ebs.volume_id #=> String
    #   resp.data.block_device_mappings[0].ebs.associated_resource #=> String
    #   resp.data.block_device_mappings[0].ebs.volume_owner_id #=> String
    #   resp.data.disable_api_termination #=> Types::AttributeBooleanValue
    #   resp.data.disable_api_termination.value #=> Boolean
    #   resp.data.ena_support #=> Types::AttributeBooleanValue
    #   resp.data.enclave_options #=> Types::EnclaveOptions
    #   resp.data.enclave_options.enabled #=> Boolean
    #   resp.data.ebs_optimized #=> Types::AttributeBooleanValue
    #   resp.data.instance_id #=> String
    #   resp.data.instance_initiated_shutdown_behavior #=> Types::AttributeValue
    #   resp.data.instance_initiated_shutdown_behavior.value #=> String
    #   resp.data.instance_type #=> Types::AttributeValue
    #   resp.data.kernel_id #=> Types::AttributeValue
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.ramdisk_id #=> Types::AttributeValue
    #   resp.data.root_device_name #=> Types::AttributeValue
    #   resp.data.source_dest_check #=> Types::AttributeBooleanValue
    #   resp.data.sriov_net_support #=> Types::AttributeValue
    #   resp.data.user_data #=> Types::AttributeValue
    #   resp.data.disable_api_stop #=> Types::AttributeBooleanValue
    # @example To describe the instance type
    #   # This example describes the instance type of the specified instance.
    #   #
    #   resp = client.describe_instance_attribute({
    #     instance_id: "i-1234567890abcdef0",
    #     attribute: "instanceType"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     instance_id: "i-1234567890abcdef0",
    #     instance_type: {
    #       value: "t1.micro"
    #     }
    #   }
    # @example To describe the block device mapping for an instance
    #   # This example describes the ``blockDeviceMapping`` attribute of the specified instance.
    #   #
    #   resp = client.describe_instance_attribute({
    #     instance_id: "i-1234567890abcdef0",
    #     attribute: "blockDeviceMapping"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     instance_id: "i-1234567890abcdef0",
    #     block_device_mappings: [
    #       {
    #         device_name: "/dev/sda1",
    #         ebs: {
    #           status: "attached",
    #           delete_on_termination: true,
    #           volume_id: "vol-049df61146c4d7901",
    #           attach_time: Time.parse('2013-05-17T22:42:34.000Z')
    #         }
    #       },
    #       {
    #         device_name: "/dev/sdf",
    #         ebs: {
    #           status: "attached",
    #           delete_on_termination: false,
    #           volume_id: "vol-049df61146c4d7901",
    #           attach_time: Time.parse('2013-09-10T23:07:00.000Z')
    #         }
    #       }
    #     ]
    #   }
    def describe_instance_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_attribute,
        tracer: tracer
      )
      Telemetry::DescribeInstanceAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the specified EC2 Instance Connect Endpoints or all EC2 Instance Connect Endpoints.</p>
    # @param [Hash | Types::DescribeInstanceConnectEndpointsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceConnectEndpointsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_connect_endpoints(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceConnectEndpointsOutput
    #   resp.data.instance_connect_endpoints #=> Array<Ec2InstanceConnectEndpoint>
    #   resp.data.instance_connect_endpoints[0] #=> Types::Ec2InstanceConnectEndpoint
    #   resp.data.instance_connect_endpoints[0].owner_id #=> String
    #   resp.data.instance_connect_endpoints[0].instance_connect_endpoint_id #=> String
    #   resp.data.instance_connect_endpoints[0].instance_connect_endpoint_arn #=> String
    #   resp.data.instance_connect_endpoints[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.instance_connect_endpoints[0].state_message #=> String
    #   resp.data.instance_connect_endpoints[0].dns_name #=> String
    #   resp.data.instance_connect_endpoints[0].fips_dns_name #=> String
    #   resp.data.instance_connect_endpoints[0].network_interface_ids #=> Array<String>
    #   resp.data.instance_connect_endpoints[0].network_interface_ids[0] #=> String
    #   resp.data.instance_connect_endpoints[0].vpc_id #=> String
    #   resp.data.instance_connect_endpoints[0].availability_zone #=> String
    #   resp.data.instance_connect_endpoints[0].created_at #=> Time
    #   resp.data.instance_connect_endpoints[0].subnet_id #=> String
    #   resp.data.instance_connect_endpoints[0].preserve_client_ip #=> Boolean
    #   resp.data.instance_connect_endpoints[0].security_group_ids #=> Array<String>
    #   resp.data.instance_connect_endpoints[0].security_group_ids[0] #=> String
    #   resp.data.instance_connect_endpoints[0].tags #=> Array<Tag>
    #   resp.data.instance_connect_endpoints[0].tags[0] #=> Types::Tag
    #   resp.data.instance_connect_endpoints[0].tags[0].key #=> String
    #   resp.data.instance_connect_endpoints[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_instance_connect_endpoints(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceConnectEndpointsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceConnectEndpoints.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_connect_endpoints,
        tracer: tracer
      )
      Telemetry::DescribeInstanceConnectEndpoints.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_connect_endpoints] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_connect_endpoints] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_connect_endpoints] #{output.data}")
        output
      end
    end

    # <p>Describes the credit option for CPU usage of the specified burstable performance
    #             instances. The credit options are <code>standard</code> and
    #             <code>unlimited</code>.</p>
    #          <p>If you do not specify an instance ID, Amazon EC2 returns burstable performance
    #             instances with the <code>unlimited</code> credit option, as well as instances that were
    #             previously configured as T2, T3, and T3a with the <code>unlimited</code> credit option.
    #             For example, if you resize a T2 instance, while it is configured as
    #                 <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4
    #             instance.</p>
    #          <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option
    #                 (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify
    #             an instance ID that is not valid, such as an instance that is not a burstable
    #             performance instance, an error is returned.</p>
    #          <p>Recently terminated instances might appear in the returned results. This interval is
    #             usually less than one hour.</p>
    #          <p>If an Availability Zone is experiencing a service disruption and you specify instance
    #             IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If
    #             you specify only instance IDs in an unaffected zone, the call works normally.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                 performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeInstanceCreditSpecificationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceCreditSpecificationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_credit_specifications(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceCreditSpecificationsOutput
    #   resp.data.instance_credit_specifications #=> Array<InstanceCreditSpecification>
    #   resp.data.instance_credit_specifications[0] #=> Types::InstanceCreditSpecification
    #   resp.data.instance_credit_specifications[0].instance_id #=> String
    #   resp.data.instance_credit_specifications[0].cpu_credits #=> String
    #   resp.data.next_token #=> String
    def describe_instance_credit_specifications(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceCreditSpecificationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceCreditSpecifications.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_credit_specifications,
        tracer: tracer
      )
      Telemetry::DescribeInstanceCreditSpecifications.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_credit_specifications] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_credit_specifications] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_credit_specifications] #{output.data}")
        output
      end
    end

    # <p>Describes the tag keys that are registered to appear in scheduled event notifications for
    #       	resources in the current Region.</p>
    # @param [Hash | Types::DescribeInstanceEventNotificationAttributesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceEventNotificationAttributesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_event_notification_attributes(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceEventNotificationAttributesOutput
    #   resp.data.instance_tag_attribute #=> Types::InstanceTagNotificationAttribute
    #   resp.data.instance_tag_attribute.instance_tag_keys #=> Array<String>
    #   resp.data.instance_tag_attribute.instance_tag_keys[0] #=> String
    #   resp.data.instance_tag_attribute.include_all_tags_of_instance #=> Boolean
    def describe_instance_event_notification_attributes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceEventNotificationAttributesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceEventNotificationAttributes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_event_notification_attributes,
        tracer: tracer
      )
      Telemetry::DescribeInstanceEventNotificationAttributes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_event_notification_attributes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_event_notification_attributes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_event_notification_attributes] #{output.data}")
        output
      end
    end

    # <p>Describes the specified event windows or all event windows.</p>
    #          <p>If you specify event window IDs, the output includes information for only the specified
    #          event windows. If you specify filters, the output includes information for only those event
    #          windows that meet the filter criteria. If you do not specify event windows IDs or filters,
    #          the output includes information for all event windows, which can affect performance. We
    #          recommend that you use pagination to ensure that the operation returns quickly and
    #          successfully. </p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeInstanceEventWindowsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceEventWindowsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_event_windows(
    #     dry_run: false,
    #     instance_event_window_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceEventWindowsOutput
    #   resp.data.instance_event_windows #=> Array<InstanceEventWindow>
    #   resp.data.instance_event_windows[0] #=> Types::InstanceEventWindow
    #   resp.data.instance_event_windows[0].instance_event_window_id #=> String
    #   resp.data.instance_event_windows[0].time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_windows[0].time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_windows[0].time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_windows[0].time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_windows[0].time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_windows[0].time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_windows[0].name #=> String
    #   resp.data.instance_event_windows[0].cron_expression #=> String
    #   resp.data.instance_event_windows[0].association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_windows[0].association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_windows[0].association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_windows[0].association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_windows[0].association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_windows[0].association_target.tags[0].key #=> String
    #   resp.data.instance_event_windows[0].association_target.tags[0].value #=> String
    #   resp.data.instance_event_windows[0].association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_windows[0].association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_windows[0].state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_windows[0].tags #=> Array<Tag>
    #   resp.data.next_token #=> String
    def describe_instance_event_windows(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceEventWindowsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceEventWindows.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_event_windows,
        tracer: tracer
      )
      Telemetry::DescribeInstanceEventWindows.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_event_windows] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_event_windows] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_event_windows] #{output.data}")
        output
      end
    end

    # <p>Describes the status of the specified instances or all of your instances. By default,
    #             only running instances are described, unless you specifically indicate to return the
    #             status of all instances.</p>
    #          <p>Instance status includes the following components:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <b>Status checks</b> - Amazon EC2 performs status
    #                     checks on running EC2 instances to identify hardware and software issues. For
    #                     more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status checks for your instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshoot
    #                         instances with failed status checks</a> in the <i>Amazon EC2 User
    #                         Guide</i>.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <b>Scheduled events</b> - Amazon EC2 can schedule
    #                     events (such as reboot, stop, or terminate) for your instances related to
    #                     hardware issues, software updates, or system maintenance. For more information,
    #                     see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled events for your instances</a> in the <i>Amazon EC2 User
    #                         Guide</i>.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <b>Instance state</b> - You can manage your instances
    #                     from the moment you launch them through their termination. For more information,
    #                     see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
    #                         lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::DescribeInstanceStatusInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceStatusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_status(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false,
    #     include_all_instances: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceStatusOutput
    #   resp.data.instance_statuses #=> Array<InstanceStatus>
    #   resp.data.instance_statuses[0] #=> Types::InstanceStatus
    #   resp.data.instance_statuses[0].availability_zone #=> String
    #   resp.data.instance_statuses[0].outpost_arn #=> String
    #   resp.data.instance_statuses[0].events #=> Array<InstanceStatusEvent>
    #   resp.data.instance_statuses[0].events[0] #=> Types::InstanceStatusEvent
    #   resp.data.instance_statuses[0].events[0].instance_event_id #=> String
    #   resp.data.instance_statuses[0].events[0].code #=> String, one of ["instance-reboot", "system-reboot", "system-maintenance", "instance-retirement", "instance-stop"]
    #   resp.data.instance_statuses[0].events[0].description #=> String
    #   resp.data.instance_statuses[0].events[0].not_after #=> Time
    #   resp.data.instance_statuses[0].events[0].not_before #=> Time
    #   resp.data.instance_statuses[0].events[0].not_before_deadline #=> Time
    #   resp.data.instance_statuses[0].instance_id #=> String
    #   resp.data.instance_statuses[0].instance_state #=> Types::InstanceState
    #   resp.data.instance_statuses[0].instance_state.code #=> Integer
    #   resp.data.instance_statuses[0].instance_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.instance_statuses[0].instance_status #=> Types::InstanceStatusSummary
    #   resp.data.instance_statuses[0].instance_status.details #=> Array<InstanceStatusDetails>
    #   resp.data.instance_statuses[0].instance_status.details[0] #=> Types::InstanceStatusDetails
    #   resp.data.instance_statuses[0].instance_status.details[0].impaired_since #=> Time
    #   resp.data.instance_statuses[0].instance_status.details[0].name #=> String, one of ["reachability"]
    #   resp.data.instance_statuses[0].instance_status.details[0].status #=> String, one of ["passed", "failed", "insufficient-data", "initializing"]
    #   resp.data.instance_statuses[0].instance_status.status #=> String, one of ["ok", "impaired", "insufficient-data", "not-applicable", "initializing"]
    #   resp.data.instance_statuses[0].system_status #=> Types::InstanceStatusSummary
    #   resp.data.next_token #=> String
    # @example To describe the status of an instance
    #   # This example describes the current status of the specified instance.
    #   resp = client.describe_instance_status({
    #     instance_ids: [
    #       "i-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     instance_statuses: [
    #       {
    #         instance_id: "i-1234567890abcdef0",
    #         instance_state: {
    #           code: 16,
    #           name: "running"
    #         },
    #         availability_zone: "us-east-1d",
    #         system_status: {
    #           status: "ok",
    #           details: [
    #             {
    #               status: "passed",
    #               name: "reachability"
    #             }
    #           ]
    #         },
    #         instance_status: {
    #           status: "ok",
    #           details: [
    #             {
    #               status: "passed",
    #               name: "reachability"
    #             }
    #           ]
    #         }
    #       }
    #     ]
    #   }
    def describe_instance_status(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceStatusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceStatus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_status,
        tracer: tracer
      )
      Telemetry::DescribeInstanceStatus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_status] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_status] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_status] #{output.data}")
        output
      end
    end

    # <p>Describes a tree-based hierarchy that represents the physical host placement of your
    #             EC2 instances within an Availability Zone or Local Zone. You can use this information to
    #             determine the relative proximity of your EC2 instances within the Amazon Web Services network to
    #             support your tightly coupled workloads.</p>
    #          <p class="title">
    #             <b>Limitations</b>
    #          </p>
    #          <ul>
    #             <li>
    #                <p>Supported zones</p>
    #                <ul>
    #                   <li>
    #                      <p>Availability Zone</p>
    #                   </li>
    #                   <li>
    #                      <p>Local Zone</p>
    #                   </li>
    #                </ul>
    #             </li>
    #             <li>
    #                <p>Supported instance types</p>
    #                <ul>
    #                   <li>
    #                      <p>
    #                         <code>hpc6a.48xlarge</code> | <code>hpc6id.32xlarge</code> |
    #                                 <code>hpc7a.12xlarge</code> | <code>hpc7a.24xlarge</code> |
    #                                 <code>hpc7a.48xlarge</code> | <code>hpc7a.96xlarge</code> |
    #                                 <code>hpc7g.4xlarge</code> | <code>hpc7g.8xlarge</code> |
    #                                 <code>hpc7g.16xlarge</code>
    #                      </p>
    #                   </li>
    #                   <li>
    #                      <p>
    #                         <code>p3dn.24xlarge</code> | <code>p4d.24xlarge</code> |
    #                                 <code>p4de.24xlarge</code> | <code>p5.48xlarge</code>
    #                      </p>
    #                   </li>
    #                   <li>
    #                      <p>
    #                         <code>trn1.2xlarge</code> | <code>trn1.32xlarge</code> |
    #                                 <code>trn1n.32xlarge</code>
    #                      </p>
    #                   </li>
    #                </ul>
    #             </li>
    #          </ul>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-topology.html">Amazon EC2 instance
    #                 topology</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeInstanceTopologyInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceTopologyInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_topology(
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     instance_ids: [
    #       'member'
    #     ],
    #     group_names: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceTopologyOutput
    #   resp.data.instances #=> Array<InstanceTopology>
    #   resp.data.instances[0] #=> Types::InstanceTopology
    #   resp.data.instances[0].instance_id #=> String
    #   resp.data.instances[0].instance_type #=> String
    #   resp.data.instances[0].group_name #=> String
    #   resp.data.instances[0].network_nodes #=> Array<String>
    #   resp.data.instances[0].network_nodes[0] #=> String
    #   resp.data.instances[0].availability_zone #=> String
    #   resp.data.instances[0].zone_id #=> String
    #   resp.data.next_token #=> String
    def describe_instance_topology(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceTopologyInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceTopology.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_topology,
        tracer: tracer
      )
      Telemetry::DescribeInstanceTopology.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_topology] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_topology] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_topology] #{output.data}")
        output
      end
    end

    # <p>Returns a list of all instance types offered. The results can be filtered by location (Region or Availability
    #    Zone). If no location is specified, the instance types offered in the current Region are returned.</p>
    # @param [Hash | Types::DescribeInstanceTypeOfferingsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceTypeOfferingsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_type_offerings(
    #     dry_run: false,
    #     location_type: 'region', # accepts ["region", "availability-zone", "availability-zone-id", "outpost"]
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceTypeOfferingsOutput
    #   resp.data.instance_type_offerings #=> Array<InstanceTypeOffering>
    #   resp.data.instance_type_offerings[0] #=> Types::InstanceTypeOffering
    #   resp.data.instance_type_offerings[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.instance_type_offerings[0].location_type #=> String, one of ["region", "availability-zone", "availability-zone-id", "outpost"]
    #   resp.data.instance_type_offerings[0].location #=> String
    #   resp.data.next_token #=> String
    def describe_instance_type_offerings(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceTypeOfferingsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceTypeOfferings.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_type_offerings,
        tracer: tracer
      )
      Telemetry::DescribeInstanceTypeOfferings.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_type_offerings] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_type_offerings] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_type_offerings] #{output.data}")
        output
      end
    end

    # <p>Describes the details of the instance types that are offered in a location. The results can be filtered by the
    #    attributes of the instance types.</p>
    # @param [Hash | Types::DescribeInstanceTypesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstanceTypesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instance_types(
    #     dry_run: false,
    #     instance_types: [
    #       'a1.medium' # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstanceTypesOutput
    #   resp.data.instance_types #=> Array<InstanceTypeInfo>
    #   resp.data.instance_types[0] #=> Types::InstanceTypeInfo
    #   resp.data.instance_types[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.instance_types[0].current_generation #=> Boolean
    #   resp.data.instance_types[0].free_tier_eligible #=> Boolean
    #   resp.data.instance_types[0].supported_usage_classes #=> Array<String>
    #   resp.data.instance_types[0].supported_usage_classes[0] #=> String, one of ["spot", "on-demand", "capacity-block"]
    #   resp.data.instance_types[0].supported_root_device_types #=> Array<String>
    #   resp.data.instance_types[0].supported_root_device_types[0] #=> String, one of ["ebs", "instance-store"]
    #   resp.data.instance_types[0].supported_virtualization_types #=> Array<String>
    #   resp.data.instance_types[0].supported_virtualization_types[0] #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.instance_types[0].bare_metal #=> Boolean
    #   resp.data.instance_types[0].hypervisor #=> String, one of ["nitro", "xen"]
    #   resp.data.instance_types[0].processor_info #=> Types::ProcessorInfo
    #   resp.data.instance_types[0].processor_info.supported_architectures #=> Array<String>
    #   resp.data.instance_types[0].processor_info.supported_architectures[0] #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #   resp.data.instance_types[0].processor_info.sustained_clock_speed_in_ghz #=> Float
    #   resp.data.instance_types[0].processor_info.supported_features #=> Array<String>
    #   resp.data.instance_types[0].processor_info.supported_features[0] #=> String, one of ["amd-sev-snp"]
    #   resp.data.instance_types[0].processor_info.manufacturer #=> String
    #   resp.data.instance_types[0].v_cpu_info #=> Types::VCpuInfo
    #   resp.data.instance_types[0].v_cpu_info.default_v_cpus #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.default_cores #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.default_threads_per_core #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.valid_cores #=> Array<Integer>
    #   resp.data.instance_types[0].v_cpu_info.valid_cores[0] #=> Integer
    #   resp.data.instance_types[0].v_cpu_info.valid_threads_per_core #=> Array<Integer>
    #   resp.data.instance_types[0].v_cpu_info.valid_threads_per_core[0] #=> Integer
    #   resp.data.instance_types[0].memory_info #=> Types::MemoryInfo
    #   resp.data.instance_types[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].instance_storage_supported #=> Boolean
    #   resp.data.instance_types[0].instance_storage_info #=> Types::InstanceStorageInfo
    #   resp.data.instance_types[0].instance_storage_info.total_size_in_gb #=> Integer
    #   resp.data.instance_types[0].instance_storage_info.disks #=> Array<DiskInfo>
    #   resp.data.instance_types[0].instance_storage_info.disks[0] #=> Types::DiskInfo
    #   resp.data.instance_types[0].instance_storage_info.disks[0].size_in_gb #=> Integer
    #   resp.data.instance_types[0].instance_storage_info.disks[0].count #=> Integer
    #   resp.data.instance_types[0].instance_storage_info.disks[0].type #=> String, one of ["hdd", "ssd"]
    #   resp.data.instance_types[0].instance_storage_info.nvme_support #=> String, one of ["unsupported", "supported", "required"]
    #   resp.data.instance_types[0].instance_storage_info.encryption_support #=> String, one of ["unsupported", "required"]
    #   resp.data.instance_types[0].ebs_info #=> Types::EbsInfo
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_support #=> String, one of ["unsupported", "supported", "default"]
    #   resp.data.instance_types[0].ebs_info.encryption_support #=> String, one of ["unsupported", "supported"]
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info #=> Types::EbsOptimizedInfo
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.baseline_bandwidth_in_mbps #=> Integer
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.baseline_throughput_in_m_bps #=> Float
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.baseline_iops #=> Integer
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.maximum_bandwidth_in_mbps #=> Integer
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.maximum_throughput_in_m_bps #=> Float
    #   resp.data.instance_types[0].ebs_info.ebs_optimized_info.maximum_iops #=> Integer
    #   resp.data.instance_types[0].ebs_info.nvme_support #=> String, one of ["unsupported", "supported", "required"]
    #   resp.data.instance_types[0].network_info #=> Types::NetworkInfo
    #   resp.data.instance_types[0].network_info.network_performance #=> String
    #   resp.data.instance_types[0].network_info.maximum_network_interfaces #=> Integer
    #   resp.data.instance_types[0].network_info.maximum_network_cards #=> Integer
    #   resp.data.instance_types[0].network_info.default_network_card_index #=> Integer
    #   resp.data.instance_types[0].network_info.network_cards #=> Array<NetworkCardInfo>
    #   resp.data.instance_types[0].network_info.network_cards[0] #=> Types::NetworkCardInfo
    #   resp.data.instance_types[0].network_info.network_cards[0].network_card_index #=> Integer
    #   resp.data.instance_types[0].network_info.network_cards[0].network_performance #=> String
    #   resp.data.instance_types[0].network_info.network_cards[0].maximum_network_interfaces #=> Integer
    #   resp.data.instance_types[0].network_info.network_cards[0].baseline_bandwidth_in_gbps #=> Float
    #   resp.data.instance_types[0].network_info.network_cards[0].peak_bandwidth_in_gbps #=> Float
    #   resp.data.instance_types[0].network_info.ipv4_addresses_per_interface #=> Integer
    #   resp.data.instance_types[0].network_info.ipv6_addresses_per_interface #=> Integer
    #   resp.data.instance_types[0].network_info.ipv6_supported #=> Boolean
    #   resp.data.instance_types[0].network_info.ena_support #=> String, one of ["unsupported", "supported", "required"]
    #   resp.data.instance_types[0].network_info.efa_supported #=> Boolean
    #   resp.data.instance_types[0].network_info.efa_info #=> Types::EfaInfo
    #   resp.data.instance_types[0].network_info.efa_info.maximum_efa_interfaces #=> Integer
    #   resp.data.instance_types[0].network_info.encryption_in_transit_supported #=> Boolean
    #   resp.data.instance_types[0].network_info.ena_srd_supported #=> Boolean
    #   resp.data.instance_types[0].gpu_info #=> Types::GpuInfo
    #   resp.data.instance_types[0].gpu_info.gpus #=> Array<GpuDeviceInfo>
    #   resp.data.instance_types[0].gpu_info.gpus[0] #=> Types::GpuDeviceInfo
    #   resp.data.instance_types[0].gpu_info.gpus[0].name #=> String
    #   resp.data.instance_types[0].gpu_info.gpus[0].manufacturer #=> String
    #   resp.data.instance_types[0].gpu_info.gpus[0].count #=> Integer
    #   resp.data.instance_types[0].gpu_info.gpus[0].memory_info #=> Types::GpuDeviceMemoryInfo
    #   resp.data.instance_types[0].gpu_info.gpus[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].gpu_info.total_gpu_memory_in_mi_b #=> Integer
    #   resp.data.instance_types[0].fpga_info #=> Types::FpgaInfo
    #   resp.data.instance_types[0].fpga_info.fpgas #=> Array<FpgaDeviceInfo>
    #   resp.data.instance_types[0].fpga_info.fpgas[0] #=> Types::FpgaDeviceInfo
    #   resp.data.instance_types[0].fpga_info.fpgas[0].name #=> String
    #   resp.data.instance_types[0].fpga_info.fpgas[0].manufacturer #=> String
    #   resp.data.instance_types[0].fpga_info.fpgas[0].count #=> Integer
    #   resp.data.instance_types[0].fpga_info.fpgas[0].memory_info #=> Types::FpgaDeviceMemoryInfo
    #   resp.data.instance_types[0].fpga_info.fpgas[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].fpga_info.total_fpga_memory_in_mi_b #=> Integer
    #   resp.data.instance_types[0].placement_group_info #=> Types::PlacementGroupInfo
    #   resp.data.instance_types[0].placement_group_info.supported_strategies #=> Array<String>
    #   resp.data.instance_types[0].placement_group_info.supported_strategies[0] #=> String, one of ["cluster", "partition", "spread"]
    #   resp.data.instance_types[0].inference_accelerator_info #=> Types::InferenceAcceleratorInfo
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators #=> Array<InferenceDeviceInfo>
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0] #=> Types::InferenceDeviceInfo
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].count #=> Integer
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].name #=> String
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].manufacturer #=> String
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].memory_info #=> Types::InferenceDeviceMemoryInfo
    #   resp.data.instance_types[0].inference_accelerator_info.accelerators[0].memory_info.size_in_mi_b #=> Integer
    #   resp.data.instance_types[0].inference_accelerator_info.total_inference_memory_in_mi_b #=> Integer
    #   resp.data.instance_types[0].hibernation_supported #=> Boolean
    #   resp.data.instance_types[0].burstable_performance_supported #=> Boolean
    #   resp.data.instance_types[0].dedicated_hosts_supported #=> Boolean
    #   resp.data.instance_types[0].auto_recovery_supported #=> Boolean
    #   resp.data.instance_types[0].supported_boot_modes #=> Array<String>
    #   resp.data.instance_types[0].supported_boot_modes[0] #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.instance_types[0].nitro_enclaves_support #=> String, one of ["unsupported", "supported"]
    #   resp.data.instance_types[0].nitro_tpm_support #=> String, one of ["unsupported", "supported"]
    #   resp.data.instance_types[0].nitro_tpm_info #=> Types::NitroTpmInfo
    #   resp.data.instance_types[0].nitro_tpm_info.supported_versions #=> Array<String>
    #   resp.data.instance_types[0].nitro_tpm_info.supported_versions[0] #=> String
    #   resp.data.next_token #=> String
    def describe_instance_types(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstanceTypesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstanceTypes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instance_types,
        tracer: tracer
      )
      Telemetry::DescribeInstanceTypes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_types] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instance_types] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instance_types] #{output.data}")
        output
      end
    end

    # <p>Describes the specified instances or all instances.</p>
    #          <p>If you specify instance IDs, the output includes information for only the specified
    #             instances. If you specify filters, the output includes information for only those
    #             instances that meet the filter criteria. If you do not specify instance IDs or filters,
    #             the output includes information for all instances, which can affect performance. We
    #             recommend that you use pagination to ensure that the operation returns quickly and
    #             successfully.</p>
    #          <p>If you specify an instance ID that is not valid, an error is returned. If you specify
    #             an instance that you do not own, it is not included in the output.</p>
    #          <p>Recently terminated instances might appear in the returned results. This interval is
    #             usually less than one hour.</p>
    #          <p>If you describe instances in the rare case where an Availability Zone is experiencing
    #             a service disruption and you specify instance IDs that are in the affected zone, or do
    #             not specify any instance IDs at all, the call fails. If you describe instances and
    #             specify only instance IDs that are in an unaffected zone, the call works
    #             normally.</p>
    # @param [Hash | Types::DescribeInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_instances(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     instance_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInstancesOutput
    #   resp.data.reservations #=> Array<Reservation>
    #   resp.data.reservations[0] #=> Types::Reservation
    #   resp.data.reservations[0].groups #=> Array<GroupIdentifier>
    #   resp.data.reservations[0].groups[0] #=> Types::GroupIdentifier
    #   resp.data.reservations[0].groups[0].group_name #=> String
    #   resp.data.reservations[0].groups[0].group_id #=> String
    #   resp.data.reservations[0].instances #=> Array<Instance>
    #   resp.data.reservations[0].instances[0] #=> Types::Instance
    #   resp.data.reservations[0].instances[0].ami_launch_index #=> Integer
    #   resp.data.reservations[0].instances[0].image_id #=> String
    #   resp.data.reservations[0].instances[0].instance_id #=> String
    #   resp.data.reservations[0].instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.reservations[0].instances[0].kernel_id #=> String
    #   resp.data.reservations[0].instances[0].key_name #=> String
    #   resp.data.reservations[0].instances[0].launch_time #=> Time
    #   resp.data.reservations[0].instances[0].monitoring #=> Types::Monitoring
    #   resp.data.reservations[0].instances[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    #   resp.data.reservations[0].instances[0].placement #=> Types::Placement
    #   resp.data.reservations[0].instances[0].placement.availability_zone #=> String
    #   resp.data.reservations[0].instances[0].placement.affinity #=> String
    #   resp.data.reservations[0].instances[0].placement.group_name #=> String
    #   resp.data.reservations[0].instances[0].placement.partition_number #=> Integer
    #   resp.data.reservations[0].instances[0].placement.host_id #=> String
    #   resp.data.reservations[0].instances[0].placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.reservations[0].instances[0].placement.spread_domain #=> String
    #   resp.data.reservations[0].instances[0].placement.host_resource_group_arn #=> String
    #   resp.data.reservations[0].instances[0].placement.group_id #=> String
    #   resp.data.reservations[0].instances[0].platform #=> String, one of ["Windows"]
    #   resp.data.reservations[0].instances[0].private_dns_name #=> String
    #   resp.data.reservations[0].instances[0].private_ip_address #=> String
    #   resp.data.reservations[0].instances[0].product_codes #=> Array<ProductCode>
    #   resp.data.reservations[0].instances[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.reservations[0].instances[0].product_codes[0].product_code_id #=> String
    #   resp.data.reservations[0].instances[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.reservations[0].instances[0].public_dns_name #=> String
    #   resp.data.reservations[0].instances[0].public_ip_address #=> String
    #   resp.data.reservations[0].instances[0].ramdisk_id #=> String
    #   resp.data.reservations[0].instances[0].state #=> Types::InstanceState
    #   resp.data.reservations[0].instances[0].state.code #=> Integer
    #   resp.data.reservations[0].instances[0].state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.reservations[0].instances[0].state_transition_reason #=> String
    #   resp.data.reservations[0].instances[0].subnet_id #=> String
    #   resp.data.reservations[0].instances[0].vpc_id #=> String
    #   resp.data.reservations[0].instances[0].architecture #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #   resp.data.reservations[0].instances[0].block_device_mappings #=> Array<InstanceBlockDeviceMapping>
    #   resp.data.reservations[0].instances[0].block_device_mappings[0] #=> Types::InstanceBlockDeviceMapping
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].device_name #=> String
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs #=> Types::EbsInstanceBlockDevice
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.attach_time #=> Time
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.volume_id #=> String
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.associated_resource #=> String
    #   resp.data.reservations[0].instances[0].block_device_mappings[0].ebs.volume_owner_id #=> String
    #   resp.data.reservations[0].instances[0].client_token #=> String
    #   resp.data.reservations[0].instances[0].ebs_optimized #=> Boolean
    #   resp.data.reservations[0].instances[0].ena_support #=> Boolean
    #   resp.data.reservations[0].instances[0].hypervisor #=> String, one of ["ovm", "xen"]
    #   resp.data.reservations[0].instances[0].iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.reservations[0].instances[0].iam_instance_profile.arn #=> String
    #   resp.data.reservations[0].instances[0].iam_instance_profile.id #=> String
    #   resp.data.reservations[0].instances[0].instance_lifecycle #=> String, one of ["spot", "scheduled", "capacity-block"]
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations #=> Array<ElasticGpuAssociation>
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0] #=> Types::ElasticGpuAssociation
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_id #=> String
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_association_id #=> String
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_association_state #=> String
    #   resp.data.reservations[0].instances[0].elastic_gpu_associations[0].elastic_gpu_association_time #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations #=> Array<ElasticInferenceAcceleratorAssociation>
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0] #=> Types::ElasticInferenceAcceleratorAssociation
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_arn #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_id #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_state #=> String
    #   resp.data.reservations[0].instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_time #=> Time
    #   resp.data.reservations[0].instances[0].network_interfaces #=> Array<InstanceNetworkInterface>
    #   resp.data.reservations[0].instances[0].network_interfaces[0] #=> Types::InstanceNetworkInterface
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.carrier_ip #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.customer_owned_ip #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.ip_owner_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.public_dns_name #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].association.public_ip #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment #=> Types::InstanceNetworkInterfaceAttachment
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.attach_time #=> Time
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.attachment_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.delete_on_termination #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.device_index #=> Integer
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.network_card_index #=> Integer
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.ena_srd_specification #=> Types::InstanceAttachmentEnaSrdSpecification
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.ena_srd_specification.ena_srd_udp_specification #=> Types::InstanceAttachmentEnaSrdUdpSpecification
    #   resp.data.reservations[0].instances[0].network_interfaces[0].attachment.ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].description #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].groups #=> Array<GroupIdentifier>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].mac_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].network_interface_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].owner_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_dns_name #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses #=> Array<InstancePrivateIpAddress>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0] #=> Types::InstancePrivateIpAddress
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].source_dest_check #=> Boolean
    #   resp.data.reservations[0].instances[0].network_interfaces[0].status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.reservations[0].instances[0].network_interfaces[0].subnet_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].vpc_id #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].interface_type #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv4_prefixes #=> Array<InstanceIpv4Prefix>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv4_prefixes[0] #=> Types::InstanceIpv4Prefix
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_prefixes #=> Array<InstanceIpv6Prefix>
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_prefixes[0] #=> Types::InstanceIpv6Prefix
    #   resp.data.reservations[0].instances[0].network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.reservations[0].instances[0].network_interfaces[0].connection_tracking_configuration #=> Types::ConnectionTrackingSpecificationResponse
    #   resp.data.reservations[0].instances[0].network_interfaces[0].connection_tracking_configuration.tcp_established_timeout #=> Integer
    #   resp.data.reservations[0].instances[0].network_interfaces[0].connection_tracking_configuration.udp_stream_timeout #=> Integer
    #   resp.data.reservations[0].instances[0].network_interfaces[0].connection_tracking_configuration.udp_timeout #=> Integer
    #   resp.data.reservations[0].instances[0].outpost_arn #=> String
    #   resp.data.reservations[0].instances[0].root_device_name #=> String
    #   resp.data.reservations[0].instances[0].root_device_type #=> String, one of ["ebs", "instance-store"]
    #   resp.data.reservations[0].instances[0].security_groups #=> Array<GroupIdentifier>
    #   resp.data.reservations[0].instances[0].source_dest_check #=> Boolean
    #   resp.data.reservations[0].instances[0].spot_instance_request_id #=> String
    #   resp.data.reservations[0].instances[0].sriov_net_support #=> String
    #   resp.data.reservations[0].instances[0].state_reason #=> Types::StateReason
    #   resp.data.reservations[0].instances[0].state_reason.code #=> String
    #   resp.data.reservations[0].instances[0].state_reason.message #=> String
    #   resp.data.reservations[0].instances[0].tags #=> Array<Tag>
    #   resp.data.reservations[0].instances[0].tags[0] #=> Types::Tag
    #   resp.data.reservations[0].instances[0].tags[0].key #=> String
    #   resp.data.reservations[0].instances[0].tags[0].value #=> String
    #   resp.data.reservations[0].instances[0].virtualization_type #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.reservations[0].instances[0].cpu_options #=> Types::CpuOptions
    #   resp.data.reservations[0].instances[0].cpu_options.core_count #=> Integer
    #   resp.data.reservations[0].instances[0].cpu_options.threads_per_core #=> Integer
    #   resp.data.reservations[0].instances[0].cpu_options.amd_sev_snp #=> String, one of ["enabled", "disabled"]
    #   resp.data.reservations[0].instances[0].capacity_reservation_id #=> String
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification #=> Types::CapacityReservationSpecificationResponse
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.reservations[0].instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.reservations[0].instances[0].hibernation_options #=> Types::HibernationOptions
    #   resp.data.reservations[0].instances[0].hibernation_options.configured #=> Boolean
    #   resp.data.reservations[0].instances[0].licenses #=> Array<LicenseConfiguration>
    #   resp.data.reservations[0].instances[0].licenses[0] #=> Types::LicenseConfiguration
    #   resp.data.reservations[0].instances[0].licenses[0].license_configuration_arn #=> String
    #   resp.data.reservations[0].instances[0].metadata_options #=> Types::InstanceMetadataOptionsResponse
    #   resp.data.reservations[0].instances[0].metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.reservations[0].instances[0].metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.reservations[0].instances[0].metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.reservations[0].instances[0].metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.reservations[0].instances[0].metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.reservations[0].instances[0].metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.reservations[0].instances[0].enclave_options #=> Types::EnclaveOptions
    #   resp.data.reservations[0].instances[0].enclave_options.enabled #=> Boolean
    #   resp.data.reservations[0].instances[0].boot_mode #=> String, one of ["legacy-bios", "uefi", "uefi-preferred"]
    #   resp.data.reservations[0].instances[0].platform_details #=> String
    #   resp.data.reservations[0].instances[0].usage_operation #=> String
    #   resp.data.reservations[0].instances[0].usage_operation_update_time #=> Time
    #   resp.data.reservations[0].instances[0].private_dns_name_options #=> Types::PrivateDnsNameOptionsResponse
    #   resp.data.reservations[0].instances[0].private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.reservations[0].instances[0].private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.reservations[0].instances[0].private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.reservations[0].instances[0].ipv6_address #=> String
    #   resp.data.reservations[0].instances[0].tpm_support #=> String
    #   resp.data.reservations[0].instances[0].maintenance_options #=> Types::InstanceMaintenanceOptions
    #   resp.data.reservations[0].instances[0].maintenance_options.auto_recovery #=> String, one of ["disabled", "default"]
    #   resp.data.reservations[0].instances[0].current_instance_boot_mode #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.reservations[0].owner_id #=> String
    #   resp.data.reservations[0].requester_id #=> String
    #   resp.data.reservations[0].reservation_id #=> String
    #   resp.data.next_token #=> String
    # @example To describe an Amazon EC2 instance
    #   # This example describes the specified instance.
    #   resp = client.describe_instances({
    #     instance_ids: [
    #       "i-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To describe the instances with a specific instance type
    #   # This example describes the instances with the t2.micro instance type.
    #   resp = client.describe_instances({
    #     filters: [
    #       {
    #         name: "instance-type",
    #         values: [
    #           "t2.micro"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To describe the instances with a specific tag
    #   # This example describes the instances with the Purpose=test tag.
    #   resp = client.describe_instances({
    #     filters: [
    #       {
    #         name: "tag:Purpose",
    #         values: [
    #           "test"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def describe_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_instances,
        tracer: tracer
      )
      Telemetry::DescribeInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_instances] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your internet gateways.</p>
    # @param [Hash | Types::DescribeInternetGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeInternetGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_internet_gateways(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     internet_gateway_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeInternetGatewaysOutput
    #   resp.data.internet_gateways #=> Array<InternetGateway>
    #   resp.data.internet_gateways[0] #=> Types::InternetGateway
    #   resp.data.internet_gateways[0].attachments #=> Array<InternetGatewayAttachment>
    #   resp.data.internet_gateways[0].attachments[0] #=> Types::InternetGatewayAttachment
    #   resp.data.internet_gateways[0].attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.internet_gateways[0].attachments[0].vpc_id #=> String
    #   resp.data.internet_gateways[0].internet_gateway_id #=> String
    #   resp.data.internet_gateways[0].owner_id #=> String
    #   resp.data.internet_gateways[0].tags #=> Array<Tag>
    #   resp.data.internet_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.internet_gateways[0].tags[0].key #=> String
    #   resp.data.internet_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    # @example To describe the Internet gateway for a VPC
    #   # This example describes the Internet gateway for the specified VPC.
    #   resp = client.describe_internet_gateways({
    #     filters: [
    #       {
    #         name: "attachment.vpc-id",
    #         values: [
    #           "vpc-a01106c2"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     internet_gateways: [
    #       {
    #         tags: [
    #
    #         ],
    #         internet_gateway_id: "igw-c0a643a9",
    #         attachments: [
    #           {
    #             state: "attached",
    #             vpc_id: "vpc-a01106c2"
    #           }
    #         ]
    #       }
    #     ]
    #   }
    def describe_internet_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeInternetGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeInternetGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_internet_gateways,
        tracer: tracer
      )
      Telemetry::DescribeInternetGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_internet_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_internet_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_internet_gateways] #{output.data}")
        output
      end
    end

    # <p>Describes your Autonomous System Numbers (ASNs), their provisioning statuses, and the BYOIP CIDRs with which they are associated. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
    # @param [Hash | Types::DescribeIpamByoasnInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpamByoasnInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipam_byoasn(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpamByoasnOutput
    #   resp.data.byoasns #=> Array<Byoasn>
    #   resp.data.byoasns[0] #=> Types::Byoasn
    #   resp.data.byoasns[0].asn #=> String
    #   resp.data.byoasns[0].ipam_id #=> String
    #   resp.data.byoasns[0].status_message #=> String
    #   resp.data.byoasns[0].state #=> String, one of ["deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned"]
    #   resp.data.next_token #=> String
    def describe_ipam_byoasn(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpamByoasnInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpamByoasn.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipam_byoasn,
        tracer: tracer
      )
      Telemetry::DescribeIpamByoasn.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_byoasn] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipam_byoasn] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_byoasn] #{output.data}")
        output
      end
    end

    # <p>Get information about your IPAM pools.</p>
    # @param [Hash | Types::DescribeIpamPoolsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpamPoolsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipam_pools(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpamPoolsOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipam_pools #=> Array<IpamPool>
    #   resp.data.ipam_pools[0] #=> Types::IpamPool
    #   resp.data.ipam_pools[0].owner_id #=> String
    #   resp.data.ipam_pools[0].ipam_pool_id #=> String
    #   resp.data.ipam_pools[0].source_ipam_pool_id #=> String
    #   resp.data.ipam_pools[0].ipam_pool_arn #=> String
    #   resp.data.ipam_pools[0].ipam_scope_arn #=> String
    #   resp.data.ipam_pools[0].ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pools[0].ipam_arn #=> String
    #   resp.data.ipam_pools[0].ipam_region #=> String
    #   resp.data.ipam_pools[0].locale #=> String
    #   resp.data.ipam_pools[0].pool_depth #=> Integer
    #   resp.data.ipam_pools[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_pools[0].state_message #=> String
    #   resp.data.ipam_pools[0].description #=> String
    #   resp.data.ipam_pools[0].auto_import #=> Boolean
    #   resp.data.ipam_pools[0].publicly_advertisable #=> Boolean
    #   resp.data.ipam_pools[0].address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pools[0].allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pools[0].allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pools[0].allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pools[0].allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pools[0].allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pools[0].allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pools[0].allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pools[0].tags #=> Array<Tag>
    #   resp.data.ipam_pools[0].tags[0] #=> Types::Tag
    #   resp.data.ipam_pools[0].tags[0].key #=> String
    #   resp.data.ipam_pools[0].tags[0].value #=> String
    #   resp.data.ipam_pools[0].aws_service #=> String, one of ["ec2"]
    #   resp.data.ipam_pools[0].public_ip_source #=> String, one of ["amazon", "byoip"]
    #   resp.data.ipam_pools[0].source_resource #=> Types::IpamPoolSourceResource
    #   resp.data.ipam_pools[0].source_resource.resource_id #=> String
    #   resp.data.ipam_pools[0].source_resource.resource_type #=> String, one of ["vpc"]
    #   resp.data.ipam_pools[0].source_resource.resource_region #=> String
    #   resp.data.ipam_pools[0].source_resource.resource_owner #=> String
    def describe_ipam_pools(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpamPoolsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpamPools.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipam_pools,
        tracer: tracer
      )
      Telemetry::DescribeIpamPools.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_pools] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipam_pools] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_pools] #{output.data}")
        output
      end
    end

    # <p>Describes IPAM resource discoveries. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::DescribeIpamResourceDiscoveriesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpamResourceDiscoveriesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipam_resource_discoveries(
    #     dry_run: false,
    #     ipam_resource_discovery_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpamResourceDiscoveriesOutput
    #   resp.data.ipam_resource_discoveries #=> Array<IpamResourceDiscovery>
    #   resp.data.ipam_resource_discoveries[0] #=> Types::IpamResourceDiscovery
    #   resp.data.ipam_resource_discoveries[0].owner_id #=> String
    #   resp.data.ipam_resource_discoveries[0].ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discoveries[0].ipam_resource_discovery_arn #=> String
    #   resp.data.ipam_resource_discoveries[0].ipam_resource_discovery_region #=> String
    #   resp.data.ipam_resource_discoveries[0].description #=> String
    #   resp.data.ipam_resource_discoveries[0].operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam_resource_discoveries[0].operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam_resource_discoveries[0].operating_regions[0].region_name #=> String
    #   resp.data.ipam_resource_discoveries[0].is_default #=> Boolean
    #   resp.data.ipam_resource_discoveries[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discoveries[0].tags #=> Array<Tag>
    #   resp.data.ipam_resource_discoveries[0].tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discoveries[0].tags[0].key #=> String
    #   resp.data.ipam_resource_discoveries[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_ipam_resource_discoveries(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpamResourceDiscoveriesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpamResourceDiscoveries.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipam_resource_discoveries,
        tracer: tracer
      )
      Telemetry::DescribeIpamResourceDiscoveries.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_resource_discoveries] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipam_resource_discoveries] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_resource_discoveries] #{output.data}")
        output
      end
    end

    # <p>Describes resource discovery association with an Amazon VPC IPAM. An associated resource discovery is a resource discovery that has been associated with an IPAM..</p>
    # @param [Hash | Types::DescribeIpamResourceDiscoveryAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpamResourceDiscoveryAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipam_resource_discovery_associations(
    #     dry_run: false,
    #     ipam_resource_discovery_association_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpamResourceDiscoveryAssociationsOutput
    #   resp.data.ipam_resource_discovery_associations #=> Array<IpamResourceDiscoveryAssociation>
    #   resp.data.ipam_resource_discovery_associations[0] #=> Types::IpamResourceDiscoveryAssociation
    #   resp.data.ipam_resource_discovery_associations[0].owner_id #=> String
    #   resp.data.ipam_resource_discovery_associations[0].ipam_resource_discovery_association_id #=> String
    #   resp.data.ipam_resource_discovery_associations[0].ipam_resource_discovery_association_arn #=> String
    #   resp.data.ipam_resource_discovery_associations[0].ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discovery_associations[0].ipam_id #=> String
    #   resp.data.ipam_resource_discovery_associations[0].ipam_arn #=> String
    #   resp.data.ipam_resource_discovery_associations[0].ipam_region #=> String
    #   resp.data.ipam_resource_discovery_associations[0].is_default #=> Boolean
    #   resp.data.ipam_resource_discovery_associations[0].resource_discovery_status #=> String, one of ["active", "not-found"]
    #   resp.data.ipam_resource_discovery_associations[0].state #=> String, one of ["associate-in-progress", "associate-complete", "associate-failed", "disassociate-in-progress", "disassociate-complete", "disassociate-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discovery_associations[0].tags #=> Array<Tag>
    #   resp.data.ipam_resource_discovery_associations[0].tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discovery_associations[0].tags[0].key #=> String
    #   resp.data.ipam_resource_discovery_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_ipam_resource_discovery_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpamResourceDiscoveryAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpamResourceDiscoveryAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipam_resource_discovery_associations,
        tracer: tracer
      )
      Telemetry::DescribeIpamResourceDiscoveryAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_resource_discovery_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipam_resource_discovery_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_resource_discovery_associations] #{output.data}")
        output
      end
    end

    # <p>Get information about your IPAM scopes.</p>
    # @param [Hash | Types::DescribeIpamScopesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpamScopesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipam_scopes(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpamScopesOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipam_scopes #=> Array<IpamScope>
    #   resp.data.ipam_scopes[0] #=> Types::IpamScope
    #   resp.data.ipam_scopes[0].owner_id #=> String
    #   resp.data.ipam_scopes[0].ipam_scope_id #=> String
    #   resp.data.ipam_scopes[0].ipam_scope_arn #=> String
    #   resp.data.ipam_scopes[0].ipam_arn #=> String
    #   resp.data.ipam_scopes[0].ipam_region #=> String
    #   resp.data.ipam_scopes[0].ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scopes[0].is_default #=> Boolean
    #   resp.data.ipam_scopes[0].description #=> String
    #   resp.data.ipam_scopes[0].pool_count #=> Integer
    #   resp.data.ipam_scopes[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_scopes[0].tags #=> Array<Tag>
    #   resp.data.ipam_scopes[0].tags[0] #=> Types::Tag
    #   resp.data.ipam_scopes[0].tags[0].key #=> String
    #   resp.data.ipam_scopes[0].tags[0].value #=> String
    def describe_ipam_scopes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpamScopesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpamScopes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipam_scopes,
        tracer: tracer
      )
      Telemetry::DescribeIpamScopes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_scopes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipam_scopes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipam_scopes] #{output.data}")
        output
      end
    end

    # <p>Get information about your IPAM pools.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::DescribeIpamsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpamsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipams(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpamsOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipams #=> Array<Ipam>
    #   resp.data.ipams[0] #=> Types::Ipam
    #   resp.data.ipams[0].owner_id #=> String
    #   resp.data.ipams[0].ipam_id #=> String
    #   resp.data.ipams[0].ipam_arn #=> String
    #   resp.data.ipams[0].ipam_region #=> String
    #   resp.data.ipams[0].public_default_scope_id #=> String
    #   resp.data.ipams[0].private_default_scope_id #=> String
    #   resp.data.ipams[0].scope_count #=> Integer
    #   resp.data.ipams[0].description #=> String
    #   resp.data.ipams[0].operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipams[0].operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipams[0].operating_regions[0].region_name #=> String
    #   resp.data.ipams[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipams[0].tags #=> Array<Tag>
    #   resp.data.ipams[0].tags[0] #=> Types::Tag
    #   resp.data.ipams[0].tags[0].key #=> String
    #   resp.data.ipams[0].tags[0].value #=> String
    #   resp.data.ipams[0].default_resource_discovery_id #=> String
    #   resp.data.ipams[0].default_resource_discovery_association_id #=> String
    #   resp.data.ipams[0].resource_discovery_association_count #=> Integer
    #   resp.data.ipams[0].state_message #=> String
    #   resp.data.ipams[0].tier #=> String, one of ["free", "advanced"]
    def describe_ipams(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpamsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpams.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipams,
        tracer: tracer
      )
      Telemetry::DescribeIpams.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipams] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipams] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipams] #{output.data}")
        output
      end
    end

    # <p>Describes your IPv6 address pools.</p>
    # @param [Hash | Types::DescribeIpv6PoolsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeIpv6PoolsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_ipv6_pools(
    #     pool_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeIpv6PoolsOutput
    #   resp.data.ipv6_pools #=> Array<Ipv6Pool>
    #   resp.data.ipv6_pools[0] #=> Types::Ipv6Pool
    #   resp.data.ipv6_pools[0].pool_id #=> String
    #   resp.data.ipv6_pools[0].description #=> String
    #   resp.data.ipv6_pools[0].pool_cidr_blocks #=> Array<PoolCidrBlock>
    #   resp.data.ipv6_pools[0].pool_cidr_blocks[0] #=> Types::PoolCidrBlock
    #   resp.data.ipv6_pools[0].pool_cidr_blocks[0].cidr #=> String
    #   resp.data.ipv6_pools[0].tags #=> Array<Tag>
    #   resp.data.ipv6_pools[0].tags[0] #=> Types::Tag
    #   resp.data.ipv6_pools[0].tags[0].key #=> String
    #   resp.data.ipv6_pools[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_ipv6_pools(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeIpv6PoolsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeIpv6Pools.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_ipv6_pools,
        tracer: tracer
      )
      Telemetry::DescribeIpv6Pools.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipv6_pools] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_ipv6_pools] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_ipv6_pools] #{output.data}")
        output
      end
    end

    # <p>Describes the specified key pairs or all of your key pairs.</p>
    #          <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a>
    # 				in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeKeyPairsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeKeyPairsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_key_pairs(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     key_names: [
    #       'member'
    #     ],
    #     key_pair_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     include_public_key: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeKeyPairsOutput
    #   resp.data.key_pairs #=> Array<KeyPairInfo>
    #   resp.data.key_pairs[0] #=> Types::KeyPairInfo
    #   resp.data.key_pairs[0].key_pair_id #=> String
    #   resp.data.key_pairs[0].key_fingerprint #=> String
    #   resp.data.key_pairs[0].key_name #=> String
    #   resp.data.key_pairs[0].key_type #=> String, one of ["rsa", "ed25519"]
    #   resp.data.key_pairs[0].tags #=> Array<Tag>
    #   resp.data.key_pairs[0].tags[0] #=> Types::Tag
    #   resp.data.key_pairs[0].tags[0].key #=> String
    #   resp.data.key_pairs[0].tags[0].value #=> String
    #   resp.data.key_pairs[0].public_key #=> String
    #   resp.data.key_pairs[0].create_time #=> Time
    # @example To display a key pair
    #   # This example displays the fingerprint for the specified key.
    #   resp = client.describe_key_pairs({
    #     key_names: [
    #       "my-key-pair"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     key_pairs: [
    #       {
    #         key_name: "my-key-pair",
    #         key_fingerprint: "1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f"
    #       }
    #     ]
    #   }
    def describe_key_pairs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeKeyPairsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeKeyPairs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_key_pairs,
        tracer: tracer
      )
      Telemetry::DescribeKeyPairs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_key_pairs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_key_pairs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_key_pairs] #{output.data}")
        output
      end
    end

    # <p>Describes one or more versions of a specified launch template. You can describe all
    #             versions, individual versions, or a range of versions. You can also describe all the
    #             latest versions or all the default versions of all the launch templates in your
    #             account.</p>
    # @param [Hash | Types::DescribeLaunchTemplateVersionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLaunchTemplateVersionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_launch_template_versions(
    #     dry_run: false,
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     versions: [
    #       'member'
    #     ],
    #     min_version: 'MinVersion',
    #     max_version: 'MaxVersion',
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     resolve_alias: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLaunchTemplateVersionsOutput
    #   resp.data.launch_template_versions #=> Array<LaunchTemplateVersion>
    #   resp.data.launch_template_versions[0] #=> Types::LaunchTemplateVersion
    #   resp.data.launch_template_versions[0].launch_template_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_name #=> String
    #   resp.data.launch_template_versions[0].version_number #=> Integer
    #   resp.data.launch_template_versions[0].version_description #=> String
    #   resp.data.launch_template_versions[0].create_time #=> Time
    #   resp.data.launch_template_versions[0].created_by #=> String
    #   resp.data.launch_template_versions[0].default_version #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data #=> Types::ResponseLaunchTemplateData
    #   resp.data.launch_template_versions[0].launch_template_data.kernel_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.ebs_optimized #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.iam_instance_profile #=> Types::LaunchTemplateIamInstanceProfileSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.iam_instance_profile.arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.iam_instance_profile.name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings #=> Array<LaunchTemplateBlockDeviceMapping>
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0] #=> Types::LaunchTemplateBlockDeviceMapping
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].device_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs #=> Types::LaunchTemplateEbsBlockDevice
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.block_device_mappings[0].no_device #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces #=> Array<LaunchTemplateInstanceNetworkInterfaceSpecification>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0] #=> Types::LaunchTemplateInstanceNetworkInterfaceSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].description #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].device_index #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].groups #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].groups[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].interface_type #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].subnet_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].primary_ipv6 #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ena_srd_specification #=> Types::LaunchTemplateEnaSrdSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification #=> Types::LaunchTemplateEnaSrdUdpSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].connection_tracking_specification #=> Types::ConnectionTrackingSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].connection_tracking_specification.tcp_established_timeout #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].connection_tracking_specification.udp_timeout #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.network_interfaces[0].connection_tracking_specification.udp_stream_timeout #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.image_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.launch_template_versions[0].launch_template_data.key_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.monitoring #=> Types::LaunchTemplatesMonitoring
    #   resp.data.launch_template_versions[0].launch_template_data.monitoring.enabled #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.placement #=> Types::LaunchTemplatePlacement
    #   resp.data.launch_template_versions[0].launch_template_data.placement.availability_zone #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.affinity #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.group_name #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.host_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.launch_template_versions[0].launch_template_data.placement.spread_domain #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.host_resource_group_arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.placement.partition_number #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.placement.group_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.ram_disk_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.disable_api_termination #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.instance_initiated_shutdown_behavior #=> String, one of ["stop", "terminate"]
    #   resp.data.launch_template_versions[0].launch_template_data.user_data #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications #=> Array<LaunchTemplateTagSpecification>
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0] #=> Types::LaunchTemplateTagSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags[0].key #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.tag_specifications[0].tags[0].value #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_gpu_specifications #=> Array<ElasticGpuSpecificationResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_gpu_specifications[0] #=> Types::ElasticGpuSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_gpu_specifications[0].type #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators #=> Array<LaunchTemplateElasticInferenceAcceleratorResponse>
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators[0] #=> Types::LaunchTemplateElasticInferenceAcceleratorResponse
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators[0].type #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.elastic_inference_accelerators[0].count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.security_group_ids #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.security_group_ids[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.security_groups #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options #=> Types::LaunchTemplateInstanceMarketOptions
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.market_type #=> String, one of ["spot", "capacity-block"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options #=> Types::LaunchTemplateSpotMarketOptions
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.max_price #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.spot_instance_type #=> String, one of ["one-time", "persistent"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.block_duration_minutes #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.valid_until #=> Time
    #   resp.data.launch_template_versions[0].launch_template_data.instance_market_options.spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.launch_template_versions[0].launch_template_data.credit_specification #=> Types::CreditSpecification
    #   resp.data.launch_template_versions[0].launch_template_data.credit_specification.cpu_credits #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options #=> Types::LaunchTemplateCpuOptions
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options.core_count #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options.threads_per_core #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.cpu_options.amd_sev_snp #=> String, one of ["enabled", "disabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification #=> Types::LaunchTemplateCapacityReservationSpecificationResponse
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.license_specifications #=> Array<LaunchTemplateLicenseConfiguration>
    #   resp.data.launch_template_versions[0].launch_template_data.license_specifications[0] #=> Types::LaunchTemplateLicenseConfiguration
    #   resp.data.launch_template_versions[0].launch_template_data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.hibernation_options #=> Types::LaunchTemplateHibernationOptions
    #   resp.data.launch_template_versions[0].launch_template_data.hibernation_options.configured #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options #=> Types::LaunchTemplateInstanceMetadataOptions
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.enclave_options #=> Types::LaunchTemplateEnclaveOptions
    #   resp.data.launch_template_versions[0].launch_template_data.enclave_options.enabled #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_bandwidth_gbps #=> Types::NetworkBandwidthGbps
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_bandwidth_gbps.min #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.network_bandwidth_gbps.max #=> Float
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.allowed_instance_types #=> Array<String>
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.allowed_instance_types[0] #=> String
    #   resp.data.launch_template_versions[0].launch_template_data.instance_requirements.max_spot_price_as_percentage_of_optimal_on_demand_price #=> Integer
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options #=> Types::LaunchTemplatePrivateDnsNameOptions
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.launch_template_versions[0].launch_template_data.maintenance_options #=> Types::LaunchTemplateInstanceMaintenanceOptions
    #   resp.data.launch_template_versions[0].launch_template_data.maintenance_options.auto_recovery #=> String, one of ["default", "disabled"]
    #   resp.data.launch_template_versions[0].launch_template_data.disable_api_stop #=> Boolean
    #   resp.data.next_token #=> String
    # @example To describe the versions for a launch template
    #   # This example describes the versions for the specified launch template.
    #   resp = client.describe_launch_template_versions({
    #     launch_template_id: "068f72b72934aff71"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_template_versions: [
    #       {
    #         launch_template_id: "lt-068f72b72934aff71",
    #         launch_template_name: "Webservers",
    #         version_number: 2,
    #         created_by: "arn:aws:iam::123456789102:root",
    #         launch_template_data: {
    #           key_name: "kp-us-east",
    #           image_id: "ami-6057e21a",
    #           instance_type: "t2.medium",
    #           network_interfaces: [
    #             {
    #               subnet_id: "subnet-1a2b3c4d",
    #               device_index: 0,
    #               groups: [
    #                 "sg-7c227019"
    #               ]
    #             }
    #           ]
    #         },
    #         default_version: false,
    #         create_time: Time.parse('2017-11-20T13:12:32.000Z')
    #       },
    #       {
    #         launch_template_id: "lt-068f72b72934aff71",
    #         launch_template_name: "Webservers",
    #         version_number: 1,
    #         created_by: "arn:aws:iam::123456789102:root",
    #         launch_template_data: {
    #           user_data: "",
    #           key_name: "kp-us-east",
    #           image_id: "ami-aabbcc11",
    #           instance_type: "t2.medium",
    #           network_interfaces: [
    #             {
    #               subnet_id: "subnet-7b16de0c",
    #               device_index: 0,
    #               delete_on_termination: false,
    #               groups: [
    #                 "sg-7c227019"
    #               ],
    #               associate_public_ip_address: true
    #             }
    #           ]
    #         },
    #         default_version: true,
    #         create_time: Time.parse('2017-11-20T12:52:33.000Z')
    #       }
    #     ]
    #   }
    def describe_launch_template_versions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLaunchTemplateVersionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLaunchTemplateVersions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_launch_template_versions,
        tracer: tracer
      )
      Telemetry::DescribeLaunchTemplateVersions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_launch_template_versions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_launch_template_versions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_launch_template_versions] #{output.data}")
        output
      end
    end

    # <p>Describes one or more launch templates.</p>
    # @param [Hash | Types::DescribeLaunchTemplatesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLaunchTemplatesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_launch_templates(
    #     dry_run: false,
    #     launch_template_ids: [
    #       'member'
    #     ],
    #     launch_template_names: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLaunchTemplatesOutput
    #   resp.data.launch_templates #=> Array<LaunchTemplate>
    #   resp.data.launch_templates[0] #=> Types::LaunchTemplate
    #   resp.data.launch_templates[0].launch_template_id #=> String
    #   resp.data.launch_templates[0].launch_template_name #=> String
    #   resp.data.launch_templates[0].create_time #=> Time
    #   resp.data.launch_templates[0].created_by #=> String
    #   resp.data.launch_templates[0].default_version_number #=> Integer
    #   resp.data.launch_templates[0].latest_version_number #=> Integer
    #   resp.data.launch_templates[0].tags #=> Array<Tag>
    #   resp.data.launch_templates[0].tags[0] #=> Types::Tag
    #   resp.data.launch_templates[0].tags[0].key #=> String
    #   resp.data.launch_templates[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    # @example To describe a launch template
    #   # This example describes the specified launch template.
    #   resp = client.describe_launch_templates({
    #     launch_template_ids: [
    #       "lt-01238c059e3466abc"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_templates: [
    #       {
    #         latest_version_number: 1,
    #         launch_template_name: "my-template",
    #         launch_template_id: "lt-01238c059e3466abc",
    #         created_by: "arn:aws:iam::123456789012:root",
    #         create_time: Time.parse('2018-01-16T04:32:57.000Z'),
    #         default_version_number: 1
    #       }
    #     ]
    #   }
    def describe_launch_templates(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLaunchTemplatesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLaunchTemplates.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_launch_templates,
        tracer: tracer
      )
      Telemetry::DescribeLaunchTemplates.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_launch_templates] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_launch_templates] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_launch_templates] #{output.data}")
        output
      end
    end

    # <p>Describes the associations between virtual interface groups and local gateway route tables.</p>
    # @param [Hash | Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_local_gateway_route_table_virtual_interface_group_associations(
    #     local_gateway_route_table_virtual_interface_group_association_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations #=> Array<LocalGatewayRouteTableVirtualInterfaceGroupAssociation>
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0] #=> Types::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_route_table_virtual_interface_group_association_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_virtual_interface_group_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].owner_id #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].state #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags[0].key #=> String
    #   resp.data.local_gateway_route_table_virtual_interface_group_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_local_gateway_route_table_virtual_interface_group_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_local_gateway_route_table_virtual_interface_group_associations,
        tracer: tracer
      )
      Telemetry::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_table_virtual_interface_group_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_table_virtual_interface_group_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_table_virtual_interface_group_associations] #{output.data}")
        output
      end
    end

    # <p>Describes the specified associations between VPCs and local gateway route tables.</p>
    # @param [Hash | Types::DescribeLocalGatewayRouteTableVpcAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLocalGatewayRouteTableVpcAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_local_gateway_route_table_vpc_associations(
    #     local_gateway_route_table_vpc_association_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLocalGatewayRouteTableVpcAssociationsOutput
    #   resp.data.local_gateway_route_table_vpc_associations #=> Array<LocalGatewayRouteTableVpcAssociation>
    #   resp.data.local_gateway_route_table_vpc_associations[0] #=> Types::LocalGatewayRouteTableVpcAssociation
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_route_table_vpc_association_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].local_gateway_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].vpc_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].owner_id #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].state #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags[0].key #=> String
    #   resp.data.local_gateway_route_table_vpc_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_local_gateway_route_table_vpc_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLocalGatewayRouteTableVpcAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLocalGatewayRouteTableVpcAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_local_gateway_route_table_vpc_associations,
        tracer: tracer
      )
      Telemetry::DescribeLocalGatewayRouteTableVpcAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_table_vpc_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_table_vpc_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_table_vpc_associations] #{output.data}")
        output
      end
    end

    # <p>Describes one or more local gateway route tables. By default, all local gateway route tables are described.
    #          Alternatively, you can filter the results.</p>
    # @param [Hash | Types::DescribeLocalGatewayRouteTablesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLocalGatewayRouteTablesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_local_gateway_route_tables(
    #     local_gateway_route_table_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLocalGatewayRouteTablesOutput
    #   resp.data.local_gateway_route_tables #=> Array<LocalGatewayRouteTable>
    #   resp.data.local_gateway_route_tables[0] #=> Types::LocalGatewayRouteTable
    #   resp.data.local_gateway_route_tables[0].local_gateway_route_table_id #=> String
    #   resp.data.local_gateway_route_tables[0].local_gateway_route_table_arn #=> String
    #   resp.data.local_gateway_route_tables[0].local_gateway_id #=> String
    #   resp.data.local_gateway_route_tables[0].outpost_arn #=> String
    #   resp.data.local_gateway_route_tables[0].owner_id #=> String
    #   resp.data.local_gateway_route_tables[0].state #=> String
    #   resp.data.local_gateway_route_tables[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_route_tables[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_route_tables[0].tags[0].key #=> String
    #   resp.data.local_gateway_route_tables[0].tags[0].value #=> String
    #   resp.data.local_gateway_route_tables[0].mode #=> String, one of ["direct-vpc-routing", "coip"]
    #   resp.data.local_gateway_route_tables[0].state_reason #=> Types::StateReason
    #   resp.data.local_gateway_route_tables[0].state_reason.code #=> String
    #   resp.data.local_gateway_route_tables[0].state_reason.message #=> String
    #   resp.data.next_token #=> String
    def describe_local_gateway_route_tables(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLocalGatewayRouteTablesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLocalGatewayRouteTables.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_local_gateway_route_tables,
        tracer: tracer
      )
      Telemetry::DescribeLocalGatewayRouteTables.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_tables] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_tables] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_route_tables] #{output.data}")
        output
      end
    end

    # <p>Describes the specified local gateway virtual interface groups.</p>
    # @param [Hash | Types::DescribeLocalGatewayVirtualInterfaceGroupsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLocalGatewayVirtualInterfaceGroupsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_local_gateway_virtual_interface_groups(
    #     local_gateway_virtual_interface_group_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLocalGatewayVirtualInterfaceGroupsOutput
    #   resp.data.local_gateway_virtual_interface_groups #=> Array<LocalGatewayVirtualInterfaceGroup>
    #   resp.data.local_gateway_virtual_interface_groups[0] #=> Types::LocalGatewayVirtualInterfaceGroup
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_virtual_interface_group_id #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_virtual_interface_ids #=> Array<String>
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_virtual_interface_ids[0] #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].local_gateway_id #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].owner_id #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_virtual_interface_groups[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_virtual_interface_groups[0].tags[0].key #=> String
    #   resp.data.local_gateway_virtual_interface_groups[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_local_gateway_virtual_interface_groups(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLocalGatewayVirtualInterfaceGroupsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLocalGatewayVirtualInterfaceGroups.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_local_gateway_virtual_interface_groups,
        tracer: tracer
      )
      Telemetry::DescribeLocalGatewayVirtualInterfaceGroups.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_virtual_interface_groups] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_virtual_interface_groups] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_virtual_interface_groups] #{output.data}")
        output
      end
    end

    # <p>Describes the specified local gateway virtual interfaces.</p>
    # @param [Hash | Types::DescribeLocalGatewayVirtualInterfacesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLocalGatewayVirtualInterfacesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_local_gateway_virtual_interfaces(
    #     local_gateway_virtual_interface_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLocalGatewayVirtualInterfacesOutput
    #   resp.data.local_gateway_virtual_interfaces #=> Array<LocalGatewayVirtualInterface>
    #   resp.data.local_gateway_virtual_interfaces[0] #=> Types::LocalGatewayVirtualInterface
    #   resp.data.local_gateway_virtual_interfaces[0].local_gateway_virtual_interface_id #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].local_gateway_id #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].vlan #=> Integer
    #   resp.data.local_gateway_virtual_interfaces[0].local_address #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].peer_address #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].local_bgp_asn #=> Integer
    #   resp.data.local_gateway_virtual_interfaces[0].peer_bgp_asn #=> Integer
    #   resp.data.local_gateway_virtual_interfaces[0].owner_id #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].tags #=> Array<Tag>
    #   resp.data.local_gateway_virtual_interfaces[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateway_virtual_interfaces[0].tags[0].key #=> String
    #   resp.data.local_gateway_virtual_interfaces[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_local_gateway_virtual_interfaces(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLocalGatewayVirtualInterfacesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLocalGatewayVirtualInterfaces.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_local_gateway_virtual_interfaces,
        tracer: tracer
      )
      Telemetry::DescribeLocalGatewayVirtualInterfaces.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_virtual_interfaces] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_virtual_interfaces] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateway_virtual_interfaces] #{output.data}")
        output
      end
    end

    # <p>Describes one or more local gateways. By default, all local gateways are described.
    #         Alternatively, you can filter the results.</p>
    # @param [Hash | Types::DescribeLocalGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLocalGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_local_gateways(
    #     local_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLocalGatewaysOutput
    #   resp.data.local_gateways #=> Array<LocalGateway>
    #   resp.data.local_gateways[0] #=> Types::LocalGateway
    #   resp.data.local_gateways[0].local_gateway_id #=> String
    #   resp.data.local_gateways[0].outpost_arn #=> String
    #   resp.data.local_gateways[0].owner_id #=> String
    #   resp.data.local_gateways[0].state #=> String
    #   resp.data.local_gateways[0].tags #=> Array<Tag>
    #   resp.data.local_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.local_gateways[0].tags[0].key #=> String
    #   resp.data.local_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_local_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLocalGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLocalGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_local_gateways,
        tracer: tracer
      )
      Telemetry::DescribeLocalGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_local_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_local_gateways] #{output.data}")
        output
      end
    end

    # <p>Describes the lock status for a snapshot.</p>
    # @param [Hash | Types::DescribeLockedSnapshotsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeLockedSnapshotsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_locked_snapshots(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     snapshot_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeLockedSnapshotsOutput
    #   resp.data.snapshots #=> Array<LockedSnapshotsInfo>
    #   resp.data.snapshots[0] #=> Types::LockedSnapshotsInfo
    #   resp.data.snapshots[0].owner_id #=> String
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].lock_state #=> String, one of ["compliance", "governance", "compliance-cooloff", "expired"]
    #   resp.data.snapshots[0].lock_duration #=> Integer
    #   resp.data.snapshots[0].cool_off_period #=> Integer
    #   resp.data.snapshots[0].cool_off_period_expires_on #=> Time
    #   resp.data.snapshots[0].lock_created_on #=> Time
    #   resp.data.snapshots[0].lock_duration_start_time #=> Time
    #   resp.data.snapshots[0].lock_expires_on #=> Time
    #   resp.data.next_token #=> String
    def describe_locked_snapshots(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeLockedSnapshotsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeLockedSnapshots.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_locked_snapshots,
        tracer: tracer
      )
      Telemetry::DescribeLockedSnapshots.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_locked_snapshots] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_locked_snapshots] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_locked_snapshots] #{output.data}")
        output
      end
    end

    # <p>Describes your managed prefix lists and any Amazon Web Services-managed prefix lists.</p>
    #          <p>To view the entries for your prefix list, use <a>GetManagedPrefixListEntries</a>.</p>
    # @param [Hash | Types::DescribeManagedPrefixListsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeManagedPrefixListsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_managed_prefix_lists(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeManagedPrefixListsOutput
    #   resp.data.next_token #=> String
    #   resp.data.prefix_lists #=> Array<ManagedPrefixList>
    #   resp.data.prefix_lists[0] #=> Types::ManagedPrefixList
    #   resp.data.prefix_lists[0].prefix_list_id #=> String
    #   resp.data.prefix_lists[0].address_family #=> String
    #   resp.data.prefix_lists[0].state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_lists[0].state_message #=> String
    #   resp.data.prefix_lists[0].prefix_list_arn #=> String
    #   resp.data.prefix_lists[0].prefix_list_name #=> String
    #   resp.data.prefix_lists[0].max_entries #=> Integer
    #   resp.data.prefix_lists[0].version #=> Integer
    #   resp.data.prefix_lists[0].tags #=> Array<Tag>
    #   resp.data.prefix_lists[0].tags[0] #=> Types::Tag
    #   resp.data.prefix_lists[0].tags[0].key #=> String
    #   resp.data.prefix_lists[0].tags[0].value #=> String
    #   resp.data.prefix_lists[0].owner_id #=> String
    def describe_managed_prefix_lists(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeManagedPrefixListsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeManagedPrefixLists.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_managed_prefix_lists,
        tracer: tracer
      )
      Telemetry::DescribeManagedPrefixLists.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_managed_prefix_lists] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_managed_prefix_lists] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_managed_prefix_lists] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Describes your Elastic IP addresses that are being moved from or being restored to the EC2-Classic platform.
    #       This request does not return information about any other Elastic IP addresses in your account.</p>
    # @param [Hash | Types::DescribeMovingAddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeMovingAddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_moving_addresses(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeMovingAddressesOutput
    #   resp.data.moving_address_statuses #=> Array<MovingAddressStatus>
    #   resp.data.moving_address_statuses[0] #=> Types::MovingAddressStatus
    #   resp.data.moving_address_statuses[0].move_status #=> String, one of ["movingToVpc", "restoringToClassic"]
    #   resp.data.moving_address_statuses[0].public_ip #=> String
    #   resp.data.next_token #=> String
    # @example To describe your moving addresses
    #   resp = client.describe_moving_addresses()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     moving_address_statuses: [
    #       {
    #         public_ip: "198.51.100.0",
    #         move_status: "movingToVpc"
    #       }
    #     ]
    #   }
    def describe_moving_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeMovingAddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeMovingAddresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_moving_addresses,
        tracer: tracer
      )
      Telemetry::DescribeMovingAddresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_moving_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_moving_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_moving_addresses] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your NAT gateways.</p>
    # @param [Hash | Types::DescribeNatGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNatGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_nat_gateways(
    #     dry_run: false,
    #     filter: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     nat_gateway_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNatGatewaysOutput
    #   resp.data.nat_gateways #=> Array<NatGateway>
    #   resp.data.nat_gateways[0] #=> Types::NatGateway
    #   resp.data.nat_gateways[0].create_time #=> Time
    #   resp.data.nat_gateways[0].delete_time #=> Time
    #   resp.data.nat_gateways[0].failure_code #=> String
    #   resp.data.nat_gateways[0].failure_message #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].association_id #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].is_primary #=> Boolean
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].failure_message #=> String
    #   resp.data.nat_gateways[0].nat_gateway_addresses[0].status #=> String, one of ["assigning", "unassigning", "associating", "disassociating", "succeeded", "failed"]
    #   resp.data.nat_gateways[0].nat_gateway_id #=> String
    #   resp.data.nat_gateways[0].provisioned_bandwidth #=> Types::ProvisionedBandwidth
    #   resp.data.nat_gateways[0].provisioned_bandwidth.provision_time #=> Time
    #   resp.data.nat_gateways[0].provisioned_bandwidth.provisioned #=> String
    #   resp.data.nat_gateways[0].provisioned_bandwidth.request_time #=> Time
    #   resp.data.nat_gateways[0].provisioned_bandwidth.requested #=> String
    #   resp.data.nat_gateways[0].provisioned_bandwidth.status #=> String
    #   resp.data.nat_gateways[0].state #=> String, one of ["pending", "failed", "available", "deleting", "deleted"]
    #   resp.data.nat_gateways[0].subnet_id #=> String
    #   resp.data.nat_gateways[0].vpc_id #=> String
    #   resp.data.nat_gateways[0].tags #=> Array<Tag>
    #   resp.data.nat_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.nat_gateways[0].tags[0].key #=> String
    #   resp.data.nat_gateways[0].tags[0].value #=> String
    #   resp.data.nat_gateways[0].connectivity_type #=> String, one of ["private", "public"]
    #   resp.data.next_token #=> String
    # @example To describe a NAT gateway
    #   # This example describes the NAT gateway for the specified VPC.
    #   resp = client.describe_nat_gateways({
    #     filter: [
    #       {
    #         name: "vpc-id",
    #         values: [
    #           "vpc-1a2b3c4d"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     nat_gateways: [
    #       {
    #         nat_gateway_addresses: [
    #           {
    #             public_ip: "198.11.222.333",
    #             network_interface_id: "eni-9dec76cd",
    #             allocation_id: "eipalloc-89c620ec",
    #             private_ip: "10.0.0.149"
    #           }
    #         ],
    #         vpc_id: "vpc-1a2b3c4d",
    #         state: "available",
    #         nat_gateway_id: "nat-05dba92075d71c408",
    #         subnet_id: "subnet-847e4dc2",
    #         create_time: Time.parse('2015-12-01T12:26:55.983Z')
    #       }
    #     ]
    #   }
    def describe_nat_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNatGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNatGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_nat_gateways,
        tracer: tracer
      )
      Telemetry::DescribeNatGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_nat_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_nat_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_nat_gateways] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your network ACLs.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::DescribeNetworkAclsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkAclsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_acls(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     network_acl_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkAclsOutput
    #   resp.data.network_acls #=> Array<NetworkAcl>
    #   resp.data.network_acls[0] #=> Types::NetworkAcl
    #   resp.data.network_acls[0].associations #=> Array<NetworkAclAssociation>
    #   resp.data.network_acls[0].associations[0] #=> Types::NetworkAclAssociation
    #   resp.data.network_acls[0].associations[0].network_acl_association_id #=> String
    #   resp.data.network_acls[0].associations[0].network_acl_id #=> String
    #   resp.data.network_acls[0].associations[0].subnet_id #=> String
    #   resp.data.network_acls[0].entries #=> Array<NetworkAclEntry>
    #   resp.data.network_acls[0].entries[0] #=> Types::NetworkAclEntry
    #   resp.data.network_acls[0].entries[0].cidr_block #=> String
    #   resp.data.network_acls[0].entries[0].egress #=> Boolean
    #   resp.data.network_acls[0].entries[0].icmp_type_code #=> Types::IcmpTypeCode
    #   resp.data.network_acls[0].entries[0].icmp_type_code.code #=> Integer
    #   resp.data.network_acls[0].entries[0].icmp_type_code.type #=> Integer
    #   resp.data.network_acls[0].entries[0].ipv6_cidr_block #=> String
    #   resp.data.network_acls[0].entries[0].port_range #=> Types::PortRange
    #   resp.data.network_acls[0].entries[0].port_range.from #=> Integer
    #   resp.data.network_acls[0].entries[0].port_range.to #=> Integer
    #   resp.data.network_acls[0].entries[0].protocol #=> String
    #   resp.data.network_acls[0].entries[0].rule_action #=> String, one of ["allow", "deny"]
    #   resp.data.network_acls[0].entries[0].rule_number #=> Integer
    #   resp.data.network_acls[0].is_default #=> Boolean
    #   resp.data.network_acls[0].network_acl_id #=> String
    #   resp.data.network_acls[0].tags #=> Array<Tag>
    #   resp.data.network_acls[0].tags[0] #=> Types::Tag
    #   resp.data.network_acls[0].tags[0].key #=> String
    #   resp.data.network_acls[0].tags[0].value #=> String
    #   resp.data.network_acls[0].vpc_id #=> String
    #   resp.data.network_acls[0].owner_id #=> String
    #   resp.data.next_token #=> String
    # @example To describe a network ACL
    #   # This example describes the specified network ACL.
    #   resp = client.describe_network_acls({
    #     network_acl_ids: [
    #       "acl-5fb85d36"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_acls: [
    #       {
    #         associations: [
    #           {
    #             subnet_id: "subnet-65ea5f08",
    #             network_acl_id: "acl-9aeb5ef7",
    #             network_acl_association_id: "aclassoc-66ea5f0b"
    #           }
    #         ],
    #         network_acl_id: "acl-5fb85d36",
    #         vpc_id: "vpc-a01106c2",
    #         tags: [
    #
    #         ],
    #         entries: [
    #           {
    #             cidr_block: "0.0.0.0/0",
    #             rule_number: 32767,
    #             protocol: "-1",
    #             egress: true,
    #             rule_action: "deny"
    #           },
    #           {
    #             cidr_block: "0.0.0.0/0",
    #             rule_number: 32767,
    #             protocol: "-1",
    #             egress: false,
    #             rule_action: "deny"
    #           }
    #         ],
    #         is_default: false
    #       }
    #     ]
    #   }
    def describe_network_acls(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkAclsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkAcls.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_acls,
        tracer: tracer
      )
      Telemetry::DescribeNetworkAcls.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_acls] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_acls] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_acls] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Network Access Scope analyses.</p>
    # @param [Hash | Types::DescribeNetworkInsightsAccessScopeAnalysesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInsightsAccessScopeAnalysesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_insights_access_scope_analyses(
    #     network_insights_access_scope_analysis_ids: [
    #       'member'
    #     ],
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId',
    #     analysis_start_time_begin: Time.now,
    #     analysis_start_time_end: Time.now,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInsightsAccessScopeAnalysesOutput
    #   resp.data.network_insights_access_scope_analyses #=> Array<NetworkInsightsAccessScopeAnalysis>
    #   resp.data.network_insights_access_scope_analyses[0] #=> Types::NetworkInsightsAccessScopeAnalysis
    #   resp.data.network_insights_access_scope_analyses[0].network_insights_access_scope_analysis_id #=> String
    #   resp.data.network_insights_access_scope_analyses[0].network_insights_access_scope_analysis_arn #=> String
    #   resp.data.network_insights_access_scope_analyses[0].network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_analyses[0].status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_access_scope_analyses[0].status_message #=> String
    #   resp.data.network_insights_access_scope_analyses[0].warning_message #=> String
    #   resp.data.network_insights_access_scope_analyses[0].start_date #=> Time
    #   resp.data.network_insights_access_scope_analyses[0].end_date #=> Time
    #   resp.data.network_insights_access_scope_analyses[0].findings_found #=> String, one of ["true", "false", "unknown"]
    #   resp.data.network_insights_access_scope_analyses[0].analyzed_eni_count #=> Integer
    #   resp.data.network_insights_access_scope_analyses[0].tags #=> Array<Tag>
    #   resp.data.network_insights_access_scope_analyses[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scope_analyses[0].tags[0].key #=> String
    #   resp.data.network_insights_access_scope_analyses[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_network_insights_access_scope_analyses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInsightsAccessScopeAnalysesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInsightsAccessScopeAnalyses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_insights_access_scope_analyses,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInsightsAccessScopeAnalyses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_access_scope_analyses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_insights_access_scope_analyses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_access_scope_analyses] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Network Access Scopes.</p>
    # @param [Hash | Types::DescribeNetworkInsightsAccessScopesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInsightsAccessScopesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_insights_access_scopes(
    #     network_insights_access_scope_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInsightsAccessScopesOutput
    #   resp.data.network_insights_access_scopes #=> Array<NetworkInsightsAccessScope>
    #   resp.data.network_insights_access_scopes[0] #=> Types::NetworkInsightsAccessScope
    #   resp.data.network_insights_access_scopes[0].network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scopes[0].network_insights_access_scope_arn #=> String
    #   resp.data.network_insights_access_scopes[0].created_date #=> Time
    #   resp.data.network_insights_access_scopes[0].updated_date #=> Time
    #   resp.data.network_insights_access_scopes[0].tags #=> Array<Tag>
    #   resp.data.network_insights_access_scopes[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scopes[0].tags[0].key #=> String
    #   resp.data.network_insights_access_scopes[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_network_insights_access_scopes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInsightsAccessScopesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInsightsAccessScopes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_insights_access_scopes,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInsightsAccessScopes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_access_scopes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_insights_access_scopes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_access_scopes] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your network insights analyses.</p>
    # @param [Hash | Types::DescribeNetworkInsightsAnalysesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInsightsAnalysesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_insights_analyses(
    #     network_insights_analysis_ids: [
    #       'member'
    #     ],
    #     network_insights_path_id: 'NetworkInsightsPathId',
    #     analysis_start_time: Time.now,
    #     analysis_end_time: Time.now,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInsightsAnalysesOutput
    #   resp.data.network_insights_analyses #=> Array<NetworkInsightsAnalysis>
    #   resp.data.network_insights_analyses[0] #=> Types::NetworkInsightsAnalysis
    #   resp.data.network_insights_analyses[0].network_insights_analysis_id #=> String
    #   resp.data.network_insights_analyses[0].network_insights_analysis_arn #=> String
    #   resp.data.network_insights_analyses[0].network_insights_path_id #=> String
    #   resp.data.network_insights_analyses[0].additional_accounts #=> Array<String>
    #   resp.data.network_insights_analyses[0].additional_accounts[0] #=> String
    #   resp.data.network_insights_analyses[0].filter_in_arns #=> Array<String>
    #   resp.data.network_insights_analyses[0].filter_in_arns[0] #=> String
    #   resp.data.network_insights_analyses[0].start_date #=> Time
    #   resp.data.network_insights_analyses[0].status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_analyses[0].status_message #=> String
    #   resp.data.network_insights_analyses[0].warning_message #=> String
    #   resp.data.network_insights_analyses[0].network_path_found #=> Boolean
    #   resp.data.network_insights_analyses[0].forward_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analyses[0].forward_path_components[0] #=> Types::PathComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].sequence_number #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.egress #=> Boolean
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.port_range.from #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.port_range.to #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.rule_action #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].acl_rule.rule_number #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to.id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to.arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].attached_to.name #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.destination_addresses #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.destination_addresses[0] #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.destination_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.source_addresses #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].outbound_header.source_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].inbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.destination_cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.destination_prefix_list_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.egress_only_internet_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.instance_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.nat_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.network_interface_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.origin #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.transit_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.vpc_peering_connection_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.state #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.carrier_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.core_network_arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].route_table_route.local_gateway_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.direction #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.security_group_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.prefix_list_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].security_group_rule.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details #=> Array<AdditionalDetail>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0] #=> Types::AdditionalDetail
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].additional_detail_type #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].vpc_endpoint_service #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_options #=> Array<RuleOption>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_options[0] #=> Types::RuleOption
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_options[0].keyword #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_options[0].settings #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_options[0].settings[0] #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_type_pairs #=> Array<RuleGroupTypePair>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_type_pairs[0] #=> Types::RuleGroupTypePair
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_type_pairs[0].rule_group_arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_type_pairs[0].rule_group_type #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_rule_options_pairs #=> Array<RuleGroupRuleOptionsPair>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_rule_options_pairs[0] #=> Types::RuleGroupRuleOptionsPair
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_rule_options_pairs[0].rule_group_arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].rule_group_rule_options_pairs[0].rule_options #=> Array<RuleOption>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].service_name #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].additional_details[0].load_balancers #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route #=> Types::TransitGatewayRouteTableRoute
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.destination_cidr #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.state #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.route_origin #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.prefix_list_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.attachment_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.resource_id #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].transit_gateway_route_table_route.resource_type #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations #=> Array<Explanation>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0] #=> Types::Explanation
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].acl #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].address #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].addresses #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].availability_zones #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].cidrs #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].customer_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].destination #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].direction #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].explanation_code #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].ingress_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].internet_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].classic_load_balancer_listener #=> Types::AnalysisLoadBalancerListener
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].classic_load_balancer_listener.load_balancer_port #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].classic_load_balancer_listener.instance_port #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_listener_port #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target #=> Types::AnalysisLoadBalancerTarget
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target.address #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target.availability_zone #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target.instance #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target.port #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].load_balancer_target_port #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].missing_component #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].nat_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].network_interface #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].packet_field #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].vpc_peering_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].port #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].prefix_list #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].protocols #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].security_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].security_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].state #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].subnet_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].vpc_endpoint #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].vpn_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].vpn_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].transit_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].transit_gateway_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].transit_gateway_route_table_route #=> Types::TransitGatewayRouteTableRoute
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].transit_gateway_attachment #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].component_account #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].component_region #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule #=> Types::FirewallStatelessRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.rule_group_arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.sources #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.destinations #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.source_ports #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.destination_ports #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.protocols #=> Array<Integer>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.protocols[0] #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.rule_action #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateless_rule.priority #=> Integer
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule #=> Types::FirewallStatefulRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.rule_group_arn #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.sources #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.destinations #=> Array<String>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.source_ports #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.destination_ports #=> Array<PortRange>
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.protocol #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.rule_action #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].explanations[0].firewall_stateful_rule.direction #=> String
    #   resp.data.network_insights_analyses[0].forward_path_components[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.network_insights_analyses[0].forward_path_components[0].firewall_stateless_rule #=> Types::FirewallStatelessRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].firewall_stateful_rule #=> Types::FirewallStatefulRule
    #   resp.data.network_insights_analyses[0].forward_path_components[0].service_name #=> String
    #   resp.data.network_insights_analyses[0].return_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analyses[0].explanations #=> Array<Explanation>
    #   resp.data.network_insights_analyses[0].alternate_path_hints #=> Array<AlternatePathHint>
    #   resp.data.network_insights_analyses[0].alternate_path_hints[0] #=> Types::AlternatePathHint
    #   resp.data.network_insights_analyses[0].alternate_path_hints[0].component_id #=> String
    #   resp.data.network_insights_analyses[0].alternate_path_hints[0].component_arn #=> String
    #   resp.data.network_insights_analyses[0].suggested_accounts #=> Array<String>
    #   resp.data.network_insights_analyses[0].tags #=> Array<Tag>
    #   resp.data.network_insights_analyses[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_analyses[0].tags[0].key #=> String
    #   resp.data.network_insights_analyses[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_network_insights_analyses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInsightsAnalysesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInsightsAnalyses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_insights_analyses,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInsightsAnalyses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_analyses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_insights_analyses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_analyses] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your paths.</p>
    # @param [Hash | Types::DescribeNetworkInsightsPathsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInsightsPathsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_insights_paths(
    #     network_insights_path_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     dry_run: false,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInsightsPathsOutput
    #   resp.data.network_insights_paths #=> Array<NetworkInsightsPath>
    #   resp.data.network_insights_paths[0] #=> Types::NetworkInsightsPath
    #   resp.data.network_insights_paths[0].network_insights_path_id #=> String
    #   resp.data.network_insights_paths[0].network_insights_path_arn #=> String
    #   resp.data.network_insights_paths[0].created_date #=> Time
    #   resp.data.network_insights_paths[0].source #=> String
    #   resp.data.network_insights_paths[0].destination #=> String
    #   resp.data.network_insights_paths[0].source_arn #=> String
    #   resp.data.network_insights_paths[0].destination_arn #=> String
    #   resp.data.network_insights_paths[0].source_ip #=> String
    #   resp.data.network_insights_paths[0].destination_ip #=> String
    #   resp.data.network_insights_paths[0].protocol #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_paths[0].destination_port #=> Integer
    #   resp.data.network_insights_paths[0].tags #=> Array<Tag>
    #   resp.data.network_insights_paths[0].tags[0] #=> Types::Tag
    #   resp.data.network_insights_paths[0].tags[0].key #=> String
    #   resp.data.network_insights_paths[0].tags[0].value #=> String
    #   resp.data.network_insights_paths[0].filter_at_source #=> Types::PathFilter
    #   resp.data.network_insights_paths[0].filter_at_source.source_address #=> String
    #   resp.data.network_insights_paths[0].filter_at_source.source_port_range #=> Types::FilterPortRange
    #   resp.data.network_insights_paths[0].filter_at_source.source_port_range.from_port #=> Integer
    #   resp.data.network_insights_paths[0].filter_at_source.source_port_range.to_port #=> Integer
    #   resp.data.network_insights_paths[0].filter_at_source.destination_address #=> String
    #   resp.data.network_insights_paths[0].filter_at_source.destination_port_range #=> Types::FilterPortRange
    #   resp.data.network_insights_paths[0].filter_at_destination #=> Types::PathFilter
    #   resp.data.next_token #=> String
    def describe_network_insights_paths(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInsightsPathsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInsightsPaths.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_insights_paths,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInsightsPaths.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_paths] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_insights_paths] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_insights_paths] #{output.data}")
        output
      end
    end

    # <p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
    # @param [Hash | Types::DescribeNetworkInterfaceAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInterfaceAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_interface_attribute(
    #     attribute: 'description', # accepts ["description", "groupSet", "sourceDestCheck", "attachment"]
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInterfaceAttributeOutput
    #   resp.data.attachment #=> Types::NetworkInterfaceAttachment
    #   resp.data.attachment.attach_time #=> Time
    #   resp.data.attachment.attachment_id #=> String
    #   resp.data.attachment.delete_on_termination #=> Boolean
    #   resp.data.attachment.device_index #=> Integer
    #   resp.data.attachment.network_card_index #=> Integer
    #   resp.data.attachment.instance_id #=> String
    #   resp.data.attachment.instance_owner_id #=> String
    #   resp.data.attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.attachment.ena_srd_specification #=> Types::AttachmentEnaSrdSpecification
    #   resp.data.attachment.ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.attachment.ena_srd_specification.ena_srd_udp_specification #=> Types::AttachmentEnaSrdUdpSpecification
    #   resp.data.attachment.ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.description #=> Types::AttributeValue
    #   resp.data.description.value #=> String
    #   resp.data.groups #=> Array<GroupIdentifier>
    #   resp.data.groups[0] #=> Types::GroupIdentifier
    #   resp.data.groups[0].group_name #=> String
    #   resp.data.groups[0].group_id #=> String
    #   resp.data.network_interface_id #=> String
    #   resp.data.source_dest_check #=> Types::AttributeBooleanValue
    #   resp.data.source_dest_check.value #=> Boolean
    # @example To describe the attachment attribute of a network interface
    #   # This example describes the attachment attribute of the specified network interface.
    #   resp = client.describe_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     attribute: "attachment"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_interface_id: "eni-686ea200",
    #     attachment: {
    #       status: "attached",
    #       device_index: 0,
    #       attach_time: Time.parse('2015-05-21T20:02:20.000Z'),
    #       instance_id: "i-1234567890abcdef0",
    #       delete_on_termination: true,
    #       attachment_id: "eni-attach-43348162",
    #       instance_owner_id: "123456789012"
    #     }
    #   }
    # @example To describe the description attribute of a network interface
    #   # This example describes the description attribute of the specified network interface.
    #   resp = client.describe_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     attribute: "description"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_interface_id: "eni-686ea200",
    #     description: {
    #       value: "My description"
    #     }
    #   }
    # @example To describe the groupSet attribute of a network interface
    #   # This example describes the groupSet attribute of the specified network interface.
    #   resp = client.describe_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     attribute: "groupSet"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_interface_id: "eni-686ea200",
    #     groups: [
    #       {
    #         group_name: "my-security-group",
    #         group_id: "sg-903004f8"
    #       }
    #     ]
    #   }
    # @example To describe the sourceDestCheck attribute of a network interface
    #   # This example describes the sourceDestCheck attribute of the specified network interface.
    #   resp = client.describe_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     attribute: "sourceDestCheck"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_interface_id: "eni-686ea200",
    #     source_dest_check: {
    #       value: true
    #     }
    #   }
    def describe_network_interface_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInterfaceAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInterfaceAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_interface_attribute,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInterfaceAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_interface_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_interface_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_interface_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the permissions for your network interfaces. </p>
    # @param [Hash | Types::DescribeNetworkInterfacePermissionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInterfacePermissionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_interface_permissions(
    #     network_interface_permission_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInterfacePermissionsOutput
    #   resp.data.network_interface_permissions #=> Array<NetworkInterfacePermission>
    #   resp.data.network_interface_permissions[0] #=> Types::NetworkInterfacePermission
    #   resp.data.network_interface_permissions[0].network_interface_permission_id #=> String
    #   resp.data.network_interface_permissions[0].network_interface_id #=> String
    #   resp.data.network_interface_permissions[0].aws_account_id #=> String
    #   resp.data.network_interface_permissions[0].aws_service #=> String
    #   resp.data.network_interface_permissions[0].permission #=> String, one of ["INSTANCE-ATTACH", "EIP-ASSOCIATE"]
    #   resp.data.network_interface_permissions[0].permission_state #=> Types::NetworkInterfacePermissionState
    #   resp.data.network_interface_permissions[0].permission_state.state #=> String, one of ["pending", "granted", "revoking", "revoked"]
    #   resp.data.network_interface_permissions[0].permission_state.status_message #=> String
    #   resp.data.next_token #=> String
    def describe_network_interface_permissions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInterfacePermissionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInterfacePermissions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_interface_permissions,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInterfacePermissions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_interface_permissions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_interface_permissions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_interface_permissions] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your network interfaces.</p>
    #          <p>If you have a large number of network interfaces, the operation fails unless
    #            you use pagination or one of the following filters: <code>group-id</code>,
    #            <code>mac-address</code>, <code>private-dns-name</code>, <code>private-ip-address</code>,
    #            <code>private-dns-name</code>, <code>subnet-id</code>, or <code>vpc-id</code>.</p>
    # @param [Hash | Types::DescribeNetworkInterfacesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeNetworkInterfacesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_network_interfaces(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     network_interface_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeNetworkInterfacesOutput
    #   resp.data.network_interfaces #=> Array<NetworkInterface>
    #   resp.data.network_interfaces[0] #=> Types::NetworkInterface
    #   resp.data.network_interfaces[0].association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interfaces[0].association.allocation_id #=> String
    #   resp.data.network_interfaces[0].association.association_id #=> String
    #   resp.data.network_interfaces[0].association.ip_owner_id #=> String
    #   resp.data.network_interfaces[0].association.public_dns_name #=> String
    #   resp.data.network_interfaces[0].association.public_ip #=> String
    #   resp.data.network_interfaces[0].association.customer_owned_ip #=> String
    #   resp.data.network_interfaces[0].association.carrier_ip #=> String
    #   resp.data.network_interfaces[0].attachment #=> Types::NetworkInterfaceAttachment
    #   resp.data.network_interfaces[0].attachment.attach_time #=> Time
    #   resp.data.network_interfaces[0].attachment.attachment_id #=> String
    #   resp.data.network_interfaces[0].attachment.delete_on_termination #=> Boolean
    #   resp.data.network_interfaces[0].attachment.device_index #=> Integer
    #   resp.data.network_interfaces[0].attachment.network_card_index #=> Integer
    #   resp.data.network_interfaces[0].attachment.instance_id #=> String
    #   resp.data.network_interfaces[0].attachment.instance_owner_id #=> String
    #   resp.data.network_interfaces[0].attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.network_interfaces[0].attachment.ena_srd_specification #=> Types::AttachmentEnaSrdSpecification
    #   resp.data.network_interfaces[0].attachment.ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.network_interfaces[0].attachment.ena_srd_specification.ena_srd_udp_specification #=> Types::AttachmentEnaSrdUdpSpecification
    #   resp.data.network_interfaces[0].attachment.ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.network_interfaces[0].availability_zone #=> String
    #   resp.data.network_interfaces[0].connection_tracking_configuration #=> Types::ConnectionTrackingConfiguration
    #   resp.data.network_interfaces[0].connection_tracking_configuration.tcp_established_timeout #=> Integer
    #   resp.data.network_interfaces[0].connection_tracking_configuration.udp_stream_timeout #=> Integer
    #   resp.data.network_interfaces[0].connection_tracking_configuration.udp_timeout #=> Integer
    #   resp.data.network_interfaces[0].description #=> String
    #   resp.data.network_interfaces[0].groups #=> Array<GroupIdentifier>
    #   resp.data.network_interfaces[0].groups[0] #=> Types::GroupIdentifier
    #   resp.data.network_interfaces[0].groups[0].group_name #=> String
    #   resp.data.network_interfaces[0].groups[0].group_id #=> String
    #   resp.data.network_interfaces[0].interface_type #=> String, one of ["interface", "natGateway", "efa", "trunk", "load_balancer", "network_load_balancer", "vpc_endpoint", "branch", "transit_gateway", "lambda", "quicksight", "global_accelerator_managed", "api_gateway_managed", "gateway_load_balancer", "gateway_load_balancer_endpoint", "iot_rules_managed", "aws_codestar_connections_managed"]
    #   resp.data.network_interfaces[0].ipv6_addresses #=> Array<NetworkInterfaceIpv6Address>
    #   resp.data.network_interfaces[0].ipv6_addresses[0] #=> Types::NetworkInterfaceIpv6Address
    #   resp.data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.network_interfaces[0].mac_address #=> String
    #   resp.data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.network_interfaces[0].outpost_arn #=> String
    #   resp.data.network_interfaces[0].owner_id #=> String
    #   resp.data.network_interfaces[0].private_dns_name #=> String
    #   resp.data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.network_interfaces[0].private_ip_addresses #=> Array<NetworkInterfacePrivateIpAddress>
    #   resp.data.network_interfaces[0].private_ip_addresses[0] #=> Types::NetworkInterfacePrivateIpAddress
    #   resp.data.network_interfaces[0].private_ip_addresses[0].association #=> Types::NetworkInterfaceAssociation
    #   resp.data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.network_interfaces[0].private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecification>
    #   resp.data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecification
    #   resp.data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecification>
    #   resp.data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecification
    #   resp.data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.network_interfaces[0].requester_id #=> String
    #   resp.data.network_interfaces[0].requester_managed #=> Boolean
    #   resp.data.network_interfaces[0].source_dest_check #=> Boolean
    #   resp.data.network_interfaces[0].status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.network_interfaces[0].subnet_id #=> String
    #   resp.data.network_interfaces[0].tag_set #=> Array<Tag>
    #   resp.data.network_interfaces[0].tag_set[0] #=> Types::Tag
    #   resp.data.network_interfaces[0].tag_set[0].key #=> String
    #   resp.data.network_interfaces[0].tag_set[0].value #=> String
    #   resp.data.network_interfaces[0].vpc_id #=> String
    #   resp.data.network_interfaces[0].deny_all_igw_traffic #=> Boolean
    #   resp.data.network_interfaces[0].ipv6_native #=> Boolean
    #   resp.data.network_interfaces[0].ipv6_address #=> String
    #   resp.data.next_token #=> String
    # @example To describe a network interface
    #   #
    #   resp = client.describe_network_interfaces({
    #     network_interface_ids: [
    #       "eni-e5aa89a3"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     network_interfaces: [
    #       {
    #         status: "in-use",
    #         mac_address: "02:2f:8f:b0:cf:75",
    #         source_dest_check: true,
    #         vpc_id: "vpc-a01106c2",
    #         description: "my network interface",
    #         association: {
    #           public_ip: "203.0.113.12",
    #           association_id: "eipassoc-0fbb766a",
    #           public_dns_name: "ec2-203-0-113-12.compute-1.amazonaws.com",
    #           ip_owner_id: "123456789012"
    #         },
    #         network_interface_id: "eni-e5aa89a3",
    #         private_ip_addresses: [
    #           {
    #             private_dns_name: "ip-10-0-1-17.ec2.internal",
    #             association: {
    #               public_ip: "203.0.113.12",
    #               association_id: "eipassoc-0fbb766a",
    #               public_dns_name: "ec2-203-0-113-12.compute-1.amazonaws.com",
    #               ip_owner_id: "123456789012"
    #             },
    #             primary: true,
    #             private_ip_address: "10.0.1.17"
    #           }
    #         ],
    #         requester_managed: false,
    #         private_dns_name: "ip-10-0-1-17.ec2.internal",
    #         availability_zone: "us-east-1d",
    #         attachment: {
    #           status: "attached",
    #           device_index: 1,
    #           attach_time: Time.parse('2013-11-30T23:36:42.000Z'),
    #           instance_id: "i-1234567890abcdef0",
    #           delete_on_termination: false,
    #           attachment_id: "eni-attach-66c4350a",
    #           instance_owner_id: "123456789012"
    #         },
    #         groups: [
    #           {
    #             group_name: "default",
    #             group_id: "sg-8637d3e3"
    #           }
    #         ],
    #         subnet_id: "subnet-b61f49f0",
    #         owner_id: "123456789012",
    #         tag_set: [
    #
    #         ],
    #         private_ip_address: "10.0.1.17"
    #       }
    #     ]
    #   }
    def describe_network_interfaces(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeNetworkInterfacesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeNetworkInterfaces.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_network_interfaces,
        tracer: tracer
      )
      Telemetry::DescribeNetworkInterfaces.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_interfaces] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_network_interfaces] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_network_interfaces] #{output.data}")
        output
      end
    end

    # <p>Describes the specified placement groups or all of your placement groups. For more
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribePlacementGroupsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribePlacementGroupsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_placement_groups(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     group_names: [
    #       'member'
    #     ],
    #     group_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribePlacementGroupsOutput
    #   resp.data.placement_groups #=> Array<PlacementGroup>
    #   resp.data.placement_groups[0] #=> Types::PlacementGroup
    #   resp.data.placement_groups[0].group_name #=> String
    #   resp.data.placement_groups[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.placement_groups[0].strategy #=> String, one of ["cluster", "spread", "partition"]
    #   resp.data.placement_groups[0].partition_count #=> Integer
    #   resp.data.placement_groups[0].group_id #=> String
    #   resp.data.placement_groups[0].tags #=> Array<Tag>
    #   resp.data.placement_groups[0].tags[0] #=> Types::Tag
    #   resp.data.placement_groups[0].tags[0].key #=> String
    #   resp.data.placement_groups[0].tags[0].value #=> String
    #   resp.data.placement_groups[0].group_arn #=> String
    #   resp.data.placement_groups[0].spread_level #=> String, one of ["host", "rack"]
    def describe_placement_groups(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribePlacementGroupsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribePlacementGroups.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_placement_groups,
        tracer: tracer
      )
      Telemetry::DescribePlacementGroups.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_placement_groups] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_placement_groups] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_placement_groups] #{output.data}")
        output
      end
    end

    # <p>Describes available Amazon Web Services services in a prefix list format, which includes the prefix list
    #             name and prefix list ID of the service and the IP address range for the service.</p>
    #          <p>We recommend that you use <a>DescribeManagedPrefixLists</a> instead.</p>
    # @param [Hash | Types::DescribePrefixListsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribePrefixListsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_prefix_lists(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     prefix_list_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribePrefixListsOutput
    #   resp.data.next_token #=> String
    #   resp.data.prefix_lists #=> Array<PrefixList>
    #   resp.data.prefix_lists[0] #=> Types::PrefixList
    #   resp.data.prefix_lists[0].cidrs #=> Array<String>
    #   resp.data.prefix_lists[0].cidrs[0] #=> String
    #   resp.data.prefix_lists[0].prefix_list_id #=> String
    #   resp.data.prefix_lists[0].prefix_list_name #=> String
    def describe_prefix_lists(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribePrefixListsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribePrefixLists.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_prefix_lists,
        tracer: tracer
      )
      Telemetry::DescribePrefixLists.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_prefix_lists] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_prefix_lists] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_prefix_lists] #{output.data}")
        output
      end
    end

    # <p>Describes the ID format settings for the root user and all IAM roles and IAM users
    #             that have explicitly specified a longer ID (17-character ID) preference. </p>
    #          <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they
    #             explicitly override the settings. This request is useful for identifying those IAM users and IAM roles
    #             that have overridden the default ID settings.</p>
    #          <p>The following resource types support longer IDs: <code>bundle</code> |
    #           <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #           <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #           <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #           <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
    #           <code>network-acl</code> | <code>network-acl-association</code> |
    #           <code>network-interface</code> | <code>network-interface-attachment</code> |
    #           <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
    #           <code>route-table-association</code> | <code>security-group</code> |
    #           <code>snapshot</code> | <code>subnet</code> |
    #           <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
    #           | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
    #           <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    # @param [Hash | Types::DescribePrincipalIdFormatInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribePrincipalIdFormatInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_principal_id_format(
    #     dry_run: false,
    #     resources: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribePrincipalIdFormatOutput
    #   resp.data.principals #=> Array<PrincipalIdFormat>
    #   resp.data.principals[0] #=> Types::PrincipalIdFormat
    #   resp.data.principals[0].arn #=> String
    #   resp.data.principals[0].statuses #=> Array<IdFormat>
    #   resp.data.principals[0].statuses[0] #=> Types::IdFormat
    #   resp.data.principals[0].statuses[0].deadline #=> Time
    #   resp.data.principals[0].statuses[0].resource #=> String
    #   resp.data.principals[0].statuses[0].use_long_ids #=> Boolean
    #   resp.data.next_token #=> String
    def describe_principal_id_format(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribePrincipalIdFormatInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribePrincipalIdFormat.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_principal_id_format,
        tracer: tracer
      )
      Telemetry::DescribePrincipalIdFormat.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_principal_id_format] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_principal_id_format] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_principal_id_format] #{output.data}")
        output
      end
    end

    # <p>Describes the specified IPv4 address pools.</p>
    # @param [Hash | Types::DescribePublicIpv4PoolsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribePublicIpv4PoolsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_public_ipv4_pools(
    #     pool_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribePublicIpv4PoolsOutput
    #   resp.data.public_ipv4_pools #=> Array<PublicIpv4Pool>
    #   resp.data.public_ipv4_pools[0] #=> Types::PublicIpv4Pool
    #   resp.data.public_ipv4_pools[0].pool_id #=> String
    #   resp.data.public_ipv4_pools[0].description #=> String
    #   resp.data.public_ipv4_pools[0].pool_address_ranges #=> Array<PublicIpv4PoolRange>
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0] #=> Types::PublicIpv4PoolRange
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].first_address #=> String
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].last_address #=> String
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].pool_address_ranges[0].available_address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].total_address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].total_available_address_count #=> Integer
    #   resp.data.public_ipv4_pools[0].network_border_group #=> String
    #   resp.data.public_ipv4_pools[0].tags #=> Array<Tag>
    #   resp.data.public_ipv4_pools[0].tags[0] #=> Types::Tag
    #   resp.data.public_ipv4_pools[0].tags[0].key #=> String
    #   resp.data.public_ipv4_pools[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_public_ipv4_pools(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribePublicIpv4PoolsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribePublicIpv4Pools.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_public_ipv4_pools,
        tracer: tracer
      )
      Telemetry::DescribePublicIpv4Pools.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_public_ipv4_pools] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_public_ipv4_pools] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_public_ipv4_pools] #{output.data}")
        output
      end
    end

    # <p>Describes the Regions that are enabled for your account, or all Regions.</p>
    #          <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/ec2-service.html">
    #        Amazon Elastic Compute Cloud endpoints and quotas</a>.</p>
    #          <p>For information about enabling and disabling Regions for your account, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing Amazon Web Services Regions</a> in the <i>Amazon Web Services General Reference</i>.</p>
    # @param [Hash | Types::DescribeRegionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeRegionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_regions(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     region_names: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     all_regions: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeRegionsOutput
    #   resp.data.regions #=> Array<Region>
    #   resp.data.regions[0] #=> Types::Region
    #   resp.data.regions[0].endpoint #=> String
    #   resp.data.regions[0].region_name #=> String
    #   resp.data.regions[0].opt_in_status #=> String
    # @example To describe your regions
    #   resp = client.describe_regions()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     regions: [
    #       {
    #         endpoint: "ec2.ap-south-1.amazonaws.com",
    #         region_name: "ap-south-1"
    #       },
    #       {
    #         endpoint: "ec2.eu-west-1.amazonaws.com",
    #         region_name: "eu-west-1"
    #       },
    #       {
    #         endpoint: "ec2.ap-southeast-1.amazonaws.com",
    #         region_name: "ap-southeast-1"
    #       },
    #       {
    #         endpoint: "ec2.ap-southeast-2.amazonaws.com",
    #         region_name: "ap-southeast-2"
    #       },
    #       {
    #         endpoint: "ec2.eu-central-1.amazonaws.com",
    #         region_name: "eu-central-1"
    #       },
    #       {
    #         endpoint: "ec2.ap-northeast-2.amazonaws.com",
    #         region_name: "ap-northeast-2"
    #       },
    #       {
    #         endpoint: "ec2.ap-northeast-1.amazonaws.com",
    #         region_name: "ap-northeast-1"
    #       },
    #       {
    #         endpoint: "ec2.us-east-1.amazonaws.com",
    #         region_name: "us-east-1"
    #       },
    #       {
    #         endpoint: "ec2.sa-east-1.amazonaws.com",
    #         region_name: "sa-east-1"
    #       },
    #       {
    #         endpoint: "ec2.us-west-1.amazonaws.com",
    #         region_name: "us-west-1"
    #       },
    #       {
    #         endpoint: "ec2.us-west-2.amazonaws.com",
    #         region_name: "us-west-2"
    #       }
    #     ]
    #   }
    def describe_regions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeRegionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeRegions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_regions,
        tracer: tracer
      )
      Telemetry::DescribeRegions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_regions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_regions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_regions] #{output.data}")
        output
      end
    end

    # <p>Describes a root volume replacement task. For more information, see
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html">Replace a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeReplaceRootVolumeTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeReplaceRootVolumeTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_replace_root_volume_tasks(
    #     replace_root_volume_task_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeReplaceRootVolumeTasksOutput
    #   resp.data.replace_root_volume_tasks #=> Array<ReplaceRootVolumeTask>
    #   resp.data.replace_root_volume_tasks[0] #=> Types::ReplaceRootVolumeTask
    #   resp.data.replace_root_volume_tasks[0].replace_root_volume_task_id #=> String
    #   resp.data.replace_root_volume_tasks[0].instance_id #=> String
    #   resp.data.replace_root_volume_tasks[0].task_state #=> String, one of ["pending", "in-progress", "failing", "succeeded", "failed", "failed-detached"]
    #   resp.data.replace_root_volume_tasks[0].start_time #=> String
    #   resp.data.replace_root_volume_tasks[0].complete_time #=> String
    #   resp.data.replace_root_volume_tasks[0].tags #=> Array<Tag>
    #   resp.data.replace_root_volume_tasks[0].tags[0] #=> Types::Tag
    #   resp.data.replace_root_volume_tasks[0].tags[0].key #=> String
    #   resp.data.replace_root_volume_tasks[0].tags[0].value #=> String
    #   resp.data.replace_root_volume_tasks[0].image_id #=> String
    #   resp.data.replace_root_volume_tasks[0].snapshot_id #=> String
    #   resp.data.replace_root_volume_tasks[0].delete_replaced_root_volume #=> Boolean
    #   resp.data.next_token #=> String
    def describe_replace_root_volume_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeReplaceRootVolumeTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeReplaceRootVolumeTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_replace_root_volume_tasks,
        tracer: tracer
      )
      Telemetry::DescribeReplaceRootVolumeTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_replace_root_volume_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_replace_root_volume_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_replace_root_volume_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of the Reserved Instances that you purchased.</p>
    #          <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
    # 				Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeReservedInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeReservedInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_reserved_instances(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     offering_class: 'standard', # accepts ["standard", "convertible"]
    #     reserved_instances_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     offering_type: 'Heavy Utilization' # accepts ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeReservedInstancesOutput
    #   resp.data.reserved_instances #=> Array<ReservedInstances>
    #   resp.data.reserved_instances[0] #=> Types::ReservedInstances
    #   resp.data.reserved_instances[0].availability_zone #=> String
    #   resp.data.reserved_instances[0].duration #=> Integer
    #   resp.data.reserved_instances[0].end #=> Time
    #   resp.data.reserved_instances[0].fixed_price #=> Float
    #   resp.data.reserved_instances[0].instance_count #=> Integer
    #   resp.data.reserved_instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.reserved_instances[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.reserved_instances[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances[0].start #=> Time
    #   resp.data.reserved_instances[0].state #=> String, one of ["payment-pending", "active", "payment-failed", "retired", "queued", "queued-deleted"]
    #   resp.data.reserved_instances[0].usage_price #=> Float
    #   resp.data.reserved_instances[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances[0].instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.reserved_instances[0].offering_class #=> String, one of ["standard", "convertible"]
    #   resp.data.reserved_instances[0].offering_type #=> String, one of ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   resp.data.reserved_instances[0].recurring_charges #=> Array<RecurringCharge>
    #   resp.data.reserved_instances[0].recurring_charges[0] #=> Types::RecurringCharge
    #   resp.data.reserved_instances[0].recurring_charges[0].amount #=> Float
    #   resp.data.reserved_instances[0].recurring_charges[0].frequency #=> String, one of ["Hourly"]
    #   resp.data.reserved_instances[0].scope #=> String, one of ["Availability Zone", "Region"]
    #   resp.data.reserved_instances[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances[0].tags[0].key #=> String
    #   resp.data.reserved_instances[0].tags[0].value #=> String
    def describe_reserved_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeReservedInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeReservedInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_reserved_instances,
        tracer: tracer
      )
      Telemetry::DescribeReservedInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances] #{output.data}")
        output
      end
    end

    # <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p>
    #          <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p>
    #          <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p>
    #          <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    #         in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeReservedInstancesListingsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeReservedInstancesListingsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_reserved_instances_listings(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     reserved_instances_id: 'ReservedInstancesId',
    #     reserved_instances_listing_id: 'ReservedInstancesListingId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeReservedInstancesListingsOutput
    #   resp.data.reserved_instances_listings #=> Array<ReservedInstancesListing>
    #   resp.data.reserved_instances_listings[0] #=> Types::ReservedInstancesListing
    #   resp.data.reserved_instances_listings[0].client_token #=> String
    #   resp.data.reserved_instances_listings[0].create_date #=> Time
    #   resp.data.reserved_instances_listings[0].instance_counts #=> Array<InstanceCount>
    #   resp.data.reserved_instances_listings[0].instance_counts[0] #=> Types::InstanceCount
    #   resp.data.reserved_instances_listings[0].instance_counts[0].instance_count #=> Integer
    #   resp.data.reserved_instances_listings[0].instance_counts[0].state #=> String, one of ["available", "sold", "cancelled", "pending"]
    #   resp.data.reserved_instances_listings[0].price_schedules #=> Array<PriceSchedule>
    #   resp.data.reserved_instances_listings[0].price_schedules[0] #=> Types::PriceSchedule
    #   resp.data.reserved_instances_listings[0].price_schedules[0].active #=> Boolean
    #   resp.data.reserved_instances_listings[0].price_schedules[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_listings[0].price_schedules[0].price #=> Float
    #   resp.data.reserved_instances_listings[0].price_schedules[0].term #=> Integer
    #   resp.data.reserved_instances_listings[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_listings[0].reserved_instances_listing_id #=> String
    #   resp.data.reserved_instances_listings[0].status #=> String, one of ["active", "pending", "cancelled", "closed"]
    #   resp.data.reserved_instances_listings[0].status_message #=> String
    #   resp.data.reserved_instances_listings[0].tags #=> Array<Tag>
    #   resp.data.reserved_instances_listings[0].tags[0] #=> Types::Tag
    #   resp.data.reserved_instances_listings[0].tags[0].key #=> String
    #   resp.data.reserved_instances_listings[0].tags[0].value #=> String
    #   resp.data.reserved_instances_listings[0].update_date #=> Time
    def describe_reserved_instances_listings(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeReservedInstancesListingsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeReservedInstancesListings.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_reserved_instances_listings,
        tracer: tracer
      )
      Telemetry::DescribeReservedInstancesListings.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_listings] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_listings] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_listings] #{output.data}")
        output
      end
    end

    # <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeReservedInstancesModificationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeReservedInstancesModificationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_reserved_instances_modifications(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     reserved_instances_modification_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeReservedInstancesModificationsOutput
    #   resp.data.next_token #=> String
    #   resp.data.reserved_instances_modifications #=> Array<ReservedInstancesModification>
    #   resp.data.reserved_instances_modifications[0] #=> Types::ReservedInstancesModification
    #   resp.data.reserved_instances_modifications[0].client_token #=> String
    #   resp.data.reserved_instances_modifications[0].create_date #=> Time
    #   resp.data.reserved_instances_modifications[0].effective_date #=> Time
    #   resp.data.reserved_instances_modifications[0].modification_results #=> Array<ReservedInstancesModificationResult>
    #   resp.data.reserved_instances_modifications[0].modification_results[0] #=> Types::ReservedInstancesModificationResult
    #   resp.data.reserved_instances_modifications[0].modification_results[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration #=> Types::ReservedInstancesConfiguration
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.availability_zone #=> String
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.instance_count #=> Integer
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.platform #=> String
    #   resp.data.reserved_instances_modifications[0].modification_results[0].target_configuration.scope #=> String, one of ["Availability Zone", "Region"]
    #   resp.data.reserved_instances_modifications[0].reserved_instances_ids #=> Array<ReservedInstancesId>
    #   resp.data.reserved_instances_modifications[0].reserved_instances_ids[0] #=> Types::ReservedInstancesId
    #   resp.data.reserved_instances_modifications[0].reserved_instances_ids[0].reserved_instances_id #=> String
    #   resp.data.reserved_instances_modifications[0].reserved_instances_modification_id #=> String
    #   resp.data.reserved_instances_modifications[0].status #=> String
    #   resp.data.reserved_instances_modifications[0].status_message #=> String
    #   resp.data.reserved_instances_modifications[0].update_date #=> Time
    def describe_reserved_instances_modifications(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeReservedInstancesModificationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeReservedInstancesModifications.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_reserved_instances_modifications,
        tracer: tracer
      )
      Telemetry::DescribeReservedInstancesModifications.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_modifications] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_modifications] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_modifications] #{output.data}")
        output
      end
    end

    # <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p>
    #          <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    # 				in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeReservedInstancesOfferingsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeReservedInstancesOfferingsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_reserved_instances_offerings(
    #     availability_zone: 'AvailabilityZone',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     include_marketplace: false,
    #     instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #     max_duration: 1,
    #     max_instance_count: 1,
    #     min_duration: 1,
    #     offering_class: 'standard', # accepts ["standard", "convertible"]
    #     product_description: 'Linux/UNIX', # accepts ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #     reserved_instances_offering_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     instance_tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     offering_type: 'Heavy Utilization' # accepts ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeReservedInstancesOfferingsOutput
    #   resp.data.reserved_instances_offerings #=> Array<ReservedInstancesOffering>
    #   resp.data.reserved_instances_offerings[0] #=> Types::ReservedInstancesOffering
    #   resp.data.reserved_instances_offerings[0].availability_zone #=> String
    #   resp.data.reserved_instances_offerings[0].duration #=> Integer
    #   resp.data.reserved_instances_offerings[0].fixed_price #=> Float
    #   resp.data.reserved_instances_offerings[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.reserved_instances_offerings[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.reserved_instances_offerings[0].reserved_instances_offering_id #=> String
    #   resp.data.reserved_instances_offerings[0].usage_price #=> Float
    #   resp.data.reserved_instances_offerings[0].currency_code #=> String, one of ["USD"]
    #   resp.data.reserved_instances_offerings[0].instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.reserved_instances_offerings[0].marketplace #=> Boolean
    #   resp.data.reserved_instances_offerings[0].offering_class #=> String, one of ["standard", "convertible"]
    #   resp.data.reserved_instances_offerings[0].offering_type #=> String, one of ["Heavy Utilization", "Medium Utilization", "Light Utilization", "No Upfront", "Partial Upfront", "All Upfront"]
    #   resp.data.reserved_instances_offerings[0].pricing_details #=> Array<PricingDetail>
    #   resp.data.reserved_instances_offerings[0].pricing_details[0] #=> Types::PricingDetail
    #   resp.data.reserved_instances_offerings[0].pricing_details[0].count #=> Integer
    #   resp.data.reserved_instances_offerings[0].pricing_details[0].price #=> Float
    #   resp.data.reserved_instances_offerings[0].recurring_charges #=> Array<RecurringCharge>
    #   resp.data.reserved_instances_offerings[0].recurring_charges[0] #=> Types::RecurringCharge
    #   resp.data.reserved_instances_offerings[0].recurring_charges[0].amount #=> Float
    #   resp.data.reserved_instances_offerings[0].recurring_charges[0].frequency #=> String, one of ["Hourly"]
    #   resp.data.reserved_instances_offerings[0].scope #=> String, one of ["Availability Zone", "Region"]
    #   resp.data.next_token #=> String
    def describe_reserved_instances_offerings(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeReservedInstancesOfferingsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeReservedInstancesOfferings.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_reserved_instances_offerings,
        tracer: tracer
      )
      Telemetry::DescribeReservedInstancesOfferings.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_offerings] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_offerings] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_reserved_instances_offerings] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your route tables.</p>
    #          <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::DescribeRouteTablesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeRouteTablesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_route_tables(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     route_table_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeRouteTablesOutput
    #   resp.data.route_tables #=> Array<RouteTable>
    #   resp.data.route_tables[0] #=> Types::RouteTable
    #   resp.data.route_tables[0].associations #=> Array<RouteTableAssociation>
    #   resp.data.route_tables[0].associations[0] #=> Types::RouteTableAssociation
    #   resp.data.route_tables[0].associations[0].main #=> Boolean
    #   resp.data.route_tables[0].associations[0].route_table_association_id #=> String
    #   resp.data.route_tables[0].associations[0].route_table_id #=> String
    #   resp.data.route_tables[0].associations[0].subnet_id #=> String
    #   resp.data.route_tables[0].associations[0].gateway_id #=> String
    #   resp.data.route_tables[0].associations[0].association_state #=> Types::RouteTableAssociationState
    #   resp.data.route_tables[0].associations[0].association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.route_tables[0].associations[0].association_state.status_message #=> String
    #   resp.data.route_tables[0].propagating_vgws #=> Array<PropagatingVgw>
    #   resp.data.route_tables[0].propagating_vgws[0] #=> Types::PropagatingVgw
    #   resp.data.route_tables[0].propagating_vgws[0].gateway_id #=> String
    #   resp.data.route_tables[0].route_table_id #=> String
    #   resp.data.route_tables[0].routes #=> Array<Route>
    #   resp.data.route_tables[0].routes[0] #=> Types::Route
    #   resp.data.route_tables[0].routes[0].destination_cidr_block #=> String
    #   resp.data.route_tables[0].routes[0].destination_ipv6_cidr_block #=> String
    #   resp.data.route_tables[0].routes[0].destination_prefix_list_id #=> String
    #   resp.data.route_tables[0].routes[0].egress_only_internet_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].instance_id #=> String
    #   resp.data.route_tables[0].routes[0].instance_owner_id #=> String
    #   resp.data.route_tables[0].routes[0].nat_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].transit_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].local_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].carrier_gateway_id #=> String
    #   resp.data.route_tables[0].routes[0].network_interface_id #=> String
    #   resp.data.route_tables[0].routes[0].origin #=> String, one of ["CreateRouteTable", "CreateRoute", "EnableVgwRoutePropagation"]
    #   resp.data.route_tables[0].routes[0].state #=> String, one of ["active", "blackhole"]
    #   resp.data.route_tables[0].routes[0].vpc_peering_connection_id #=> String
    #   resp.data.route_tables[0].routes[0].core_network_arn #=> String
    #   resp.data.route_tables[0].tags #=> Array<Tag>
    #   resp.data.route_tables[0].tags[0] #=> Types::Tag
    #   resp.data.route_tables[0].tags[0].key #=> String
    #   resp.data.route_tables[0].tags[0].value #=> String
    #   resp.data.route_tables[0].vpc_id #=> String
    #   resp.data.route_tables[0].owner_id #=> String
    #   resp.data.next_token #=> String
    # @example To describe a route table
    #   # This example describes the specified route table.
    #   resp = client.describe_route_tables({
    #     route_table_ids: [
    #       "rtb-1f382e7d"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     route_tables: [
    #       {
    #         associations: [
    #           {
    #             route_table_association_id: "rtbassoc-d8ccddba",
    #             main: true,
    #             route_table_id: "rtb-1f382e7d"
    #           }
    #         ],
    #         route_table_id: "rtb-1f382e7d",
    #         vpc_id: "vpc-a01106c2",
    #         propagating_vgws: [
    #
    #         ],
    #         tags: [
    #
    #         ],
    #         routes: [
    #           {
    #             gateway_id: "local",
    #             destination_cidr_block: "10.0.0.0/16",
    #             state: "active"
    #           }
    #         ]
    #       }
    #     ]
    #   }
    def describe_route_tables(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeRouteTablesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeRouteTables.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_route_tables,
        tracer: tracer
      )
      Telemetry::DescribeRouteTables.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_route_tables] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_route_tables] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_route_tables] #{output.data}")
        output
      end
    end

    # <p>Finds available schedules that meet the specified criteria.</p>
    #          <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
    #          <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a>
    #          to purchase Scheduled Instances with that schedule.</p>
    # @param [Hash | Types::DescribeScheduledInstanceAvailabilityInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeScheduledInstanceAvailabilityInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_scheduled_instance_availability(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     first_slot_start_time_range: {
    #       earliest_time: Time.now, # required
    #       latest_time: Time.now # required
    #     }, # required
    #     max_results: 1,
    #     max_slot_duration_in_hours: 1,
    #     min_slot_duration_in_hours: 1,
    #     next_token: 'NextToken',
    #     recurrence: {
    #       frequency: 'Frequency',
    #       interval: 1,
    #       occurrence_days: [
    #         1
    #       ],
    #       occurrence_relative_to_end: false,
    #       occurrence_unit: 'OccurrenceUnit'
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeScheduledInstanceAvailabilityOutput
    #   resp.data.next_token #=> String
    #   resp.data.scheduled_instance_availability_set #=> Array<ScheduledInstanceAvailability>
    #   resp.data.scheduled_instance_availability_set[0] #=> Types::ScheduledInstanceAvailability
    #   resp.data.scheduled_instance_availability_set[0].availability_zone #=> String
    #   resp.data.scheduled_instance_availability_set[0].available_instance_count #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].first_slot_start_time #=> Time
    #   resp.data.scheduled_instance_availability_set[0].hourly_price #=> String
    #   resp.data.scheduled_instance_availability_set[0].instance_type #=> String
    #   resp.data.scheduled_instance_availability_set[0].max_term_duration_in_days #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].min_term_duration_in_days #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].network_platform #=> String
    #   resp.data.scheduled_instance_availability_set[0].platform #=> String
    #   resp.data.scheduled_instance_availability_set[0].purchase_token #=> String
    #   resp.data.scheduled_instance_availability_set[0].recurrence #=> Types::ScheduledInstanceRecurrence
    #   resp.data.scheduled_instance_availability_set[0].recurrence.frequency #=> String
    #   resp.data.scheduled_instance_availability_set[0].recurrence.interval #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_day_set #=> Array<Integer>
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_day_set[0] #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_relative_to_end #=> Boolean
    #   resp.data.scheduled_instance_availability_set[0].recurrence.occurrence_unit #=> String
    #   resp.data.scheduled_instance_availability_set[0].slot_duration_in_hours #=> Integer
    #   resp.data.scheduled_instance_availability_set[0].total_scheduled_instance_hours #=> Integer
    def describe_scheduled_instance_availability(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeScheduledInstanceAvailabilityInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeScheduledInstanceAvailability.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_scheduled_instance_availability,
        tracer: tracer
      )
      Telemetry::DescribeScheduledInstanceAvailability.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_scheduled_instance_availability] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_scheduled_instance_availability] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_scheduled_instance_availability] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Scheduled Instances or all your Scheduled Instances.</p>
    # @param [Hash | Types::DescribeScheduledInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeScheduledInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_scheduled_instances(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     scheduled_instance_ids: [
    #       'member'
    #     ],
    #     slot_start_time_range: {
    #       earliest_time: Time.now,
    #       latest_time: Time.now
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeScheduledInstancesOutput
    #   resp.data.next_token #=> String
    #   resp.data.scheduled_instance_set #=> Array<ScheduledInstance>
    #   resp.data.scheduled_instance_set[0] #=> Types::ScheduledInstance
    #   resp.data.scheduled_instance_set[0].availability_zone #=> String
    #   resp.data.scheduled_instance_set[0].create_date #=> Time
    #   resp.data.scheduled_instance_set[0].hourly_price #=> String
    #   resp.data.scheduled_instance_set[0].instance_count #=> Integer
    #   resp.data.scheduled_instance_set[0].instance_type #=> String
    #   resp.data.scheduled_instance_set[0].network_platform #=> String
    #   resp.data.scheduled_instance_set[0].next_slot_start_time #=> Time
    #   resp.data.scheduled_instance_set[0].platform #=> String
    #   resp.data.scheduled_instance_set[0].previous_slot_end_time #=> Time
    #   resp.data.scheduled_instance_set[0].recurrence #=> Types::ScheduledInstanceRecurrence
    #   resp.data.scheduled_instance_set[0].recurrence.frequency #=> String
    #   resp.data.scheduled_instance_set[0].recurrence.interval #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set #=> Array<Integer>
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set[0] #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_relative_to_end #=> Boolean
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_unit #=> String
    #   resp.data.scheduled_instance_set[0].scheduled_instance_id #=> String
    #   resp.data.scheduled_instance_set[0].slot_duration_in_hours #=> Integer
    #   resp.data.scheduled_instance_set[0].term_end_date #=> Time
    #   resp.data.scheduled_instance_set[0].term_start_date #=> Time
    #   resp.data.scheduled_instance_set[0].total_scheduled_instance_hours #=> Integer
    def describe_scheduled_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeScheduledInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeScheduledInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_scheduled_instances,
        tracer: tracer
      )
      Telemetry::DescribeScheduledInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_scheduled_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_scheduled_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_scheduled_instances] #{output.data}")
        output
      end
    end

    # <p>Describes the VPCs on the other side of a VPC peering connection or the VPCs attached to a transit gateway that are referencing the security groups you've specified in this request.</p>
    # @param [Hash | Types::DescribeSecurityGroupReferencesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSecurityGroupReferencesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_security_group_references(
    #     dry_run: false,
    #     group_id: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSecurityGroupReferencesOutput
    #   resp.data.security_group_reference_set #=> Array<SecurityGroupReference>
    #   resp.data.security_group_reference_set[0] #=> Types::SecurityGroupReference
    #   resp.data.security_group_reference_set[0].group_id #=> String
    #   resp.data.security_group_reference_set[0].referencing_vpc_id #=> String
    #   resp.data.security_group_reference_set[0].vpc_peering_connection_id #=> String
    #   resp.data.security_group_reference_set[0].transit_gateway_id #=> String
    # @example To describe security group references
    #   # This example describes the security group references for the specified security group.
    #   resp = client.describe_security_group_references({
    #     group_id: [
    #       "sg-903004f8"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     security_group_reference_set: [
    #       {
    #         referencing_vpc_id: "vpc-1a2b3c4d",
    #         group_id: "sg-903004f8",
    #         vpc_peering_connection_id: "pcx-b04deed9"
    #       }
    #     ]
    #   }
    def describe_security_group_references(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSecurityGroupReferencesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSecurityGroupReferences.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_security_group_references,
        tracer: tracer
      )
      Telemetry::DescribeSecurityGroupReferences.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_security_group_references] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_security_group_references] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_security_group_references] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your security group rules.</p>
    # @param [Hash | Types::DescribeSecurityGroupRulesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSecurityGroupRulesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_security_group_rules(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     security_group_rule_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSecurityGroupRulesOutput
    #   resp.data.security_group_rules #=> Array<SecurityGroupRule>
    #   resp.data.security_group_rules[0] #=> Types::SecurityGroupRule
    #   resp.data.security_group_rules[0].security_group_rule_id #=> String
    #   resp.data.security_group_rules[0].group_id #=> String
    #   resp.data.security_group_rules[0].group_owner_id #=> String
    #   resp.data.security_group_rules[0].is_egress #=> Boolean
    #   resp.data.security_group_rules[0].ip_protocol #=> String
    #   resp.data.security_group_rules[0].from_port #=> Integer
    #   resp.data.security_group_rules[0].to_port #=> Integer
    #   resp.data.security_group_rules[0].cidr_ipv4 #=> String
    #   resp.data.security_group_rules[0].cidr_ipv6 #=> String
    #   resp.data.security_group_rules[0].prefix_list_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info #=> Types::ReferencedSecurityGroup
    #   resp.data.security_group_rules[0].referenced_group_info.group_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.peering_status #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.user_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_id #=> String
    #   resp.data.security_group_rules[0].referenced_group_info.vpc_peering_connection_id #=> String
    #   resp.data.security_group_rules[0].description #=> String
    #   resp.data.security_group_rules[0].tags #=> Array<Tag>
    #   resp.data.security_group_rules[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_rules[0].tags[0].key #=> String
    #   resp.data.security_group_rules[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_security_group_rules(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSecurityGroupRulesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSecurityGroupRules.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_security_group_rules,
        tracer: tracer
      )
      Telemetry::DescribeSecurityGroupRules.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_security_group_rules] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_security_group_rules] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_security_group_rules] #{output.data}")
        output
      end
    end

    # <p>Describes the specified security groups or all of your security groups.</p>
    # @param [Hash | Types::DescribeSecurityGroupsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSecurityGroupsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_security_groups(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     group_ids: [
    #       'member'
    #     ],
    #     group_names: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSecurityGroupsOutput
    #   resp.data.security_groups #=> Array<SecurityGroup>
    #   resp.data.security_groups[0] #=> Types::SecurityGroup
    #   resp.data.security_groups[0].description #=> String
    #   resp.data.security_groups[0].group_name #=> String
    #   resp.data.security_groups[0].ip_permissions #=> Array<IpPermission>
    #   resp.data.security_groups[0].ip_permissions[0] #=> Types::IpPermission
    #   resp.data.security_groups[0].ip_permissions[0].from_port #=> Integer
    #   resp.data.security_groups[0].ip_permissions[0].ip_protocol #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges #=> Array<IpRange>
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges[0] #=> Types::IpRange
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges[0].cidr_ip #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ip_ranges[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges #=> Array<Ipv6Range>
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges[0] #=> Types::Ipv6Range
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges[0].cidr_ipv6 #=> String
    #   resp.data.security_groups[0].ip_permissions[0].ipv6_ranges[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids #=> Array<PrefixListId>
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids[0] #=> Types::PrefixListId
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].prefix_list_ids[0].prefix_list_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].to_port #=> Integer
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.security_groups[0].ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    #   resp.data.security_groups[0].owner_id #=> String
    #   resp.data.security_groups[0].group_id #=> String
    #   resp.data.security_groups[0].ip_permissions_egress #=> Array<IpPermission>
    #   resp.data.security_groups[0].tags #=> Array<Tag>
    #   resp.data.security_groups[0].tags[0] #=> Types::Tag
    #   resp.data.security_groups[0].tags[0].key #=> String
    #   resp.data.security_groups[0].tags[0].value #=> String
    #   resp.data.security_groups[0].vpc_id #=> String
    #   resp.data.next_token #=> String
    # @example To describe a security group
    #   # This example describes the specified security group.
    #   resp = client.describe_security_groups({
    #     group_ids: [
    #       "sg-903004f8"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To describe a tagged security group
    #   # This example describes the security groups that include the specified tag (Purpose=test).
    #   resp = client.describe_security_groups({
    #     filters: [
    #       {
    #         name: "tag:Purpose",
    #         values: [
    #           "test"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def describe_security_groups(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSecurityGroupsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSecurityGroups.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_security_groups,
        tracer: tracer
      )
      Telemetry::DescribeSecurityGroups.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_security_groups] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_security_groups] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_security_groups] #{output.data}")
        output
      end
    end

    # <p>Describes the specified attribute of the specified snapshot. You can specify only one
    #       attribute at a time.</p>
    #          <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeSnapshotAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSnapshotAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_snapshot_attribute(
    #     attribute: 'productCodes', # required - accepts ["productCodes", "createVolumePermission"]
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSnapshotAttributeOutput
    #   resp.data.create_volume_permissions #=> Array<CreateVolumePermission>
    #   resp.data.create_volume_permissions[0] #=> Types::CreateVolumePermission
    #   resp.data.create_volume_permissions[0].group #=> String, one of ["all"]
    #   resp.data.create_volume_permissions[0].user_id #=> String
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.snapshot_id #=> String
    # @example To describe snapshot attributes
    #   # This example describes the ``createVolumePermission`` attribute on a snapshot with the snapshot ID of ``snap-066877671789bd71b``.
    #   resp = client.describe_snapshot_attribute({
    #     snapshot_id: "snap-066877671789bd71b",
    #     attribute: "createVolumePermission"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     snapshot_id: "snap-066877671789bd71b",
    #     create_volume_permissions: [
    #
    #     ]
    #   }
    def describe_snapshot_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSnapshotAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSnapshotAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_snapshot_attribute,
        tracer: tracer
      )
      Telemetry::DescribeSnapshotAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_snapshot_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_snapshot_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_snapshot_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the storage tier status of one or more Amazon EBS snapshots.</p>
    # @param [Hash | Types::DescribeSnapshotTierStatusInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSnapshotTierStatusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_snapshot_tier_status(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSnapshotTierStatusOutput
    #   resp.data.snapshot_tier_statuses #=> Array<SnapshotTierStatus>
    #   resp.data.snapshot_tier_statuses[0] #=> Types::SnapshotTierStatus
    #   resp.data.snapshot_tier_statuses[0].snapshot_id #=> String
    #   resp.data.snapshot_tier_statuses[0].volume_id #=> String
    #   resp.data.snapshot_tier_statuses[0].status #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.snapshot_tier_statuses[0].owner_id #=> String
    #   resp.data.snapshot_tier_statuses[0].tags #=> Array<Tag>
    #   resp.data.snapshot_tier_statuses[0].tags[0] #=> Types::Tag
    #   resp.data.snapshot_tier_statuses[0].tags[0].key #=> String
    #   resp.data.snapshot_tier_statuses[0].tags[0].value #=> String
    #   resp.data.snapshot_tier_statuses[0].storage_tier #=> String, one of ["archive", "standard"]
    #   resp.data.snapshot_tier_statuses[0].last_tiering_start_time #=> Time
    #   resp.data.snapshot_tier_statuses[0].last_tiering_progress #=> Integer
    #   resp.data.snapshot_tier_statuses[0].last_tiering_operation_status #=> String, one of ["archival-in-progress", "archival-completed", "archival-failed", "temporary-restore-in-progress", "temporary-restore-completed", "temporary-restore-failed", "permanent-restore-in-progress", "permanent-restore-completed", "permanent-restore-failed"]
    #   resp.data.snapshot_tier_statuses[0].last_tiering_operation_status_detail #=> String
    #   resp.data.snapshot_tier_statuses[0].archival_complete_time #=> Time
    #   resp.data.snapshot_tier_statuses[0].restore_expiry_time #=> Time
    #   resp.data.next_token #=> String
    def describe_snapshot_tier_status(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSnapshotTierStatusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSnapshotTierStatus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_snapshot_tier_status,
        tracer: tracer
      )
      Telemetry::DescribeSnapshotTierStatus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_snapshot_tier_status] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_snapshot_tier_status] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_snapshot_tier_status] #{output.data}")
        output
      end
    end

    # <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots
    #       available to you.</p>
    #          <p>The snapshots available to you include public snapshots, private snapshots that you own,
    #       and private snapshots owned by other Amazon Web Services accounts for which you have explicit create volume
    #       permissions.</p>
    #          <p>The create volume permissions fall into the following categories:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <i>public</i>: The owner of the snapshot granted create volume
    #           permissions for the snapshot to the <code>all</code> group. All Amazon Web Services accounts have create
    #           volume permissions for these snapshots.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <i>explicit</i>: The owner of the snapshot granted create volume
    #           permissions to a specific Amazon Web Services account.</p>
    #             </li>
    #             <li>
    #                <p>
    #                   <i>implicit</i>: An Amazon Web Services account has implicit create volume permissions
    #           for all snapshots it owns.</p>
    #             </li>
    #          </ul>
    #          <p>The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot
    #       owners, or Amazon Web Services accounts with create volume permissions. If no options are specified,
    #       Amazon EC2 returns all snapshots for which you have create volume permissions.</p>
    #          <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are
    #       returned. If you specify an invalid snapshot ID, an error is returned. If you specify a
    #       snapshot ID for which you do not have access, it is not included in the returned
    #       results.</p>
    #          <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only
    #       snapshots from the specified owners and for which you have access are returned. The results
    #       can include the Amazon Web Services account IDs of the specified owners, <code>amazon</code> for snapshots
    #       owned by Amazon, or <code>self</code> for snapshots that you own.</p>
    #          <p>If you specify a list of restorable users, only snapshots with create snapshot permissions
    #       for those users are returned. You can specify Amazon Web Services account IDs (if you own the snapshots),
    #         <code>self</code> for snapshots for which you own or have explicit permissions, or
    #         <code>all</code> for public snapshots.</p>
    #          <p>If you are describing a long list of snapshots, we recommend that you paginate the output to make the
    #       list more manageable. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    #          <p>To get the state of fast snapshot restores for a snapshot, use <a>DescribeFastSnapshotRestores</a>.</p>
    #          <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeSnapshotsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSnapshotsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_snapshots(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     owner_ids: [
    #       'member'
    #     ],
    #     restorable_by_user_ids: [
    #       'member'
    #     ],
    #     snapshot_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSnapshotsOutput
    #   resp.data.snapshots #=> Array<Snapshot>
    #   resp.data.snapshots[0] #=> Types::Snapshot
    #   resp.data.snapshots[0].data_encryption_key_id #=> String
    #   resp.data.snapshots[0].description #=> String
    #   resp.data.snapshots[0].encrypted #=> Boolean
    #   resp.data.snapshots[0].kms_key_id #=> String
    #   resp.data.snapshots[0].owner_id #=> String
    #   resp.data.snapshots[0].progress #=> String
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].start_time #=> Time
    #   resp.data.snapshots[0].state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.snapshots[0].state_message #=> String
    #   resp.data.snapshots[0].volume_id #=> String
    #   resp.data.snapshots[0].volume_size #=> Integer
    #   resp.data.snapshots[0].owner_alias #=> String
    #   resp.data.snapshots[0].outpost_arn #=> String
    #   resp.data.snapshots[0].tags #=> Array<Tag>
    #   resp.data.snapshots[0].tags[0] #=> Types::Tag
    #   resp.data.snapshots[0].tags[0].key #=> String
    #   resp.data.snapshots[0].tags[0].value #=> String
    #   resp.data.snapshots[0].storage_tier #=> String, one of ["archive", "standard"]
    #   resp.data.snapshots[0].restore_expiry_time #=> Time
    #   resp.data.snapshots[0].sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    #   resp.data.next_token #=> String
    # @example To describe a snapshot
    #   # This example describes a snapshot with the snapshot ID of ``snap-1234567890abcdef0``.
    #   resp = client.describe_snapshots({
    #     snapshot_ids: [
    #       "snap-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     snapshots: [
    #       {
    #         description: "This is my snapshot.",
    #         volume_id: "vol-049df61146c4d7901",
    #         state: "completed",
    #         volume_size: 8,
    #         progress: "100%",
    #         start_time: Time.parse('2014-02-28T21:28:32.000Z'),
    #         snapshot_id: "snap-1234567890abcdef0",
    #         owner_id: "012345678910"
    #       }
    #     ],
    #     next_token: ""
    #   }
    # @example To describe snapshots using filters
    #   # This example describes all snapshots owned by the ID 012345678910 that are in the ``pending`` status.
    #   resp = client.describe_snapshots({
    #     owner_ids: [
    #       "012345678910"
    #     ],
    #     filters: [
    #       {
    #         values: [
    #           "pending"
    #         ],
    #         name: "status"
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     snapshots: [
    #       {
    #         description: "This is my copied snapshot.",
    #         volume_id: "vol-1234567890abcdef0",
    #         state: "pending",
    #         volume_size: 8,
    #         progress: "87%",
    #         start_time: Time.parse('2014-02-28T21:37:27.000Z'),
    #         snapshot_id: "snap-066877671789bd71b",
    #         owner_id: "012345678910"
    #       }
    #     ],
    #     next_token: ""
    #   }
    def describe_snapshots(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSnapshotsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSnapshots.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_snapshots,
        tracer: tracer
      )
      Telemetry::DescribeSnapshots.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_snapshots] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_snapshots] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_snapshots] #{output.data}")
        output
      end
    end

    # <p>Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
    #             Instance data feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    # @param [Hash | Types::DescribeSpotDatafeedSubscriptionInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSpotDatafeedSubscriptionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_spot_datafeed_subscription(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSpotDatafeedSubscriptionOutput
    #   resp.data.spot_datafeed_subscription #=> Types::SpotDatafeedSubscription
    #   resp.data.spot_datafeed_subscription.bucket #=> String
    #   resp.data.spot_datafeed_subscription.fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_datafeed_subscription.fault.code #=> String
    #   resp.data.spot_datafeed_subscription.fault.message #=> String
    #   resp.data.spot_datafeed_subscription.owner_id #=> String
    #   resp.data.spot_datafeed_subscription.prefix #=> String
    #   resp.data.spot_datafeed_subscription.state #=> String, one of ["Active", "Inactive"]
    # @example To describe the datafeed for your AWS account
    #   resp = client.describe_spot_datafeed_subscription()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_datafeed_subscription: {
    #       owner_id: "123456789012",
    #       prefix: "spotdata",
    #       bucket: "my-s3-bucket",
    #       state: "Active"
    #     }
    #   }
    def describe_spot_datafeed_subscription(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSpotDatafeedSubscriptionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSpotDatafeedSubscription.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_spot_datafeed_subscription,
        tracer: tracer
      )
      Telemetry::DescribeSpotDatafeedSubscription.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_datafeed_subscription] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_spot_datafeed_subscription] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_datafeed_subscription] #{output.data}")
        output
      end
    end

    # <p>Describes the running instances for the specified Spot Fleet.</p>
    # @param [Hash | Types::DescribeSpotFleetInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSpotFleetInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_spot_fleet_instances(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     spot_fleet_request_id: 'SpotFleetRequestId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSpotFleetInstancesOutput
    #   resp.data.active_instances #=> Array<ActiveInstance>
    #   resp.data.active_instances[0] #=> Types::ActiveInstance
    #   resp.data.active_instances[0].instance_id #=> String
    #   resp.data.active_instances[0].instance_type #=> String
    #   resp.data.active_instances[0].spot_instance_request_id #=> String
    #   resp.data.active_instances[0].instance_health #=> String, one of ["healthy", "unhealthy"]
    #   resp.data.next_token #=> String
    #   resp.data.spot_fleet_request_id #=> String
    # @example To describe the Spot Instances associated with a Spot fleet
    #   # This example lists the Spot Instances associated with the specified Spot fleet.
    #   resp = client.describe_spot_fleet_instances({
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #     active_instances: [
    #       {
    #         instance_id: "i-1234567890abcdef0",
    #         instance_type: "m3.medium",
    #         spot_instance_request_id: "sir-08b93456"
    #       }
    #     ]
    #   }
    def describe_spot_fleet_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSpotFleetInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSpotFleetInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_spot_fleet_instances,
        tracer: tracer
      )
      Telemetry::DescribeSpotFleetInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_instances] #{output.data}")
        output
      end
    end

    # <p>Describes the events for the specified Spot Fleet request during the specified
    #             time.</p>
    #          <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This
    #             ensures that you can query by the last evaluated time and not miss a recorded event.
    #             Spot Fleet events are available for 48 hours.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor fleet events using Amazon
    #                 EventBridge</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeSpotFleetRequestHistoryInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSpotFleetRequestHistoryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_spot_fleet_request_history(
    #     dry_run: false,
    #     event_type: 'instanceChange', # accepts ["instanceChange", "fleetRequestChange", "error", "information"]
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     spot_fleet_request_id: 'SpotFleetRequestId', # required
    #     start_time: Time.now # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSpotFleetRequestHistoryOutput
    #   resp.data.history_records #=> Array<HistoryRecord>
    #   resp.data.history_records[0] #=> Types::HistoryRecord
    #   resp.data.history_records[0].event_information #=> Types::EventInformation
    #   resp.data.history_records[0].event_information.event_description #=> String
    #   resp.data.history_records[0].event_information.event_sub_type #=> String
    #   resp.data.history_records[0].event_information.instance_id #=> String
    #   resp.data.history_records[0].event_type #=> String, one of ["instanceChange", "fleetRequestChange", "error", "information"]
    #   resp.data.history_records[0].timestamp #=> Time
    #   resp.data.last_evaluated_time #=> Time
    #   resp.data.next_token #=> String
    #   resp.data.spot_fleet_request_id #=> String
    #   resp.data.start_time #=> Time
    # @example To describe Spot fleet history
    #   # This example returns the history for the specified Spot fleet starting at the specified time.
    #   resp = client.describe_spot_fleet_request_history({
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #     start_time: Time.parse('2015-05-26T00:00:00Z')
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     history_records: [
    #       {
    #         timestamp: Time.parse('2015-05-26T23:17:20.697Z'),
    #         event_information: {
    #           event_sub_type: "submitted"
    #         },
    #         event_type: "fleetRequestChange"
    #       },
    #       {
    #         timestamp: Time.parse('2015-05-26T23:17:20.873Z'),
    #         event_information: {
    #           event_sub_type: "active"
    #         },
    #         event_type: "fleetRequestChange"
    #       },
    #       {
    #         timestamp: Time.parse('2015-05-26T23:21:21.712Z'),
    #         event_information: {
    #           instance_id: "i-1234567890abcdef0",
    #           event_sub_type: "launched"
    #         },
    #         event_type: "instanceChange"
    #       },
    #       {
    #         timestamp: Time.parse('2015-05-26T23:21:21.816Z'),
    #         event_information: {
    #           instance_id: "i-1234567890abcdef1",
    #           event_sub_type: "launched"
    #         },
    #         event_type: "instanceChange"
    #       }
    #     ],
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #     start_time: Time.parse('2015-05-26T00:00:00Z'),
    #     next_token: "CpHNsscimcV5oH7bSbub03CI2Qms5+ypNpNm+53MNlR0YcXAkp0xFlfKf91yVxSExmbtma3awYxMFzNA663ZskT0AHtJ6TCb2Z8bQC2EnZgyELbymtWPfpZ1ZbauVg+P+TfGlWxWWB/Vr5dk5d4LfdgA/DRAHUrYgxzrEXAMPLE="
    #   }
    def describe_spot_fleet_request_history(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSpotFleetRequestHistoryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSpotFleetRequestHistory.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_spot_fleet_request_history,
        tracer: tracer
      )
      Telemetry::DescribeSpotFleetRequestHistory.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_request_history] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_request_history] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_request_history] #{output.data}")
        output
      end
    end

    # <p>Describes your Spot Fleet requests.</p>
    #          <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances
    #             are terminated.</p>
    # @param [Hash | Types::DescribeSpotFleetRequestsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSpotFleetRequestsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_spot_fleet_requests(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     spot_fleet_request_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSpotFleetRequestsOutput
    #   resp.data.next_token #=> String
    #   resp.data.spot_fleet_request_configs #=> Array<SpotFleetRequestConfig>
    #   resp.data.spot_fleet_request_configs[0] #=> Types::SpotFleetRequestConfig
    #   resp.data.spot_fleet_request_configs[0].activity_status #=> String, one of ["error", "pending_fulfillment", "pending_termination", "fulfilled"]
    #   resp.data.spot_fleet_request_configs[0].create_time #=> Time
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config #=> Types::SpotFleetRequestConfigData
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.allocation_strategy #=> String, one of ["lowestPrice", "diversified", "capacityOptimized", "capacityOptimizedPrioritized", "priceCapacityOptimized"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_allocation_strategy #=> String, one of ["lowestPrice", "prioritized"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies #=> Types::SpotMaintenanceStrategies
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies.capacity_rebalance #=> Types::SpotCapacityRebalance
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies.capacity_rebalance.replacement_strategy #=> String, one of ["launch", "launch-before-terminate"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_maintenance_strategies.capacity_rebalance.termination_delay #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.client_token #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.excess_capacity_termination_policy #=> String, one of ["noTermination", "default"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.fulfilled_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_fulfilled_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.iam_fleet_role #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications #=> Array<SpotFleetLaunchSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0] #=> Types::SpotFleetLaunchSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups #=> Array<GroupIdentifier>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups[0] #=> Types::GroupIdentifier
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups[0].group_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].security_groups[0].group_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].addressing_type #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].device_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].virtual_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].block_device_mappings[0].no_device #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].ebs_optimized #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].iam_instance_profile #=> Types::IamInstanceProfileSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].iam_instance_profile.arn #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].iam_instance_profile.name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].image_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].kernel_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].key_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].monitoring #=> Types::SpotFleetMonitoring
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].monitoring.enabled #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces #=> Array<InstanceNetworkInterfaceSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0] #=> Types::InstanceNetworkInterfaceSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].description #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].device_index #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].groups #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].groups[0] #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].network_interface_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_address #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].subnet_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].interface_type #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].network_card_index #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationRequest>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationRequest>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].primary_ipv6 #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ena_srd_specification #=> Types::EnaSrdSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ena_srd_specification.ena_srd_udp_specification #=> Types::EnaSrdUdpSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].connection_tracking_specification #=> Types::ConnectionTrackingSpecificationRequest
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].connection_tracking_specification.tcp_established_timeout #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].connection_tracking_specification.udp_stream_timeout #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].network_interfaces[0].connection_tracking_specification.udp_timeout #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement #=> Types::SpotPlacement
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement.availability_zone #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement.group_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].ramdisk_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].spot_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].subnet_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].user_data #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].weighted_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications #=> Array<SpotFleetTagSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0] #=> Types::SpotFleetTagSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags[0].key #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].tag_specifications[0].tags[0].value #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements #=> Types::InstanceRequirements
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.instance_generations #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_manufacturers[0] #=> String, one of ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_names[0] #=> String, one of ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_bandwidth_gbps #=> Types::NetworkBandwidthGbps
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_bandwidth_gbps.min #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.network_bandwidth_gbps.max #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.allowed_instance_types #=> Array<String>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.allowed_instance_types[0] #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_specifications[0].instance_requirements.max_spot_price_as_percentage_of_optimal_on_demand_price #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs #=> Array<LaunchTemplateConfig>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0] #=> Types::LaunchTemplateConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification #=> Types::FleetLaunchTemplateSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification.launch_template_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification.launch_template_name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].launch_template_specification.version #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides #=> Array<LaunchTemplateOverrides>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0] #=> Types::LaunchTemplateOverrides
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].spot_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].subnet_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].availability_zone #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].weighted_capacity #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].priority #=> Float
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.launch_template_configs[0].overrides[0].instance_requirements #=> Types::InstanceRequirements
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.target_capacity #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_target_capacity #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.on_demand_max_total_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.spot_max_total_price #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.terminate_instances_with_expiration #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.type #=> String, one of ["request", "maintain", "instant"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.valid_from #=> Time
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.valid_until #=> Time
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.replace_unhealthy_instances #=> Boolean
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config #=> Types::LoadBalancersConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config #=> Types::ClassicLoadBalancersConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config.classic_load_balancers #=> Array<ClassicLoadBalancer>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config.classic_load_balancers[0] #=> Types::ClassicLoadBalancer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.classic_load_balancers_config.classic_load_balancers[0].name #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config #=> Types::TargetGroupsConfig
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config.target_groups #=> Array<TargetGroup>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config.target_groups[0] #=> Types::TargetGroup
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.load_balancers_config.target_groups_config.target_groups[0].arn #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.instance_pools_to_use_count #=> Integer
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.context #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.target_capacity_unit_type #=> String, one of ["vcpu", "memory-mib", "units"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications #=> Array<TagSpecification>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications[0] #=> Types::TagSpecification
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_config.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_id #=> String
    #   resp.data.spot_fleet_request_configs[0].spot_fleet_request_state #=> String, one of ["submitted", "active", "cancelled", "failed", "cancelled_running", "cancelled_terminating", "modifying"]
    #   resp.data.spot_fleet_request_configs[0].tags #=> Array<Tag>
    # @example To describe a Spot fleet request
    #   # This example describes the specified Spot fleet request.
    #   resp = client.describe_spot_fleet_requests({
    #     spot_fleet_request_ids: [
    #       "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_fleet_request_configs: [
    #       {
    #         spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #         spot_fleet_request_config: {
    #           target_capacity: 20,
    #           launch_specifications: [
    #             {
    #               ebs_optimized: false,
    #               network_interfaces: [
    #                 {
    #                   subnet_id: "subnet-a61dafcf",
    #                   device_index: 0,
    #                   delete_on_termination: false,
    #                   associate_public_ip_address: true,
    #                   secondary_private_ip_address_count: 0
    #                 }
    #               ],
    #               instance_type: "cc2.8xlarge",
    #               image_id: "ami-1a2b3c4d"
    #             },
    #             {
    #               ebs_optimized: false,
    #               network_interfaces: [
    #                 {
    #                   subnet_id: "subnet-a61dafcf",
    #                   device_index: 0,
    #                   delete_on_termination: false,
    #                   associate_public_ip_address: true,
    #                   secondary_private_ip_address_count: 0
    #                 }
    #               ],
    #               instance_type: "r3.8xlarge",
    #               image_id: "ami-1a2b3c4d"
    #             }
    #           ],
    #           spot_price: "0.05",
    #           iam_fleet_role: "arn:aws:iam::123456789012:role/my-spot-fleet-role"
    #         },
    #         spot_fleet_request_state: "active"
    #       }
    #     ]
    #   }
    def describe_spot_fleet_requests(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSpotFleetRequestsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSpotFleetRequests.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_spot_fleet_requests,
        tracer: tracer
      )
      Telemetry::DescribeSpotFleetRequests.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_requests] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_requests] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_fleet_requests] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Spot Instance requests.</p>
    #          <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by
    #             examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the
    #             instance ID appears in the response and contains the identifier of the instance.
    #             Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a>
    #             with a filter to look for instances where the instance lifecycle is
    #             <code>spot</code>.</p>
    #          <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to
    #             limit the number of items returned. This paginates the output, which makes the list
    #             more manageable and returns the items faster. If the list of items exceeds your
    #                 <code>MaxResults</code> value, then that number of items is returned along with a
    #                 <code>NextToken</code> value that can be passed to a subsequent
    #                 <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining
    #             items.</p>
    #          <p>Spot Instance requests are deleted four hours after they are canceled and their instances are
    #             terminated.</p>
    # @param [Hash | Types::DescribeSpotInstanceRequestsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSpotInstanceRequestsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_spot_instance_requests(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     spot_instance_request_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSpotInstanceRequestsOutput
    #   resp.data.spot_instance_requests #=> Array<SpotInstanceRequest>
    #   resp.data.spot_instance_requests[0] #=> Types::SpotInstanceRequest
    #   resp.data.spot_instance_requests[0].actual_block_hourly_price #=> String
    #   resp.data.spot_instance_requests[0].availability_zone_group #=> String
    #   resp.data.spot_instance_requests[0].block_duration_minutes #=> Integer
    #   resp.data.spot_instance_requests[0].create_time #=> Time
    #   resp.data.spot_instance_requests[0].fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_instance_requests[0].fault.code #=> String
    #   resp.data.spot_instance_requests[0].fault.message #=> String
    #   resp.data.spot_instance_requests[0].instance_id #=> String
    #   resp.data.spot_instance_requests[0].launch_group #=> String
    #   resp.data.spot_instance_requests[0].launch_specification #=> Types::LaunchSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.user_data #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups #=> Array<GroupIdentifier>
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0] #=> Types::GroupIdentifier
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.addressing_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].device_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].virtual_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].no_device #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.ebs_optimized #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile #=> Types::IamInstanceProfileSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.image_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.spot_instance_requests[0].launch_specification.kernel_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.key_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces #=> Array<InstanceNetworkInterfaceSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0] #=> Types::InstanceNetworkInterfaceSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].description #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].device_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups #=> Array<String>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups[0] #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_interface_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].interface_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].primary_ipv6 #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification #=> Types::EnaSrdSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification #=> Types::EnaSrdUdpSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification #=> Types::ConnectionTrackingSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification.tcp_established_timeout #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification.udp_stream_timeout #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification.udp_timeout #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.placement #=> Types::SpotPlacement
    #   resp.data.spot_instance_requests[0].launch_specification.placement.availability_zone #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.spot_instance_requests[0].launch_specification.ramdisk_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring #=> Types::RunInstancesMonitoringEnabled
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring.enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launched_availability_zone #=> String
    #   resp.data.spot_instance_requests[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.spot_instance_requests[0].spot_instance_request_id #=> String
    #   resp.data.spot_instance_requests[0].spot_price #=> String
    #   resp.data.spot_instance_requests[0].state #=> String, one of ["open", "active", "closed", "cancelled", "failed", "disabled"]
    #   resp.data.spot_instance_requests[0].status #=> Types::SpotInstanceStatus
    #   resp.data.spot_instance_requests[0].status.code #=> String
    #   resp.data.spot_instance_requests[0].status.message #=> String
    #   resp.data.spot_instance_requests[0].status.update_time #=> Time
    #   resp.data.spot_instance_requests[0].tags #=> Array<Tag>
    #   resp.data.spot_instance_requests[0].tags[0] #=> Types::Tag
    #   resp.data.spot_instance_requests[0].tags[0].key #=> String
    #   resp.data.spot_instance_requests[0].tags[0].value #=> String
    #   resp.data.spot_instance_requests[0].type #=> String, one of ["one-time", "persistent"]
    #   resp.data.spot_instance_requests[0].valid_from #=> Time
    #   resp.data.spot_instance_requests[0].valid_until #=> Time
    #   resp.data.spot_instance_requests[0].instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.next_token #=> String
    # @example To describe a Spot Instance request
    #   # This example describes the specified Spot Instance request.
    #   resp = client.describe_spot_instance_requests({
    #     spot_instance_request_ids: [
    #       "sir-08b93456"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_instance_requests: [
    #       {
    #         status: {
    #           update_time: Time.parse('2014-04-30T18:16:21.000Z'),
    #           code: "fulfilled",
    #           message: "Your Spot request is fulfilled."
    #         },
    #         product_description: "Linux/UNIX",
    #         instance_id: "i-1234567890abcdef0",
    #         spot_instance_request_id: "sir-08b93456",
    #         state: "active",
    #         launched_availability_zone: "us-west-1b",
    #         launch_specification: {
    #           image_id: "ami-7aba833f",
    #           key_name: "my-key-pair",
    #           block_device_mappings: [
    #             {
    #               device_name: "/dev/sda1",
    #               ebs: {
    #                 delete_on_termination: true,
    #                 volume_type: "standard",
    #                 volume_size: 8
    #               }
    #             }
    #           ],
    #           ebs_optimized: false,
    #           security_groups: [
    #             {
    #               group_name: "my-security-group",
    #               group_id: "sg-e38f24a7"
    #             }
    #           ],
    #           instance_type: "m1.small"
    #         },
    #         type: "one-time",
    #         create_time: Time.parse('2014-04-30T18:14:55.000Z'),
    #         spot_price: "0.010000"
    #       }
    #     ]
    #   }
    def describe_spot_instance_requests(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSpotInstanceRequestsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSpotInstanceRequests.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_spot_instance_requests,
        tracer: tracer
      )
      Telemetry::DescribeSpotInstanceRequests.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_instance_requests] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_spot_instance_requests] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_instance_requests] #{output.data}")
        output
      end
    end

    # <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance pricing history</a> in the
    #             <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #          <p>When you specify a start and end time, the operation returns the prices of the
    #             instance types within that time range. It also returns the last price change before the
    #             start time, which is the effective price as of the start time.</p>
    # @param [Hash | Types::DescribeSpotPriceHistoryInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSpotPriceHistoryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_spot_price_history(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     availability_zone: 'AvailabilityZone',
    #     dry_run: false,
    #     end_time: Time.now,
    #     instance_types: [
    #       'a1.medium' # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     product_descriptions: [
    #       'member'
    #     ],
    #     start_time: Time.now
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSpotPriceHistoryOutput
    #   resp.data.next_token #=> String
    #   resp.data.spot_price_history #=> Array<SpotPrice>
    #   resp.data.spot_price_history[0] #=> Types::SpotPrice
    #   resp.data.spot_price_history[0].availability_zone #=> String
    #   resp.data.spot_price_history[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.spot_price_history[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.spot_price_history[0].spot_price #=> String
    #   resp.data.spot_price_history[0].timestamp #=> Time
    # @example To describe Spot price history for Linux/UNIX (Amazon VPC)
    #   # This example returns the Spot Price history for m1.xlarge, Linux/UNIX (Amazon VPC) instances for a particular day in January.
    #   resp = client.describe_spot_price_history({
    #     start_time: Time.parse('2014-01-06T07:08:09.05Z'),
    #     end_time: Time.parse('2014-01-06T08:09:10.05Z'),
    #     instance_types: [
    #       "m1.xlarge"
    #     ],
    #     product_descriptions: [
    #       "Linux/UNIX (Amazon VPC)"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_price_history: [
    #       {
    #         timestamp: Time.parse('2014-01-06T04:32:53.000Z'),
    #         product_description: "Linux/UNIX (Amazon VPC)",
    #         instance_type: "m1.xlarge",
    #         spot_price: "0.080000",
    #         availability_zone: "us-west-1a"
    #       },
    #       {
    #         timestamp: Time.parse('2014-01-05T11:28:26.000Z'),
    #         product_description: "Linux/UNIX (Amazon VPC)",
    #         instance_type: "m1.xlarge",
    #         spot_price: "0.080000",
    #         availability_zone: "us-west-1c"
    #       }
    #     ]
    #   }
    def describe_spot_price_history(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSpotPriceHistoryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSpotPriceHistory.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_spot_price_history,
        tracer: tracer
      )
      Telemetry::DescribeSpotPriceHistory.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_price_history] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_spot_price_history] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_spot_price_history] #{output.data}")
        output
      end
    end

    # <p>Describes the stale security group rules for security groups in a specified VPC.
    #           Rules are stale when they reference a deleted security group in the same VPC, peered VPC, or in separate VPCs attached to a transit gateway (with <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-transit-gateways.html#create-tgw">security group referencing support</a> enabled). Rules can also be stale if they reference a security group in a peer VPC for which the VPC peering connection has
    #           been deleted or if they reference a security group in a VPC that has been detached from a transit gateway.</p>
    # @param [Hash | Types::DescribeStaleSecurityGroupsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeStaleSecurityGroupsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_stale_security_groups(
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeStaleSecurityGroupsOutput
    #   resp.data.next_token #=> String
    #   resp.data.stale_security_group_set #=> Array<StaleSecurityGroup>
    #   resp.data.stale_security_group_set[0] #=> Types::StaleSecurityGroup
    #   resp.data.stale_security_group_set[0].description #=> String
    #   resp.data.stale_security_group_set[0].group_id #=> String
    #   resp.data.stale_security_group_set[0].group_name #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions #=> Array<StaleIpPermission>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0] #=> Types::StaleIpPermission
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].from_port #=> Integer
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].ip_protocol #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].ip_ranges #=> Array<String>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].ip_ranges[0] #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].prefix_list_ids #=> Array<String>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].prefix_list_ids[0] #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].to_port #=> Integer
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    #   resp.data.stale_security_group_set[0].stale_ip_permissions_egress #=> Array<StaleIpPermission>
    #   resp.data.stale_security_group_set[0].vpc_id #=> String
    def describe_stale_security_groups(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeStaleSecurityGroupsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeStaleSecurityGroups.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_stale_security_groups,
        tracer: tracer
      )
      Telemetry::DescribeStaleSecurityGroups.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_stale_security_groups] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_stale_security_groups] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_stale_security_groups] #{output.data}")
        output
      end
    end

    # <p>Describes the progress of the AMI store tasks. You can describe the store tasks for
    #       specified AMIs. If you don't specify the AMIs, you get a paginated list of store tasks from
    #       the last 31 days.</p>
    #          <p>For each AMI task, the response indicates if the task is <code>InProgress</code>,
    #         <code>Completed</code>, or <code>Failed</code>. For tasks <code>InProgress</code>, the
    #       response shows the estimated progress as a percentage.</p>
    #          <p>Tasks are listed in reverse chronological order. Currently, only tasks from the past 31
    #       days can be viewed.</p>
    #          <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
    #     	Amazon S3</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DescribeStoreImageTasksInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeStoreImageTasksInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_store_image_tasks(
    #     image_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeStoreImageTasksOutput
    #   resp.data.store_image_task_results #=> Array<StoreImageTaskResult>
    #   resp.data.store_image_task_results[0] #=> Types::StoreImageTaskResult
    #   resp.data.store_image_task_results[0].ami_id #=> String
    #   resp.data.store_image_task_results[0].task_start_time #=> Time
    #   resp.data.store_image_task_results[0].bucket #=> String
    #   resp.data.store_image_task_results[0].s3object_key #=> String
    #   resp.data.store_image_task_results[0].progress_percentage #=> Integer
    #   resp.data.store_image_task_results[0].store_task_state #=> String
    #   resp.data.store_image_task_results[0].store_task_failure_reason #=> String
    #   resp.data.next_token #=> String
    def describe_store_image_tasks(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeStoreImageTasksInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeStoreImageTasks.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_store_image_tasks,
        tracer: tracer
      )
      Telemetry::DescribeStoreImageTasks.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_store_image_tasks] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_store_image_tasks] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_store_image_tasks] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your subnets.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html">Subnets</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::DescribeSubnetsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeSubnetsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_subnets(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeSubnetsOutput
    #   resp.data.subnets #=> Array<Subnet>
    #   resp.data.subnets[0] #=> Types::Subnet
    #   resp.data.subnets[0].availability_zone #=> String
    #   resp.data.subnets[0].availability_zone_id #=> String
    #   resp.data.subnets[0].available_ip_address_count #=> Integer
    #   resp.data.subnets[0].cidr_block #=> String
    #   resp.data.subnets[0].default_for_az #=> Boolean
    #   resp.data.subnets[0].enable_lni_at_device_index #=> Integer
    #   resp.data.subnets[0].map_public_ip_on_launch #=> Boolean
    #   resp.data.subnets[0].map_customer_owned_ip_on_launch #=> Boolean
    #   resp.data.subnets[0].customer_owned_ipv4_pool #=> String
    #   resp.data.subnets[0].state #=> String, one of ["pending", "available", "unavailable"]
    #   resp.data.subnets[0].subnet_id #=> String
    #   resp.data.subnets[0].vpc_id #=> String
    #   resp.data.subnets[0].owner_id #=> String
    #   resp.data.subnets[0].assign_ipv6_address_on_creation #=> Boolean
    #   resp.data.subnets[0].ipv6_cidr_block_association_set #=> Array<SubnetIpv6CidrBlockAssociation>
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0] #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.subnets[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnets[0].tags #=> Array<Tag>
    #   resp.data.subnets[0].tags[0] #=> Types::Tag
    #   resp.data.subnets[0].tags[0].key #=> String
    #   resp.data.subnets[0].tags[0].value #=> String
    #   resp.data.subnets[0].subnet_arn #=> String
    #   resp.data.subnets[0].outpost_arn #=> String
    #   resp.data.subnets[0].enable_dns64 #=> Boolean
    #   resp.data.subnets[0].ipv6_native #=> Boolean
    #   resp.data.subnets[0].private_dns_name_options_on_launch #=> Types::PrivateDnsNameOptionsOnLaunch
    #   resp.data.subnets[0].private_dns_name_options_on_launch.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.subnets[0].private_dns_name_options_on_launch.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.subnets[0].private_dns_name_options_on_launch.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.next_token #=> String
    # @example To describe the subnets for a VPC
    #   # This example describes the subnets for the specified VPC.
    #   resp = client.describe_subnets({
    #     filters: [
    #       {
    #         name: "vpc-id",
    #         values: [
    #           "vpc-a01106c2"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     subnets: [
    #       {
    #         vpc_id: "vpc-a01106c2",
    #         cidr_block: "10.0.1.0/24",
    #         map_public_ip_on_launch: false,
    #         default_for_az: false,
    #         state: "available",
    #         availability_zone: "us-east-1c",
    #         subnet_id: "subnet-9d4a7b6c",
    #         available_ip_address_count: 251
    #       }
    #     ]
    #   }
    def describe_subnets(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeSubnetsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeSubnets.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_subnets,
        tracer: tracer
      )
      Telemetry::DescribeSubnets.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_subnets] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_subnets] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_subnets] #{output.data}")
        output
      end
    end

    # <p>Describes the specified tags for your EC2 resources.</p>
    #          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the
    #             <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeTagsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTagsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_tags(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTagsOutput
    #   resp.data.next_token #=> String
    #   resp.data.tags #=> Array<TagDescription>
    #   resp.data.tags[0] #=> Types::TagDescription
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].resource_id #=> String
    #   resp.data.tags[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #   resp.data.tags[0].value #=> String
    # @example To describe the tags for a single resource
    #   # This example describes the tags for the specified instance.
    #   resp = client.describe_tags({
    #     filters: [
    #       {
    #         name: "resource-id",
    #         values: [
    #           "i-1234567890abcdef8"
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     tags: [
    #       {
    #         resource_type: "instance",
    #         resource_id: "i-1234567890abcdef8",
    #         value: "test",
    #         key: "Stack"
    #       },
    #       {
    #         resource_type: "instance",
    #         resource_id: "i-1234567890abcdef8",
    #         value: "Beta Server",
    #         key: "Name"
    #       }
    #     ]
    #   }
    def describe_tags(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTagsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTags.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_tags,
        tracer: tracer
      )
      Telemetry::DescribeTags.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_tags] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_tags] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_tags] #{output.data}")
        output
      end
    end

    # <p>Describes one or more Traffic Mirror filters.</p>
    # @param [Hash | Types::DescribeTrafficMirrorFiltersInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTrafficMirrorFiltersInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_traffic_mirror_filters(
    #     traffic_mirror_filter_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTrafficMirrorFiltersOutput
    #   resp.data.traffic_mirror_filters #=> Array<TrafficMirrorFilter>
    #   resp.data.traffic_mirror_filters[0] #=> Types::TrafficMirrorFilter
    #   resp.data.traffic_mirror_filters[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0] #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].rule_number #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].protocol #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].source_cidr_block #=> String
    #   resp.data.traffic_mirror_filters[0].ingress_filter_rules[0].description #=> String
    #   resp.data.traffic_mirror_filters[0].egress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filters[0].network_services #=> Array<String>
    #   resp.data.traffic_mirror_filters[0].network_services[0] #=> String, one of ["amazon-dns"]
    #   resp.data.traffic_mirror_filters[0].description #=> String
    #   resp.data.traffic_mirror_filters[0].tags #=> Array<Tag>
    #   resp.data.traffic_mirror_filters[0].tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_filters[0].tags[0].key #=> String
    #   resp.data.traffic_mirror_filters[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_traffic_mirror_filters(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTrafficMirrorFiltersInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTrafficMirrorFilters.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_traffic_mirror_filters,
        tracer: tracer
      )
      Telemetry::DescribeTrafficMirrorFilters.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_filters] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_filters] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_filters] #{output.data}")
        output
      end
    end

    # <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
    # @param [Hash | Types::DescribeTrafficMirrorSessionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTrafficMirrorSessionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_traffic_mirror_sessions(
    #     traffic_mirror_session_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTrafficMirrorSessionsOutput
    #   resp.data.traffic_mirror_sessions #=> Array<TrafficMirrorSession>
    #   resp.data.traffic_mirror_sessions[0] #=> Types::TrafficMirrorSession
    #   resp.data.traffic_mirror_sessions[0].traffic_mirror_session_id #=> String
    #   resp.data.traffic_mirror_sessions[0].traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_sessions[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_sessions[0].network_interface_id #=> String
    #   resp.data.traffic_mirror_sessions[0].owner_id #=> String
    #   resp.data.traffic_mirror_sessions[0].packet_length #=> Integer
    #   resp.data.traffic_mirror_sessions[0].session_number #=> Integer
    #   resp.data.traffic_mirror_sessions[0].virtual_network_id #=> Integer
    #   resp.data.traffic_mirror_sessions[0].description #=> String
    #   resp.data.traffic_mirror_sessions[0].tags #=> Array<Tag>
    #   resp.data.traffic_mirror_sessions[0].tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_sessions[0].tags[0].key #=> String
    #   resp.data.traffic_mirror_sessions[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_traffic_mirror_sessions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTrafficMirrorSessionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTrafficMirrorSessions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_traffic_mirror_sessions,
        tracer: tracer
      )
      Telemetry::DescribeTrafficMirrorSessions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_sessions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_sessions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_sessions] #{output.data}")
        output
      end
    end

    # <p>Information about one or more Traffic Mirror targets.</p>
    # @param [Hash | Types::DescribeTrafficMirrorTargetsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTrafficMirrorTargetsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_traffic_mirror_targets(
    #     traffic_mirror_target_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTrafficMirrorTargetsOutput
    #   resp.data.traffic_mirror_targets #=> Array<TrafficMirrorTarget>
    #   resp.data.traffic_mirror_targets[0] #=> Types::TrafficMirrorTarget
    #   resp.data.traffic_mirror_targets[0].traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_targets[0].network_interface_id #=> String
    #   resp.data.traffic_mirror_targets[0].network_load_balancer_arn #=> String
    #   resp.data.traffic_mirror_targets[0].type #=> String, one of ["network-interface", "network-load-balancer", "gateway-load-balancer-endpoint"]
    #   resp.data.traffic_mirror_targets[0].description #=> String
    #   resp.data.traffic_mirror_targets[0].owner_id #=> String
    #   resp.data.traffic_mirror_targets[0].tags #=> Array<Tag>
    #   resp.data.traffic_mirror_targets[0].tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_targets[0].tags[0].key #=> String
    #   resp.data.traffic_mirror_targets[0].tags[0].value #=> String
    #   resp.data.traffic_mirror_targets[0].gateway_load_balancer_endpoint_id #=> String
    #   resp.data.next_token #=> String
    def describe_traffic_mirror_targets(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTrafficMirrorTargetsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTrafficMirrorTargets.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_traffic_mirror_targets,
        tracer: tracer
      )
      Telemetry::DescribeTrafficMirrorTargets.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_targets] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_targets] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_traffic_mirror_targets] #{output.data}")
        output
      end
    end

    # <p>Describes one or more attachments between resources and transit gateways. By default, all attachments are described.
    #          Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.</p>
    # @param [Hash | Types::DescribeTransitGatewayAttachmentsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayAttachmentsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_attachments(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayAttachmentsOutput
    #   resp.data.transit_gateway_attachments #=> Array<TransitGatewayAttachment>
    #   resp.data.transit_gateway_attachments[0] #=> Types::TransitGatewayAttachment
    #   resp.data.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_attachments[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_attachments[0].transit_gateway_owner_id #=> String
    #   resp.data.transit_gateway_attachments[0].resource_owner_id #=> String
    #   resp.data.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.transit_gateway_attachments[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_attachments[0].association #=> Types::TransitGatewayAttachmentAssociation
    #   resp.data.transit_gateway_attachments[0].association.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_attachments[0].association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.transit_gateway_attachments[0].creation_time #=> Time
    #   resp.data.transit_gateway_attachments[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_attachments[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_attachments[0].tags[0].key #=> String
    #   resp.data.transit_gateway_attachments[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_attachments(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayAttachmentsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayAttachments.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_attachments,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayAttachments.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_attachments] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_attachments] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_attachments] #{output.data}")
        output
      end
    end

    # <p>Describes one or more Connect peers.</p>
    # @param [Hash | Types::DescribeTransitGatewayConnectPeersInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayConnectPeersInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_connect_peers(
    #     transit_gateway_connect_peer_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayConnectPeersOutput
    #   resp.data.transit_gateway_connect_peers #=> Array<TransitGatewayConnectPeer>
    #   resp.data.transit_gateway_connect_peers[0] #=> Types::TransitGatewayConnectPeer
    #   resp.data.transit_gateway_connect_peers[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connect_peers[0].transit_gateway_connect_peer_id #=> String
    #   resp.data.transit_gateway_connect_peers[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_connect_peers[0].creation_time #=> Time
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration #=> Types::TransitGatewayConnectPeerConfiguration
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.peer_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.inside_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.inside_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations #=> Array<TransitGatewayAttachmentBgpConfiguration>
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0] #=> Types::TransitGatewayAttachmentBgpConfiguration
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].transit_gateway_asn #=> Integer
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].peer_asn #=> Integer
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].transit_gateway_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].peer_address #=> String
    #   resp.data.transit_gateway_connect_peers[0].connect_peer_configuration.bgp_configurations[0].bgp_status #=> String, one of ["up", "down"]
    #   resp.data.transit_gateway_connect_peers[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_connect_peers[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connect_peers[0].tags[0].key #=> String
    #   resp.data.transit_gateway_connect_peers[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_connect_peers(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayConnectPeersInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayConnectPeers.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_connect_peers,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayConnectPeers.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_connect_peers] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_connect_peers] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_connect_peers] #{output.data}")
        output
      end
    end

    # <p>Describes one or more Connect attachments.</p>
    # @param [Hash | Types::DescribeTransitGatewayConnectsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayConnectsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_connects(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayConnectsOutput
    #   resp.data.transit_gateway_connects #=> Array<TransitGatewayConnect>
    #   resp.data.transit_gateway_connects[0] #=> Types::TransitGatewayConnect
    #   resp.data.transit_gateway_connects[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connects[0].transport_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_connects[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_connects[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_connects[0].creation_time #=> Time
    #   resp.data.transit_gateway_connects[0].options #=> Types::TransitGatewayConnectOptions
    #   resp.data.transit_gateway_connects[0].options.protocol #=> String, one of ["gre"]
    #   resp.data.transit_gateway_connects[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_connects[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_connects[0].tags[0].key #=> String
    #   resp.data.transit_gateway_connects[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_connects(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayConnectsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayConnects.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_connects,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayConnects.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_connects] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_connects] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_connects] #{output.data}")
        output
      end
    end

    # <p>Describes one or more transit gateway multicast domains.</p>
    # @param [Hash | Types::DescribeTransitGatewayMulticastDomainsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayMulticastDomainsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_multicast_domains(
    #     transit_gateway_multicast_domain_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayMulticastDomainsOutput
    #   resp.data.transit_gateway_multicast_domains #=> Array<TransitGatewayMulticastDomain>
    #   resp.data.transit_gateway_multicast_domains[0] #=> Types::TransitGatewayMulticastDomain
    #   resp.data.transit_gateway_multicast_domains[0].transit_gateway_multicast_domain_id #=> String
    #   resp.data.transit_gateway_multicast_domains[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_multicast_domains[0].transit_gateway_multicast_domain_arn #=> String
    #   resp.data.transit_gateway_multicast_domains[0].owner_id #=> String
    #   resp.data.transit_gateway_multicast_domains[0].options #=> Types::TransitGatewayMulticastDomainOptions
    #   resp.data.transit_gateway_multicast_domains[0].options.igmpv2_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domains[0].options.static_sources_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domains[0].options.auto_accept_shared_associations #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_multicast_domains[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_multicast_domains[0].creation_time #=> Time
    #   resp.data.transit_gateway_multicast_domains[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_multicast_domains[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_multicast_domains[0].tags[0].key #=> String
    #   resp.data.transit_gateway_multicast_domains[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_multicast_domains(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayMulticastDomainsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayMulticastDomains.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_multicast_domains,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayMulticastDomains.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_multicast_domains] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_multicast_domains] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_multicast_domains] #{output.data}")
        output
      end
    end

    # <p>Describes your transit gateway peering attachments.</p>
    # @param [Hash | Types::DescribeTransitGatewayPeeringAttachmentsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayPeeringAttachmentsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_peering_attachments(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayPeeringAttachmentsOutput
    #   resp.data.transit_gateway_peering_attachments #=> Array<TransitGatewayPeeringAttachment>
    #   resp.data.transit_gateway_peering_attachments[0] #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].accepter_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.core_network_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachments[0].requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachments[0].accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachments[0].options #=> Types::TransitGatewayPeeringAttachmentOptions
    #   resp.data.transit_gateway_peering_attachments[0].options.dynamic_routing #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_peering_attachments[0].status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachments[0].status.code #=> String
    #   resp.data.transit_gateway_peering_attachments[0].status.message #=> String
    #   resp.data.transit_gateway_peering_attachments[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachments[0].creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachments[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachments[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachments[0].tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachments[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_peering_attachments(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayPeeringAttachmentsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayPeeringAttachments.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_peering_attachments,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayPeeringAttachments.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_peering_attachments] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_peering_attachments] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_peering_attachments] #{output.data}")
        output
      end
    end

    # <p>Describes one or more transit gateway route policy tables.  </p>
    # @param [Hash | Types::DescribeTransitGatewayPolicyTablesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayPolicyTablesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_policy_tables(
    #     transit_gateway_policy_table_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayPolicyTablesOutput
    #   resp.data.transit_gateway_policy_tables #=> Array<TransitGatewayPolicyTable>
    #   resp.data.transit_gateway_policy_tables[0] #=> Types::TransitGatewayPolicyTable
    #   resp.data.transit_gateway_policy_tables[0].transit_gateway_policy_table_id #=> String
    #   resp.data.transit_gateway_policy_tables[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_policy_tables[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_policy_tables[0].creation_time #=> Time
    #   resp.data.transit_gateway_policy_tables[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_policy_tables[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_policy_tables[0].tags[0].key #=> String
    #   resp.data.transit_gateway_policy_tables[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_policy_tables(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayPolicyTablesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayPolicyTables.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_policy_tables,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayPolicyTables.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_policy_tables] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_policy_tables] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_policy_tables] #{output.data}")
        output
      end
    end

    # <p>Describes one or more transit gateway route table advertisements.</p>
    # @param [Hash | Types::DescribeTransitGatewayRouteTableAnnouncementsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayRouteTableAnnouncementsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_route_table_announcements(
    #     transit_gateway_route_table_announcement_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayRouteTableAnnouncementsOutput
    #   resp.data.transit_gateway_route_table_announcements #=> Array<TransitGatewayRouteTableAnnouncement>
    #   resp.data.transit_gateway_route_table_announcements[0] #=> Types::TransitGatewayRouteTableAnnouncement
    #   resp.data.transit_gateway_route_table_announcements[0].transit_gateway_route_table_announcement_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].core_network_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].peer_transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].peer_core_network_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].peering_attachment_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].announcement_direction #=> String, one of ["outgoing", "incoming"]
    #   resp.data.transit_gateway_route_table_announcements[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].state #=> String, one of ["available", "pending", "failing", "failed", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_table_announcements[0].creation_time #=> Time
    #   resp.data.transit_gateway_route_table_announcements[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_table_announcements[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_table_announcements[0].tags[0].key #=> String
    #   resp.data.transit_gateway_route_table_announcements[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_route_table_announcements(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayRouteTableAnnouncementsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayRouteTableAnnouncements.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_route_table_announcements,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayRouteTableAnnouncements.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_route_table_announcements] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_route_table_announcements] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_route_table_announcements] #{output.data}")
        output
      end
    end

    # <p>Describes one or more transit gateway route tables. By default, all transit gateway route tables are described.
    #          Alternatively, you can filter the results.</p>
    # @param [Hash | Types::DescribeTransitGatewayRouteTablesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayRouteTablesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_route_tables(
    #     transit_gateway_route_table_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayRouteTablesOutput
    #   resp.data.transit_gateway_route_tables #=> Array<TransitGatewayRouteTable>
    #   resp.data.transit_gateway_route_tables[0] #=> Types::TransitGatewayRouteTable
    #   resp.data.transit_gateway_route_tables[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_route_tables[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_route_tables[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.transit_gateway_route_tables[0].default_association_route_table #=> Boolean
    #   resp.data.transit_gateway_route_tables[0].default_propagation_route_table #=> Boolean
    #   resp.data.transit_gateway_route_tables[0].creation_time #=> Time
    #   resp.data.transit_gateway_route_tables[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_route_tables[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_route_tables[0].tags[0].key #=> String
    #   resp.data.transit_gateway_route_tables[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_route_tables(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayRouteTablesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayRouteTables.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_route_tables,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayRouteTables.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_route_tables] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_route_tables] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_route_tables] #{output.data}")
        output
      end
    end

    # <p>Describes one or more VPC attachments. By default, all VPC attachments are described.
    #          Alternatively, you can filter the results.</p>
    # @param [Hash | Types::DescribeTransitGatewayVpcAttachmentsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewayVpcAttachmentsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateway_vpc_attachments(
    #     transit_gateway_attachment_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewayVpcAttachmentsOutput
    #   resp.data.transit_gateway_vpc_attachments #=> Array<TransitGatewayVpcAttachment>
    #   resp.data.transit_gateway_vpc_attachments[0] #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachments[0].subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachments[0].subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachments[0].options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachments[0].options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachments[0].tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachments[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachments[0].tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachments[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateway_vpc_attachments(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewayVpcAttachmentsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGatewayVpcAttachments.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateway_vpc_attachments,
        tracer: tracer
      )
      Telemetry::DescribeTransitGatewayVpcAttachments.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_vpc_attachments] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_vpc_attachments] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateway_vpc_attachments] #{output.data}")
        output
      end
    end

    # <p>Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can
    #          filter the results.</p>
    # @param [Hash | Types::DescribeTransitGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTransitGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_transit_gateways(
    #     transit_gateway_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTransitGatewaysOutput
    #   resp.data.transit_gateways #=> Array<TransitGateway>
    #   resp.data.transit_gateways[0] #=> Types::TransitGateway
    #   resp.data.transit_gateways[0].transit_gateway_id #=> String
    #   resp.data.transit_gateways[0].transit_gateway_arn #=> String
    #   resp.data.transit_gateways[0].state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateways[0].owner_id #=> String
    #   resp.data.transit_gateways[0].description #=> String
    #   resp.data.transit_gateways[0].creation_time #=> Time
    #   resp.data.transit_gateways[0].options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateways[0].options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateways[0].options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateways[0].options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateways[0].options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.association_default_route_table_id #=> String
    #   resp.data.transit_gateways[0].options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateways[0].options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateways[0].tags #=> Array<Tag>
    #   resp.data.transit_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.transit_gateways[0].tags[0].key #=> String
    #   resp.data.transit_gateways[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_transit_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTransitGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTransitGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_transit_gateways,
        tracer: tracer
      )
      Telemetry::DescribeTransitGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_transit_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_transit_gateways] #{output.data}")
        output
      end
    end

    # <p>Describes one or more network interface trunk associations.</p>
    # @param [Hash | Types::DescribeTrunkInterfaceAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeTrunkInterfaceAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_trunk_interface_associations(
    #     association_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeTrunkInterfaceAssociationsOutput
    #   resp.data.interface_associations #=> Array<TrunkInterfaceAssociation>
    #   resp.data.interface_associations[0] #=> Types::TrunkInterfaceAssociation
    #   resp.data.interface_associations[0].association_id #=> String
    #   resp.data.interface_associations[0].branch_interface_id #=> String
    #   resp.data.interface_associations[0].trunk_interface_id #=> String
    #   resp.data.interface_associations[0].interface_protocol #=> String, one of ["VLAN", "GRE"]
    #   resp.data.interface_associations[0].vlan_id #=> Integer
    #   resp.data.interface_associations[0].gre_key #=> Integer
    #   resp.data.interface_associations[0].tags #=> Array<Tag>
    #   resp.data.interface_associations[0].tags[0] #=> Types::Tag
    #   resp.data.interface_associations[0].tags[0].key #=> String
    #   resp.data.interface_associations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_trunk_interface_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeTrunkInterfaceAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeTrunkInterfaceAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_trunk_interface_associations,
        tracer: tracer
      )
      Telemetry::DescribeTrunkInterfaceAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_trunk_interface_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_trunk_interface_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_trunk_interface_associations] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Amazon Web Services Verified Access endpoints.</p>
    # @param [Hash | Types::DescribeVerifiedAccessEndpointsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVerifiedAccessEndpointsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_verified_access_endpoints(
    #     verified_access_endpoint_ids: [
    #       'member'
    #     ],
    #     verified_access_instance_id: 'VerifiedAccessInstanceId',
    #     verified_access_group_id: 'VerifiedAccessGroupId',
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVerifiedAccessEndpointsOutput
    #   resp.data.verified_access_endpoints #=> Array<VerifiedAccessEndpoint>
    #   resp.data.verified_access_endpoints[0] #=> Types::VerifiedAccessEndpoint
    #   resp.data.verified_access_endpoints[0].verified_access_instance_id #=> String
    #   resp.data.verified_access_endpoints[0].verified_access_group_id #=> String
    #   resp.data.verified_access_endpoints[0].verified_access_endpoint_id #=> String
    #   resp.data.verified_access_endpoints[0].application_domain #=> String
    #   resp.data.verified_access_endpoints[0].endpoint_type #=> String, one of ["load-balancer", "network-interface"]
    #   resp.data.verified_access_endpoints[0].attachment_type #=> String, one of ["vpc"]
    #   resp.data.verified_access_endpoints[0].domain_certificate_arn #=> String
    #   resp.data.verified_access_endpoints[0].endpoint_domain #=> String
    #   resp.data.verified_access_endpoints[0].device_validation_domain #=> String
    #   resp.data.verified_access_endpoints[0].security_group_ids #=> Array<String>
    #   resp.data.verified_access_endpoints[0].security_group_ids[0] #=> String
    #   resp.data.verified_access_endpoints[0].load_balancer_options #=> Types::VerifiedAccessEndpointLoadBalancerOptions
    #   resp.data.verified_access_endpoints[0].load_balancer_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoints[0].load_balancer_options.port #=> Integer
    #   resp.data.verified_access_endpoints[0].load_balancer_options.load_balancer_arn #=> String
    #   resp.data.verified_access_endpoints[0].load_balancer_options.subnet_ids #=> Array<String>
    #   resp.data.verified_access_endpoints[0].load_balancer_options.subnet_ids[0] #=> String
    #   resp.data.verified_access_endpoints[0].network_interface_options #=> Types::VerifiedAccessEndpointEniOptions
    #   resp.data.verified_access_endpoints[0].network_interface_options.network_interface_id #=> String
    #   resp.data.verified_access_endpoints[0].network_interface_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoints[0].network_interface_options.port #=> Integer
    #   resp.data.verified_access_endpoints[0].status #=> Types::VerifiedAccessEndpointStatus
    #   resp.data.verified_access_endpoints[0].status.code #=> String, one of ["pending", "active", "updating", "deleting", "deleted"]
    #   resp.data.verified_access_endpoints[0].status.message #=> String
    #   resp.data.verified_access_endpoints[0].description #=> String
    #   resp.data.verified_access_endpoints[0].creation_time #=> String
    #   resp.data.verified_access_endpoints[0].last_updated_time #=> String
    #   resp.data.verified_access_endpoints[0].deletion_time #=> String
    #   resp.data.verified_access_endpoints[0].tags #=> Array<Tag>
    #   resp.data.verified_access_endpoints[0].tags[0] #=> Types::Tag
    #   resp.data.verified_access_endpoints[0].tags[0].key #=> String
    #   resp.data.verified_access_endpoints[0].tags[0].value #=> String
    #   resp.data.verified_access_endpoints[0].sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_endpoints[0].sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_endpoints[0].sse_specification.kms_key_arn #=> String
    #   resp.data.next_token #=> String
    def describe_verified_access_endpoints(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVerifiedAccessEndpointsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVerifiedAccessEndpoints.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_verified_access_endpoints,
        tracer: tracer
      )
      Telemetry::DescribeVerifiedAccessEndpoints.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_endpoints] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_verified_access_endpoints] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_endpoints] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Verified Access groups.</p>
    # @param [Hash | Types::DescribeVerifiedAccessGroupsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVerifiedAccessGroupsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_verified_access_groups(
    #     verified_access_group_ids: [
    #       'member'
    #     ],
    #     verified_access_instance_id: 'VerifiedAccessInstanceId',
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVerifiedAccessGroupsOutput
    #   resp.data.verified_access_groups #=> Array<VerifiedAccessGroup>
    #   resp.data.verified_access_groups[0] #=> Types::VerifiedAccessGroup
    #   resp.data.verified_access_groups[0].verified_access_group_id #=> String
    #   resp.data.verified_access_groups[0].verified_access_instance_id #=> String
    #   resp.data.verified_access_groups[0].description #=> String
    #   resp.data.verified_access_groups[0].owner #=> String
    #   resp.data.verified_access_groups[0].verified_access_group_arn #=> String
    #   resp.data.verified_access_groups[0].creation_time #=> String
    #   resp.data.verified_access_groups[0].last_updated_time #=> String
    #   resp.data.verified_access_groups[0].deletion_time #=> String
    #   resp.data.verified_access_groups[0].tags #=> Array<Tag>
    #   resp.data.verified_access_groups[0].tags[0] #=> Types::Tag
    #   resp.data.verified_access_groups[0].tags[0].key #=> String
    #   resp.data.verified_access_groups[0].tags[0].value #=> String
    #   resp.data.verified_access_groups[0].sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_groups[0].sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_groups[0].sse_specification.kms_key_arn #=> String
    #   resp.data.next_token #=> String
    def describe_verified_access_groups(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVerifiedAccessGroupsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVerifiedAccessGroups.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_verified_access_groups,
        tracer: tracer
      )
      Telemetry::DescribeVerifiedAccessGroups.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_groups] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_verified_access_groups] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_groups] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Amazon Web Services Verified Access instances.</p>
    # @param [Hash | Types::DescribeVerifiedAccessInstanceLoggingConfigurationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVerifiedAccessInstanceLoggingConfigurationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_verified_access_instance_logging_configurations(
    #     verified_access_instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput
    #   resp.data.logging_configurations #=> Array<VerifiedAccessInstanceLoggingConfiguration>
    #   resp.data.logging_configurations[0] #=> Types::VerifiedAccessInstanceLoggingConfiguration
    #   resp.data.logging_configurations[0].verified_access_instance_id #=> String
    #   resp.data.logging_configurations[0].access_logs #=> Types::VerifiedAccessLogs
    #   resp.data.logging_configurations[0].access_logs.s3 #=> Types::VerifiedAccessLogS3Destination
    #   resp.data.logging_configurations[0].access_logs.s3.enabled #=> Boolean
    #   resp.data.logging_configurations[0].access_logs.s3.delivery_status #=> Types::VerifiedAccessLogDeliveryStatus
    #   resp.data.logging_configurations[0].access_logs.s3.delivery_status.code #=> String, one of ["success", "failed"]
    #   resp.data.logging_configurations[0].access_logs.s3.delivery_status.message #=> String
    #   resp.data.logging_configurations[0].access_logs.s3.bucket_name #=> String
    #   resp.data.logging_configurations[0].access_logs.s3.prefix #=> String
    #   resp.data.logging_configurations[0].access_logs.s3.bucket_owner #=> String
    #   resp.data.logging_configurations[0].access_logs.cloud_watch_logs #=> Types::VerifiedAccessLogCloudWatchLogsDestination
    #   resp.data.logging_configurations[0].access_logs.cloud_watch_logs.enabled #=> Boolean
    #   resp.data.logging_configurations[0].access_logs.cloud_watch_logs.delivery_status #=> Types::VerifiedAccessLogDeliveryStatus
    #   resp.data.logging_configurations[0].access_logs.cloud_watch_logs.log_group #=> String
    #   resp.data.logging_configurations[0].access_logs.kinesis_data_firehose #=> Types::VerifiedAccessLogKinesisDataFirehoseDestination
    #   resp.data.logging_configurations[0].access_logs.kinesis_data_firehose.enabled #=> Boolean
    #   resp.data.logging_configurations[0].access_logs.kinesis_data_firehose.delivery_status #=> Types::VerifiedAccessLogDeliveryStatus
    #   resp.data.logging_configurations[0].access_logs.kinesis_data_firehose.delivery_stream #=> String
    #   resp.data.logging_configurations[0].access_logs.log_version #=> String
    #   resp.data.logging_configurations[0].access_logs.include_trust_context #=> Boolean
    #   resp.data.next_token #=> String
    def describe_verified_access_instance_logging_configurations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVerifiedAccessInstanceLoggingConfigurationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVerifiedAccessInstanceLoggingConfigurations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_verified_access_instance_logging_configurations,
        tracer: tracer
      )
      Telemetry::DescribeVerifiedAccessInstanceLoggingConfigurations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_instance_logging_configurations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_verified_access_instance_logging_configurations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_instance_logging_configurations] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Amazon Web Services Verified Access instances.</p>
    # @param [Hash | Types::DescribeVerifiedAccessInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVerifiedAccessInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_verified_access_instances(
    #     verified_access_instance_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVerifiedAccessInstancesOutput
    #   resp.data.verified_access_instances #=> Array<VerifiedAccessInstance>
    #   resp.data.verified_access_instances[0] #=> Types::VerifiedAccessInstance
    #   resp.data.verified_access_instances[0].verified_access_instance_id #=> String
    #   resp.data.verified_access_instances[0].description #=> String
    #   resp.data.verified_access_instances[0].verified_access_trust_providers #=> Array<VerifiedAccessTrustProviderCondensed>
    #   resp.data.verified_access_instances[0].verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProviderCondensed
    #   resp.data.verified_access_instances[0].verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_instances[0].verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_instances[0].verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_instances[0].verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_instances[0].verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_instances[0].creation_time #=> String
    #   resp.data.verified_access_instances[0].last_updated_time #=> String
    #   resp.data.verified_access_instances[0].tags #=> Array<Tag>
    #   resp.data.verified_access_instances[0].tags[0] #=> Types::Tag
    #   resp.data.verified_access_instances[0].tags[0].key #=> String
    #   resp.data.verified_access_instances[0].tags[0].value #=> String
    #   resp.data.verified_access_instances[0].fips_enabled #=> Boolean
    #   resp.data.next_token #=> String
    def describe_verified_access_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVerifiedAccessInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVerifiedAccessInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_verified_access_instances,
        tracer: tracer
      )
      Telemetry::DescribeVerifiedAccessInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_verified_access_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_instances] #{output.data}")
        output
      end
    end

    # <p>Describes the specified Amazon Web Services Verified Access trust providers.</p>
    # @param [Hash | Types::DescribeVerifiedAccessTrustProvidersInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVerifiedAccessTrustProvidersInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_verified_access_trust_providers(
    #     verified_access_trust_provider_ids: [
    #       'member'
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVerifiedAccessTrustProvidersOutput
    #   resp.data.verified_access_trust_providers #=> Array<VerifiedAccessTrustProvider>
    #   resp.data.verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProvider
    #   resp.data.verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_trust_providers[0].oidc_options #=> Types::OidcOptions
    #   resp.data.verified_access_trust_providers[0].oidc_options.issuer #=> String
    #   resp.data.verified_access_trust_providers[0].oidc_options.authorization_endpoint #=> String
    #   resp.data.verified_access_trust_providers[0].oidc_options.token_endpoint #=> String
    #   resp.data.verified_access_trust_providers[0].oidc_options.user_info_endpoint #=> String
    #   resp.data.verified_access_trust_providers[0].oidc_options.client_id #=> String
    #   resp.data.verified_access_trust_providers[0].oidc_options.client_secret #=> String
    #   resp.data.verified_access_trust_providers[0].oidc_options.scope #=> String
    #   resp.data.verified_access_trust_providers[0].device_options #=> Types::DeviceOptions
    #   resp.data.verified_access_trust_providers[0].device_options.tenant_id #=> String
    #   resp.data.verified_access_trust_providers[0].device_options.public_signing_key_url #=> String
    #   resp.data.verified_access_trust_providers[0].policy_reference_name #=> String
    #   resp.data.verified_access_trust_providers[0].creation_time #=> String
    #   resp.data.verified_access_trust_providers[0].last_updated_time #=> String
    #   resp.data.verified_access_trust_providers[0].tags #=> Array<Tag>
    #   resp.data.verified_access_trust_providers[0].tags[0] #=> Types::Tag
    #   resp.data.verified_access_trust_providers[0].tags[0].key #=> String
    #   resp.data.verified_access_trust_providers[0].tags[0].value #=> String
    #   resp.data.verified_access_trust_providers[0].sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_trust_providers[0].sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_trust_providers[0].sse_specification.kms_key_arn #=> String
    #   resp.data.next_token #=> String
    def describe_verified_access_trust_providers(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVerifiedAccessTrustProvidersInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVerifiedAccessTrustProviders.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_verified_access_trust_providers,
        tracer: tracer
      )
      Telemetry::DescribeVerifiedAccessTrustProviders.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_trust_providers] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_verified_access_trust_providers] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_verified_access_trust_providers] #{output.data}")
        output
      end
    end

    # <p>Describes the specified attribute of the specified volume. You can specify only one
    #       attribute at a time.</p>
    #          <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeVolumeAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVolumeAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_volume_attribute(
    #     attribute: 'autoEnableIO', # required - accepts ["autoEnableIO", "productCodes"]
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVolumeAttributeOutput
    #   resp.data.auto_enable_io #=> Types::AttributeBooleanValue
    #   resp.data.auto_enable_io.value #=> Boolean
    #   resp.data.product_codes #=> Array<ProductCode>
    #   resp.data.product_codes[0] #=> Types::ProductCode
    #   resp.data.product_codes[0].product_code_id #=> String
    #   resp.data.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.volume_id #=> String
    # @example To describe a volume attribute
    #   # This example describes the ``autoEnableIo`` attribute of the volume with the ID ``vol-049df61146c4d7901``.
    #   resp = client.describe_volume_attribute({
    #     volume_id: "vol-049df61146c4d7901",
    #     attribute: "autoEnableIO"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     auto_enable_io: {
    #       value: false
    #     },
    #     volume_id: "vol-049df61146c4d7901"
    #   }
    def describe_volume_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVolumeAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVolumeAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_volume_attribute,
        tracer: tracer
      )
      Telemetry::DescribeVolumeAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volume_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_volume_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volume_attribute] #{output.data}")
        output
      end
    end

    # <p>Describes the status of the specified volumes. Volume status provides the result of the
    #       checks performed on your volumes to determine events that can impair the performance of your
    #       volumes. The performance of a volume can be affected if an issue occurs on the volume's
    #       underlying host. If the volume's underlying host experiences a power outage or system issue,
    #       after the system is restored, there could be data inconsistencies on the volume. Volume events
    #       notify you if this occurs. Volume actions notify you if any action needs to be taken in
    #       response to the event.</p>
    #          <p>The <code>DescribeVolumeStatus</code> operation provides the following information about
    #       the specified volumes:</p>
    #          <p>
    #             <i>Status</i>: Reflects the current status of the volume. The possible
    #       values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or
    #         <code>insufficient-data</code>. If all checks pass, the overall status of the volume is
    #         <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the
    #       status is <code>insufficient-data</code>, then the checks might still be taking place on your
    #       volume at the time. We recommend that you retry the request. For more information about volume
    #       status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitor the status of your volumes</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>
    #             <i>Events</i>: Reflect the cause of a volume status and might require you to
    #       take action. For example, if your volume returns an <code>impaired</code> status, then the
    #       volume event might be <code>potential-data-inconsistency</code>. This means that your volume
    #       has been affected by an issue with the underlying host, has all I/O operations disabled, and
    #       might have inconsistent data.</p>
    #          <p>
    #             <i>Actions</i>: Reflect the actions you might have to take in response to an
    #       event. For example, if the status of the volume is <code>impaired</code> and the volume event
    #       shows <code>potential-data-inconsistency</code>, then the action shows
    #         <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for
    #       the volume by calling the <a>EnableVolumeIO</a> action and then check the volume
    #       for data consistency.</p>
    #          <p>Volume status is based on the volume status checks, and does not reflect the volume state.
    #       Therefore, volume status does not indicate volumes in the <code>error</code> state (for
    #       example, when a volume is incapable of accepting I/O.)</p>
    # @param [Hash | Types::DescribeVolumeStatusInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVolumeStatusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_volume_status(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     volume_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVolumeStatusOutput
    #   resp.data.next_token #=> String
    #   resp.data.volume_statuses #=> Array<VolumeStatusItem>
    #   resp.data.volume_statuses[0] #=> Types::VolumeStatusItem
    #   resp.data.volume_statuses[0].actions #=> Array<VolumeStatusAction>
    #   resp.data.volume_statuses[0].actions[0] #=> Types::VolumeStatusAction
    #   resp.data.volume_statuses[0].actions[0].code #=> String
    #   resp.data.volume_statuses[0].actions[0].description #=> String
    #   resp.data.volume_statuses[0].actions[0].event_id #=> String
    #   resp.data.volume_statuses[0].actions[0].event_type #=> String
    #   resp.data.volume_statuses[0].availability_zone #=> String
    #   resp.data.volume_statuses[0].outpost_arn #=> String
    #   resp.data.volume_statuses[0].events #=> Array<VolumeStatusEvent>
    #   resp.data.volume_statuses[0].events[0] #=> Types::VolumeStatusEvent
    #   resp.data.volume_statuses[0].events[0].description #=> String
    #   resp.data.volume_statuses[0].events[0].event_id #=> String
    #   resp.data.volume_statuses[0].events[0].event_type #=> String
    #   resp.data.volume_statuses[0].events[0].not_after #=> Time
    #   resp.data.volume_statuses[0].events[0].not_before #=> Time
    #   resp.data.volume_statuses[0].events[0].instance_id #=> String
    #   resp.data.volume_statuses[0].volume_id #=> String
    #   resp.data.volume_statuses[0].volume_status #=> Types::VolumeStatusInfo
    #   resp.data.volume_statuses[0].volume_status.details #=> Array<VolumeStatusDetails>
    #   resp.data.volume_statuses[0].volume_status.details[0] #=> Types::VolumeStatusDetails
    #   resp.data.volume_statuses[0].volume_status.details[0].name #=> String, one of ["io-enabled", "io-performance"]
    #   resp.data.volume_statuses[0].volume_status.details[0].status #=> String
    #   resp.data.volume_statuses[0].volume_status.status #=> String, one of ["ok", "impaired", "insufficient-data"]
    #   resp.data.volume_statuses[0].attachment_statuses #=> Array<VolumeStatusAttachmentStatus>
    #   resp.data.volume_statuses[0].attachment_statuses[0] #=> Types::VolumeStatusAttachmentStatus
    #   resp.data.volume_statuses[0].attachment_statuses[0].io_performance #=> String
    #   resp.data.volume_statuses[0].attachment_statuses[0].instance_id #=> String
    # @example To describe the status of a single volume
    #   # This example describes the status for the volume ``vol-1234567890abcdef0``.
    #   resp = client.describe_volume_status({
    #     volume_ids: [
    #       "vol-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     volume_statuses: [
    #       {
    #         volume_status: {
    #           status: "ok",
    #           details: [
    #             {
    #               status: "passed",
    #               name: "io-enabled"
    #             },
    #             {
    #               status: "not-applicable",
    #               name: "io-performance"
    #             }
    #           ]
    #         },
    #         availability_zone: "us-east-1a",
    #         volume_id: "vol-1234567890abcdef0",
    #         actions: [
    #
    #         ],
    #         events: [
    #
    #         ]
    #       }
    #     ]
    #   }
    # @example To describe the status of impaired volumes
    #   # This example describes the status for all volumes that are impaired. In this example output, there are no impaired volumes.
    #   resp = client.describe_volume_status({
    #     filters: [
    #       {
    #         values: [
    #           "impaired"
    #         ],
    #         name: "volume-status.status"
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     volume_statuses: [
    #
    #     ]
    #   }
    def describe_volume_status(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVolumeStatusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVolumeStatus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_volume_status,
        tracer: tracer
      )
      Telemetry::DescribeVolumeStatus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volume_status] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_volume_status] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volume_status] #{output.data}")
        output
      end
    end

    # <p>Describes the specified EBS volumes or all of your EBS volumes.</p>
    #          <p>If you are describing a long list of volumes, we recommend that you paginate the output to make the list
    #       more manageable. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    #          <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeVolumesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVolumesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_volumes(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     volume_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVolumesOutput
    #   resp.data.volumes #=> Array<Volume>
    #   resp.data.volumes[0] #=> Types::Volume
    #   resp.data.volumes[0].attachments #=> Array<VolumeAttachment>
    #   resp.data.volumes[0].attachments[0] #=> Types::VolumeAttachment
    #   resp.data.volumes[0].attachments[0].attach_time #=> Time
    #   resp.data.volumes[0].attachments[0].device #=> String
    #   resp.data.volumes[0].attachments[0].instance_id #=> String
    #   resp.data.volumes[0].attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.volumes[0].attachments[0].volume_id #=> String
    #   resp.data.volumes[0].attachments[0].delete_on_termination #=> Boolean
    #   resp.data.volumes[0].attachments[0].associated_resource #=> String
    #   resp.data.volumes[0].attachments[0].instance_owning_service #=> String
    #   resp.data.volumes[0].availability_zone #=> String
    #   resp.data.volumes[0].create_time #=> Time
    #   resp.data.volumes[0].encrypted #=> Boolean
    #   resp.data.volumes[0].kms_key_id #=> String
    #   resp.data.volumes[0].outpost_arn #=> String
    #   resp.data.volumes[0].size #=> Integer
    #   resp.data.volumes[0].snapshot_id #=> String
    #   resp.data.volumes[0].state #=> String, one of ["creating", "available", "in-use", "deleting", "deleted", "error"]
    #   resp.data.volumes[0].volume_id #=> String
    #   resp.data.volumes[0].iops #=> Integer
    #   resp.data.volumes[0].tags #=> Array<Tag>
    #   resp.data.volumes[0].tags[0] #=> Types::Tag
    #   resp.data.volumes[0].tags[0].key #=> String
    #   resp.data.volumes[0].tags[0].value #=> String
    #   resp.data.volumes[0].volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volumes[0].fast_restored #=> Boolean
    #   resp.data.volumes[0].multi_attach_enabled #=> Boolean
    #   resp.data.volumes[0].throughput #=> Integer
    #   resp.data.volumes[0].sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    #   resp.data.next_token #=> String
    # @example To describe all volumes
    #   resp = client.describe_volumes()
    #
    #   # resp.to_h outputs the following:
    #   {
    #     volumes: [
    #       {
    #         availability_zone: "us-east-1a",
    #         attachments: [
    #           {
    #             attach_time: Time.parse('2013-12-18T22:35:00.000Z'),
    #             instance_id: "i-1234567890abcdef0",
    #             volume_id: "vol-049df61146c4d7901",
    #             state: "attached",
    #             delete_on_termination: true,
    #             device: "/dev/sda1"
    #           }
    #         ],
    #         volume_type: "standard",
    #         volume_id: "vol-049df61146c4d7901",
    #         state: "in-use",
    #         snapshot_id: "snap-1234567890abcdef0",
    #         create_time: Time.parse('2013-12-18T22:35:00.084Z'),
    #         size: 8
    #       }
    #     ],
    #     next_token: ""
    #   }
    # @example To describe volumes that are attached to a specific instance
    #   # This example describes all volumes that are both attached to the instance with the ID i-1234567890abcdef0 and set to delete when the instance terminates.
    #   resp = client.describe_volumes({
    #     filters: [
    #       {
    #         values: [
    #           "i-1234567890abcdef0"
    #         ],
    #         name: "attachment.instance-id"
    #       },
    #       {
    #         values: [
    #           "true"
    #         ],
    #         name: "attachment.delete-on-termination"
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     volumes: [
    #       {
    #         availability_zone: "us-east-1a",
    #         attachments: [
    #           {
    #             attach_time: Time.parse('2013-12-18T22:35:00.000Z'),
    #             instance_id: "i-1234567890abcdef0",
    #             volume_id: "vol-049df61146c4d7901",
    #             state: "attached",
    #             delete_on_termination: true,
    #             device: "/dev/sda1"
    #           }
    #         ],
    #         volume_type: "standard",
    #         volume_id: "vol-049df61146c4d7901",
    #         state: "in-use",
    #         snapshot_id: "snap-1234567890abcdef0",
    #         create_time: Time.parse('2013-12-18T22:35:00.084Z'),
    #         size: 8
    #       }
    #     ]
    #   }
    def describe_volumes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVolumesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVolumes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_volumes,
        tracer: tracer
      )
      Telemetry::DescribeVolumes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volumes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_volumes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volumes] #{output.data}")
        output
      end
    end

    # <p>Describes the most recent volume modification request for the specified EBS volumes.</p>
    #          <p>If a volume has never been modified, some information in the output will be null.
    #       If a volume has been modified more than once, the output includes only the most
    #       recent modification request.</p>
    #          <p>You can also use CloudWatch Events to check the status of a modification to an EBS
    #       volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DescribeVolumesModificationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVolumesModificationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_volumes_modifications(
    #     dry_run: false,
    #     volume_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVolumesModificationsOutput
    #   resp.data.volumes_modifications #=> Array<VolumeModification>
    #   resp.data.volumes_modifications[0] #=> Types::VolumeModification
    #   resp.data.volumes_modifications[0].volume_id #=> String
    #   resp.data.volumes_modifications[0].modification_state #=> String, one of ["modifying", "optimizing", "completed", "failed"]
    #   resp.data.volumes_modifications[0].status_message #=> String
    #   resp.data.volumes_modifications[0].target_size #=> Integer
    #   resp.data.volumes_modifications[0].target_iops #=> Integer
    #   resp.data.volumes_modifications[0].target_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volumes_modifications[0].target_throughput #=> Integer
    #   resp.data.volumes_modifications[0].target_multi_attach_enabled #=> Boolean
    #   resp.data.volumes_modifications[0].original_size #=> Integer
    #   resp.data.volumes_modifications[0].original_iops #=> Integer
    #   resp.data.volumes_modifications[0].original_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volumes_modifications[0].original_throughput #=> Integer
    #   resp.data.volumes_modifications[0].original_multi_attach_enabled #=> Boolean
    #   resp.data.volumes_modifications[0].progress #=> Integer
    #   resp.data.volumes_modifications[0].start_time #=> Time
    #   resp.data.volumes_modifications[0].end_time #=> Time
    #   resp.data.next_token #=> String
    def describe_volumes_modifications(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVolumesModificationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVolumesModifications.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_volumes_modifications,
        tracer: tracer
      )
      Telemetry::DescribeVolumesModifications.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volumes_modifications] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_volumes_modifications] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_volumes_modifications] #{output.data}")
        output
      end
    end

    # <p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
    # @param [Hash | Types::DescribeVpcAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_attribute(
    #     attribute: 'enableDnsSupport', # required - accepts ["enableDnsSupport", "enableDnsHostnames", "enableNetworkAddressUsageMetrics"]
    #     vpc_id: 'VpcId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcAttributeOutput
    #   resp.data.vpc_id #=> String
    #   resp.data.enable_dns_hostnames #=> Types::AttributeBooleanValue
    #   resp.data.enable_dns_hostnames.value #=> Boolean
    #   resp.data.enable_dns_support #=> Types::AttributeBooleanValue
    #   resp.data.enable_network_address_usage_metrics #=> Types::AttributeBooleanValue
    # @example To describe the enableDnsSupport attribute
    #   # This example describes the enableDnsSupport attribute. This attribute indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.
    #   resp = client.describe_vpc_attribute({
    #     vpc_id: "vpc-a01106c2",
    #     attribute: "enableDnsSupport"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     vpc_id: "vpc-a01106c2",
    #     enable_dns_support: {
    #       value: true
    #     }
    #   }
    # @example To describe the enableDnsHostnames attribute
    #   # This example describes the enableDnsHostnames attribute. This attribute indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
    #   resp = client.describe_vpc_attribute({
    #     vpc_id: "vpc-a01106c2",
    #     attribute: "enableDnsHostnames"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     vpc_id: "vpc-a01106c2",
    #     enable_dns_hostnames: {
    #       value: true
    #     }
    #   }
    def describe_vpc_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_attribute,
        tracer: tracer
      )
      Telemetry::DescribeVpcAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_attribute] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Describes the ClassicLink status of the specified VPCs.</p>
    # @param [Hash | Types::DescribeVpcClassicLinkInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcClassicLinkInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_classic_link(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     vpc_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcClassicLinkOutput
    #   resp.data.vpcs #=> Array<VpcClassicLink>
    #   resp.data.vpcs[0] #=> Types::VpcClassicLink
    #   resp.data.vpcs[0].classic_link_enabled #=> Boolean
    #   resp.data.vpcs[0].tags #=> Array<Tag>
    #   resp.data.vpcs[0].tags[0] #=> Types::Tag
    #   resp.data.vpcs[0].tags[0].key #=> String
    #   resp.data.vpcs[0].tags[0].value #=> String
    #   resp.data.vpcs[0].vpc_id #=> String
    def describe_vpc_classic_link(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcClassicLinkInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcClassicLink.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_classic_link,
        tracer: tracer
      )
      Telemetry::DescribeVpcClassicLink.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_classic_link] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_classic_link] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_classic_link] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS
    #             hostname of a linked EC2-Classic instance resolves to its private IP address when
    #             addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
    #             of an instance in a VPC resolves to its private IP address when addressed from a linked
    #             EC2-Classic instance.</p>
    # @param [Hash | Types::DescribeVpcClassicLinkDnsSupportInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcClassicLinkDnsSupportInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_classic_link_dns_support(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     vpc_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcClassicLinkDnsSupportOutput
    #   resp.data.next_token #=> String
    #   resp.data.vpcs #=> Array<ClassicLinkDnsSupport>
    #   resp.data.vpcs[0] #=> Types::ClassicLinkDnsSupport
    #   resp.data.vpcs[0].classic_link_dns_supported #=> Boolean
    #   resp.data.vpcs[0].vpc_id #=> String
    def describe_vpc_classic_link_dns_support(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcClassicLinkDnsSupportInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcClassicLinkDnsSupport.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_classic_link_dns_support,
        tracer: tracer
      )
      Telemetry::DescribeVpcClassicLinkDnsSupport.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_classic_link_dns_support] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_classic_link_dns_support] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_classic_link_dns_support] #{output.data}")
        output
      end
    end

    # <p>Describes the connection notifications for VPC endpoints and VPC endpoint
    #             services.</p>
    # @param [Hash | Types::DescribeVpcEndpointConnectionNotificationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcEndpointConnectionNotificationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_endpoint_connection_notifications(
    #     dry_run: false,
    #     connection_notification_id: 'ConnectionNotificationId',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcEndpointConnectionNotificationsOutput
    #   resp.data.connection_notification_set #=> Array<ConnectionNotification>
    #   resp.data.connection_notification_set[0] #=> Types::ConnectionNotification
    #   resp.data.connection_notification_set[0].connection_notification_id #=> String
    #   resp.data.connection_notification_set[0].service_id #=> String
    #   resp.data.connection_notification_set[0].vpc_endpoint_id #=> String
    #   resp.data.connection_notification_set[0].connection_notification_type #=> String, one of ["Topic"]
    #   resp.data.connection_notification_set[0].connection_notification_arn #=> String
    #   resp.data.connection_notification_set[0].connection_events #=> Array<String>
    #   resp.data.connection_notification_set[0].connection_events[0] #=> String
    #   resp.data.connection_notification_set[0].connection_notification_state #=> String, one of ["Enabled", "Disabled"]
    #   resp.data.next_token #=> String
    def describe_vpc_endpoint_connection_notifications(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcEndpointConnectionNotificationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcEndpointConnectionNotifications.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_endpoint_connection_notifications,
        tracer: tracer
      )
      Telemetry::DescribeVpcEndpointConnectionNotifications.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_connection_notifications] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_connection_notifications] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_connection_notifications] #{output.data}")
        output
      end
    end

    # <p>Describes the VPC endpoint connections to your VPC endpoint services, including any
    #             endpoints that are pending your acceptance.</p>
    # @param [Hash | Types::DescribeVpcEndpointConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcEndpointConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_endpoint_connections(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcEndpointConnectionsOutput
    #   resp.data.vpc_endpoint_connections #=> Array<VpcEndpointConnection>
    #   resp.data.vpc_endpoint_connections[0] #=> Types::VpcEndpointConnection
    #   resp.data.vpc_endpoint_connections[0].service_id #=> String
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_id #=> String
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_owner #=> String
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_state #=> String, one of ["PendingAcceptance", "Pending", "Available", "Deleting", "Deleted", "Rejected", "Failed", "Expired"]
    #   resp.data.vpc_endpoint_connections[0].creation_timestamp #=> Time
    #   resp.data.vpc_endpoint_connections[0].dns_entries #=> Array<DnsEntry>
    #   resp.data.vpc_endpoint_connections[0].dns_entries[0] #=> Types::DnsEntry
    #   resp.data.vpc_endpoint_connections[0].dns_entries[0].dns_name #=> String
    #   resp.data.vpc_endpoint_connections[0].dns_entries[0].hosted_zone_id #=> String
    #   resp.data.vpc_endpoint_connections[0].network_load_balancer_arns #=> Array<String>
    #   resp.data.vpc_endpoint_connections[0].network_load_balancer_arns[0] #=> String
    #   resp.data.vpc_endpoint_connections[0].gateway_load_balancer_arns #=> Array<String>
    #   resp.data.vpc_endpoint_connections[0].ip_address_type #=> String, one of ["ipv4", "dualstack", "ipv6"]
    #   resp.data.vpc_endpoint_connections[0].vpc_endpoint_connection_id #=> String
    #   resp.data.vpc_endpoint_connections[0].tags #=> Array<Tag>
    #   resp.data.vpc_endpoint_connections[0].tags[0] #=> Types::Tag
    #   resp.data.vpc_endpoint_connections[0].tags[0].key #=> String
    #   resp.data.vpc_endpoint_connections[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_vpc_endpoint_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcEndpointConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcEndpointConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_endpoint_connections,
        tracer: tracer
      )
      Telemetry::DescribeVpcEndpointConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_connections] #{output.data}")
        output
      end
    end

    # <p>Describes the VPC endpoint service configurations in your account (your services).</p>
    # @param [Hash | Types::DescribeVpcEndpointServiceConfigurationsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcEndpointServiceConfigurationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_endpoint_service_configurations(
    #     dry_run: false,
    #     service_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcEndpointServiceConfigurationsOutput
    #   resp.data.service_configurations #=> Array<ServiceConfiguration>
    #   resp.data.service_configurations[0] #=> Types::ServiceConfiguration
    #   resp.data.service_configurations[0].service_type #=> Array<ServiceTypeDetail>
    #   resp.data.service_configurations[0].service_type[0] #=> Types::ServiceTypeDetail
    #   resp.data.service_configurations[0].service_type[0].service_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.service_configurations[0].service_id #=> String
    #   resp.data.service_configurations[0].service_name #=> String
    #   resp.data.service_configurations[0].service_state #=> String, one of ["Pending", "Available", "Deleting", "Deleted", "Failed"]
    #   resp.data.service_configurations[0].availability_zones #=> Array<String>
    #   resp.data.service_configurations[0].availability_zones[0] #=> String
    #   resp.data.service_configurations[0].acceptance_required #=> Boolean
    #   resp.data.service_configurations[0].manages_vpc_endpoints #=> Boolean
    #   resp.data.service_configurations[0].network_load_balancer_arns #=> Array<String>
    #   resp.data.service_configurations[0].gateway_load_balancer_arns #=> Array<String>
    #   resp.data.service_configurations[0].supported_ip_address_types #=> Array<String>
    #   resp.data.service_configurations[0].supported_ip_address_types[0] #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.service_configurations[0].base_endpoint_dns_names #=> Array<String>
    #   resp.data.service_configurations[0].private_dns_name #=> String
    #   resp.data.service_configurations[0].private_dns_name_configuration #=> Types::PrivateDnsNameConfiguration
    #   resp.data.service_configurations[0].private_dns_name_configuration.state #=> String, one of ["pendingVerification", "verified", "failed"]
    #   resp.data.service_configurations[0].private_dns_name_configuration.type #=> String
    #   resp.data.service_configurations[0].private_dns_name_configuration.value #=> String
    #   resp.data.service_configurations[0].private_dns_name_configuration.name #=> String
    #   resp.data.service_configurations[0].payer_responsibility #=> String, one of ["ServiceOwner"]
    #   resp.data.service_configurations[0].tags #=> Array<Tag>
    #   resp.data.service_configurations[0].tags[0] #=> Types::Tag
    #   resp.data.service_configurations[0].tags[0].key #=> String
    #   resp.data.service_configurations[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    def describe_vpc_endpoint_service_configurations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcEndpointServiceConfigurationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcEndpointServiceConfigurations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_endpoint_service_configurations,
        tracer: tracer
      )
      Telemetry::DescribeVpcEndpointServiceConfigurations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_service_configurations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_service_configurations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_service_configurations] #{output.data}")
        output
      end
    end

    # <p>Describes the principals (service consumers) that are permitted to discover your VPC
    #             endpoint service.</p>
    # @param [Hash | Types::DescribeVpcEndpointServicePermissionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcEndpointServicePermissionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_endpoint_service_permissions(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcEndpointServicePermissionsOutput
    #   resp.data.allowed_principals #=> Array<AllowedPrincipal>
    #   resp.data.allowed_principals[0] #=> Types::AllowedPrincipal
    #   resp.data.allowed_principals[0].principal_type #=> String, one of ["All", "Service", "OrganizationUnit", "Account", "User", "Role"]
    #   resp.data.allowed_principals[0].principal #=> String
    #   resp.data.allowed_principals[0].service_permission_id #=> String
    #   resp.data.allowed_principals[0].tags #=> Array<Tag>
    #   resp.data.allowed_principals[0].tags[0] #=> Types::Tag
    #   resp.data.allowed_principals[0].tags[0].key #=> String
    #   resp.data.allowed_principals[0].tags[0].value #=> String
    #   resp.data.allowed_principals[0].service_id #=> String
    #   resp.data.next_token #=> String
    def describe_vpc_endpoint_service_permissions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcEndpointServicePermissionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcEndpointServicePermissions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_endpoint_service_permissions,
        tracer: tracer
      )
      Telemetry::DescribeVpcEndpointServicePermissions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_service_permissions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_service_permissions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_service_permissions] #{output.data}")
        output
      end
    end

    # <p>Describes available services to which you can create a VPC endpoint.</p>
    #          <p>When the service provider and the consumer have different accounts in multiple
    #             Availability Zones, and the consumer views the VPC endpoint service information, the
    #             response only includes the common Availability Zones. For example, when the service
    #             provider account uses <code>us-east-1a</code> and <code>us-east-1c</code> and the
    #             consumer uses <code>us-east-1a</code> and <code>us-east-1b</code>, the response includes
    #             the VPC endpoint services in the common Availability Zone,
    #             <code>us-east-1a</code>.</p>
    # @param [Hash | Types::DescribeVpcEndpointServicesInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcEndpointServicesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_endpoint_services(
    #     dry_run: false,
    #     service_names: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcEndpointServicesOutput
    #   resp.data.service_names #=> Array<String>
    #   resp.data.service_names[0] #=> String
    #   resp.data.service_details #=> Array<ServiceDetail>
    #   resp.data.service_details[0] #=> Types::ServiceDetail
    #   resp.data.service_details[0].service_name #=> String
    #   resp.data.service_details[0].service_id #=> String
    #   resp.data.service_details[0].service_type #=> Array<ServiceTypeDetail>
    #   resp.data.service_details[0].service_type[0] #=> Types::ServiceTypeDetail
    #   resp.data.service_details[0].service_type[0].service_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.service_details[0].availability_zones #=> Array<String>
    #   resp.data.service_details[0].owner #=> String
    #   resp.data.service_details[0].base_endpoint_dns_names #=> Array<String>
    #   resp.data.service_details[0].private_dns_name #=> String
    #   resp.data.service_details[0].private_dns_names #=> Array<PrivateDnsDetails>
    #   resp.data.service_details[0].private_dns_names[0] #=> Types::PrivateDnsDetails
    #   resp.data.service_details[0].private_dns_names[0].private_dns_name #=> String
    #   resp.data.service_details[0].vpc_endpoint_policy_supported #=> Boolean
    #   resp.data.service_details[0].acceptance_required #=> Boolean
    #   resp.data.service_details[0].manages_vpc_endpoints #=> Boolean
    #   resp.data.service_details[0].payer_responsibility #=> String, one of ["ServiceOwner"]
    #   resp.data.service_details[0].tags #=> Array<Tag>
    #   resp.data.service_details[0].tags[0] #=> Types::Tag
    #   resp.data.service_details[0].tags[0].key #=> String
    #   resp.data.service_details[0].tags[0].value #=> String
    #   resp.data.service_details[0].private_dns_name_verification_state #=> String, one of ["pendingVerification", "verified", "failed"]
    #   resp.data.service_details[0].supported_ip_address_types #=> Array<String>
    #   resp.data.service_details[0].supported_ip_address_types[0] #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.next_token #=> String
    def describe_vpc_endpoint_services(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcEndpointServicesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcEndpointServices.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_endpoint_services,
        tracer: tracer
      )
      Telemetry::DescribeVpcEndpointServices.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_services] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_services] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoint_services] #{output.data}")
        output
      end
    end

    # <p>Describes your VPC endpoints.</p>
    # @param [Hash | Types::DescribeVpcEndpointsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcEndpointsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_endpoints(
    #     dry_run: false,
    #     vpc_endpoint_ids: [
    #       'member'
    #     ],
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcEndpointsOutput
    #   resp.data.vpc_endpoints #=> Array<VpcEndpoint>
    #   resp.data.vpc_endpoints[0] #=> Types::VpcEndpoint
    #   resp.data.vpc_endpoints[0].vpc_endpoint_id #=> String
    #   resp.data.vpc_endpoints[0].vpc_endpoint_type #=> String, one of ["Interface", "Gateway", "GatewayLoadBalancer"]
    #   resp.data.vpc_endpoints[0].vpc_id #=> String
    #   resp.data.vpc_endpoints[0].service_name #=> String
    #   resp.data.vpc_endpoints[0].state #=> String, one of ["PendingAcceptance", "Pending", "Available", "Deleting", "Deleted", "Rejected", "Failed", "Expired"]
    #   resp.data.vpc_endpoints[0].policy_document #=> String
    #   resp.data.vpc_endpoints[0].route_table_ids #=> Array<String>
    #   resp.data.vpc_endpoints[0].route_table_ids[0] #=> String
    #   resp.data.vpc_endpoints[0].subnet_ids #=> Array<String>
    #   resp.data.vpc_endpoints[0].groups #=> Array<SecurityGroupIdentifier>
    #   resp.data.vpc_endpoints[0].groups[0] #=> Types::SecurityGroupIdentifier
    #   resp.data.vpc_endpoints[0].groups[0].group_id #=> String
    #   resp.data.vpc_endpoints[0].groups[0].group_name #=> String
    #   resp.data.vpc_endpoints[0].ip_address_type #=> String, one of ["ipv4", "dualstack", "ipv6"]
    #   resp.data.vpc_endpoints[0].dns_options #=> Types::DnsOptions
    #   resp.data.vpc_endpoints[0].dns_options.dns_record_ip_type #=> String, one of ["ipv4", "dualstack", "ipv6", "service-defined"]
    #   resp.data.vpc_endpoints[0].dns_options.private_dns_only_for_inbound_resolver_endpoint #=> Boolean
    #   resp.data.vpc_endpoints[0].private_dns_enabled #=> Boolean
    #   resp.data.vpc_endpoints[0].requester_managed #=> Boolean
    #   resp.data.vpc_endpoints[0].network_interface_ids #=> Array<String>
    #   resp.data.vpc_endpoints[0].dns_entries #=> Array<DnsEntry>
    #   resp.data.vpc_endpoints[0].dns_entries[0] #=> Types::DnsEntry
    #   resp.data.vpc_endpoints[0].dns_entries[0].dns_name #=> String
    #   resp.data.vpc_endpoints[0].dns_entries[0].hosted_zone_id #=> String
    #   resp.data.vpc_endpoints[0].creation_timestamp #=> Time
    #   resp.data.vpc_endpoints[0].tags #=> Array<Tag>
    #   resp.data.vpc_endpoints[0].tags[0] #=> Types::Tag
    #   resp.data.vpc_endpoints[0].tags[0].key #=> String
    #   resp.data.vpc_endpoints[0].tags[0].value #=> String
    #   resp.data.vpc_endpoints[0].owner_id #=> String
    #   resp.data.vpc_endpoints[0].last_error #=> Types::LastError
    #   resp.data.vpc_endpoints[0].last_error.message #=> String
    #   resp.data.vpc_endpoints[0].last_error.code #=> String
    #   resp.data.next_token #=> String
    def describe_vpc_endpoints(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcEndpointsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcEndpoints.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_endpoints,
        tracer: tracer
      )
      Telemetry::DescribeVpcEndpoints.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoints] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoints] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_endpoints] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your VPC peering connections.</p>
    # @param [Hash | Types::DescribeVpcPeeringConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcPeeringConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpc_peering_connections(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false,
    #     vpc_peering_connection_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcPeeringConnectionsOutput
    #   resp.data.vpc_peering_connections #=> Array<VpcPeeringConnection>
    #   resp.data.vpc_peering_connections[0] #=> Types::VpcPeeringConnection
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.ipv6_cidr_block_set #=> Array<Ipv6CidrBlock>
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.ipv6_cidr_block_set[0] #=> Types::Ipv6CidrBlock
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.ipv6_cidr_block_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block_set #=> Array<CidrBlock>
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block_set[0] #=> Types::CidrBlock
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.cidr_block_set[0].cidr_block #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.owner_id #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options #=> Types::VpcPeeringConnectionOptionsDescription
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.peering_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.vpc_id #=> String
    #   resp.data.vpc_peering_connections[0].accepter_vpc_info.region #=> String
    #   resp.data.vpc_peering_connections[0].expiration_time #=> Time
    #   resp.data.vpc_peering_connections[0].requester_vpc_info #=> Types::VpcPeeringConnectionVpcInfo
    #   resp.data.vpc_peering_connections[0].status #=> Types::VpcPeeringConnectionStateReason
    #   resp.data.vpc_peering_connections[0].status.code #=> String, one of ["initiating-request", "pending-acceptance", "active", "deleted", "rejected", "failed", "expired", "provisioning", "deleting"]
    #   resp.data.vpc_peering_connections[0].status.message #=> String
    #   resp.data.vpc_peering_connections[0].tags #=> Array<Tag>
    #   resp.data.vpc_peering_connections[0].tags[0] #=> Types::Tag
    #   resp.data.vpc_peering_connections[0].tags[0].key #=> String
    #   resp.data.vpc_peering_connections[0].tags[0].value #=> String
    #   resp.data.vpc_peering_connections[0].vpc_peering_connection_id #=> String
    #   resp.data.next_token #=> String
    def describe_vpc_peering_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcPeeringConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcPeeringConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpc_peering_connections,
        tracer: tracer
      )
      Telemetry::DescribeVpcPeeringConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_peering_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpc_peering_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpc_peering_connections] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your VPCs.</p>
    # @param [Hash | Types::DescribeVpcsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpcsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpcs(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     vpc_ids: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpcsOutput
    #   resp.data.vpcs #=> Array<Vpc>
    #   resp.data.vpcs[0] #=> Types::Vpc
    #   resp.data.vpcs[0].cidr_block #=> String
    #   resp.data.vpcs[0].dhcp_options_id #=> String
    #   resp.data.vpcs[0].state #=> String, one of ["pending", "available"]
    #   resp.data.vpcs[0].vpc_id #=> String
    #   resp.data.vpcs[0].owner_id #=> String
    #   resp.data.vpcs[0].instance_tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set #=> Array<VpcIpv6CidrBlockAssociation>
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0] #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.status_message #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].network_border_group #=> String
    #   resp.data.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_pool #=> String
    #   resp.data.vpcs[0].cidr_block_association_set #=> Array<VpcCidrBlockAssociation>
    #   resp.data.vpcs[0].cidr_block_association_set[0] #=> Types::VpcCidrBlockAssociation
    #   resp.data.vpcs[0].cidr_block_association_set[0].association_id #=> String
    #   resp.data.vpcs[0].cidr_block_association_set[0].cidr_block #=> String
    #   resp.data.vpcs[0].cidr_block_association_set[0].cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpcs[0].is_default #=> Boolean
    #   resp.data.vpcs[0].tags #=> Array<Tag>
    #   resp.data.vpcs[0].tags[0] #=> Types::Tag
    #   resp.data.vpcs[0].tags[0].key #=> String
    #   resp.data.vpcs[0].tags[0].value #=> String
    #   resp.data.next_token #=> String
    # @example To describe a VPC
    #   # This example describes the specified VPC.
    #   resp = client.describe_vpcs({
    #     vpc_ids: [
    #       "vpc-a01106c2"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     vpcs: [
    #       {
    #         vpc_id: "vpc-a01106c2",
    #         instance_tenancy: "default",
    #         tags: [
    #           {
    #             value: "MyVPC",
    #             key: "Name"
    #           }
    #         ],
    #         state: "available",
    #         dhcp_options_id: "dopt-7a8b9c2d",
    #         cidr_block: "10.0.0.0/16",
    #         is_default: false
    #       }
    #     ]
    #   }
    def describe_vpcs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpcsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpcs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpcs,
        tracer: tracer
      )
      Telemetry::DescribeVpcs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpcs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpcs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpcs] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your VPN connections.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::DescribeVpnConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpnConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpn_connections(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     vpn_connection_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpnConnectionsOutput
    #   resp.data.vpn_connections #=> Array<VpnConnection>
    #   resp.data.vpn_connections[0] #=> Types::VpnConnection
    #   resp.data.vpn_connections[0].customer_gateway_configuration #=> String
    #   resp.data.vpn_connections[0].customer_gateway_id #=> String
    #   resp.data.vpn_connections[0].category #=> String
    #   resp.data.vpn_connections[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connections[0].type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connections[0].vpn_connection_id #=> String
    #   resp.data.vpn_connections[0].vpn_gateway_id #=> String
    #   resp.data.vpn_connections[0].transit_gateway_id #=> String
    #   resp.data.vpn_connections[0].core_network_arn #=> String
    #   resp.data.vpn_connections[0].core_network_attachment_arn #=> String
    #   resp.data.vpn_connections[0].gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connections[0].options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connections[0].options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connections[0].options.static_routes_only #=> Boolean
    #   resp.data.vpn_connections[0].options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connections[0].options.outside_ip_address_type #=> String
    #   resp.data.vpn_connections[0].options.transport_transit_gateway_attachment_id #=> String
    #   resp.data.vpn_connections[0].options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connections[0].options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connections[0].options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connections[0].options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connections[0].options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connections[0].options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connections[0].options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].log_options #=> Types::VpnTunnelLogOptions
    #   resp.data.vpn_connections[0].options.tunnel_options[0].log_options.cloud_watch_log_options #=> Types::CloudWatchLogOptions
    #   resp.data.vpn_connections[0].options.tunnel_options[0].log_options.cloud_watch_log_options.log_enabled #=> Boolean
    #   resp.data.vpn_connections[0].options.tunnel_options[0].log_options.cloud_watch_log_options.log_group_arn #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].log_options.cloud_watch_log_options.log_output_format #=> String
    #   resp.data.vpn_connections[0].options.tunnel_options[0].enable_tunnel_lifecycle_control #=> Boolean
    #   resp.data.vpn_connections[0].routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connections[0].routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connections[0].routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connections[0].routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connections[0].routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connections[0].tags #=> Array<Tag>
    #   resp.data.vpn_connections[0].tags[0] #=> Types::Tag
    #   resp.data.vpn_connections[0].tags[0].key #=> String
    #   resp.data.vpn_connections[0].tags[0].value #=> String
    #   resp.data.vpn_connections[0].vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connections[0].vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connections[0].vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connections[0].vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connections[0].vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connections[0].vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connections[0].vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connections[0].vgw_telemetry[0].certificate_arn #=> String
    def describe_vpn_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpnConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpnConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpn_connections,
        tracer: tracer
      )
      Telemetry::DescribeVpnConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpn_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpn_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpn_connections] #{output.data}")
        output
      end
    end

    # <p>Describes one or more of your virtual private gateways.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN
    #                 User Guide</i>.</p>
    # @param [Hash | Types::DescribeVpnGatewaysInput] params
    #   Request parameters for this operation.
    #   See {Types::DescribeVpnGatewaysInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.describe_vpn_gateways(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     vpn_gateway_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DescribeVpnGatewaysOutput
    #   resp.data.vpn_gateways #=> Array<VpnGateway>
    #   resp.data.vpn_gateways[0] #=> Types::VpnGateway
    #   resp.data.vpn_gateways[0].availability_zone #=> String
    #   resp.data.vpn_gateways[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_gateways[0].type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_gateways[0].vpc_attachments #=> Array<VpcAttachment>
    #   resp.data.vpn_gateways[0].vpc_attachments[0] #=> Types::VpcAttachment
    #   resp.data.vpn_gateways[0].vpc_attachments[0].state #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.vpn_gateways[0].vpc_attachments[0].vpc_id #=> String
    #   resp.data.vpn_gateways[0].vpn_gateway_id #=> String
    #   resp.data.vpn_gateways[0].amazon_side_asn #=> Integer
    #   resp.data.vpn_gateways[0].tags #=> Array<Tag>
    #   resp.data.vpn_gateways[0].tags[0] #=> Types::Tag
    #   resp.data.vpn_gateways[0].tags[0].key #=> String
    #   resp.data.vpn_gateways[0].tags[0].value #=> String
    def describe_vpn_gateways(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DescribeVpnGatewaysInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DescribeVpnGateways.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :describe_vpn_gateways,
        tracer: tracer
      )
      Telemetry::DescribeVpnGateways.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpn_gateways] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#describe_vpn_gateways] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#describe_vpn_gateways] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked,
    # 		    the VPC security groups are no longer associated with it. An instance is automatically unlinked from
    # 		    a VPC when it's stopped.</p>
    # @param [Hash | Types::DetachClassicLinkVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::DetachClassicLinkVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.detach_classic_link_vpc(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DetachClassicLinkVpcOutput
    #   resp.data.return #=> Boolean
    def detach_classic_link_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DetachClassicLinkVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DetachClassicLinkVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :detach_classic_link_vpc,
        tracer: tracer
      )
      Telemetry::DetachClassicLinkVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_classic_link_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#detach_classic_link_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_classic_link_vpc] #{output.data}")
        output
      end
    end

    # <p>Detaches an internet gateway from a VPC, disabling connectivity between the internet
    # 			and the VPC. The VPC must not contain any running instances with Elastic IP addresses or
    # 			public IPv4 addresses.</p>
    # @param [Hash | Types::DetachInternetGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DetachInternetGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.detach_internet_gateway(
    #     dry_run: false,
    #     internet_gateway_id: 'InternetGatewayId', # required
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DetachInternetGatewayOutput
    # @example To detach an Internet gateway from a VPC
    #   # This example detaches the specified Internet gateway from the specified VPC.
    #   resp = client.detach_internet_gateway({
    #     internet_gateway_id: "igw-c0a643a9",
    #     vpc_id: "vpc-a01106c2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def detach_internet_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DetachInternetGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DetachInternetGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :detach_internet_gateway,
        tracer: tracer
      )
      Telemetry::DetachInternetGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_internet_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#detach_internet_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_internet_gateway] #{output.data}")
        output
      end
    end

    # <p>Detaches a network interface from an instance.</p>
    # @param [Hash | Types::DetachNetworkInterfaceInput] params
    #   Request parameters for this operation.
    #   See {Types::DetachNetworkInterfaceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.detach_network_interface(
    #     attachment_id: 'AttachmentId', # required
    #     dry_run: false,
    #     force: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DetachNetworkInterfaceOutput
    # @example To detach a network interface from an instance
    #   # This example detaches the specified network interface from its attached instance.
    #   resp = client.detach_network_interface({
    #     attachment_id: "eni-attach-66c4350a"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def detach_network_interface(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DetachNetworkInterfaceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DetachNetworkInterface.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :detach_network_interface,
        tracer: tracer
      )
      Telemetry::DetachNetworkInterface.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_network_interface] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#detach_network_interface] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_network_interface] #{output.data}")
        output
      end
    end

    # <p>Detaches the specified Amazon Web Services Verified Access trust provider from the specified Amazon Web Services Verified Access instance.</p>
    # @param [Hash | Types::DetachVerifiedAccessTrustProviderInput] params
    #   Request parameters for this operation.
    #   See {Types::DetachVerifiedAccessTrustProviderInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.detach_verified_access_trust_provider(
    #     verified_access_instance_id: 'VerifiedAccessInstanceId', # required
    #     verified_access_trust_provider_id: 'VerifiedAccessTrustProviderId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DetachVerifiedAccessTrustProviderOutput
    #   resp.data.verified_access_trust_provider #=> Types::VerifiedAccessTrustProvider
    #   resp.data.verified_access_trust_provider.verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_trust_provider.description #=> String
    #   resp.data.verified_access_trust_provider.trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_trust_provider.user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_trust_provider.device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_trust_provider.oidc_options #=> Types::OidcOptions
    #   resp.data.verified_access_trust_provider.oidc_options.issuer #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.authorization_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.token_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.user_info_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_id #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_secret #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.scope #=> String
    #   resp.data.verified_access_trust_provider.device_options #=> Types::DeviceOptions
    #   resp.data.verified_access_trust_provider.device_options.tenant_id #=> String
    #   resp.data.verified_access_trust_provider.device_options.public_signing_key_url #=> String
    #   resp.data.verified_access_trust_provider.policy_reference_name #=> String
    #   resp.data.verified_access_trust_provider.creation_time #=> String
    #   resp.data.verified_access_trust_provider.last_updated_time #=> String
    #   resp.data.verified_access_trust_provider.tags #=> Array<Tag>
    #   resp.data.verified_access_trust_provider.tags[0] #=> Types::Tag
    #   resp.data.verified_access_trust_provider.tags[0].key #=> String
    #   resp.data.verified_access_trust_provider.tags[0].value #=> String
    #   resp.data.verified_access_trust_provider.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_trust_provider.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_trust_provider.sse_specification.kms_key_arn #=> String
    #   resp.data.verified_access_instance #=> Types::VerifiedAccessInstance
    #   resp.data.verified_access_instance.verified_access_instance_id #=> String
    #   resp.data.verified_access_instance.description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers #=> Array<VerifiedAccessTrustProviderCondensed>
    #   resp.data.verified_access_instance.verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProviderCondensed
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_instance.creation_time #=> String
    #   resp.data.verified_access_instance.last_updated_time #=> String
    #   resp.data.verified_access_instance.tags #=> Array<Tag>
    #   resp.data.verified_access_instance.fips_enabled #=> Boolean
    def detach_verified_access_trust_provider(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DetachVerifiedAccessTrustProviderInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DetachVerifiedAccessTrustProvider.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :detach_verified_access_trust_provider,
        tracer: tracer
      )
      Telemetry::DetachVerifiedAccessTrustProvider.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_verified_access_trust_provider] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#detach_verified_access_trust_provider] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_verified_access_trust_provider] #{output.data}")
        output
      end
    end

    # <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the
    #       device within your operating system before detaching the volume. Failure to do so can result
    #       in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens,
    #       detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot
    #       the instance, or all three. If an EBS volume is the root device of an instance, it can't be
    #       detached while the instance is running. To detach the root volume, stop the instance
    #       first.</p>
    #          <p>When a volume with an Amazon Web Services Marketplace product code is detached from an instance, the
    #       product code is no longer associated with the instance.</p>
    #          <p>You can't detach or force detach volumes that are attached to Amazon ECS or
    #       Fargate tasks. Attempting to do this results in the <code>UnsupportedOperationException</code>
    #       exception with the <code>Unable to detach volume attached to ECS tasks</code> error message.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detach an Amazon EBS volume</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DetachVolumeInput] params
    #   Request parameters for this operation.
    #   See {Types::DetachVolumeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.detach_volume(
    #     device: 'Device',
    #     force: false,
    #     instance_id: 'InstanceId',
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DetachVolumeOutput
    #   resp.data.attach_time #=> Time
    #   resp.data.device #=> String
    #   resp.data.instance_id #=> String
    #   resp.data.state #=> String, one of ["attaching", "attached", "detaching", "detached", "busy"]
    #   resp.data.volume_id #=> String
    #   resp.data.delete_on_termination #=> Boolean
    #   resp.data.associated_resource #=> String
    #   resp.data.instance_owning_service #=> String
    # @example To detach a volume from an instance
    #   # This example detaches the volume (``vol-049df61146c4d7901``) from the instance it is attached to.
    #   resp = client.detach_volume({
    #     volume_id: "vol-1234567890abcdef0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     attach_time: Time.parse('2014-02-27T19:23:06.000Z'),
    #     instance_id: "i-1234567890abcdef0",
    #     volume_id: "vol-049df61146c4d7901",
    #     state: "detaching",
    #     device: "/dev/sdb"
    #   }
    def detach_volume(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DetachVolumeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DetachVolume.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :detach_volume,
        tracer: tracer
      )
      Telemetry::DetachVolume.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_volume] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#detach_volume] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_volume] #{output.data}")
        output
      end
    end

    # <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn
    #             off the VPC and not use it anymore. You can confirm a virtual private gateway has been
    #             completely detached from a VPC by describing the virtual private gateway (any
    #             attachments to the virtual private gateway are also described).</p>
    #          <p>You must wait for the attachment's state to switch to <code>detached</code> before you
    #             can delete the VPC or attach a different VPC to the virtual private gateway.</p>
    # @param [Hash | Types::DetachVpnGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::DetachVpnGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.detach_vpn_gateway(
    #     vpc_id: 'VpcId', # required
    #     vpn_gateway_id: 'VpnGatewayId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DetachVpnGatewayOutput
    def detach_vpn_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DetachVpnGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DetachVpnGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :detach_vpn_gateway,
        tracer: tracer
      )
      Telemetry::DetachVpnGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_vpn_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#detach_vpn_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#detach_vpn_gateway] #{output.data}")
        output
      end
    end

    # <p>Disables Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    # @param [Hash | Types::DisableAddressTransferInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableAddressTransferInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_address_transfer(
    #     allocation_id: 'AllocationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableAddressTransferOutput
    #   resp.data.address_transfer #=> Types::AddressTransfer
    #   resp.data.address_transfer.public_ip #=> String
    #   resp.data.address_transfer.allocation_id #=> String
    #   resp.data.address_transfer.transfer_account_id #=> String
    #   resp.data.address_transfer.transfer_offer_expiration_timestamp #=> Time
    #   resp.data.address_transfer.transfer_offer_accepted_timestamp #=> Time
    #   resp.data.address_transfer.address_transfer_status #=> String, one of ["pending", "disabled", "accepted"]
    def disable_address_transfer(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableAddressTransferInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableAddressTransfer.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_address_transfer,
        tracer: tracer
      )
      Telemetry::DisableAddressTransfer.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_address_transfer] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_address_transfer] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_address_transfer] #{output.data}")
        output
      end
    end

    # <p>Disables Infrastructure Performance metric subscriptions.</p>
    # @param [Hash | Types::DisableAwsNetworkPerformanceMetricSubscriptionInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableAwsNetworkPerformanceMetricSubscriptionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_aws_network_performance_metric_subscription(
    #     source: 'Source',
    #     destination: 'Destination',
    #     metric: 'aggregate-latency', # accepts ["aggregate-latency"]
    #     statistic: 'p50', # accepts ["p50"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableAwsNetworkPerformanceMetricSubscriptionOutput
    #   resp.data.output #=> Boolean
    def disable_aws_network_performance_metric_subscription(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableAwsNetworkPerformanceMetricSubscriptionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableAwsNetworkPerformanceMetricSubscription.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_aws_network_performance_metric_subscription,
        tracer: tracer
      )
      Telemetry::DisableAwsNetworkPerformanceMetricSubscription.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_aws_network_performance_metric_subscription] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_aws_network_performance_metric_subscription] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_aws_network_performance_metric_subscription] #{output.data}")
        output
      end
    end

    # <p>Disables EBS encryption by default for your account in the current Region.</p>
    #          <p>After you disable encryption by default, you can still create encrypted volumes by
    #       enabling encryption when you create each volume.</p>
    #          <p>Disabling encryption by default does not change the encryption status of your
    #       existing volumes.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::DisableEbsEncryptionByDefaultInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableEbsEncryptionByDefaultInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_ebs_encryption_by_default(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableEbsEncryptionByDefaultOutput
    #   resp.data.ebs_encryption_by_default #=> Boolean
    def disable_ebs_encryption_by_default(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableEbsEncryptionByDefaultInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableEbsEncryptionByDefault.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_ebs_encryption_by_default,
        tracer: tracer
      )
      Telemetry::DisableEbsEncryptionByDefault.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_ebs_encryption_by_default] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_ebs_encryption_by_default] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_ebs_encryption_by_default] #{output.data}")
        output
      end
    end

    # <p>Discontinue Windows fast launch for a Windows AMI, and clean up existing pre-provisioned snapshots.
    # 			After you disable Windows fast launch, the AMI uses the standard launch process for each
    # 			new instance. Amazon EC2 must remove all pre-provisioned snapshots before you can enable Windows fast launch again.</p>
    #          <note>
    #             <p>You can only change these settings for Windows AMIs that you own or that have been shared with you.</p>
    #          </note>
    # @param [Hash | Types::DisableFastLaunchInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableFastLaunchInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_fast_launch(
    #     image_id: 'ImageId', # required
    #     force: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableFastLaunchOutput
    #   resp.data.image_id #=> String
    #   resp.data.resource_type #=> String, one of ["snapshot"]
    #   resp.data.snapshot_configuration #=> Types::FastLaunchSnapshotConfigurationResponse
    #   resp.data.snapshot_configuration.target_resource_count #=> Integer
    #   resp.data.launch_template #=> Types::FastLaunchLaunchTemplateSpecificationResponse
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.version #=> String
    #   resp.data.max_parallel_launches #=> Integer
    #   resp.data.owner_id #=> String
    #   resp.data.state #=> String, one of ["enabling", "enabling-failed", "enabled", "enabled-failed", "disabling", "disabling-failed"]
    #   resp.data.state_transition_reason #=> String
    #   resp.data.state_transition_time #=> Time
    def disable_fast_launch(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableFastLaunchInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableFastLaunch.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_fast_launch,
        tracer: tracer
      )
      Telemetry::DisableFastLaunch.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_fast_launch] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_fast_launch] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_fast_launch] #{output.data}")
        output
      end
    end

    # <p>Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
    # @param [Hash | Types::DisableFastSnapshotRestoresInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableFastSnapshotRestoresInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_fast_snapshot_restores(
    #     availability_zones: [
    #       'member'
    #     ], # required
    #     source_snapshot_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableFastSnapshotRestoresOutput
    #   resp.data.successful #=> Array<DisableFastSnapshotRestoreSuccessItem>
    #   resp.data.successful[0] #=> Types::DisableFastSnapshotRestoreSuccessItem
    #   resp.data.successful[0].snapshot_id #=> String
    #   resp.data.successful[0].availability_zone #=> String
    #   resp.data.successful[0].state #=> String, one of ["enabling", "optimizing", "enabled", "disabling", "disabled"]
    #   resp.data.successful[0].state_transition_reason #=> String
    #   resp.data.successful[0].owner_id #=> String
    #   resp.data.successful[0].owner_alias #=> String
    #   resp.data.successful[0].enabling_time #=> Time
    #   resp.data.successful[0].optimizing_time #=> Time
    #   resp.data.successful[0].enabled_time #=> Time
    #   resp.data.successful[0].disabling_time #=> Time
    #   resp.data.successful[0].disabled_time #=> Time
    #   resp.data.unsuccessful #=> Array<DisableFastSnapshotRestoreErrorItem>
    #   resp.data.unsuccessful[0] #=> Types::DisableFastSnapshotRestoreErrorItem
    #   resp.data.unsuccessful[0].snapshot_id #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors #=> Array<DisableFastSnapshotRestoreStateErrorItem>
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0] #=> Types::DisableFastSnapshotRestoreStateErrorItem
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].availability_zone #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error #=> Types::DisableFastSnapshotRestoreStateError
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.code #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.message #=> String
    def disable_fast_snapshot_restores(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableFastSnapshotRestoresInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableFastSnapshotRestores.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_fast_snapshot_restores,
        tracer: tracer
      )
      Telemetry::DisableFastSnapshotRestores.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_fast_snapshot_restores] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_fast_snapshot_restores] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_fast_snapshot_restores] #{output.data}")
        output
      end
    end

    # <p>Sets the AMI state to <code>disabled</code> and removes all launch permissions from the
    #       AMI. A disabled AMI can't be used for instance launches.</p>
    #          <p>A disabled AMI can't be shared. If an AMI was public or previously shared, it is made
    #       private. If an AMI was shared with an Amazon Web Services account, organization, or Organizational Unit,
    #       they lose access to the disabled AMI. </p>
    #          <p>A disabled AMI does not appear in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html">DescribeImages</a> API calls by
    #       default.</p>
    #          <p>Only the AMI owner can disable an AMI.</p>
    #          <p>You can re-enable a disabled AMI using <a href="http://amazonaws.com/AWSEC2/latest/APIReference/API_EnableImage.html">EnableImage</a>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/disable-an-ami.html">Disable an AMI</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DisableImageInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_image(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableImageOutput
    #   resp.data.return #=> Boolean
    def disable_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_image,
        tracer: tracer
      )
      Telemetry::DisableImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_image] #{output.data}")
        output
      end
    end

    # <p>Disables <i>block public access for AMIs</i> at the account level in the
    #       specified Amazon Web Services Region. This removes the <i>block public access</i> restriction
    #       from your account. With the restriction removed, you can publicly share your AMIs in the
    #       specified Amazon Web Services Region.</p>
    #          <p>The API can take up to 10 minutes to configure this setting. During this time, if you run
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetImageBlockPublicAccessState.html">GetImageBlockPublicAccessState</a>, the response will be
    #       <code>block-new-sharing</code>. When the API has completed the configuration, the response
    #       will be <code>unblocked</code>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html#block-public-access-to-amis">Block public access to your AMIs</a> in
    #       the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DisableImageBlockPublicAccessInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableImageBlockPublicAccessInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_image_block_public_access(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableImageBlockPublicAccessOutput
    #   resp.data.image_block_public_access_state #=> String, one of ["unblocked"]
    def disable_image_block_public_access(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableImageBlockPublicAccessInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableImageBlockPublicAccess.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_image_block_public_access,
        tracer: tracer
      )
      Telemetry::DisableImageBlockPublicAccess.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_image_block_public_access] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_image_block_public_access] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_image_block_public_access] #{output.data}")
        output
      end
    end

    # <p>Cancels the deprecation of the specified AMI.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DisableImageDeprecationInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableImageDeprecationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_image_deprecation(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableImageDeprecationOutput
    #   resp.data.return #=> Boolean
    def disable_image_deprecation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableImageDeprecationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableImageDeprecation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_image_deprecation,
        tracer: tracer
      )
      Telemetry::DisableImageDeprecation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_image_deprecation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_image_deprecation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_image_deprecation] #{output.data}")
        output
      end
    end

    # <p>Disable the IPAM account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html">Enable integration with Organizations</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::DisableIpamOrganizationAdminAccountInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableIpamOrganizationAdminAccountInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_ipam_organization_admin_account(
    #     dry_run: false,
    #     delegated_admin_account_id: 'DelegatedAdminAccountId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableIpamOrganizationAdminAccountOutput
    #   resp.data.success #=> Boolean
    def disable_ipam_organization_admin_account(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableIpamOrganizationAdminAccountInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableIpamOrganizationAdminAccount.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_ipam_organization_admin_account,
        tracer: tracer
      )
      Telemetry::DisableIpamOrganizationAdminAccount.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_ipam_organization_admin_account] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_ipam_organization_admin_account] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_ipam_organization_admin_account] #{output.data}")
        output
      end
    end

    # <p>Disables access to the EC2 serial console of all instances for your account. By default,
    # 			access to the EC2 serial console is disabled for your account. For more information, see
    # 				<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2
    # 				User Guide</i>.</p>
    # @param [Hash | Types::DisableSerialConsoleAccessInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableSerialConsoleAccessInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_serial_console_access(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableSerialConsoleAccessOutput
    #   resp.data.serial_console_access_enabled #=> Boolean
    def disable_serial_console_access(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableSerialConsoleAccessInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableSerialConsoleAccess.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_serial_console_access,
        tracer: tracer
      )
      Telemetry::DisableSerialConsoleAccess.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_serial_console_access] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_serial_console_access] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_serial_console_access] #{output.data}")
        output
      end
    end

    # <p>Disables the <i>block public access for snapshots</i> setting at
    #       the account level for the specified Amazon Web Services Region. After you disable block public
    #       access for snapshots in a Region, users can publicly share snapshots in that Region.</p>
    #          <p>If block public access is enabled in <code>block-all-sharing</code> mode, and
    #       you disable block public access, all snapshots that were previously publicly shared
    #       are no longer treated as private and they become publicly accessible again.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-public-access-snapshots.html">
    #         Block public access for snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> .</p>
    #          <p></p>
    # @param [Hash | Types::DisableSnapshotBlockPublicAccessInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableSnapshotBlockPublicAccessInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_snapshot_block_public_access(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableSnapshotBlockPublicAccessOutput
    #   resp.data.state #=> String, one of ["block-all-sharing", "block-new-sharing", "unblocked"]
    def disable_snapshot_block_public_access(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableSnapshotBlockPublicAccessInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableSnapshotBlockPublicAccess.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_snapshot_block_public_access,
        tracer: tracer
      )
      Telemetry::DisableSnapshotBlockPublicAccess.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_snapshot_block_public_access] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_snapshot_block_public_access] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_snapshot_block_public_access] #{output.data}")
        output
      end
    end

    # <p>Disables the specified resource attachment from propagating routes to the specified
    #          propagation route table.</p>
    # @param [Hash | Types::DisableTransitGatewayRouteTablePropagationInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableTransitGatewayRouteTablePropagationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_transit_gateway_route_table_propagation(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     dry_run: false,
    #     transit_gateway_route_table_announcement_id: 'TransitGatewayRouteTableAnnouncementId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableTransitGatewayRouteTablePropagationOutput
    #   resp.data.propagation #=> Types::TransitGatewayPropagation
    #   resp.data.propagation.transit_gateway_attachment_id #=> String
    #   resp.data.propagation.resource_id #=> String
    #   resp.data.propagation.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.propagation.transit_gateway_route_table_id #=> String
    #   resp.data.propagation.state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #   resp.data.propagation.transit_gateway_route_table_announcement_id #=> String
    def disable_transit_gateway_route_table_propagation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableTransitGatewayRouteTablePropagationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableTransitGatewayRouteTablePropagation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_transit_gateway_route_table_propagation,
        tracer: tracer
      )
      Telemetry::DisableTransitGatewayRouteTablePropagation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_transit_gateway_route_table_propagation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_transit_gateway_route_table_propagation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_transit_gateway_route_table_propagation] #{output.data}")
        output
      end
    end

    # <p>Disables a virtual private gateway (VGW) from propagating routes to a specified route
    #             table of a VPC.</p>
    # @param [Hash | Types::DisableVgwRoutePropagationInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableVgwRoutePropagationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_vgw_route_propagation(
    #     gateway_id: 'GatewayId', # required
    #     route_table_id: 'RouteTableId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableVgwRoutePropagationOutput
    # @example To disable route propagation
    #   # This example disables the specified virtual private gateway from propagating static routes to the specified route table.
    #   resp = client.disable_vgw_route_propagation({
    #     route_table_id: "rtb-22574640",
    #     gateway_id: "vgw-9a4cacf3"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def disable_vgw_route_propagation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableVgwRoutePropagationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableVgwRoutePropagation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_vgw_route_propagation,
        tracer: tracer
      )
      Telemetry::DisableVgwRoutePropagation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_vgw_route_propagation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_vgw_route_propagation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_vgw_route_propagation] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances
    #             linked to it.</p>
    # @param [Hash | Types::DisableVpcClassicLinkInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableVpcClassicLinkInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_vpc_classic_link(
    #     dry_run: false,
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableVpcClassicLinkOutput
    #   resp.data.return #=> Boolean
    def disable_vpc_classic_link(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableVpcClassicLinkInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableVpcClassicLink.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_vpc_classic_link,
        tracer: tracer
      )
      Telemetry::DisableVpcClassicLink.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_vpc_classic_link] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_vpc_classic_link] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_vpc_classic_link] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to
    # 			public IP addresses when addressed between a linked EC2-Classic instance and instances
    # 			in the VPC to which it's linked.</p>
    #          <p>You must specify a VPC ID in the request.</p>
    # @param [Hash | Types::DisableVpcClassicLinkDnsSupportInput] params
    #   Request parameters for this operation.
    #   See {Types::DisableVpcClassicLinkDnsSupportInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disable_vpc_classic_link_dns_support(
    #     vpc_id: 'VpcId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisableVpcClassicLinkDnsSupportOutput
    #   resp.data.return #=> Boolean
    def disable_vpc_classic_link_dns_support(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisableVpcClassicLinkDnsSupportInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisableVpcClassicLinkDnsSupport.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disable_vpc_classic_link_dns_support,
        tracer: tracer
      )
      Telemetry::DisableVpcClassicLinkDnsSupport.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_vpc_classic_link_dns_support] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disable_vpc_classic_link_dns_support] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disable_vpc_classic_link_dns_support] #{output.data}")
        output
      end
    end

    # <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p>
    #          <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
    # @param [Hash | Types::DisassociateAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_address(
    #     association_id: 'AssociationId',
    #     public_ip: 'PublicIp',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateAddressOutput
    # @example To disassociate an Elastic IP address
    #   # This example disassociates an Elastic IP address from an instance.
    #   resp = client.disassociate_address({
    #     association_id: "eipassoc-2bebb745"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def disassociate_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_address,
        tracer: tracer
      )
      Telemetry::DisassociateAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_address] #{output.data}")
        output
      end
    end

    # <p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the
    # 			last target network from a Client VPN, the following happens:</p>
    #          <ul>
    #             <li>
    #                <p>The route that was automatically added for the VPC is deleted</p>
    #             </li>
    #             <li>
    #                <p>All active client connections are terminated</p>
    #             </li>
    #             <li>
    #                <p>New client connections are disallowed</p>
    #             </li>
    #             <li>
    #                <p>The Client VPN endpoint's status changes to <code>pending-associate</code>
    #                </p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::DisassociateClientVpnTargetNetworkInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateClientVpnTargetNetworkInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_client_vpn_target_network(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     association_id: 'AssociationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateClientVpnTargetNetworkOutput
    #   resp.data.association_id #=> String
    #   resp.data.status #=> Types::AssociationStatus
    #   resp.data.status.code #=> String, one of ["associating", "associated", "association-failed", "disassociating", "disassociated"]
    #   resp.data.status.message #=> String
    def disassociate_client_vpn_target_network(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateClientVpnTargetNetworkInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateClientVpnTargetNetwork.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_client_vpn_target_network,
        tracer: tracer
      )
      Telemetry::DisassociateClientVpnTargetNetwork.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_client_vpn_target_network] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_client_vpn_target_network] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_client_vpn_target_network] #{output.data}")
        output
      end
    end

    # <p>Disassociates an IAM role from an Certificate Manager (ACM) certificate. Disassociating an IAM role
    # 			from an ACM certificate removes the Amazon S3 object that contains the certificate, certificate chain, and
    # 			encrypted private key from the Amazon S3 bucket. It also revokes the IAM role's permission to use the
    # 			KMS key used to encrypt the private key. This effectively revokes the role's permission
    # 			to use the certificate.</p>
    # @param [Hash | Types::DisassociateEnclaveCertificateIamRoleInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateEnclaveCertificateIamRoleInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_enclave_certificate_iam_role(
    #     certificate_arn: 'CertificateArn', # required
    #     role_arn: 'RoleArn', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateEnclaveCertificateIamRoleOutput
    #   resp.data.return #=> Boolean
    def disassociate_enclave_certificate_iam_role(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateEnclaveCertificateIamRoleInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateEnclaveCertificateIamRole.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_enclave_certificate_iam_role,
        tracer: tracer
      )
      Telemetry::DisassociateEnclaveCertificateIamRole.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_enclave_certificate_iam_role] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_enclave_certificate_iam_role] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_enclave_certificate_iam_role] #{output.data}")
        output
      end
    end

    # <p>Disassociates an IAM instance profile from a running or stopped instance.</p>
    #          <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
    #             ID.</p>
    # @param [Hash | Types::DisassociateIamInstanceProfileInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateIamInstanceProfileInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_iam_instance_profile(
    #     association_id: 'AssociationId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateIamInstanceProfileOutput
    #   resp.data.iam_instance_profile_association #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_association.association_id #=> String
    #   resp.data.iam_instance_profile_association.instance_id #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_association.iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_association.timestamp #=> Time
    # @example To disassociate an IAM instance profile
    #   # This example disassociates the specified IAM instance profile from an instance.
    #   resp = client.disassociate_iam_instance_profile({
    #     association_id: "iip-assoc-05020b59952902f5f"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     iam_instance_profile_association: {
    #       instance_id: "i-123456789abcde123",
    #       state: "disassociating",
    #       association_id: "iip-assoc-05020b59952902f5f",
    #       iam_instance_profile: {
    #         id: "AIPAI5IVIHMFFYY2DKV5Y",
    #         arn: "arn:aws:iam::123456789012:instance-profile/admin-role"
    #       }
    #     }
    #   }
    def disassociate_iam_instance_profile(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateIamInstanceProfileInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateIamInstanceProfile.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_iam_instance_profile,
        tracer: tracer
      )
      Telemetry::DisassociateIamInstanceProfile.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_iam_instance_profile] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_iam_instance_profile] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_iam_instance_profile] #{output.data}")
        output
      end
    end

    # <p>Disassociates one or more targets from an event window.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::DisassociateInstanceEventWindowInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateInstanceEventWindowInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_instance_event_window(
    #     dry_run: false,
    #     instance_event_window_id: 'InstanceEventWindowId', # required
    #     association_target: {
    #       instance_ids: [
    #         'member'
    #       ],
    #       instance_tags: [
    #         {
    #           key: 'Key',
    #           value: 'Value'
    #         }
    #       ],
    #       dedicated_host_ids: [
    #         'member'
    #       ]
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    def disassociate_instance_event_window(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateInstanceEventWindowInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateInstanceEventWindow.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_instance_event_window,
        tracer: tracer
      )
      Telemetry::DisassociateInstanceEventWindow.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_instance_event_window] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_instance_event_window] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_instance_event_window] #{output.data}")
        output
      end
    end

    # <p>Remove the association between your Autonomous System Number (ASN) and your BYOIP CIDR. You may want to use this action to disassociate an ASN from a CIDR or if you want to swap ASNs.
    #             For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
    # @param [Hash | Types::DisassociateIpamByoasnInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateIpamByoasnInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_ipam_byoasn(
    #     dry_run: false,
    #     asn: 'Asn', # required
    #     cidr: 'Cidr' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateIpamByoasnOutput
    #   resp.data.asn_association #=> Types::AsnAssociation
    #   resp.data.asn_association.asn #=> String
    #   resp.data.asn_association.cidr #=> String
    #   resp.data.asn_association.status_message #=> String
    #   resp.data.asn_association.state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    def disassociate_ipam_byoasn(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateIpamByoasnInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateIpamByoasn.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_ipam_byoasn,
        tracer: tracer
      )
      Telemetry::DisassociateIpamByoasn.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_ipam_byoasn] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_ipam_byoasn] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_ipam_byoasn] #{output.data}")
        output
      end
    end

    # <p>Disassociates a resource discovery from an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::DisassociateIpamResourceDiscoveryInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateIpamResourceDiscoveryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_ipam_resource_discovery(
    #     dry_run: false,
    #     ipam_resource_discovery_association_id: 'IpamResourceDiscoveryAssociationId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateIpamResourceDiscoveryOutput
    #   resp.data.ipam_resource_discovery_association #=> Types::IpamResourceDiscoveryAssociation
    #   resp.data.ipam_resource_discovery_association.owner_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_resource_discovery_association_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_resource_discovery_association_arn #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_id #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_arn #=> String
    #   resp.data.ipam_resource_discovery_association.ipam_region #=> String
    #   resp.data.ipam_resource_discovery_association.is_default #=> Boolean
    #   resp.data.ipam_resource_discovery_association.resource_discovery_status #=> String, one of ["active", "not-found"]
    #   resp.data.ipam_resource_discovery_association.state #=> String, one of ["associate-in-progress", "associate-complete", "associate-failed", "disassociate-in-progress", "disassociate-complete", "disassociate-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discovery_association.tags #=> Array<Tag>
    #   resp.data.ipam_resource_discovery_association.tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discovery_association.tags[0].key #=> String
    #   resp.data.ipam_resource_discovery_association.tags[0].value #=> String
    def disassociate_ipam_resource_discovery(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateIpamResourceDiscoveryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateIpamResourceDiscovery.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_ipam_resource_discovery,
        tracer: tracer
      )
      Telemetry::DisassociateIpamResourceDiscovery.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_ipam_resource_discovery] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_ipam_resource_discovery] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_ipam_resource_discovery] #{output.data}")
        output
      end
    end

    # <p>Disassociates secondary Elastic IP addresses (EIPs) from a public NAT gateway.
    #             You cannot disassociate your primary EIP. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-edit-secondary">Edit secondary IP address associations</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <p>While disassociating is in progress, you cannot associate/disassociate additional EIPs while the connections are being drained. You are, however, allowed to delete the NAT gateway.</p>
    #          <p>An EIP is released only at the end of MaxDrainDurationSeconds. It stays
    #             associated and supports the existing connections but does not support any new connections
    #             (new connections are distributed across the remaining associated EIPs). As the existing
    #             connections drain out, the EIPs (and the corresponding private IP addresses mapped to them)
    #             are released.</p>
    # @param [Hash | Types::DisassociateNatGatewayAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateNatGatewayAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_nat_gateway_address(
    #     nat_gateway_id: 'NatGatewayId', # required
    #     association_ids: [
    #       'member'
    #     ], # required
    #     max_drain_duration_seconds: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateNatGatewayAddressOutput
    #   resp.data.nat_gateway_id #=> String
    #   resp.data.nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateway_addresses[0].association_id #=> String
    #   resp.data.nat_gateway_addresses[0].is_primary #=> Boolean
    #   resp.data.nat_gateway_addresses[0].failure_message #=> String
    #   resp.data.nat_gateway_addresses[0].status #=> String, one of ["assigning", "unassigning", "associating", "disassociating", "succeeded", "failed"]
    def disassociate_nat_gateway_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateNatGatewayAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateNatGatewayAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_nat_gateway_address,
        tracer: tracer
      )
      Telemetry::DisassociateNatGatewayAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_nat_gateway_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_nat_gateway_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_nat_gateway_address] #{output.data}")
        output
      end
    end

    # <p>Disassociates a subnet or gateway from a route table.</p>
    #          <p>After you perform this action, the subnet no longer uses the routes in the route table.
    # 				Instead, it uses the routes in the VPC's main route table. For more information
    # 				about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
    # 				tables</a> in the <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::DisassociateRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_route_table(
    #     association_id: 'AssociationId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateRouteTableOutput
    # @example To disassociate a route table
    #   # This example disassociates the specified route table from its associated subnet.
    #   resp = client.disassociate_route_table({
    #     association_id: "rtbassoc-781d0d1a"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def disassociate_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_route_table,
        tracer: tracer
      )
      Telemetry::DisassociateRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_route_table] #{output.data}")
        output
      end
    end

    # <p>Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p>
    # @param [Hash | Types::DisassociateSubnetCidrBlockInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateSubnetCidrBlockInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_subnet_cidr_block(
    #     association_id: 'AssociationId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateSubnetCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::SubnetIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::SubnetCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.subnet_id #=> String
    def disassociate_subnet_cidr_block(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateSubnetCidrBlockInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateSubnetCidrBlock.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_subnet_cidr_block,
        tracer: tracer
      )
      Telemetry::DisassociateSubnetCidrBlock.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_subnet_cidr_block] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_subnet_cidr_block] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_subnet_cidr_block] #{output.data}")
        output
      end
    end

    # <p>Disassociates the specified subnets from the transit gateway multicast domain. </p>
    # @param [Hash | Types::DisassociateTransitGatewayMulticastDomainInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateTransitGatewayMulticastDomainInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_transit_gateway_multicast_domain(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     subnet_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateTransitGatewayMulticastDomainOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    def disassociate_transit_gateway_multicast_domain(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateTransitGatewayMulticastDomainInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateTransitGatewayMulticastDomain.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_transit_gateway_multicast_domain,
        tracer: tracer
      )
      Telemetry::DisassociateTransitGatewayMulticastDomain.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_multicast_domain] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_multicast_domain] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_multicast_domain] #{output.data}")
        output
      end
    end

    # <p>Removes the association between an an attachment and a policy table.</p>
    # @param [Hash | Types::DisassociateTransitGatewayPolicyTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateTransitGatewayPolicyTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_transit_gateway_policy_table(
    #     transit_gateway_policy_table_id: 'TransitGatewayPolicyTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateTransitGatewayPolicyTableOutput
    #   resp.data.association #=> Types::TransitGatewayPolicyTableAssociation
    #   resp.data.association.transit_gateway_policy_table_id #=> String
    #   resp.data.association.transit_gateway_attachment_id #=> String
    #   resp.data.association.resource_id #=> String
    #   resp.data.association.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    def disassociate_transit_gateway_policy_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateTransitGatewayPolicyTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateTransitGatewayPolicyTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_transit_gateway_policy_table,
        tracer: tracer
      )
      Telemetry::DisassociateTransitGatewayPolicyTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_policy_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_policy_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_policy_table] #{output.data}")
        output
      end
    end

    # <p>Disassociates a resource attachment from a transit gateway route table.</p>
    # @param [Hash | Types::DisassociateTransitGatewayRouteTableInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateTransitGatewayRouteTableInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_transit_gateway_route_table(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateTransitGatewayRouteTableOutput
    #   resp.data.association #=> Types::TransitGatewayAssociation
    #   resp.data.association.transit_gateway_route_table_id #=> String
    #   resp.data.association.transit_gateway_attachment_id #=> String
    #   resp.data.association.resource_id #=> String
    #   resp.data.association.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    def disassociate_transit_gateway_route_table(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateTransitGatewayRouteTableInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateTransitGatewayRouteTable.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_transit_gateway_route_table,
        tracer: tracer
      )
      Telemetry::DisassociateTransitGatewayRouteTable.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_route_table] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_route_table] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_transit_gateway_route_table] #{output.data}")
        output
      end
    end

    # <p>Removes an association between a branch network interface with a trunk network interface.</p>
    # @param [Hash | Types::DisassociateTrunkInterfaceInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateTrunkInterfaceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_trunk_interface(
    #     association_id: 'AssociationId', # required
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateTrunkInterfaceOutput
    #   resp.data.return #=> Boolean
    #   resp.data.client_token #=> String
    def disassociate_trunk_interface(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateTrunkInterfaceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateTrunkInterface.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_trunk_interface,
        tracer: tracer
      )
      Telemetry::DisassociateTrunkInterface.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_trunk_interface] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_trunk_interface] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_trunk_interface] #{output.data}")
        output
      end
    end

    # <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must
    #             specify its association ID. You can get the association ID by using
    #                 <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that
    #             are associated with the CIDR block before you can disassociate it. </p>
    #          <p>You cannot disassociate the CIDR block with which you originally created the VPC (the
    # 			primary CIDR block).</p>
    # @param [Hash | Types::DisassociateVpcCidrBlockInput] params
    #   Request parameters for this operation.
    #   See {Types::DisassociateVpcCidrBlockInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.disassociate_vpc_cidr_block(
    #     association_id: 'AssociationId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::DisassociateVpcCidrBlockOutput
    #   resp.data.ipv6_cidr_block_association #=> Types::VpcIpv6CidrBlockAssociation
    #   resp.data.ipv6_cidr_block_association.association_id #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failing", "failed"]
    #   resp.data.ipv6_cidr_block_association.ipv6_cidr_block_state.status_message #=> String
    #   resp.data.ipv6_cidr_block_association.network_border_group #=> String
    #   resp.data.ipv6_cidr_block_association.ipv6_pool #=> String
    #   resp.data.cidr_block_association #=> Types::VpcCidrBlockAssociation
    #   resp.data.cidr_block_association.association_id #=> String
    #   resp.data.cidr_block_association.cidr_block #=> String
    #   resp.data.cidr_block_association.cidr_block_state #=> Types::VpcCidrBlockState
    #   resp.data.vpc_id #=> String
    def disassociate_vpc_cidr_block(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::DisassociateVpcCidrBlockInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::DisassociateVpcCidrBlock.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :disassociate_vpc_cidr_block,
        tracer: tracer
      )
      Telemetry::DisassociateVpcCidrBlock.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_vpc_cidr_block] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#disassociate_vpc_cidr_block] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#disassociate_vpc_cidr_block] #{output.data}")
        output
      end
    end

    # <p>Enables Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer Elastic IP addresses</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    # @param [Hash | Types::EnableAddressTransferInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableAddressTransferInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_address_transfer(
    #     allocation_id: 'AllocationId', # required
    #     transfer_account_id: 'TransferAccountId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableAddressTransferOutput
    #   resp.data.address_transfer #=> Types::AddressTransfer
    #   resp.data.address_transfer.public_ip #=> String
    #   resp.data.address_transfer.allocation_id #=> String
    #   resp.data.address_transfer.transfer_account_id #=> String
    #   resp.data.address_transfer.transfer_offer_expiration_timestamp #=> Time
    #   resp.data.address_transfer.transfer_offer_accepted_timestamp #=> Time
    #   resp.data.address_transfer.address_transfer_status #=> String, one of ["pending", "disabled", "accepted"]
    def enable_address_transfer(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableAddressTransferInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableAddressTransfer.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_address_transfer,
        tracer: tracer
      )
      Telemetry::EnableAddressTransfer.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_address_transfer] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_address_transfer] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_address_transfer] #{output.data}")
        output
      end
    end

    # <p>Enables Infrastructure Performance subscriptions.</p>
    # @param [Hash | Types::EnableAwsNetworkPerformanceMetricSubscriptionInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableAwsNetworkPerformanceMetricSubscriptionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_aws_network_performance_metric_subscription(
    #     source: 'Source',
    #     destination: 'Destination',
    #     metric: 'aggregate-latency', # accepts ["aggregate-latency"]
    #     statistic: 'p50', # accepts ["p50"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableAwsNetworkPerformanceMetricSubscriptionOutput
    #   resp.data.output #=> Boolean
    def enable_aws_network_performance_metric_subscription(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableAwsNetworkPerformanceMetricSubscriptionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableAwsNetworkPerformanceMetricSubscription.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_aws_network_performance_metric_subscription,
        tracer: tracer
      )
      Telemetry::EnableAwsNetworkPerformanceMetricSubscription.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_aws_network_performance_metric_subscription] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_aws_network_performance_metric_subscription] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_aws_network_performance_metric_subscription] #{output.data}")
        output
      end
    end

    # <p>Enables EBS encryption by default for your account in the current Region.</p>
    #          <p>After you enable encryption by default, the EBS volumes that you create are
    #     	always encrypted, either using the default KMS key or the KMS key that you specified
    #       when you created each volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
    #       <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>You can specify the default KMS key for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a>
    #       or <a>ResetEbsDefaultKmsKeyId</a>.</p>
    #          <p>Enabling encryption by default has no effect on the encryption status of your
    #       existing volumes.</p>
    #          <p>After you enable encryption by default, you can no longer launch instances
    #       using instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
    #         instance types</a>.</p>
    # @param [Hash | Types::EnableEbsEncryptionByDefaultInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableEbsEncryptionByDefaultInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_ebs_encryption_by_default(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableEbsEncryptionByDefaultOutput
    #   resp.data.ebs_encryption_by_default #=> Boolean
    def enable_ebs_encryption_by_default(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableEbsEncryptionByDefaultInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableEbsEncryptionByDefault.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_ebs_encryption_by_default,
        tracer: tracer
      )
      Telemetry::EnableEbsEncryptionByDefault.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_ebs_encryption_by_default] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_ebs_encryption_by_default] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_ebs_encryption_by_default] #{output.data}")
        output
      end
    end

    # <p>When you enable Windows fast launch for a Windows AMI, images are pre-provisioned,
    # 			using snapshots to launch instances up to 65% faster. To create the optimized Windows
    # 			image, Amazon EC2 launches an instance and runs through Sysprep steps, rebooting as required.
    # 			Then it creates a set of reserved snapshots that are used for subsequent launches. The
    # 			reserved snapshots are automatically replenished as they are used, depending on your
    # 			settings for launch frequency.</p>
    #          <note>
    #             <p>You can only change these settings for Windows AMIs that you own or that have been shared with you.</p>
    #          </note>
    # @param [Hash | Types::EnableFastLaunchInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableFastLaunchInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_fast_launch(
    #     image_id: 'ImageId', # required
    #     resource_type: 'ResourceType',
    #     snapshot_configuration: {
    #       target_resource_count: 1
    #     },
    #     launch_template: {
    #       launch_template_id: 'LaunchTemplateId',
    #       launch_template_name: 'LaunchTemplateName',
    #       version: 'Version' # required
    #     },
    #     max_parallel_launches: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableFastLaunchOutput
    #   resp.data.image_id #=> String
    #   resp.data.resource_type #=> String, one of ["snapshot"]
    #   resp.data.snapshot_configuration #=> Types::FastLaunchSnapshotConfigurationResponse
    #   resp.data.snapshot_configuration.target_resource_count #=> Integer
    #   resp.data.launch_template #=> Types::FastLaunchLaunchTemplateSpecificationResponse
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.version #=> String
    #   resp.data.max_parallel_launches #=> Integer
    #   resp.data.owner_id #=> String
    #   resp.data.state #=> String, one of ["enabling", "enabling-failed", "enabled", "enabled-failed", "disabling", "disabling-failed"]
    #   resp.data.state_transition_reason #=> String
    #   resp.data.state_transition_time #=> Time
    def enable_fast_launch(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableFastLaunchInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableFastLaunch.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_fast_launch,
        tracer: tracer
      )
      Telemetry::EnableFastLaunch.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_fast_launch] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_fast_launch] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_fast_launch] #{output.data}")
        output
      end
    end

    # <p>Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
    #          <p>You get the full benefit of fast snapshot restores after they enter the <code>enabled</code> state.
    #       To get the current state of fast snapshot restores, use <a>DescribeFastSnapshotRestores</a>.
    #       To disable fast snapshot restores, use <a>DisableFastSnapshotRestores</a>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-fast-snapshot-restore.html">Amazon EBS fast snapshot
    #       restore</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::EnableFastSnapshotRestoresInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableFastSnapshotRestoresInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_fast_snapshot_restores(
    #     availability_zones: [
    #       'member'
    #     ], # required
    #     source_snapshot_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableFastSnapshotRestoresOutput
    #   resp.data.successful #=> Array<EnableFastSnapshotRestoreSuccessItem>
    #   resp.data.successful[0] #=> Types::EnableFastSnapshotRestoreSuccessItem
    #   resp.data.successful[0].snapshot_id #=> String
    #   resp.data.successful[0].availability_zone #=> String
    #   resp.data.successful[0].state #=> String, one of ["enabling", "optimizing", "enabled", "disabling", "disabled"]
    #   resp.data.successful[0].state_transition_reason #=> String
    #   resp.data.successful[0].owner_id #=> String
    #   resp.data.successful[0].owner_alias #=> String
    #   resp.data.successful[0].enabling_time #=> Time
    #   resp.data.successful[0].optimizing_time #=> Time
    #   resp.data.successful[0].enabled_time #=> Time
    #   resp.data.successful[0].disabling_time #=> Time
    #   resp.data.successful[0].disabled_time #=> Time
    #   resp.data.unsuccessful #=> Array<EnableFastSnapshotRestoreErrorItem>
    #   resp.data.unsuccessful[0] #=> Types::EnableFastSnapshotRestoreErrorItem
    #   resp.data.unsuccessful[0].snapshot_id #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors #=> Array<EnableFastSnapshotRestoreStateErrorItem>
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0] #=> Types::EnableFastSnapshotRestoreStateErrorItem
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].availability_zone #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error #=> Types::EnableFastSnapshotRestoreStateError
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.code #=> String
    #   resp.data.unsuccessful[0].fast_snapshot_restore_state_errors[0].error.message #=> String
    def enable_fast_snapshot_restores(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableFastSnapshotRestoresInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableFastSnapshotRestores.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_fast_snapshot_restores,
        tracer: tracer
      )
      Telemetry::EnableFastSnapshotRestores.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_fast_snapshot_restores] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_fast_snapshot_restores] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_fast_snapshot_restores] #{output.data}")
        output
      end
    end

    # <p>Re-enables a disabled AMI. The re-enabled AMI is marked as <code>available</code> and can
    #       be used for instance launches, appears in describe operations, and can be shared. Amazon Web Services
    #       accounts, organizations, and Organizational Units that lost access to the AMI when it was
    #       disabled do not regain access automatically. Once the AMI is available, it can be shared with
    #       them again.</p>
    #          <p>Only the AMI owner can re-enable a disabled AMI.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/disable-an-ami.html">Disable an AMI</a> in the
    #         <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::EnableImageInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_image(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableImageOutput
    #   resp.data.return #=> Boolean
    def enable_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_image,
        tracer: tracer
      )
      Telemetry::EnableImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_image] #{output.data}")
        output
      end
    end

    # <p>Enables <i>block public access for AMIs</i> at the account level in the
    #       specified Amazon Web Services Region. This prevents the public sharing of your AMIs. However, if you already
    #       have public AMIs, they will remain publicly available.</p>
    #          <p>The API can take up to 10 minutes to configure this setting. During this time, if you run
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetImageBlockPublicAccessState.html">GetImageBlockPublicAccessState</a>, the response will be <code>unblocked</code>. When
    #       the API has completed the configuration, the response will be
    #       <code>block-new-sharing</code>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html#block-public-access-to-amis">Block
    #         public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::EnableImageBlockPublicAccessInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableImageBlockPublicAccessInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_image_block_public_access(
    #     image_block_public_access_state: 'block-new-sharing', # required - accepts ["block-new-sharing"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableImageBlockPublicAccessOutput
    #   resp.data.image_block_public_access_state #=> String, one of ["block-new-sharing"]
    def enable_image_block_public_access(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableImageBlockPublicAccessInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableImageBlockPublicAccess.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_image_block_public_access,
        tracer: tracer
      )
      Telemetry::EnableImageBlockPublicAccess.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_image_block_public_access] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_image_block_public_access] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_image_block_public_access] #{output.data}")
        output
      end
    end

    # <p>Enables deprecation of the specified AMI at the specified date and time.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::EnableImageDeprecationInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableImageDeprecationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_image_deprecation(
    #     image_id: 'ImageId', # required
    #     deprecate_at: Time.now, # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableImageDeprecationOutput
    #   resp.data.return #=> Boolean
    def enable_image_deprecation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableImageDeprecationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableImageDeprecation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_image_deprecation,
        tracer: tracer
      )
      Telemetry::EnableImageDeprecation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_image_deprecation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_image_deprecation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_image_deprecation] #{output.data}")
        output
      end
    end

    # <p>Enable an Organizations member account as the IPAM admin account. You cannot select the Organizations management account as the IPAM admin account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html">Enable integration with Organizations</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::EnableIpamOrganizationAdminAccountInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableIpamOrganizationAdminAccountInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_ipam_organization_admin_account(
    #     dry_run: false,
    #     delegated_admin_account_id: 'DelegatedAdminAccountId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableIpamOrganizationAdminAccountOutput
    #   resp.data.success #=> Boolean
    def enable_ipam_organization_admin_account(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableIpamOrganizationAdminAccountInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableIpamOrganizationAdminAccount.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_ipam_organization_admin_account,
        tracer: tracer
      )
      Telemetry::EnableIpamOrganizationAdminAccount.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_ipam_organization_admin_account] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_ipam_organization_admin_account] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_ipam_organization_admin_account] #{output.data}")
        output
      end
    end

    # <p>Establishes a trust relationship between Reachability Analyzer and Organizations.
    #          This operation must be performed by the management account for the organization.</p>
    #          <p>After you establish a trust relationship, a user in the management account or
    #          a delegated administrator account can run a cross-account analysis using resources
    #          from the member accounts.</p>
    # @param [Hash | Types::EnableReachabilityAnalyzerOrganizationSharingInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableReachabilityAnalyzerOrganizationSharingInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_reachability_analyzer_organization_sharing(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableReachabilityAnalyzerOrganizationSharingOutput
    #   resp.data.return_value #=> Boolean
    def enable_reachability_analyzer_organization_sharing(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableReachabilityAnalyzerOrganizationSharingInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableReachabilityAnalyzerOrganizationSharing.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_reachability_analyzer_organization_sharing,
        tracer: tracer
      )
      Telemetry::EnableReachabilityAnalyzerOrganizationSharing.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_reachability_analyzer_organization_sharing] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_reachability_analyzer_organization_sharing] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_reachability_analyzer_organization_sharing] #{output.data}")
        output
      end
    end

    # <p>Enables access to the EC2 serial console of all instances for your account. By default,
    # 			access to the EC2 serial console is disabled for your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a>
    # 			in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::EnableSerialConsoleAccessInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableSerialConsoleAccessInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_serial_console_access(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableSerialConsoleAccessOutput
    #   resp.data.serial_console_access_enabled #=> Boolean
    def enable_serial_console_access(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableSerialConsoleAccessInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableSerialConsoleAccess.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_serial_console_access,
        tracer: tracer
      )
      Telemetry::EnableSerialConsoleAccess.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_serial_console_access] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_serial_console_access] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_serial_console_access] #{output.data}")
        output
      end
    end

    # <p>Enables or modifies the <i>block public access for snapshots</i>
    #       setting at the account level for the specified Amazon Web Services Region. After you enable block
    #       public access for snapshots in a Region, users can no longer request public sharing
    #       for snapshots in that Region. Snapshots that are already publicly shared are either
    #       treated as private or they remain publicly shared, depending on the
    #       <b>State</b> that you specify.</p>
    #          <p>If block public access is enabled in <code>block-all-sharing</code> mode, and
    #       you change the mode to <code>block-new-sharing</code>, all snapshots that were
    #       previously publicly shared are no longer treated as private and they become publicly
    #       accessible again.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-public-access-snapshots.html">
    #       Block public access for snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::EnableSnapshotBlockPublicAccessInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableSnapshotBlockPublicAccessInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_snapshot_block_public_access(
    #     state: 'block-all-sharing', # required - accepts ["block-all-sharing", "block-new-sharing", "unblocked"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableSnapshotBlockPublicAccessOutput
    #   resp.data.state #=> String, one of ["block-all-sharing", "block-new-sharing", "unblocked"]
    def enable_snapshot_block_public_access(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableSnapshotBlockPublicAccessInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableSnapshotBlockPublicAccess.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_snapshot_block_public_access,
        tracer: tracer
      )
      Telemetry::EnableSnapshotBlockPublicAccess.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_snapshot_block_public_access] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_snapshot_block_public_access] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_snapshot_block_public_access] #{output.data}")
        output
      end
    end

    # <p>Enables the specified attachment to propagate routes to the specified
    #          propagation route table.</p>
    # @param [Hash | Types::EnableTransitGatewayRouteTablePropagationInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableTransitGatewayRouteTablePropagationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_transit_gateway_route_table_propagation(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     dry_run: false,
    #     transit_gateway_route_table_announcement_id: 'TransitGatewayRouteTableAnnouncementId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableTransitGatewayRouteTablePropagationOutput
    #   resp.data.propagation #=> Types::TransitGatewayPropagation
    #   resp.data.propagation.transit_gateway_attachment_id #=> String
    #   resp.data.propagation.resource_id #=> String
    #   resp.data.propagation.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.propagation.transit_gateway_route_table_id #=> String
    #   resp.data.propagation.state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #   resp.data.propagation.transit_gateway_route_table_announcement_id #=> String
    def enable_transit_gateway_route_table_propagation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableTransitGatewayRouteTablePropagationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableTransitGatewayRouteTablePropagation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_transit_gateway_route_table_propagation,
        tracer: tracer
      )
      Telemetry::EnableTransitGatewayRouteTablePropagation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_transit_gateway_route_table_propagation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_transit_gateway_route_table_propagation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_transit_gateway_route_table_propagation] #{output.data}")
        output
      end
    end

    # <p>Enables a virtual private gateway (VGW) to propagate routes to the specified route
    #             table of a VPC.</p>
    # @param [Hash | Types::EnableVgwRoutePropagationInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableVgwRoutePropagationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_vgw_route_propagation(
    #     gateway_id: 'GatewayId', # required
    #     route_table_id: 'RouteTableId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableVgwRoutePropagationOutput
    # @example To enable route propagation
    #   # This example enables the specified virtual private gateway to propagate static routes to the specified route table.
    #   resp = client.enable_vgw_route_propagation({
    #     route_table_id: "rtb-22574640",
    #     gateway_id: "vgw-9a4cacf3"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def enable_vgw_route_propagation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableVgwRoutePropagationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableVgwRoutePropagation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_vgw_route_propagation,
        tracer: tracer
      )
      Telemetry::EnableVgwRoutePropagation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_vgw_route_propagation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_vgw_route_propagation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_vgw_route_propagation] #{output.data}")
        output
      end
    end

    # <p>Enables I/O operations for a volume that had I/O operations disabled because the data on
    #       the volume was potentially inconsistent.</p>
    # @param [Hash | Types::EnableVolumeIOInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableVolumeIOInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_volume_io(
    #     dry_run: false,
    #     volume_id: 'VolumeId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableVolumeIOOutput
    # @example To enable I/O for a volume
    #   # This example enables I/O on volume ``vol-1234567890abcdef0``.
    #   resp = client.enable_volume_io({
    #     volume_id: "vol-1234567890abcdef0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def enable_volume_io(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableVolumeIOInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableVolumeIO.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_volume_io,
        tracer: tracer
      )
      Telemetry::EnableVolumeIO.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_volume_io] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_volume_io] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_volume_io] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your
    # 			ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot
    # 			enable your VPC for ClassicLink if any of your VPC route tables have existing routes for
    # 			address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local
    # 			routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address
    # 			ranges.</p>
    # @param [Hash | Types::EnableVpcClassicLinkInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableVpcClassicLinkInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_vpc_classic_link(
    #     dry_run: false,
    #     vpc_id: 'VpcId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableVpcClassicLinkOutput
    #   resp.data.return #=> Boolean
    def enable_vpc_classic_link(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableVpcClassicLinkInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableVpcClassicLink.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_vpc_classic_link,
        tracer: tracer
      )
      Telemetry::EnableVpcClassicLink.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_vpc_classic_link] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_vpc_classic_link] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_vpc_classic_link] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS
    # 			hostname of a linked EC2-Classic instance resolves to its private IP address when
    # 			addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
    # 			of an instance in a VPC resolves to its private IP address when addressed from a linked
    # 			EC2-Classic instance.</p>
    #          <p>You must specify a VPC ID in the request.</p>
    # @param [Hash | Types::EnableVpcClassicLinkDnsSupportInput] params
    #   Request parameters for this operation.
    #   See {Types::EnableVpcClassicLinkDnsSupportInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.enable_vpc_classic_link_dns_support(
    #     vpc_id: 'VpcId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::EnableVpcClassicLinkDnsSupportOutput
    #   resp.data.return #=> Boolean
    def enable_vpc_classic_link_dns_support(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::EnableVpcClassicLinkDnsSupportInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::EnableVpcClassicLinkDnsSupport.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :enable_vpc_classic_link_dns_support,
        tracer: tracer
      )
      Telemetry::EnableVpcClassicLinkDnsSupport.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_vpc_classic_link_dns_support] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#enable_vpc_classic_link_dns_support] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#enable_vpc_classic_link_dns_support] #{output.data}")
        output
      end
    end

    # <p>Downloads the client certificate revocation list for the specified Client VPN endpoint.</p>
    # @param [Hash | Types::ExportClientVpnClientCertificateRevocationListInput] params
    #   Request parameters for this operation.
    #   See {Types::ExportClientVpnClientCertificateRevocationListInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.export_client_vpn_client_certificate_revocation_list(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ExportClientVpnClientCertificateRevocationListOutput
    #   resp.data.certificate_revocation_list #=> String
    #   resp.data.status #=> Types::ClientCertificateRevocationListStatus
    #   resp.data.status.code #=> String, one of ["pending", "active"]
    #   resp.data.status.message #=> String
    def export_client_vpn_client_certificate_revocation_list(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ExportClientVpnClientCertificateRevocationListInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ExportClientVpnClientCertificateRevocationList.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :export_client_vpn_client_certificate_revocation_list,
        tracer: tracer
      )
      Telemetry::ExportClientVpnClientCertificateRevocationList.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_client_vpn_client_certificate_revocation_list] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#export_client_vpn_client_certificate_revocation_list] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_client_vpn_client_certificate_revocation_list] #{output.data}")
        output
      end
    end

    # <p>Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration
    # 			file includes the Client VPN endpoint and certificate information clients need to establish a connection
    # 			with the Client VPN endpoint.</p>
    # @param [Hash | Types::ExportClientVpnClientConfigurationInput] params
    #   Request parameters for this operation.
    #   See {Types::ExportClientVpnClientConfigurationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.export_client_vpn_client_configuration(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ExportClientVpnClientConfigurationOutput
    #   resp.data.client_configuration #=> String
    def export_client_vpn_client_configuration(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ExportClientVpnClientConfigurationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ExportClientVpnClientConfiguration.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :export_client_vpn_client_configuration,
        tracer: tracer
      )
      Telemetry::ExportClientVpnClientConfiguration.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_client_vpn_client_configuration] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#export_client_vpn_client_configuration] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_client_vpn_client_configuration] #{output.data}")
        output
      end
    end

    # <p>Exports an Amazon Machine Image (AMI) to a VM file. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting a VM
    #     directly from an Amazon Machine Image (AMI)</a> in the
    #     <i>VM Import/Export User Guide</i>.</p>
    # @param [Hash | Types::ExportImageInput] params
    #   Request parameters for this operation.
    #   See {Types::ExportImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.export_image(
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     disk_image_format: 'VMDK', # required - accepts ["VMDK", "RAW", "VHD"]
    #     dry_run: false,
    #     image_id: 'ImageId', # required
    #     s3_export_location: {
    #       s3_bucket: 'S3Bucket', # required
    #       s3_prefix: 'S3Prefix'
    #     }, # required
    #     role_name: 'RoleName',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ExportImageOutput
    #   resp.data.description #=> String
    #   resp.data.disk_image_format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.export_image_task_id #=> String
    #   resp.data.image_id #=> String
    #   resp.data.role_name #=> String
    #   resp.data.progress #=> String
    #   resp.data.s3_export_location #=> Types::ExportTaskS3Location
    #   resp.data.s3_export_location.s3_bucket #=> String
    #   resp.data.s3_export_location.s3_prefix #=> String
    #   resp.data.status #=> String
    #   resp.data.status_message #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    def export_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ExportImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ExportImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :export_image,
        tracer: tracer
      )
      Telemetry::ExportImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#export_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_image] #{output.data}")
        output
      end
    end

    # <p>Exports routes from the specified transit gateway route table to the specified S3 bucket.
    #          By default, all routes are exported. Alternatively, you can filter by CIDR range.</p>
    #          <p>The routes are saved to the specified bucket in a JSON file. For more information, see
    #                 <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export Route Tables
    #                 to Amazon S3</a> in <i>Transit Gateways</i>.</p>
    # @param [Hash | Types::ExportTransitGatewayRoutesInput] params
    #   Request parameters for this operation.
    #   See {Types::ExportTransitGatewayRoutesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.export_transit_gateway_routes(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     s3_bucket: 'S3Bucket', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ExportTransitGatewayRoutesOutput
    #   resp.data.s3_location #=> String
    def export_transit_gateway_routes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ExportTransitGatewayRoutesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ExportTransitGatewayRoutes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :export_transit_gateway_routes,
        tracer: tracer
      )
      Telemetry::ExportTransitGatewayRoutes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_transit_gateway_routes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#export_transit_gateway_routes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#export_transit_gateway_routes] #{output.data}")
        output
      end
    end

    # <p>Returns the IAM roles that are associated with the specified ACM (ACM) certificate.
    # 			It also returns the name of the Amazon S3 bucket and the Amazon S3 object key where the certificate,
    # 			certificate chain, and encrypted private key bundle are stored, and the ARN of the KMS key
    # 			that's used to encrypt the private key.</p>
    # @param [Hash | Types::GetAssociatedEnclaveCertificateIamRolesInput] params
    #   Request parameters for this operation.
    #   See {Types::GetAssociatedEnclaveCertificateIamRolesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_associated_enclave_certificate_iam_roles(
    #     certificate_arn: 'CertificateArn', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetAssociatedEnclaveCertificateIamRolesOutput
    #   resp.data.associated_roles #=> Array<AssociatedRole>
    #   resp.data.associated_roles[0] #=> Types::AssociatedRole
    #   resp.data.associated_roles[0].associated_role_arn #=> String
    #   resp.data.associated_roles[0].certificate_s3_bucket_name #=> String
    #   resp.data.associated_roles[0].certificate_s3_object_key #=> String
    #   resp.data.associated_roles[0].encryption_kms_key_id #=> String
    def get_associated_enclave_certificate_iam_roles(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetAssociatedEnclaveCertificateIamRolesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetAssociatedEnclaveCertificateIamRoles.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_associated_enclave_certificate_iam_roles,
        tracer: tracer
      )
      Telemetry::GetAssociatedEnclaveCertificateIamRoles.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_associated_enclave_certificate_iam_roles] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_associated_enclave_certificate_iam_roles] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_associated_enclave_certificate_iam_roles] #{output.data}")
        output
      end
    end

    # <p>Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.</p>
    # @param [Hash | Types::GetAssociatedIpv6PoolCidrsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetAssociatedIpv6PoolCidrsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_associated_ipv6_pool_cidrs(
    #     pool_id: 'PoolId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetAssociatedIpv6PoolCidrsOutput
    #   resp.data.ipv6_cidr_associations #=> Array<Ipv6CidrAssociation>
    #   resp.data.ipv6_cidr_associations[0] #=> Types::Ipv6CidrAssociation
    #   resp.data.ipv6_cidr_associations[0].ipv6_cidr #=> String
    #   resp.data.ipv6_cidr_associations[0].associated_resource #=> String
    #   resp.data.next_token #=> String
    def get_associated_ipv6_pool_cidrs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetAssociatedIpv6PoolCidrsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetAssociatedIpv6PoolCidrs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_associated_ipv6_pool_cidrs,
        tracer: tracer
      )
      Telemetry::GetAssociatedIpv6PoolCidrs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_associated_ipv6_pool_cidrs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_associated_ipv6_pool_cidrs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_associated_ipv6_pool_cidrs] #{output.data}")
        output
      end
    end

    # <p>Gets network performance data.</p>
    # @param [Hash | Types::GetAwsNetworkPerformanceDataInput] params
    #   Request parameters for this operation.
    #   See {Types::GetAwsNetworkPerformanceDataInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_aws_network_performance_data(
    #     data_queries: [
    #       {
    #         id: 'Id',
    #         source: 'Source',
    #         destination: 'Destination',
    #         metric: 'aggregate-latency', # accepts ["aggregate-latency"]
    #         statistic: 'p50', # accepts ["p50"]
    #         period: 'five-minutes' # accepts ["five-minutes", "fifteen-minutes", "one-hour", "three-hours", "one-day", "one-week"]
    #       }
    #     ],
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetAwsNetworkPerformanceDataOutput
    #   resp.data.data_responses #=> Array<DataResponse>
    #   resp.data.data_responses[0] #=> Types::DataResponse
    #   resp.data.data_responses[0].id #=> String
    #   resp.data.data_responses[0].source #=> String
    #   resp.data.data_responses[0].destination #=> String
    #   resp.data.data_responses[0].metric #=> String, one of ["aggregate-latency"]
    #   resp.data.data_responses[0].statistic #=> String, one of ["p50"]
    #   resp.data.data_responses[0].period #=> String, one of ["five-minutes", "fifteen-minutes", "one-hour", "three-hours", "one-day", "one-week"]
    #   resp.data.data_responses[0].metric_points #=> Array<MetricPoint>
    #   resp.data.data_responses[0].metric_points[0] #=> Types::MetricPoint
    #   resp.data.data_responses[0].metric_points[0].start_date #=> Time
    #   resp.data.data_responses[0].metric_points[0].end_date #=> Time
    #   resp.data.data_responses[0].metric_points[0].value #=> Float
    #   resp.data.data_responses[0].metric_points[0].status #=> String
    #   resp.data.next_token #=> String
    def get_aws_network_performance_data(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetAwsNetworkPerformanceDataInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetAwsNetworkPerformanceData.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_aws_network_performance_data,
        tracer: tracer
      )
      Telemetry::GetAwsNetworkPerformanceData.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_aws_network_performance_data] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_aws_network_performance_data] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_aws_network_performance_data] #{output.data}")
        output
      end
    end

    # <p>Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner
    # 			and each Amazon Web Services account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only
    # 			the Capacity Reservation owner's usage.</p>
    # @param [Hash | Types::GetCapacityReservationUsageInput] params
    #   Request parameters for this operation.
    #   See {Types::GetCapacityReservationUsageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_capacity_reservation_usage(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetCapacityReservationUsageOutput
    #   resp.data.next_token #=> String
    #   resp.data.capacity_reservation_id #=> String
    #   resp.data.instance_type #=> String
    #   resp.data.total_instance_count #=> Integer
    #   resp.data.available_instance_count #=> Integer
    #   resp.data.state #=> String, one of ["active", "expired", "cancelled", "pending", "failed", "scheduled", "payment-pending", "payment-failed"]
    #   resp.data.instance_usages #=> Array<InstanceUsage>
    #   resp.data.instance_usages[0] #=> Types::InstanceUsage
    #   resp.data.instance_usages[0].account_id #=> String
    #   resp.data.instance_usages[0].used_instance_count #=> Integer
    def get_capacity_reservation_usage(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetCapacityReservationUsageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetCapacityReservationUsage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_capacity_reservation_usage,
        tracer: tracer
      )
      Telemetry::GetCapacityReservationUsage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_capacity_reservation_usage] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_capacity_reservation_usage] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_capacity_reservation_usage] #{output.data}")
        output
      end
    end

    # <p>Describes the allocations from the specified customer-owned address pool.</p>
    # @param [Hash | Types::GetCoipPoolUsageInput] params
    #   Request parameters for this operation.
    #   See {Types::GetCoipPoolUsageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_coip_pool_usage(
    #     pool_id: 'PoolId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetCoipPoolUsageOutput
    #   resp.data.coip_pool_id #=> String
    #   resp.data.coip_address_usages #=> Array<CoipAddressUsage>
    #   resp.data.coip_address_usages[0] #=> Types::CoipAddressUsage
    #   resp.data.coip_address_usages[0].allocation_id #=> String
    #   resp.data.coip_address_usages[0].aws_account_id #=> String
    #   resp.data.coip_address_usages[0].aws_service #=> String
    #   resp.data.coip_address_usages[0].co_ip #=> String
    #   resp.data.local_gateway_route_table_id #=> String
    #   resp.data.next_token #=> String
    def get_coip_pool_usage(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetCoipPoolUsageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetCoipPoolUsage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_coip_pool_usage,
        tracer: tracer
      )
      Telemetry::GetCoipPoolUsage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_coip_pool_usage] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_coip_pool_usage] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_coip_pool_usage] #{output.data}")
        output
      end
    end

    # <p>Gets the console output for the specified instance. For Linux instances, the instance
    #             console output displays the exact console output that would normally be displayed on a
    #             physical monitor attached to a computer. For Windows instances, the instance console
    #             output includes the last three system event log errors.</p>
    #          <p>By default, the console output returns buffered information that was posted shortly
    #             after an instance transition state (start, stop, reboot, or terminate). This information
    #             is available for at least one hour after the most recent post. Only the most recent 64
    #             KB of console output is available.</p>
    #          <p>You can optionally retrieve the latest serial console output at any time during the
    #             instance lifecycle. This option is supported on instance types that use the Nitro
    #             hypervisor.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance
    #                 console output</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::GetConsoleOutputInput] params
    #   Request parameters for this operation.
    #   See {Types::GetConsoleOutputInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_console_output(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false,
    #     latest: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetConsoleOutputOutput
    #   resp.data.instance_id #=> String
    #   resp.data.output #=> String
    #   resp.data.timestamp #=> Time
    # @example To get the console output
    #   # This example gets the console output for the specified instance.
    #   resp = client.get_console_output({
    #     instance_id: "i-1234567890abcdef0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     instance_id: "i-1234567890abcdef0",
    #     output: "...",
    #     timestamp: Time.parse('2018-05-25T21:23:53.000Z')
    #   }
    def get_console_output(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetConsoleOutputInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetConsoleOutput.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_console_output,
        tracer: tracer
      )
      Telemetry::GetConsoleOutput.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_console_output] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_console_output] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_console_output] #{output.data}")
        output
      end
    end

    # <p>Retrieve a JPG-format screenshot of a running instance to help with
    #             troubleshooting.</p>
    #          <p>The returned content is Base64-encoded.</p>
    # @param [Hash | Types::GetConsoleScreenshotInput] params
    #   Request parameters for this operation.
    #   See {Types::GetConsoleScreenshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_console_screenshot(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     wake_up: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetConsoleScreenshotOutput
    #   resp.data.image_data #=> String
    #   resp.data.instance_id #=> String
    def get_console_screenshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetConsoleScreenshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetConsoleScreenshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_console_screenshot,
        tracer: tracer
      )
      Telemetry::GetConsoleScreenshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_console_screenshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_console_screenshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_console_screenshot] #{output.data}")
        output
      end
    end

    # <p>Describes the default credit option for CPU usage of a burstable performance instance
    #             family.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                 performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::GetDefaultCreditSpecificationInput] params
    #   Request parameters for this operation.
    #   See {Types::GetDefaultCreditSpecificationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_default_credit_specification(
    #     dry_run: false,
    #     instance_family: 't2' # required - accepts ["t2", "t3", "t3a", "t4g"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetDefaultCreditSpecificationOutput
    #   resp.data.instance_family_credit_specification #=> Types::InstanceFamilyCreditSpecification
    #   resp.data.instance_family_credit_specification.instance_family #=> String, one of ["t2", "t3", "t3a", "t4g"]
    #   resp.data.instance_family_credit_specification.cpu_credits #=> String
    def get_default_credit_specification(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetDefaultCreditSpecificationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetDefaultCreditSpecification.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_default_credit_specification,
        tracer: tracer
      )
      Telemetry::GetDefaultCreditSpecification.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_default_credit_specification] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_default_credit_specification] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_default_credit_specification] #{output.data}")
        output
      end
    end

    # <p>Describes the default KMS key for EBS encryption by default for your account in this Region.
    #   		You can change the default KMS key for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or
    #       <a>ResetEbsDefaultKmsKeyId</a>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::GetEbsDefaultKmsKeyIdInput] params
    #   Request parameters for this operation.
    #   See {Types::GetEbsDefaultKmsKeyIdInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ebs_default_kms_key_id(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetEbsDefaultKmsKeyIdOutput
    #   resp.data.kms_key_id #=> String
    def get_ebs_default_kms_key_id(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetEbsDefaultKmsKeyIdInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetEbsDefaultKmsKeyId.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ebs_default_kms_key_id,
        tracer: tracer
      )
      Telemetry::GetEbsDefaultKmsKeyId.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ebs_default_kms_key_id] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ebs_default_kms_key_id] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ebs_default_kms_key_id] #{output.data}")
        output
      end
    end

    # <p>Describes whether EBS encryption by default is enabled for your account in the current
    #       Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::GetEbsEncryptionByDefaultInput] params
    #   Request parameters for this operation.
    #   See {Types::GetEbsEncryptionByDefaultInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ebs_encryption_by_default(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetEbsEncryptionByDefaultOutput
    #   resp.data.ebs_encryption_by_default #=> Boolean
    #   resp.data.sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    def get_ebs_encryption_by_default(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetEbsEncryptionByDefaultInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetEbsEncryptionByDefault.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ebs_encryption_by_default,
        tracer: tracer
      )
      Telemetry::GetEbsEncryptionByDefault.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ebs_encryption_by_default] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ebs_encryption_by_default] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ebs_encryption_by_default] #{output.data}")
        output
      end
    end

    # <p>Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs
    #             with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data.
    #             Based on the information that you provide, we configure resources in the template to do the following:</p>
    #          <ul>
    #             <li>
    #                <p>Create a table in Athena that maps fields to a custom log format</p>
    #             </li>
    #             <li>
    #                <p>Create a Lambda function that updates the table with new partitions on a daily, weekly, or
    #                     monthly basis</p>
    #             </li>
    #             <li>
    #                <p>Create a table partitioned between two timestamps in the past</p>
    #             </li>
    #             <li>
    #                <p>Create a set of named queries in Athena that you can use to get started quickly</p>
    #             </li>
    #          </ul>
    #          <note>
    #             <p>
    #                <code>GetFlowLogsIntegrationTemplate</code> does not support integration between
    #                     Amazon Web Services Transit Gateway Flow Logs and Amazon Athena.</p>
    #          </note>
    # @param [Hash | Types::GetFlowLogsIntegrationTemplateInput] params
    #   Request parameters for this operation.
    #   See {Types::GetFlowLogsIntegrationTemplateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_flow_logs_integration_template(
    #     dry_run: false,
    #     flow_log_id: 'FlowLogId', # required
    #     config_delivery_s3_destination_arn: 'ConfigDeliveryS3DestinationArn', # required
    #     integrate_services: {
    #       athena_integrations: [
    #         {
    #           integration_result_s3_destination_arn: 'IntegrationResultS3DestinationArn', # required
    #           partition_load_frequency: 'none', # required - accepts ["none", "daily", "weekly", "monthly"]
    #           partition_start_date: Time.now,
    #           partition_end_date: Time.now
    #         }
    #       ]
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetFlowLogsIntegrationTemplateOutput
    #   resp.data.result #=> String
    def get_flow_logs_integration_template(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetFlowLogsIntegrationTemplateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetFlowLogsIntegrationTemplate.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_flow_logs_integration_template,
        tracer: tracer
      )
      Telemetry::GetFlowLogsIntegrationTemplate.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_flow_logs_integration_template] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_flow_logs_integration_template] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_flow_logs_integration_template] #{output.data}")
        output
      end
    end

    # <p>Lists the resource groups to which a Capacity Reservation has been added.</p>
    # @param [Hash | Types::GetGroupsForCapacityReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::GetGroupsForCapacityReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_groups_for_capacity_reservation(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetGroupsForCapacityReservationOutput
    #   resp.data.next_token #=> String
    #   resp.data.capacity_reservation_groups #=> Array<CapacityReservationGroup>
    #   resp.data.capacity_reservation_groups[0] #=> Types::CapacityReservationGroup
    #   resp.data.capacity_reservation_groups[0].group_arn #=> String
    #   resp.data.capacity_reservation_groups[0].owner_id #=> String
    def get_groups_for_capacity_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetGroupsForCapacityReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetGroupsForCapacityReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_groups_for_capacity_reservation,
        tracer: tracer
      )
      Telemetry::GetGroupsForCapacityReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_groups_for_capacity_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_groups_for_capacity_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_groups_for_capacity_reservation] #{output.data}")
        output
      end
    end

    # <p>Preview a reservation purchase with configurations that match those of your Dedicated
    #             Host. You must have active Dedicated Hosts in your account before you purchase a
    #             reservation.</p>
    #          <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not
    #             result in the offering being purchased.</p>
    # @param [Hash | Types::GetHostReservationPurchasePreviewInput] params
    #   Request parameters for this operation.
    #   See {Types::GetHostReservationPurchasePreviewInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_host_reservation_purchase_preview(
    #     host_id_set: [
    #       'member'
    #     ], # required
    #     offering_id: 'OfferingId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetHostReservationPurchasePreviewOutput
    #   resp.data.currency_code #=> String, one of ["USD"]
    #   resp.data.purchase #=> Array<Purchase>
    #   resp.data.purchase[0] #=> Types::Purchase
    #   resp.data.purchase[0].currency_code #=> String, one of ["USD"]
    #   resp.data.purchase[0].duration #=> Integer
    #   resp.data.purchase[0].host_id_set #=> Array<String>
    #   resp.data.purchase[0].host_id_set[0] #=> String
    #   resp.data.purchase[0].host_reservation_id #=> String
    #   resp.data.purchase[0].hourly_price #=> String
    #   resp.data.purchase[0].instance_family #=> String
    #   resp.data.purchase[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.purchase[0].upfront_price #=> String
    #   resp.data.total_hourly_price #=> String
    #   resp.data.total_upfront_price #=> String
    def get_host_reservation_purchase_preview(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetHostReservationPurchasePreviewInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetHostReservationPurchasePreview.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_host_reservation_purchase_preview,
        tracer: tracer
      )
      Telemetry::GetHostReservationPurchasePreview.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_host_reservation_purchase_preview] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_host_reservation_purchase_preview] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_host_reservation_purchase_preview] #{output.data}")
        output
      end
    end

    # <p>Gets the current state of <i>block public access for AMIs</i> at the account
    #       level in the specified Amazon Web Services Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html#block-public-access-to-amis">Block
    #         public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::GetImageBlockPublicAccessStateInput] params
    #   Request parameters for this operation.
    #   See {Types::GetImageBlockPublicAccessStateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_image_block_public_access_state(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetImageBlockPublicAccessStateOutput
    #   resp.data.image_block_public_access_state #=> String
    def get_image_block_public_access_state(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetImageBlockPublicAccessStateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetImageBlockPublicAccessState.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_image_block_public_access_state,
        tracer: tracer
      )
      Telemetry::GetImageBlockPublicAccessState.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_image_block_public_access_state] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_image_block_public_access_state] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_image_block_public_access_state] #{output.data}")
        output
      end
    end

    # <p>Returns a list of instance types with the specified instance attributes. You can
    #          use the response to preview the instance types without launching instances. Note
    #          that the response does not consider capacity.</p>
    #          <p>When you specify multiple parameters, you get instance types that satisfy all of the
    #          specified parameters. If you specify multiple values for a parameter, you get instance
    #          types that satisfy any of the specified values.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html#spotfleet-get-instance-types-from-instance-requirements">Preview instance types with specified attributes</a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Attribute-based instance type selection for EC2 Fleet</a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html">Attribute-based instance type selection for Spot Fleet</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot
    #             placement score</a> in the <i>Amazon EC2 User Guide</i>, and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating an
    #             Auto Scaling group using attribute-based instance type selection</a> in the
    #             <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    # @param [Hash | Types::GetInstanceTypesFromInstanceRequirementsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetInstanceTypesFromInstanceRequirementsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_instance_types_from_instance_requirements(
    #     dry_run: false,
    #     architecture_types: [
    #       'i386' # accepts ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #     ], # required
    #     virtualization_types: [
    #       'hvm' # accepts ["hvm", "paravirtual"]
    #     ], # required
    #     instance_requirements: {
    #       v_cpu_count: {
    #         min: 1, # required
    #         max: 1
    #       }, # required
    #       memory_mi_b: {
    #         min: 1, # required
    #         max: 1
    #       }, # required
    #       cpu_manufacturers: [
    #         'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #       ],
    #       memory_gi_b_per_v_cpu: {
    #         min: 1.0,
    #         max: 1.0
    #       },
    #       excluded_instance_types: [
    #         'member'
    #       ],
    #       instance_generations: [
    #         'current' # accepts ["current", "previous"]
    #       ],
    #       spot_max_price_percentage_over_lowest_price: 1,
    #       on_demand_max_price_percentage_over_lowest_price: 1,
    #       bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #       burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #       require_hibernate_support: false,
    #       network_interface_count: {
    #         min: 1,
    #         max: 1
    #       },
    #       local_storage: 'included', # accepts ["included", "required", "excluded"]
    #       local_storage_types: [
    #         'hdd' # accepts ["hdd", "ssd"]
    #       ],
    #       total_local_storage_gb: {
    #         min: 1.0,
    #         max: 1.0
    #       },
    #       baseline_ebs_bandwidth_mbps: {
    #         min: 1,
    #         max: 1
    #       },
    #       accelerator_types: [
    #         'gpu' # accepts ["gpu", "fpga", "inference"]
    #       ],
    #       accelerator_count: {
    #         min: 1,
    #         max: 1
    #       },
    #       accelerator_manufacturers: [
    #         'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #       ],
    #       accelerator_names: [
    #         'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #       ],
    #       accelerator_total_memory_mi_b: {
    #         min: 1,
    #         max: 1
    #       },
    #       network_bandwidth_gbps: {
    #         min: 1.0,
    #         max: 1.0
    #       },
    #       allowed_instance_types: [
    #         'member'
    #       ],
    #       max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #     }, # required
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetInstanceTypesFromInstanceRequirementsOutput
    #   resp.data.instance_types #=> Array<InstanceTypeInfoFromInstanceRequirements>
    #   resp.data.instance_types[0] #=> Types::InstanceTypeInfoFromInstanceRequirements
    #   resp.data.instance_types[0].instance_type #=> String
    #   resp.data.next_token #=> String
    def get_instance_types_from_instance_requirements(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetInstanceTypesFromInstanceRequirementsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetInstanceTypesFromInstanceRequirements.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_instance_types_from_instance_requirements,
        tracer: tracer
      )
      Telemetry::GetInstanceTypesFromInstanceRequirements.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_instance_types_from_instance_requirements] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_instance_types_from_instance_requirements] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_instance_types_from_instance_requirements] #{output.data}")
        output
      end
    end

    # <p>A binary representation of the UEFI variable store. Only non-volatile variables are
    #             stored. This is a base64 encoded and zlib compressed binary value that must be properly
    #             encoded.</p>
    #          <p>When you use <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/register-image.html">register-image</a> to create
    #             an AMI, you can create an exact copy of your variable store by passing the UEFI data in
    #             the <code>UefiData</code> parameter. You can modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on
    #             GitHub. You can use the tool to convert the UEFI data into a human-readable format
    #             (JSON), which you can inspect and modify, and then convert back into the binary format
    #             to use with register-image.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::GetInstanceUefiDataInput] params
    #   Request parameters for this operation.
    #   See {Types::GetInstanceUefiDataInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_instance_uefi_data(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetInstanceUefiDataOutput
    #   resp.data.instance_id #=> String
    #   resp.data.uefi_data #=> String
    def get_instance_uefi_data(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetInstanceUefiDataInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetInstanceUefiData.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_instance_uefi_data,
        tracer: tracer
      )
      Telemetry::GetInstanceUefiData.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_instance_uefi_data] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_instance_uefi_data] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_instance_uefi_data] #{output.data}")
        output
      end
    end

    # <p>Retrieve historical information about a CIDR within an IPAM scope. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/view-history-cidr-ipam.html">View the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    # @param [Hash | Types::GetIpamAddressHistoryInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamAddressHistoryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_address_history(
    #     dry_run: false,
    #     cidr: 'Cidr', # required
    #     ipam_scope_id: 'IpamScopeId', # required
    #     vpc_id: 'VpcId',
    #     start_time: Time.now,
    #     end_time: Time.now,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamAddressHistoryOutput
    #   resp.data.history_records #=> Array<IpamAddressHistoryRecord>
    #   resp.data.history_records[0] #=> Types::IpamAddressHistoryRecord
    #   resp.data.history_records[0].resource_owner_id #=> String
    #   resp.data.history_records[0].resource_region #=> String
    #   resp.data.history_records[0].resource_type #=> String, one of ["eip", "vpc", "subnet", "network-interface", "instance"]
    #   resp.data.history_records[0].resource_id #=> String
    #   resp.data.history_records[0].resource_cidr #=> String
    #   resp.data.history_records[0].resource_name #=> String
    #   resp.data.history_records[0].resource_compliance_status #=> String, one of ["compliant", "noncompliant", "unmanaged", "ignored"]
    #   resp.data.history_records[0].resource_overlap_status #=> String, one of ["overlapping", "nonoverlapping", "ignored"]
    #   resp.data.history_records[0].vpc_id #=> String
    #   resp.data.history_records[0].sampled_start_time #=> Time
    #   resp.data.history_records[0].sampled_end_time #=> Time
    #   resp.data.next_token #=> String
    def get_ipam_address_history(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamAddressHistoryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamAddressHistory.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_address_history,
        tracer: tracer
      )
      Telemetry::GetIpamAddressHistory.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_address_history] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_address_history] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_address_history] #{output.data}")
        output
      end
    end

    # <p>Gets IPAM discovered accounts. A discovered account is an Amazon Web Services account that is monitored under a resource discovery. If you have integrated IPAM with Amazon Web Services Organizations, all accounts in the organization are discovered accounts. Only the IPAM account can get all discovered accounts in the organization.</p>
    # @param [Hash | Types::GetIpamDiscoveredAccountsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamDiscoveredAccountsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_discovered_accounts(
    #     dry_run: false,
    #     ipam_resource_discovery_id: 'IpamResourceDiscoveryId', # required
    #     discovery_region: 'DiscoveryRegion', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamDiscoveredAccountsOutput
    #   resp.data.ipam_discovered_accounts #=> Array<IpamDiscoveredAccount>
    #   resp.data.ipam_discovered_accounts[0] #=> Types::IpamDiscoveredAccount
    #   resp.data.ipam_discovered_accounts[0].account_id #=> String
    #   resp.data.ipam_discovered_accounts[0].discovery_region #=> String
    #   resp.data.ipam_discovered_accounts[0].failure_reason #=> Types::IpamDiscoveryFailureReason
    #   resp.data.ipam_discovered_accounts[0].failure_reason.code #=> String, one of ["assume-role-failure", "throttling-failure", "unauthorized-failure"]
    #   resp.data.ipam_discovered_accounts[0].failure_reason.message #=> String
    #   resp.data.ipam_discovered_accounts[0].last_attempted_discovery_time #=> Time
    #   resp.data.ipam_discovered_accounts[0].last_successful_discovery_time #=> Time
    #   resp.data.next_token #=> String
    def get_ipam_discovered_accounts(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamDiscoveredAccountsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamDiscoveredAccounts.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_discovered_accounts,
        tracer: tracer
      )
      Telemetry::GetIpamDiscoveredAccounts.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_accounts] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_accounts] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_accounts] #{output.data}")
        output
      end
    end

    # <p>Gets the public IP addresses that have been discovered by IPAM.</p>
    # @param [Hash | Types::GetIpamDiscoveredPublicAddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamDiscoveredPublicAddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_discovered_public_addresses(
    #     dry_run: false,
    #     ipam_resource_discovery_id: 'IpamResourceDiscoveryId', # required
    #     address_region: 'AddressRegion', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamDiscoveredPublicAddressesOutput
    #   resp.data.ipam_discovered_public_addresses #=> Array<IpamDiscoveredPublicAddress>
    #   resp.data.ipam_discovered_public_addresses[0] #=> Types::IpamDiscoveredPublicAddress
    #   resp.data.ipam_discovered_public_addresses[0].ipam_resource_discovery_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].address_region #=> String
    #   resp.data.ipam_discovered_public_addresses[0].address #=> String
    #   resp.data.ipam_discovered_public_addresses[0].address_owner_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].address_allocation_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].association_status #=> String, one of ["associated", "disassociated"]
    #   resp.data.ipam_discovered_public_addresses[0].address_type #=> String, one of ["service-managed-ip", "service-managed-byoip", "amazon-owned-eip", "byoip", "ec2-public-ip"]
    #   resp.data.ipam_discovered_public_addresses[0].service #=> String, one of ["nat-gateway", "database-migration-service", "redshift", "elastic-container-service", "relational-database-service", "site-to-site-vpn", "load-balancer", "global-accelerator", "other"]
    #   resp.data.ipam_discovered_public_addresses[0].service_resource #=> String
    #   resp.data.ipam_discovered_public_addresses[0].vpc_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].subnet_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].public_ipv4_pool_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].network_interface_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].network_interface_description #=> String
    #   resp.data.ipam_discovered_public_addresses[0].instance_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].tags #=> Types::IpamPublicAddressTags
    #   resp.data.ipam_discovered_public_addresses[0].tags.eip_tags #=> Array<IpamPublicAddressTag>
    #   resp.data.ipam_discovered_public_addresses[0].tags.eip_tags[0] #=> Types::IpamPublicAddressTag
    #   resp.data.ipam_discovered_public_addresses[0].tags.eip_tags[0].key #=> String
    #   resp.data.ipam_discovered_public_addresses[0].tags.eip_tags[0].value #=> String
    #   resp.data.ipam_discovered_public_addresses[0].network_border_group #=> String
    #   resp.data.ipam_discovered_public_addresses[0].security_groups #=> Array<IpamPublicAddressSecurityGroup>
    #   resp.data.ipam_discovered_public_addresses[0].security_groups[0] #=> Types::IpamPublicAddressSecurityGroup
    #   resp.data.ipam_discovered_public_addresses[0].security_groups[0].group_name #=> String
    #   resp.data.ipam_discovered_public_addresses[0].security_groups[0].group_id #=> String
    #   resp.data.ipam_discovered_public_addresses[0].sample_time #=> Time
    #   resp.data.oldest_sample_time #=> Time
    #   resp.data.next_token #=> String
    def get_ipam_discovered_public_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamDiscoveredPublicAddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamDiscoveredPublicAddresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_discovered_public_addresses,
        tracer: tracer
      )
      Telemetry::GetIpamDiscoveredPublicAddresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_public_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_public_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_public_addresses] #{output.data}")
        output
      end
    end

    # <p>Returns the resource CIDRs that are monitored as part of a resource discovery. A discovered resource is a resource CIDR monitored under a resource discovery. The following resources can be discovered: VPCs, Public IPv4 pools, VPC subnets, and Elastic IP addresses. </p>
    # @param [Hash | Types::GetIpamDiscoveredResourceCidrsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamDiscoveredResourceCidrsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_discovered_resource_cidrs(
    #     dry_run: false,
    #     ipam_resource_discovery_id: 'IpamResourceDiscoveryId', # required
    #     resource_region: 'ResourceRegion', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamDiscoveredResourceCidrsOutput
    #   resp.data.ipam_discovered_resource_cidrs #=> Array<IpamDiscoveredResourceCidr>
    #   resp.data.ipam_discovered_resource_cidrs[0] #=> Types::IpamDiscoveredResourceCidr
    #   resp.data.ipam_discovered_resource_cidrs[0].ipam_resource_discovery_id #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_region #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_id #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_owner_id #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_cidr #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_type #=> String, one of ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool", "eni"]
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_tags[0].key #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].resource_tags[0].value #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].ip_usage #=> Float
    #   resp.data.ipam_discovered_resource_cidrs[0].vpc_id #=> String
    #   resp.data.ipam_discovered_resource_cidrs[0].sample_time #=> Time
    #   resp.data.next_token #=> String
    def get_ipam_discovered_resource_cidrs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamDiscoveredResourceCidrsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamDiscoveredResourceCidrs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_discovered_resource_cidrs,
        tracer: tracer
      )
      Telemetry::GetIpamDiscoveredResourceCidrs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_resource_cidrs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_resource_cidrs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_discovered_resource_cidrs] #{output.data}")
        output
      end
    end

    # <p>Get a list of all the CIDR allocations in an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations.</p>
    #          <note>
    #             <p>If you use this action after <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AllocateIpamPoolCidr.html">AllocateIpamPoolCidr</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>, note that all EC2 API actions follow an <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/query-api-troubleshooting.html#eventual-consistency">eventual consistency</a> model.</p>
    #          </note>
    # @param [Hash | Types::GetIpamPoolAllocationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamPoolAllocationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_pool_allocations(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     ipam_pool_allocation_id: 'IpamPoolAllocationId',
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamPoolAllocationsOutput
    #   resp.data.ipam_pool_allocations #=> Array<IpamPoolAllocation>
    #   resp.data.ipam_pool_allocations[0] #=> Types::IpamPoolAllocation
    #   resp.data.ipam_pool_allocations[0].cidr #=> String
    #   resp.data.ipam_pool_allocations[0].ipam_pool_allocation_id #=> String
    #   resp.data.ipam_pool_allocations[0].description #=> String
    #   resp.data.ipam_pool_allocations[0].resource_id #=> String
    #   resp.data.ipam_pool_allocations[0].resource_type #=> String, one of ["ipam-pool", "vpc", "ec2-public-ipv4-pool", "custom", "subnet"]
    #   resp.data.ipam_pool_allocations[0].resource_region #=> String
    #   resp.data.ipam_pool_allocations[0].resource_owner #=> String
    #   resp.data.next_token #=> String
    def get_ipam_pool_allocations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamPoolAllocationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamPoolAllocations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_pool_allocations,
        tracer: tracer
      )
      Telemetry::GetIpamPoolAllocations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_pool_allocations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_pool_allocations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_pool_allocations] #{output.data}")
        output
      end
    end

    # <p>Get the CIDRs provisioned to an IPAM pool.</p>
    # @param [Hash | Types::GetIpamPoolCidrsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamPoolCidrsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_pool_cidrs(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamPoolCidrsOutput
    #   resp.data.ipam_pool_cidrs #=> Array<IpamPoolCidr>
    #   resp.data.ipam_pool_cidrs[0] #=> Types::IpamPoolCidr
    #   resp.data.ipam_pool_cidrs[0].cidr #=> String
    #   resp.data.ipam_pool_cidrs[0].state #=> String, one of ["pending-provision", "provisioned", "failed-provision", "pending-deprovision", "deprovisioned", "failed-deprovision", "pending-import", "failed-import"]
    #   resp.data.ipam_pool_cidrs[0].failure_reason #=> Types::IpamPoolCidrFailureReason
    #   resp.data.ipam_pool_cidrs[0].failure_reason.code #=> String, one of ["cidr-not-available", "limit-exceeded"]
    #   resp.data.ipam_pool_cidrs[0].failure_reason.message #=> String
    #   resp.data.ipam_pool_cidrs[0].ipam_pool_cidr_id #=> String
    #   resp.data.ipam_pool_cidrs[0].netmask_length #=> Integer
    #   resp.data.next_token #=> String
    def get_ipam_pool_cidrs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamPoolCidrsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamPoolCidrs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_pool_cidrs,
        tracer: tracer
      )
      Telemetry::GetIpamPoolCidrs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_pool_cidrs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_pool_cidrs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_pool_cidrs] #{output.data}")
        output
      end
    end

    # <p>Returns resource CIDRs managed by IPAM in a given scope. If an IPAM is associated with more than one resource discovery, the resource CIDRs across all of the resource discoveries is returned. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::GetIpamResourceCidrsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetIpamResourceCidrsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_ipam_resource_cidrs(
    #     dry_run: false,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     ipam_scope_id: 'IpamScopeId', # required
    #     ipam_pool_id: 'IpamPoolId',
    #     resource_id: 'ResourceId',
    #     resource_type: 'vpc', # accepts ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool", "eni"]
    #     resource_tag: {
    #       key: 'Key',
    #       value: 'Value'
    #     },
    #     resource_owner: 'ResourceOwner'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetIpamResourceCidrsOutput
    #   resp.data.next_token #=> String
    #   resp.data.ipam_resource_cidrs #=> Array<IpamResourceCidr>
    #   resp.data.ipam_resource_cidrs[0] #=> Types::IpamResourceCidr
    #   resp.data.ipam_resource_cidrs[0].ipam_id #=> String
    #   resp.data.ipam_resource_cidrs[0].ipam_scope_id #=> String
    #   resp.data.ipam_resource_cidrs[0].ipam_pool_id #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_region #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_owner_id #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_id #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_name #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_cidr #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_type #=> String, one of ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool", "eni"]
    #   resp.data.ipam_resource_cidrs[0].resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_resource_cidrs[0].resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_resource_cidrs[0].resource_tags[0].key #=> String
    #   resp.data.ipam_resource_cidrs[0].resource_tags[0].value #=> String
    #   resp.data.ipam_resource_cidrs[0].ip_usage #=> Float
    #   resp.data.ipam_resource_cidrs[0].compliance_status #=> String, one of ["compliant", "noncompliant", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidrs[0].management_state #=> String, one of ["managed", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidrs[0].overlap_status #=> String, one of ["overlapping", "nonoverlapping", "ignored"]
    #   resp.data.ipam_resource_cidrs[0].vpc_id #=> String
    def get_ipam_resource_cidrs(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetIpamResourceCidrsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetIpamResourceCidrs.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_ipam_resource_cidrs,
        tracer: tracer
      )
      Telemetry::GetIpamResourceCidrs.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_resource_cidrs] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_ipam_resource_cidrs] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_ipam_resource_cidrs] #{output.data}")
        output
      end
    end

    # <p>Retrieves the configuration data of the specified instance. You can use this data to
    #             create a launch template. </p>
    #          <p>This action calls on other describe actions to get instance information. Depending on
    #             your instance configuration, you may need to allow the following actions in your IAM
    #             policy: <code>DescribeSpotInstanceRequests</code>, <code>DescribeInstanceCreditSpecifications</code>,
    #             <code>DescribeVolumes</code>, and <code>DescribeInstanceAttribute</code>. Or,
    #             you can allow <code>describe*</code> depending on your instance requirements.</p>
    # @param [Hash | Types::GetLaunchTemplateDataInput] params
    #   Request parameters for this operation.
    #   See {Types::GetLaunchTemplateDataInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_launch_template_data(
    #     dry_run: false,
    #     instance_id: 'InstanceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetLaunchTemplateDataOutput
    #   resp.data.launch_template_data #=> Types::ResponseLaunchTemplateData
    #   resp.data.launch_template_data.kernel_id #=> String
    #   resp.data.launch_template_data.ebs_optimized #=> Boolean
    #   resp.data.launch_template_data.iam_instance_profile #=> Types::LaunchTemplateIamInstanceProfileSpecification
    #   resp.data.launch_template_data.iam_instance_profile.arn #=> String
    #   resp.data.launch_template_data.iam_instance_profile.name #=> String
    #   resp.data.launch_template_data.block_device_mappings #=> Array<LaunchTemplateBlockDeviceMapping>
    #   resp.data.launch_template_data.block_device_mappings[0] #=> Types::LaunchTemplateBlockDeviceMapping
    #   resp.data.launch_template_data.block_device_mappings[0].device_name #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].virtual_name #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].ebs #=> Types::LaunchTemplateEbsBlockDevice
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.launch_template_data.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.launch_template_data.block_device_mappings[0].no_device #=> String
    #   resp.data.launch_template_data.network_interfaces #=> Array<LaunchTemplateInstanceNetworkInterfaceSpecification>
    #   resp.data.launch_template_data.network_interfaces[0] #=> Types::LaunchTemplateInstanceNetworkInterfaceSpecification
    #   resp.data.launch_template_data.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].description #=> String
    #   resp.data.launch_template_data.network_interfaces[0].device_index #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].groups #=> Array<String>
    #   resp.data.launch_template_data.network_interfaces[0].groups[0] #=> String
    #   resp.data.launch_template_data.network_interfaces[0].interface_type #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].network_interface_id #=> String
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_address #=> String
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.launch_template_data.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].subnet_id #=> String
    #   resp.data.launch_template_data.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationResponse>
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationResponse
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationResponse>
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationResponse
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.launch_template_data.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].primary_ipv6 #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].ena_srd_specification #=> Types::LaunchTemplateEnaSrdSpecification
    #   resp.data.launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification #=> Types::LaunchTemplateEnaSrdUdpSpecification
    #   resp.data.launch_template_data.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.launch_template_data.network_interfaces[0].connection_tracking_specification #=> Types::ConnectionTrackingSpecification
    #   resp.data.launch_template_data.network_interfaces[0].connection_tracking_specification.tcp_established_timeout #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].connection_tracking_specification.udp_timeout #=> Integer
    #   resp.data.launch_template_data.network_interfaces[0].connection_tracking_specification.udp_stream_timeout #=> Integer
    #   resp.data.launch_template_data.image_id #=> String
    #   resp.data.launch_template_data.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.launch_template_data.key_name #=> String
    #   resp.data.launch_template_data.monitoring #=> Types::LaunchTemplatesMonitoring
    #   resp.data.launch_template_data.monitoring.enabled #=> Boolean
    #   resp.data.launch_template_data.placement #=> Types::LaunchTemplatePlacement
    #   resp.data.launch_template_data.placement.availability_zone #=> String
    #   resp.data.launch_template_data.placement.affinity #=> String
    #   resp.data.launch_template_data.placement.group_name #=> String
    #   resp.data.launch_template_data.placement.host_id #=> String
    #   resp.data.launch_template_data.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.launch_template_data.placement.spread_domain #=> String
    #   resp.data.launch_template_data.placement.host_resource_group_arn #=> String
    #   resp.data.launch_template_data.placement.partition_number #=> Integer
    #   resp.data.launch_template_data.placement.group_id #=> String
    #   resp.data.launch_template_data.ram_disk_id #=> String
    #   resp.data.launch_template_data.disable_api_termination #=> Boolean
    #   resp.data.launch_template_data.instance_initiated_shutdown_behavior #=> String, one of ["stop", "terminate"]
    #   resp.data.launch_template_data.user_data #=> String
    #   resp.data.launch_template_data.tag_specifications #=> Array<LaunchTemplateTagSpecification>
    #   resp.data.launch_template_data.tag_specifications[0] #=> Types::LaunchTemplateTagSpecification
    #   resp.data.launch_template_data.tag_specifications[0].resource_type #=> String, one of ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #   resp.data.launch_template_data.tag_specifications[0].tags #=> Array<Tag>
    #   resp.data.launch_template_data.tag_specifications[0].tags[0] #=> Types::Tag
    #   resp.data.launch_template_data.tag_specifications[0].tags[0].key #=> String
    #   resp.data.launch_template_data.tag_specifications[0].tags[0].value #=> String
    #   resp.data.launch_template_data.elastic_gpu_specifications #=> Array<ElasticGpuSpecificationResponse>
    #   resp.data.launch_template_data.elastic_gpu_specifications[0] #=> Types::ElasticGpuSpecificationResponse
    #   resp.data.launch_template_data.elastic_gpu_specifications[0].type #=> String
    #   resp.data.launch_template_data.elastic_inference_accelerators #=> Array<LaunchTemplateElasticInferenceAcceleratorResponse>
    #   resp.data.launch_template_data.elastic_inference_accelerators[0] #=> Types::LaunchTemplateElasticInferenceAcceleratorResponse
    #   resp.data.launch_template_data.elastic_inference_accelerators[0].type #=> String
    #   resp.data.launch_template_data.elastic_inference_accelerators[0].count #=> Integer
    #   resp.data.launch_template_data.security_group_ids #=> Array<String>
    #   resp.data.launch_template_data.security_group_ids[0] #=> String
    #   resp.data.launch_template_data.security_groups #=> Array<String>
    #   resp.data.launch_template_data.instance_market_options #=> Types::LaunchTemplateInstanceMarketOptions
    #   resp.data.launch_template_data.instance_market_options.market_type #=> String, one of ["spot", "capacity-block"]
    #   resp.data.launch_template_data.instance_market_options.spot_options #=> Types::LaunchTemplateSpotMarketOptions
    #   resp.data.launch_template_data.instance_market_options.spot_options.max_price #=> String
    #   resp.data.launch_template_data.instance_market_options.spot_options.spot_instance_type #=> String, one of ["one-time", "persistent"]
    #   resp.data.launch_template_data.instance_market_options.spot_options.block_duration_minutes #=> Integer
    #   resp.data.launch_template_data.instance_market_options.spot_options.valid_until #=> Time
    #   resp.data.launch_template_data.instance_market_options.spot_options.instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    #   resp.data.launch_template_data.credit_specification #=> Types::CreditSpecification
    #   resp.data.launch_template_data.credit_specification.cpu_credits #=> String
    #   resp.data.launch_template_data.cpu_options #=> Types::LaunchTemplateCpuOptions
    #   resp.data.launch_template_data.cpu_options.core_count #=> Integer
    #   resp.data.launch_template_data.cpu_options.threads_per_core #=> Integer
    #   resp.data.launch_template_data.cpu_options.amd_sev_snp #=> String, one of ["enabled", "disabled"]
    #   resp.data.launch_template_data.capacity_reservation_specification #=> Types::LaunchTemplateCapacityReservationSpecificationResponse
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.launch_template_data.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.launch_template_data.license_specifications #=> Array<LaunchTemplateLicenseConfiguration>
    #   resp.data.launch_template_data.license_specifications[0] #=> Types::LaunchTemplateLicenseConfiguration
    #   resp.data.launch_template_data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.launch_template_data.hibernation_options #=> Types::LaunchTemplateHibernationOptions
    #   resp.data.launch_template_data.hibernation_options.configured #=> Boolean
    #   resp.data.launch_template_data.metadata_options #=> Types::LaunchTemplateInstanceMetadataOptions
    #   resp.data.launch_template_data.metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.launch_template_data.metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.launch_template_data.metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.launch_template_data.metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_data.metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_data.metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.launch_template_data.enclave_options #=> Types::LaunchTemplateEnclaveOptions
    #   resp.data.launch_template_data.enclave_options.enabled #=> Boolean
    #   resp.data.launch_template_data.instance_requirements #=> Types::InstanceRequirements
    #   resp.data.launch_template_data.instance_requirements.v_cpu_count #=> Types::VCpuCountRange
    #   resp.data.launch_template_data.instance_requirements.v_cpu_count.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.v_cpu_count.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.memory_mi_b #=> Types::MemoryMiB
    #   resp.data.launch_template_data.instance_requirements.memory_mi_b.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.memory_mi_b.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.cpu_manufacturers #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.cpu_manufacturers[0] #=> String, one of ["intel", "amd", "amazon-web-services"]
    #   resp.data.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu #=> Types::MemoryGiBPerVCpu
    #   resp.data.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.min #=> Float
    #   resp.data.launch_template_data.instance_requirements.memory_gi_b_per_v_cpu.max #=> Float
    #   resp.data.launch_template_data.instance_requirements.excluded_instance_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.excluded_instance_types[0] #=> String
    #   resp.data.launch_template_data.instance_requirements.instance_generations #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.instance_generations[0] #=> String, one of ["current", "previous"]
    #   resp.data.launch_template_data.instance_requirements.spot_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_data.instance_requirements.on_demand_max_price_percentage_over_lowest_price #=> Integer
    #   resp.data.launch_template_data.instance_requirements.bare_metal #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_data.instance_requirements.burstable_performance #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_data.instance_requirements.require_hibernate_support #=> Boolean
    #   resp.data.launch_template_data.instance_requirements.network_interface_count #=> Types::NetworkInterfaceCount
    #   resp.data.launch_template_data.instance_requirements.network_interface_count.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.network_interface_count.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.local_storage #=> String, one of ["included", "required", "excluded"]
    #   resp.data.launch_template_data.instance_requirements.local_storage_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.local_storage_types[0] #=> String, one of ["hdd", "ssd"]
    #   resp.data.launch_template_data.instance_requirements.total_local_storage_gb #=> Types::TotalLocalStorageGB
    #   resp.data.launch_template_data.instance_requirements.total_local_storage_gb.min #=> Float
    #   resp.data.launch_template_data.instance_requirements.total_local_storage_gb.max #=> Float
    #   resp.data.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps #=> Types::BaselineEbsBandwidthMbps
    #   resp.data.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.baseline_ebs_bandwidth_mbps.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.accelerator_types[0] #=> String, one of ["gpu", "fpga", "inference"]
    #   resp.data.launch_template_data.instance_requirements.accelerator_count #=> Types::AcceleratorCount
    #   resp.data.launch_template_data.instance_requirements.accelerator_count.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_count.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_manufacturers #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.accelerator_manufacturers[0] #=> String, one of ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #   resp.data.launch_template_data.instance_requirements.accelerator_names #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.accelerator_names[0] #=> String, one of ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #   resp.data.launch_template_data.instance_requirements.accelerator_total_memory_mi_b #=> Types::AcceleratorTotalMemoryMiB
    #   resp.data.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.min #=> Integer
    #   resp.data.launch_template_data.instance_requirements.accelerator_total_memory_mi_b.max #=> Integer
    #   resp.data.launch_template_data.instance_requirements.network_bandwidth_gbps #=> Types::NetworkBandwidthGbps
    #   resp.data.launch_template_data.instance_requirements.network_bandwidth_gbps.min #=> Float
    #   resp.data.launch_template_data.instance_requirements.network_bandwidth_gbps.max #=> Float
    #   resp.data.launch_template_data.instance_requirements.allowed_instance_types #=> Array<String>
    #   resp.data.launch_template_data.instance_requirements.allowed_instance_types[0] #=> String
    #   resp.data.launch_template_data.instance_requirements.max_spot_price_as_percentage_of_optimal_on_demand_price #=> Integer
    #   resp.data.launch_template_data.private_dns_name_options #=> Types::LaunchTemplatePrivateDnsNameOptions
    #   resp.data.launch_template_data.private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.launch_template_data.private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.launch_template_data.private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.launch_template_data.maintenance_options #=> Types::LaunchTemplateInstanceMaintenanceOptions
    #   resp.data.launch_template_data.maintenance_options.auto_recovery #=> String, one of ["default", "disabled"]
    #   resp.data.launch_template_data.disable_api_stop #=> Boolean
    # @example To get the launch template data for an instance
    #   # This example gets the launch template data for the specified instance.
    #   resp = client.get_launch_template_data({
    #     instance_id: "0123d646e8048babc"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_template_data: {
    #       network_interfaces: [
    #         {
    #           device_index: 0,
    #           groups: [
    #             "sg-d14e1bb4"
    #           ],
    #           ipv6_addresses: [
    #
    #           ],
    #           associate_public_ip_address: false,
    #           network_interface_id: "eni-4338b5a9",
    #           delete_on_termination: true,
    #           description: "",
    #           private_ip_address: "10.0.3.233",
    #           subnet_id: "subnet-5264e837",
    #           private_ip_addresses: [
    #             {
    #               private_ip_address: "10.0.3.233",
    #               primary: true
    #             }
    #           ]
    #         }
    #       ],
    #       placement: {
    #         group_name: "",
    #         tenancy: "default",
    #         availability_zone: "us-east-2b"
    #       },
    #       instance_type: "t2.medium",
    #       ebs_optimized: false,
    #       block_device_mappings: [
    #         {
    #           ebs: {
    #             volume_type: "gp2",
    #             encrypted: false,
    #             iops: 100,
    #             volume_size: 8,
    #             snapshot_id: "snap-02594938353ef77d3",
    #             delete_on_termination: true
    #           },
    #           device_name: "/dev/xvda"
    #         }
    #       ],
    #       key_name: "my-key-pair",
    #       image_id: "ami-32cf7b4a",
    #       monitoring: {
    #         enabled: false
    #       }
    #     }
    #   }
    def get_launch_template_data(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetLaunchTemplateDataInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetLaunchTemplateData.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_launch_template_data,
        tracer: tracer
      )
      Telemetry::GetLaunchTemplateData.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_launch_template_data] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_launch_template_data] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_launch_template_data] #{output.data}")
        output
      end
    end

    # <p>Gets information about the resources that are associated with the specified managed prefix list.</p>
    # @param [Hash | Types::GetManagedPrefixListAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetManagedPrefixListAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_managed_prefix_list_associations(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetManagedPrefixListAssociationsOutput
    #   resp.data.prefix_list_associations #=> Array<PrefixListAssociation>
    #   resp.data.prefix_list_associations[0] #=> Types::PrefixListAssociation
    #   resp.data.prefix_list_associations[0].resource_id #=> String
    #   resp.data.prefix_list_associations[0].resource_owner #=> String
    #   resp.data.next_token #=> String
    def get_managed_prefix_list_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetManagedPrefixListAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetManagedPrefixListAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_managed_prefix_list_associations,
        tracer: tracer
      )
      Telemetry::GetManagedPrefixListAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_managed_prefix_list_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_managed_prefix_list_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_managed_prefix_list_associations] #{output.data}")
        output
      end
    end

    # <p>Gets information about the entries for a specified managed prefix list.</p>
    # @param [Hash | Types::GetManagedPrefixListEntriesInput] params
    #   Request parameters for this operation.
    #   See {Types::GetManagedPrefixListEntriesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_managed_prefix_list_entries(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     target_version: 1,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetManagedPrefixListEntriesOutput
    #   resp.data.entries #=> Array<PrefixListEntry>
    #   resp.data.entries[0] #=> Types::PrefixListEntry
    #   resp.data.entries[0].cidr #=> String
    #   resp.data.entries[0].description #=> String
    #   resp.data.next_token #=> String
    def get_managed_prefix_list_entries(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetManagedPrefixListEntriesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetManagedPrefixListEntries.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_managed_prefix_list_entries,
        tracer: tracer
      )
      Telemetry::GetManagedPrefixListEntries.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_managed_prefix_list_entries] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_managed_prefix_list_entries] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_managed_prefix_list_entries] #{output.data}")
        output
      end
    end

    # <p>Gets the findings for the specified Network Access Scope analysis.</p>
    # @param [Hash | Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetNetworkInsightsAccessScopeAnalysisFindingsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_network_insights_access_scope_analysis_findings(
    #     network_insights_access_scope_analysis_id: 'NetworkInsightsAccessScopeAnalysisId', # required
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetNetworkInsightsAccessScopeAnalysisFindingsOutput
    #   resp.data.network_insights_access_scope_analysis_id #=> String
    #   resp.data.analysis_status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.analysis_findings #=> Array<AccessScopeAnalysisFinding>
    #   resp.data.analysis_findings[0] #=> Types::AccessScopeAnalysisFinding
    #   resp.data.analysis_findings[0].network_insights_access_scope_analysis_id #=> String
    #   resp.data.analysis_findings[0].network_insights_access_scope_id #=> String
    #   resp.data.analysis_findings[0].finding_id #=> String
    #   resp.data.analysis_findings[0].finding_components #=> Array<PathComponent>
    #   resp.data.analysis_findings[0].finding_components[0] #=> Types::PathComponent
    #   resp.data.analysis_findings[0].finding_components[0].sequence_number #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.egress #=> Boolean
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.port_range #=> Types::PortRange
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.port_range.from #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.port_range.to #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.rule_action #=> String
    #   resp.data.analysis_findings[0].finding_components[0].acl_rule.rule_number #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].attached_to.id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].attached_to.arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].attached_to.name #=> String
    #   resp.data.analysis_findings[0].finding_components[0].component #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.destination_addresses #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.destination_addresses[0] #=> String
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.destination_port_ranges #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.source_addresses #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].outbound_header.source_port_ranges #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].inbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.destination_cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.destination_prefix_list_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.egress_only_internet_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.instance_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.nat_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.network_interface_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.origin #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.transit_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.vpc_peering_connection_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.state #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.carrier_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.core_network_arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].route_table_route.local_gateway_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.direction #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.security_group_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.port_range #=> Types::PortRange
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.prefix_list_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].security_group_rule.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].subnet #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].additional_details #=> Array<AdditionalDetail>
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0] #=> Types::AdditionalDetail
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].additional_detail_type #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].component #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].vpc_endpoint_service #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_options #=> Array<RuleOption>
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_options[0] #=> Types::RuleOption
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_options[0].keyword #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_options[0].settings #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_options[0].settings[0] #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_type_pairs #=> Array<RuleGroupTypePair>
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_type_pairs[0] #=> Types::RuleGroupTypePair
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_type_pairs[0].rule_group_arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_type_pairs[0].rule_group_type #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_rule_options_pairs #=> Array<RuleGroupRuleOptionsPair>
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_rule_options_pairs[0] #=> Types::RuleGroupRuleOptionsPair
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_rule_options_pairs[0].rule_group_arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].rule_group_rule_options_pairs[0].rule_options #=> Array<RuleOption>
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].service_name #=> String
    #   resp.data.analysis_findings[0].finding_components[0].additional_details[0].load_balancers #=> Array<AnalysisComponent>
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route #=> Types::TransitGatewayRouteTableRoute
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.destination_cidr #=> String
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.state #=> String
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.route_origin #=> String
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.prefix_list_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.attachment_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.resource_id #=> String
    #   resp.data.analysis_findings[0].finding_components[0].transit_gateway_route_table_route.resource_type #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations #=> Array<Explanation>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0] #=> Types::Explanation
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].acl #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].address #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].addresses #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].availability_zones #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].availability_zones[0] #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].cidrs #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].component #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].customer_gateway #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].destination #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].direction #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].explanation_code #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].ingress_route_table #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].internet_gateway #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].classic_load_balancer_listener #=> Types::AnalysisLoadBalancerListener
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].classic_load_balancer_listener.load_balancer_port #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].classic_load_balancer_listener.instance_port #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_listener_port #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target #=> Types::AnalysisLoadBalancerTarget
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target.address #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target.availability_zone #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target.instance #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target.port #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target_group #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target_groups #=> Array<AnalysisComponent>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].load_balancer_target_port #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].missing_component #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].nat_gateway #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].network_interface #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].packet_field #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].vpc_peering_connection #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].port #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].port_ranges #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].prefix_list #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].protocols #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].route_table #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].security_group #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].security_groups #=> Array<AnalysisComponent>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].state #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].subnet #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].subnet_route_table #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].vpc #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].vpc_endpoint #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].vpn_connection #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].vpn_gateway #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].transit_gateway #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].transit_gateway_route_table #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].transit_gateway_route_table_route #=> Types::TransitGatewayRouteTableRoute
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].transit_gateway_attachment #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].component_account #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].component_region #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule #=> Types::FirewallStatelessRule
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.rule_group_arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.sources #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.destinations #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.source_ports #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.destination_ports #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.protocols #=> Array<Integer>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.protocols[0] #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.rule_action #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateless_rule.priority #=> Integer
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule #=> Types::FirewallStatefulRule
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.rule_group_arn #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.sources #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.destinations #=> Array<String>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.source_ports #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.destination_ports #=> Array<PortRange>
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.protocol #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.rule_action #=> String
    #   resp.data.analysis_findings[0].finding_components[0].explanations[0].firewall_stateful_rule.direction #=> String
    #   resp.data.analysis_findings[0].finding_components[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.analysis_findings[0].finding_components[0].firewall_stateless_rule #=> Types::FirewallStatelessRule
    #   resp.data.analysis_findings[0].finding_components[0].firewall_stateful_rule #=> Types::FirewallStatefulRule
    #   resp.data.analysis_findings[0].finding_components[0].service_name #=> String
    #   resp.data.next_token #=> String
    def get_network_insights_access_scope_analysis_findings(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetNetworkInsightsAccessScopeAnalysisFindingsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetNetworkInsightsAccessScopeAnalysisFindings.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_network_insights_access_scope_analysis_findings,
        tracer: tracer
      )
      Telemetry::GetNetworkInsightsAccessScopeAnalysisFindings.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_network_insights_access_scope_analysis_findings] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_network_insights_access_scope_analysis_findings] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_network_insights_access_scope_analysis_findings] #{output.data}")
        output
      end
    end

    # <p>Gets the content for the specified Network Access Scope.</p>
    # @param [Hash | Types::GetNetworkInsightsAccessScopeContentInput] params
    #   Request parameters for this operation.
    #   See {Types::GetNetworkInsightsAccessScopeContentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_network_insights_access_scope_content(
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetNetworkInsightsAccessScopeContentOutput
    #   resp.data.network_insights_access_scope_content #=> Types::NetworkInsightsAccessScopeContent
    #   resp.data.network_insights_access_scope_content.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_content.match_paths #=> Array<AccessScopePath>
    #   resp.data.network_insights_access_scope_content.match_paths[0] #=> Types::AccessScopePath
    #   resp.data.network_insights_access_scope_content.match_paths[0].source #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement #=> Types::PacketHeaderStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_addresses[0] #=> String
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_addresses #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_ports #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.source_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.destination_prefix_lists #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.packet_header_statement.protocols[0] #=> String, one of ["tcp", "udp"]
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resources #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].source.resource_statement.resource_types #=> Array<String>
    #   resp.data.network_insights_access_scope_content.match_paths[0].destination #=> Types::PathStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources #=> Array<ThroughResourcesStatement>
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0] #=> Types::ThroughResourcesStatement
    #   resp.data.network_insights_access_scope_content.match_paths[0].through_resources[0].resource_statement #=> Types::ResourceStatement
    #   resp.data.network_insights_access_scope_content.exclude_paths #=> Array<AccessScopePath>
    def get_network_insights_access_scope_content(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetNetworkInsightsAccessScopeContentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetNetworkInsightsAccessScopeContent.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_network_insights_access_scope_content,
        tracer: tracer
      )
      Telemetry::GetNetworkInsightsAccessScopeContent.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_network_insights_access_scope_content] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_network_insights_access_scope_content] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_network_insights_access_scope_content] #{output.data}")
        output
      end
    end

    # <p>Retrieves the encrypted administrator password for a running Windows instance.</p>
    #          <p>The Windows password is generated at boot by the <code>EC2Config</code> service or
    #                 <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only
    #             happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #          <p>For the <code>EC2Config</code> service, the password is not generated for rebundled
    #             AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p>
    #          <p>The password is encrypted using the key pair that you specified when you launched the
    #             instance. You must provide the corresponding key pair file.</p>
    #          <p>When you launch an instance, password generation and encryption may take a few
    #             minutes. If you try to retrieve the password before it's available, the output returns
    #             an empty string. We recommend that you wait up to 15 minutes after launching an instance
    #             before trying to retrieve the generated password.</p>
    # @param [Hash | Types::GetPasswordDataInput] params
    #   Request parameters for this operation.
    #   See {Types::GetPasswordDataInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_password_data(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetPasswordDataOutput
    #   resp.data.instance_id #=> String
    #   resp.data.password_data #=> String
    #   resp.data.timestamp #=> Time
    def get_password_data(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetPasswordDataInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetPasswordData.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_password_data,
        tracer: tracer
      )
      Telemetry::GetPasswordData.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_password_data] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_password_data] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_password_data] #{output.data}")
        output
      end
    end

    # <p>Returns a quote and exchange information for exchanging one or more specified
    #             Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange
    #             cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.</p>
    # @param [Hash | Types::GetReservedInstancesExchangeQuoteInput] params
    #   Request parameters for this operation.
    #   See {Types::GetReservedInstancesExchangeQuoteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_reserved_instances_exchange_quote(
    #     dry_run: false,
    #     reserved_instance_ids: [
    #       'member'
    #     ], # required
    #     target_configurations: [
    #       {
    #         instance_count: 1,
    #         offering_id: 'OfferingId' # required
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetReservedInstancesExchangeQuoteOutput
    #   resp.data.currency_code #=> String
    #   resp.data.is_valid_exchange #=> Boolean
    #   resp.data.output_reserved_instances_will_expire_at #=> Time
    #   resp.data.payment_due #=> String
    #   resp.data.reserved_instance_value_rollup #=> Types::ReservationValue
    #   resp.data.reserved_instance_value_rollup.hourly_price #=> String
    #   resp.data.reserved_instance_value_rollup.remaining_total_value #=> String
    #   resp.data.reserved_instance_value_rollup.remaining_upfront_value #=> String
    #   resp.data.reserved_instance_value_set #=> Array<ReservedInstanceReservationValue>
    #   resp.data.reserved_instance_value_set[0] #=> Types::ReservedInstanceReservationValue
    #   resp.data.reserved_instance_value_set[0].reservation_value #=> Types::ReservationValue
    #   resp.data.reserved_instance_value_set[0].reserved_instance_id #=> String
    #   resp.data.target_configuration_value_rollup #=> Types::ReservationValue
    #   resp.data.target_configuration_value_set #=> Array<TargetReservationValue>
    #   resp.data.target_configuration_value_set[0] #=> Types::TargetReservationValue
    #   resp.data.target_configuration_value_set[0].reservation_value #=> Types::ReservationValue
    #   resp.data.target_configuration_value_set[0].target_configuration #=> Types::TargetConfiguration
    #   resp.data.target_configuration_value_set[0].target_configuration.instance_count #=> Integer
    #   resp.data.target_configuration_value_set[0].target_configuration.offering_id #=> String
    #   resp.data.validation_failure_reason #=> String
    def get_reserved_instances_exchange_quote(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetReservedInstancesExchangeQuoteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetReservedInstancesExchangeQuote.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_reserved_instances_exchange_quote,
        tracer: tracer
      )
      Telemetry::GetReservedInstancesExchangeQuote.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_reserved_instances_exchange_quote] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_reserved_instances_exchange_quote] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_reserved_instances_exchange_quote] #{output.data}")
        output
      end
    end

    # <p>Gets security groups that can be associated by the Amazon Web Services account making the request with network interfaces in the specified VPC.</p>
    # @param [Hash | Types::GetSecurityGroupsForVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::GetSecurityGroupsForVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_security_groups_for_vpc(
    #     vpc_id: 'VpcId', # required
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetSecurityGroupsForVpcOutput
    #   resp.data.next_token #=> String
    #   resp.data.security_group_for_vpcs #=> Array<SecurityGroupForVpc>
    #   resp.data.security_group_for_vpcs[0] #=> Types::SecurityGroupForVpc
    #   resp.data.security_group_for_vpcs[0].description #=> String
    #   resp.data.security_group_for_vpcs[0].group_name #=> String
    #   resp.data.security_group_for_vpcs[0].owner_id #=> String
    #   resp.data.security_group_for_vpcs[0].group_id #=> String
    #   resp.data.security_group_for_vpcs[0].tags #=> Array<Tag>
    #   resp.data.security_group_for_vpcs[0].tags[0] #=> Types::Tag
    #   resp.data.security_group_for_vpcs[0].tags[0].key #=> String
    #   resp.data.security_group_for_vpcs[0].tags[0].value #=> String
    #   resp.data.security_group_for_vpcs[0].primary_vpc_id #=> String
    def get_security_groups_for_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetSecurityGroupsForVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetSecurityGroupsForVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_security_groups_for_vpc,
        tracer: tracer
      )
      Telemetry::GetSecurityGroupsForVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_security_groups_for_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_security_groups_for_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_security_groups_for_vpc] #{output.data}")
        output
      end
    end

    # <p>Retrieves the access status of your account to the EC2 serial console of all instances. By
    # 			default, access to the EC2 serial console is disabled for your account. For more
    # 			information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2
    # 				User Guide</i>.</p>
    # @param [Hash | Types::GetSerialConsoleAccessStatusInput] params
    #   Request parameters for this operation.
    #   See {Types::GetSerialConsoleAccessStatusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_serial_console_access_status(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetSerialConsoleAccessStatusOutput
    #   resp.data.serial_console_access_enabled #=> Boolean
    def get_serial_console_access_status(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetSerialConsoleAccessStatusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetSerialConsoleAccessStatus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_serial_console_access_status,
        tracer: tracer
      )
      Telemetry::GetSerialConsoleAccessStatus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_serial_console_access_status] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_serial_console_access_status] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_serial_console_access_status] #{output.data}")
        output
      end
    end

    # <p>Gets the current state of <i>block public access for snapshots</i> setting
    #       for the account and Region.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-public-access-snapshots.html">
    #       Block public access for snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::GetSnapshotBlockPublicAccessStateInput] params
    #   Request parameters for this operation.
    #   See {Types::GetSnapshotBlockPublicAccessStateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_snapshot_block_public_access_state(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetSnapshotBlockPublicAccessStateOutput
    #   resp.data.state #=> String, one of ["block-all-sharing", "block-new-sharing", "unblocked"]
    def get_snapshot_block_public_access_state(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetSnapshotBlockPublicAccessStateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetSnapshotBlockPublicAccessState.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_snapshot_block_public_access_state,
        tracer: tracer
      )
      Telemetry::GetSnapshotBlockPublicAccessState.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_snapshot_block_public_access_state] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_snapshot_block_public_access_state] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_snapshot_block_public_access_state] #{output.data}")
        output
      end
    end

    # <p>Calculates the Spot placement score for a Region or Availability Zone based on the
    #          specified target capacity and compute requirements.</p>
    #          <p>You can specify your compute requirements either by using
    #             <code>InstanceRequirementsWithMetadata</code> and letting Amazon EC2 choose the optimal
    #          instance types to fulfill your Spot request, or you can specify the instance types by using
    #             <code>InstanceTypes</code>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot placement score</a> in
    #          the Amazon EC2 User Guide.</p>
    # @param [Hash | Types::GetSpotPlacementScoresInput] params
    #   Request parameters for this operation.
    #   See {Types::GetSpotPlacementScoresInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_spot_placement_scores(
    #     instance_types: [
    #       'member'
    #     ],
    #     target_capacity: 1, # required
    #     target_capacity_unit_type: 'vcpu', # accepts ["vcpu", "memory-mib", "units"]
    #     single_availability_zone: false,
    #     region_names: [
    #       'member'
    #     ],
    #     instance_requirements_with_metadata: {
    #       architecture_types: [
    #         'i386' # accepts ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #       ],
    #       virtualization_types: [
    #         'hvm' # accepts ["hvm", "paravirtual"]
    #       ],
    #       instance_requirements: {
    #         v_cpu_count: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         memory_mi_b: {
    #           min: 1, # required
    #           max: 1
    #         }, # required
    #         cpu_manufacturers: [
    #           'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #         ],
    #         memory_gi_b_per_v_cpu: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         excluded_instance_types: [
    #           'member'
    #         ],
    #         instance_generations: [
    #           'current' # accepts ["current", "previous"]
    #         ],
    #         spot_max_price_percentage_over_lowest_price: 1,
    #         on_demand_max_price_percentage_over_lowest_price: 1,
    #         bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #         burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #         require_hibernate_support: false,
    #         network_interface_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         local_storage: 'included', # accepts ["included", "required", "excluded"]
    #         local_storage_types: [
    #           'hdd' # accepts ["hdd", "ssd"]
    #         ],
    #         total_local_storage_gb: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         baseline_ebs_bandwidth_mbps: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_types: [
    #           'gpu' # accepts ["gpu", "fpga", "inference"]
    #         ],
    #         accelerator_count: {
    #           min: 1,
    #           max: 1
    #         },
    #         accelerator_manufacturers: [
    #           'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #         ],
    #         accelerator_names: [
    #           'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #         ],
    #         accelerator_total_memory_mi_b: {
    #           min: 1,
    #           max: 1
    #         },
    #         network_bandwidth_gbps: {
    #           min: 1.0,
    #           max: 1.0
    #         },
    #         allowed_instance_types: [
    #           'member'
    #         ],
    #         max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #       }
    #     },
    #     dry_run: false,
    #     max_results: 1,
    #     next_token: 'NextToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetSpotPlacementScoresOutput
    #   resp.data.spot_placement_scores #=> Array<SpotPlacementScore>
    #   resp.data.spot_placement_scores[0] #=> Types::SpotPlacementScore
    #   resp.data.spot_placement_scores[0].region #=> String
    #   resp.data.spot_placement_scores[0].availability_zone_id #=> String
    #   resp.data.spot_placement_scores[0].score #=> Integer
    #   resp.data.next_token #=> String
    def get_spot_placement_scores(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetSpotPlacementScoresInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetSpotPlacementScores.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_spot_placement_scores,
        tracer: tracer
      )
      Telemetry::GetSpotPlacementScores.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_spot_placement_scores] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_spot_placement_scores] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_spot_placement_scores] #{output.data}")
        output
      end
    end

    # <p>Gets information about the subnet CIDR reservations.</p>
    # @param [Hash | Types::GetSubnetCidrReservationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetSubnetCidrReservationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_subnet_cidr_reservations(
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     subnet_id: 'SubnetId', # required
    #     dry_run: false,
    #     next_token: 'NextToken',
    #     max_results: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetSubnetCidrReservationsOutput
    #   resp.data.subnet_ipv4_cidr_reservations #=> Array<SubnetCidrReservation>
    #   resp.data.subnet_ipv4_cidr_reservations[0] #=> Types::SubnetCidrReservation
    #   resp.data.subnet_ipv4_cidr_reservations[0].subnet_cidr_reservation_id #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].subnet_id #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].cidr #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].reservation_type #=> String, one of ["prefix", "explicit"]
    #   resp.data.subnet_ipv4_cidr_reservations[0].owner_id #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].description #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags #=> Array<Tag>
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags[0] #=> Types::Tag
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags[0].key #=> String
    #   resp.data.subnet_ipv4_cidr_reservations[0].tags[0].value #=> String
    #   resp.data.subnet_ipv6_cidr_reservations #=> Array<SubnetCidrReservation>
    #   resp.data.next_token #=> String
    def get_subnet_cidr_reservations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetSubnetCidrReservationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetSubnetCidrReservations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_subnet_cidr_reservations,
        tracer: tracer
      )
      Telemetry::GetSubnetCidrReservations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_subnet_cidr_reservations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_subnet_cidr_reservations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_subnet_cidr_reservations] #{output.data}")
        output
      end
    end

    # <p>Lists the route tables to which the specified resource attachment propagates routes.</p>
    # @param [Hash | Types::GetTransitGatewayAttachmentPropagationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayAttachmentPropagationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_attachment_propagations(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayAttachmentPropagationsOutput
    #   resp.data.transit_gateway_attachment_propagations #=> Array<TransitGatewayAttachmentPropagation>
    #   resp.data.transit_gateway_attachment_propagations[0] #=> Types::TransitGatewayAttachmentPropagation
    #   resp.data.transit_gateway_attachment_propagations[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_attachment_propagations[0].state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #   resp.data.next_token #=> String
    def get_transit_gateway_attachment_propagations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayAttachmentPropagationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayAttachmentPropagations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_attachment_propagations,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayAttachmentPropagations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_attachment_propagations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_attachment_propagations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_attachment_propagations] #{output.data}")
        output
      end
    end

    # <p>Gets information about the associations for the transit gateway multicast domain.</p>
    # @param [Hash | Types::GetTransitGatewayMulticastDomainAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayMulticastDomainAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_multicast_domain_associations(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayMulticastDomainAssociationsOutput
    #   resp.data.multicast_domain_associations #=> Array<TransitGatewayMulticastDomainAssociation>
    #   resp.data.multicast_domain_associations[0] #=> Types::TransitGatewayMulticastDomainAssociation
    #   resp.data.multicast_domain_associations[0].transit_gateway_attachment_id #=> String
    #   resp.data.multicast_domain_associations[0].resource_id #=> String
    #   resp.data.multicast_domain_associations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.multicast_domain_associations[0].resource_owner_id #=> String
    #   resp.data.multicast_domain_associations[0].subnet #=> Types::SubnetAssociation
    #   resp.data.multicast_domain_associations[0].subnet.subnet_id #=> String
    #   resp.data.multicast_domain_associations[0].subnet.state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    #   resp.data.next_token #=> String
    def get_transit_gateway_multicast_domain_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayMulticastDomainAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayMulticastDomainAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_multicast_domain_associations,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayMulticastDomainAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_multicast_domain_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_multicast_domain_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_multicast_domain_associations] #{output.data}")
        output
      end
    end

    # <p>Gets a list of the transit gateway policy table associations.</p>
    # @param [Hash | Types::GetTransitGatewayPolicyTableAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayPolicyTableAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_policy_table_associations(
    #     transit_gateway_policy_table_id: 'TransitGatewayPolicyTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayPolicyTableAssociationsOutput
    #   resp.data.associations #=> Array<TransitGatewayPolicyTableAssociation>
    #   resp.data.associations[0] #=> Types::TransitGatewayPolicyTableAssociation
    #   resp.data.associations[0].transit_gateway_policy_table_id #=> String
    #   resp.data.associations[0].transit_gateway_attachment_id #=> String
    #   resp.data.associations[0].resource_id #=> String
    #   resp.data.associations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations[0].state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.next_token #=> String
    def get_transit_gateway_policy_table_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayPolicyTableAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayPolicyTableAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_policy_table_associations,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayPolicyTableAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_policy_table_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_policy_table_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_policy_table_associations] #{output.data}")
        output
      end
    end

    # <p>Returns a list of transit gateway policy table entries.</p>
    # @param [Hash | Types::GetTransitGatewayPolicyTableEntriesInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayPolicyTableEntriesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_policy_table_entries(
    #     transit_gateway_policy_table_id: 'TransitGatewayPolicyTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayPolicyTableEntriesOutput
    #   resp.data.transit_gateway_policy_table_entries #=> Array<TransitGatewayPolicyTableEntry>
    #   resp.data.transit_gateway_policy_table_entries[0] #=> Types::TransitGatewayPolicyTableEntry
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule_number #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule #=> Types::TransitGatewayPolicyRule
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.source_cidr_block #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.source_port_range #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.destination_cidr_block #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.destination_port_range #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.protocol #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.meta_data #=> Types::TransitGatewayPolicyRuleMetaData
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.meta_data.meta_data_key #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].policy_rule.meta_data.meta_data_value #=> String
    #   resp.data.transit_gateway_policy_table_entries[0].target_route_table_id #=> String
    def get_transit_gateway_policy_table_entries(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayPolicyTableEntriesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayPolicyTableEntries.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_policy_table_entries,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayPolicyTableEntries.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_policy_table_entries] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_policy_table_entries] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_policy_table_entries] #{output.data}")
        output
      end
    end

    # <p>Gets information about the prefix list references in a specified transit gateway route table.</p>
    # @param [Hash | Types::GetTransitGatewayPrefixListReferencesInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayPrefixListReferencesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_prefix_list_references(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayPrefixListReferencesOutput
    #   resp.data.transit_gateway_prefix_list_references #=> Array<TransitGatewayPrefixListReference>
    #   resp.data.transit_gateway_prefix_list_references[0] #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_references[0].blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_references[0].transit_gateway_attachment.resource_id #=> String
    #   resp.data.next_token #=> String
    def get_transit_gateway_prefix_list_references(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayPrefixListReferencesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayPrefixListReferences.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_prefix_list_references,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayPrefixListReferences.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_prefix_list_references] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_prefix_list_references] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_prefix_list_references] #{output.data}")
        output
      end
    end

    # <p>Gets information about the associations for the specified transit gateway route table.</p>
    # @param [Hash | Types::GetTransitGatewayRouteTableAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayRouteTableAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_route_table_associations(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayRouteTableAssociationsOutput
    #   resp.data.associations #=> Array<TransitGatewayRouteTableAssociation>
    #   resp.data.associations[0] #=> Types::TransitGatewayRouteTableAssociation
    #   resp.data.associations[0].transit_gateway_attachment_id #=> String
    #   resp.data.associations[0].resource_id #=> String
    #   resp.data.associations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations[0].state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.next_token #=> String
    def get_transit_gateway_route_table_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayRouteTableAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayRouteTableAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_route_table_associations,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayRouteTableAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_route_table_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_route_table_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_route_table_associations] #{output.data}")
        output
      end
    end

    # <p>Gets information about the route table propagations for the specified transit gateway route table.</p>
    # @param [Hash | Types::GetTransitGatewayRouteTablePropagationsInput] params
    #   Request parameters for this operation.
    #   See {Types::GetTransitGatewayRouteTablePropagationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_transit_gateway_route_table_propagations(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetTransitGatewayRouteTablePropagationsOutput
    #   resp.data.transit_gateway_route_table_propagations #=> Array<TransitGatewayRouteTablePropagation>
    #   resp.data.transit_gateway_route_table_propagations[0] #=> Types::TransitGatewayRouteTablePropagation
    #   resp.data.transit_gateway_route_table_propagations[0].transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_route_table_propagations[0].resource_id #=> String
    #   resp.data.transit_gateway_route_table_propagations[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_route_table_propagations[0].state #=> String, one of ["enabling", "enabled", "disabling", "disabled"]
    #   resp.data.transit_gateway_route_table_propagations[0].transit_gateway_route_table_announcement_id #=> String
    #   resp.data.next_token #=> String
    def get_transit_gateway_route_table_propagations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetTransitGatewayRouteTablePropagationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetTransitGatewayRouteTablePropagations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_transit_gateway_route_table_propagations,
        tracer: tracer
      )
      Telemetry::GetTransitGatewayRouteTablePropagations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_route_table_propagations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_route_table_propagations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_transit_gateway_route_table_propagations] #{output.data}")
        output
      end
    end

    # <p>Get the Verified Access policy associated with the endpoint.</p>
    # @param [Hash | Types::GetVerifiedAccessEndpointPolicyInput] params
    #   Request parameters for this operation.
    #   See {Types::GetVerifiedAccessEndpointPolicyInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_verified_access_endpoint_policy(
    #     verified_access_endpoint_id: 'VerifiedAccessEndpointId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetVerifiedAccessEndpointPolicyOutput
    #   resp.data.policy_enabled #=> Boolean
    #   resp.data.policy_document #=> String
    def get_verified_access_endpoint_policy(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetVerifiedAccessEndpointPolicyInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetVerifiedAccessEndpointPolicy.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_verified_access_endpoint_policy,
        tracer: tracer
      )
      Telemetry::GetVerifiedAccessEndpointPolicy.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_verified_access_endpoint_policy] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_verified_access_endpoint_policy] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_verified_access_endpoint_policy] #{output.data}")
        output
      end
    end

    # <p>Shows the contents of the Verified Access policy associated with the group.</p>
    # @param [Hash | Types::GetVerifiedAccessGroupPolicyInput] params
    #   Request parameters for this operation.
    #   See {Types::GetVerifiedAccessGroupPolicyInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_verified_access_group_policy(
    #     verified_access_group_id: 'VerifiedAccessGroupId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetVerifiedAccessGroupPolicyOutput
    #   resp.data.policy_enabled #=> Boolean
    #   resp.data.policy_document #=> String
    def get_verified_access_group_policy(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetVerifiedAccessGroupPolicyInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetVerifiedAccessGroupPolicy.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_verified_access_group_policy,
        tracer: tracer
      )
      Telemetry::GetVerifiedAccessGroupPolicy.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_verified_access_group_policy] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_verified_access_group_policy] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_verified_access_group_policy] #{output.data}")
        output
      end
    end

    # <p>Download an Amazon Web Services-provided sample configuration file to be used with the customer
    #             gateway device specified for your Site-to-Site VPN connection.</p>
    # @param [Hash | Types::GetVpnConnectionDeviceSampleConfigurationInput] params
    #   Request parameters for this operation.
    #   See {Types::GetVpnConnectionDeviceSampleConfigurationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_vpn_connection_device_sample_configuration(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_connection_device_type_id: 'VpnConnectionDeviceTypeId', # required
    #     internet_key_exchange_version: 'InternetKeyExchangeVersion',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetVpnConnectionDeviceSampleConfigurationOutput
    #   resp.data.vpn_connection_device_sample_configuration #=> String
    def get_vpn_connection_device_sample_configuration(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetVpnConnectionDeviceSampleConfigurationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetVpnConnectionDeviceSampleConfiguration.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_vpn_connection_device_sample_configuration,
        tracer: tracer
      )
      Telemetry::GetVpnConnectionDeviceSampleConfiguration.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_vpn_connection_device_sample_configuration] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_vpn_connection_device_sample_configuration] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_vpn_connection_device_sample_configuration] #{output.data}")
        output
      end
    end

    # <p>Obtain a list of customer gateway devices for which sample configuration
    #             files can be provided. The request has no additional parameters. You can also see the
    #             list of device types with sample configuration files available under <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html">Your customer gateway
    #                 device</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    # @param [Hash | Types::GetVpnConnectionDeviceTypesInput] params
    #   Request parameters for this operation.
    #   See {Types::GetVpnConnectionDeviceTypesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_vpn_connection_device_types(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetVpnConnectionDeviceTypesOutput
    #   resp.data.vpn_connection_device_types #=> Array<VpnConnectionDeviceType>
    #   resp.data.vpn_connection_device_types[0] #=> Types::VpnConnectionDeviceType
    #   resp.data.vpn_connection_device_types[0].vpn_connection_device_type_id #=> String
    #   resp.data.vpn_connection_device_types[0].vendor #=> String
    #   resp.data.vpn_connection_device_types[0].platform #=> String
    #   resp.data.vpn_connection_device_types[0].software #=> String
    #   resp.data.next_token #=> String
    def get_vpn_connection_device_types(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetVpnConnectionDeviceTypesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetVpnConnectionDeviceTypes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_vpn_connection_device_types,
        tracer: tracer
      )
      Telemetry::GetVpnConnectionDeviceTypes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_vpn_connection_device_types] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_vpn_connection_device_types] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_vpn_connection_device_types] #{output.data}")
        output
      end
    end

    # <p>Get details of available tunnel endpoint maintenance.</p>
    # @param [Hash | Types::GetVpnTunnelReplacementStatusInput] params
    #   Request parameters for this operation.
    #   See {Types::GetVpnTunnelReplacementStatusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.get_vpn_tunnel_replacement_status(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_tunnel_outside_ip_address: 'VpnTunnelOutsideIpAddress', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::GetVpnTunnelReplacementStatusOutput
    #   resp.data.vpn_connection_id #=> String
    #   resp.data.transit_gateway_id #=> String
    #   resp.data.customer_gateway_id #=> String
    #   resp.data.vpn_gateway_id #=> String
    #   resp.data.vpn_tunnel_outside_ip_address #=> String
    #   resp.data.maintenance_details #=> Types::MaintenanceDetails
    #   resp.data.maintenance_details.pending_maintenance #=> String
    #   resp.data.maintenance_details.maintenance_auto_applied_after #=> Time
    #   resp.data.maintenance_details.last_maintenance_applied #=> Time
    def get_vpn_tunnel_replacement_status(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::GetVpnTunnelReplacementStatusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::GetVpnTunnelReplacementStatus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :get_vpn_tunnel_replacement_status,
        tracer: tracer
      )
      Telemetry::GetVpnTunnelReplacementStatus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_vpn_tunnel_replacement_status] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#get_vpn_tunnel_replacement_status] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#get_vpn_tunnel_replacement_status] #{output.data}")
        output
      end
    end

    # <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p>
    #          <p>Uploading a client certificate revocation list resets existing client connections.</p>
    # @param [Hash | Types::ImportClientVpnClientCertificateRevocationListInput] params
    #   Request parameters for this operation.
    #   See {Types::ImportClientVpnClientCertificateRevocationListInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.import_client_vpn_client_certificate_revocation_list(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     certificate_revocation_list: 'CertificateRevocationList', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ImportClientVpnClientCertificateRevocationListOutput
    #   resp.data.return #=> Boolean
    def import_client_vpn_client_certificate_revocation_list(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ImportClientVpnClientCertificateRevocationListInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ImportClientVpnClientCertificateRevocationList.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :import_client_vpn_client_certificate_revocation_list,
        tracer: tracer
      )
      Telemetry::ImportClientVpnClientCertificateRevocationList.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_client_vpn_client_certificate_revocation_list] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#import_client_vpn_client_certificate_revocation_list] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_client_vpn_client_certificate_revocation_list] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>To import your virtual machines (VMs) with a console-based experience, you can use the
    #     <i>Import virtual machine images to Amazon Web Services</i> template in the <a href="https://console.aws.amazon.com/migrationhub/orchestrator">Migration Hub Orchestrator console</a>. For more
    #     information, see the <a href="https://docs.aws.amazon.com/migrationhub-orchestrator/latest/userguide/import-vm-images.html">
    #                   <i>Migration Hub Orchestrator User Guide</i>
    #                </a>.</p>
    #          </note>
    #          <p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI).</p>
    #          <important>
    #             <p>Amazon Web Services VM Import/Export strongly recommends specifying a value for either the
    #      <code>--license-type</code> or <code>--usage-operation</code> parameter when you create a new
    #     VM Import task. This ensures your operating system is licensed appropriately and your billing is
    #     optimized.</p>
    #          </important>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a
    #    VM as an image using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    # @param [Hash | Types::ImportImageInput] params
    #   Request parameters for this operation.
    #   See {Types::ImportImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.import_image(
    #     architecture: 'Architecture',
    #     client_data: {
    #       comment: 'Comment',
    #       upload_end: Time.now,
    #       upload_size: 1.0,
    #       upload_start: Time.now
    #     },
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     disk_containers: [
    #       {
    #         description: 'Description',
    #         device_name: 'DeviceName',
    #         format: 'Format',
    #         snapshot_id: 'SnapshotId',
    #         url: 'Url',
    #         user_bucket: {
    #           s3_bucket: 'S3Bucket',
    #           s3_key: 'S3Key'
    #         }
    #       }
    #     ],
    #     dry_run: false,
    #     encrypted: false,
    #     hypervisor: 'Hypervisor',
    #     kms_key_id: 'KmsKeyId',
    #     license_type: 'LicenseType',
    #     platform: 'Platform',
    #     role_name: 'RoleName',
    #     license_specifications: [
    #       {
    #         license_configuration_arn: 'LicenseConfigurationArn'
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     usage_operation: 'UsageOperation',
    #     boot_mode: 'legacy-bios' # accepts ["legacy-bios", "uefi", "uefi-preferred"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ImportImageOutput
    #   resp.data.architecture #=> String
    #   resp.data.description #=> String
    #   resp.data.encrypted #=> Boolean
    #   resp.data.hypervisor #=> String
    #   resp.data.image_id #=> String
    #   resp.data.import_task_id #=> String
    #   resp.data.kms_key_id #=> String
    #   resp.data.license_type #=> String
    #   resp.data.platform #=> String
    #   resp.data.progress #=> String
    #   resp.data.snapshot_details #=> Array<SnapshotDetail>
    #   resp.data.snapshot_details[0] #=> Types::SnapshotDetail
    #   resp.data.snapshot_details[0].description #=> String
    #   resp.data.snapshot_details[0].device_name #=> String
    #   resp.data.snapshot_details[0].disk_image_size #=> Float
    #   resp.data.snapshot_details[0].format #=> String
    #   resp.data.snapshot_details[0].progress #=> String
    #   resp.data.snapshot_details[0].snapshot_id #=> String
    #   resp.data.snapshot_details[0].status #=> String
    #   resp.data.snapshot_details[0].status_message #=> String
    #   resp.data.snapshot_details[0].url #=> String
    #   resp.data.snapshot_details[0].user_bucket #=> Types::UserBucketDetails
    #   resp.data.snapshot_details[0].user_bucket.s3_bucket #=> String
    #   resp.data.snapshot_details[0].user_bucket.s3_key #=> String
    #   resp.data.status #=> String
    #   resp.data.status_message #=> String
    #   resp.data.license_specifications #=> Array<ImportImageLicenseConfigurationResponse>
    #   resp.data.license_specifications[0] #=> Types::ImportImageLicenseConfigurationResponse
    #   resp.data.license_specifications[0].license_configuration_arn #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    #   resp.data.usage_operation #=> String
    def import_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ImportImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ImportImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :import_image,
        tracer: tracer
      )
      Telemetry::ImportImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#import_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_image] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>We recommend that you use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html">
    #                   <code>ImportImage</code>
    #                </a>
    #     API. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an image using VM
    #      Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    #          </note>
    #          <p>Creates an import instance task using metadata from the specified disk image.</p>
    #          <p>This API action is not supported by the Command Line Interface (CLI). For
    #    information about using the Amazon EC2 CLI, which is deprecated, see <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2">Importing
    #     a VM to Amazon EC2</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p>
    #          <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>
    #    instead.</p>
    #          <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    # @param [Hash | Types::ImportInstanceInput] params
    #   Request parameters for this operation.
    #   See {Types::ImportInstanceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.import_instance(
    #     description: 'Description',
    #     disk_images: [
    #       {
    #         description: 'Description',
    #         image: {
    #           bytes: 1, # required
    #           format: 'VMDK', # required - accepts ["VMDK", "RAW", "VHD"]
    #           import_manifest_url: 'ImportManifestUrl' # required
    #         },
    #         volume: {
    #           size: 1 # required
    #         }
    #       }
    #     ],
    #     dry_run: false,
    #     launch_specification: {
    #       additional_info: 'AdditionalInfo',
    #       architecture: 'i386', # accepts ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #       group_ids: [
    #         'member'
    #       ],
    #       group_names: [
    #         'member'
    #       ],
    #       instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #       monitoring: false,
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         affinity: 'Affinity',
    #         group_name: 'GroupName',
    #         partition_number: 1,
    #         host_id: 'HostId',
    #         tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #         spread_domain: 'SpreadDomain',
    #         host_resource_group_arn: 'HostResourceGroupArn',
    #         group_id: 'GroupId'
    #       },
    #       private_ip_address: 'PrivateIpAddress',
    #       subnet_id: 'SubnetId',
    #       user_data: {
    #         data: 'Data'
    #       }
    #     },
    #     platform: 'Windows' # required - accepts ["Windows"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ImportInstanceOutput
    #   resp.data.conversion_task #=> Types::ConversionTask
    #   resp.data.conversion_task.conversion_task_id #=> String
    #   resp.data.conversion_task.expiration_time #=> String
    #   resp.data.conversion_task.import_instance #=> Types::ImportInstanceTaskDetails
    #   resp.data.conversion_task.import_instance.description #=> String
    #   resp.data.conversion_task.import_instance.instance_id #=> String
    #   resp.data.conversion_task.import_instance.platform #=> String, one of ["Windows"]
    #   resp.data.conversion_task.import_instance.volumes #=> Array<ImportInstanceVolumeDetailItem>
    #   resp.data.conversion_task.import_instance.volumes[0] #=> Types::ImportInstanceVolumeDetailItem
    #   resp.data.conversion_task.import_instance.volumes[0].availability_zone #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].bytes_converted #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].description #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_instance.volumes[0].image.checksum #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.conversion_task.import_instance.volumes[0].image.import_manifest_url #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.size #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].status #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].status_message #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.import_instance.volumes[0].volume.id #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume.size #=> Integer
    #   resp.data.conversion_task.import_volume #=> Types::ImportVolumeTaskDetails
    #   resp.data.conversion_task.import_volume.availability_zone #=> String
    #   resp.data.conversion_task.import_volume.bytes_converted #=> Integer
    #   resp.data.conversion_task.import_volume.description #=> String
    #   resp.data.conversion_task.import_volume.image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_volume.volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.conversion_task.status_message #=> String
    #   resp.data.conversion_task.tags #=> Array<Tag>
    #   resp.data.conversion_task.tags[0] #=> Types::Tag
    #   resp.data.conversion_task.tags[0].key #=> String
    #   resp.data.conversion_task.tags[0].value #=> String
    def import_instance(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ImportInstanceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ImportInstance.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :import_instance,
        tracer: tracer
      )
      Telemetry::ImportInstance.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_instance] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#import_instance] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_instance] #{output.data}")
        output
      end
    end

    # <p>Imports the public key from an RSA or ED25519 key pair that you created with a third-party tool.
    #         Compare this with <a>CreateKeyPair</a>, in which Amazon Web Services creates the key pair and gives the keys to you
    #         (Amazon Web Services keeps a copy of the public key). With ImportKeyPair, you create the key pair and give Amazon Web Services just the public key.
    #         The private key is never transferred between you and Amazon Web Services.</p>
    #          <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a>
    # 				in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::ImportKeyPairInput] params
    #   Request parameters for this operation.
    #   See {Types::ImportKeyPairInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.import_key_pair(
    #     dry_run: false,
    #     key_name: 'KeyName', # required
    #     public_key_material: 'PublicKeyMaterial', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ImportKeyPairOutput
    #   resp.data.key_fingerprint #=> String
    #   resp.data.key_name #=> String
    #   resp.data.key_pair_id #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    def import_key_pair(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ImportKeyPairInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ImportKeyPair.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :import_key_pair,
        tracer: tracer
      )
      Telemetry::ImportKeyPair.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_key_pair] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#import_key_pair] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_key_pair] #{output.data}")
        output
      end
    end

    # <p>Imports a disk into an EBS snapshot.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-import-snapshot.html">Importing a disk as a snapshot using VM Import/Export</a> in the
    #    <i>VM Import/Export User Guide</i>.</p>
    # @param [Hash | Types::ImportSnapshotInput] params
    #   Request parameters for this operation.
    #   See {Types::ImportSnapshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.import_snapshot(
    #     client_data: {
    #       comment: 'Comment',
    #       upload_end: Time.now,
    #       upload_size: 1.0,
    #       upload_start: Time.now
    #     },
    #     client_token: 'ClientToken',
    #     description: 'Description',
    #     disk_container: {
    #       description: 'Description',
    #       format: 'Format',
    #       url: 'Url',
    #       user_bucket: {
    #         s3_bucket: 'S3Bucket',
    #         s3_key: 'S3Key'
    #       }
    #     },
    #     dry_run: false,
    #     encrypted: false,
    #     kms_key_id: 'KmsKeyId',
    #     role_name: 'RoleName',
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ImportSnapshotOutput
    #   resp.data.description #=> String
    #   resp.data.import_task_id #=> String
    #   resp.data.snapshot_task_detail #=> Types::SnapshotTaskDetail
    #   resp.data.snapshot_task_detail.description #=> String
    #   resp.data.snapshot_task_detail.disk_image_size #=> Float
    #   resp.data.snapshot_task_detail.encrypted #=> Boolean
    #   resp.data.snapshot_task_detail.format #=> String
    #   resp.data.snapshot_task_detail.kms_key_id #=> String
    #   resp.data.snapshot_task_detail.progress #=> String
    #   resp.data.snapshot_task_detail.snapshot_id #=> String
    #   resp.data.snapshot_task_detail.status #=> String
    #   resp.data.snapshot_task_detail.status_message #=> String
    #   resp.data.snapshot_task_detail.url #=> String
    #   resp.data.snapshot_task_detail.user_bucket #=> Types::UserBucketDetails
    #   resp.data.snapshot_task_detail.user_bucket.s3_bucket #=> String
    #   resp.data.snapshot_task_detail.user_bucket.s3_key #=> String
    #   resp.data.tags #=> Array<Tag>
    #   resp.data.tags[0] #=> Types::Tag
    #   resp.data.tags[0].key #=> String
    #   resp.data.tags[0].value #=> String
    def import_snapshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ImportSnapshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ImportSnapshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :import_snapshot,
        tracer: tracer
      )
      Telemetry::ImportSnapshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_snapshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#import_snapshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_snapshot] #{output.data}")
        output
      end
    end

    # <p>Creates an import volume task using metadata from the specified disk image.</p>
    #          <p>This API action supports only single-volume VMs. To import multi-volume VMs, use
    #    <a>ImportImage</a> instead. To import a disk to a snapshot, use
    #    <a>ImportSnapshot</a> instead.</p>
    #          <p>This API action is not supported by the Command Line Interface (CLI). For
    #    information about using the Amazon EC2 CLI, which is deprecated, see <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#importing-your-volumes-into-amazon-ebs">Importing Disks to Amazon EBS</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p>
    #          <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    # @param [Hash | Types::ImportVolumeInput] params
    #   Request parameters for this operation.
    #   See {Types::ImportVolumeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.import_volume(
    #     availability_zone: 'AvailabilityZone', # required
    #     description: 'Description',
    #     dry_run: false,
    #     image: {
    #       bytes: 1, # required
    #       format: 'VMDK', # required - accepts ["VMDK", "RAW", "VHD"]
    #       import_manifest_url: 'ImportManifestUrl' # required
    #     }, # required
    #     volume: {
    #       size: 1 # required
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ImportVolumeOutput
    #   resp.data.conversion_task #=> Types::ConversionTask
    #   resp.data.conversion_task.conversion_task_id #=> String
    #   resp.data.conversion_task.expiration_time #=> String
    #   resp.data.conversion_task.import_instance #=> Types::ImportInstanceTaskDetails
    #   resp.data.conversion_task.import_instance.description #=> String
    #   resp.data.conversion_task.import_instance.instance_id #=> String
    #   resp.data.conversion_task.import_instance.platform #=> String, one of ["Windows"]
    #   resp.data.conversion_task.import_instance.volumes #=> Array<ImportInstanceVolumeDetailItem>
    #   resp.data.conversion_task.import_instance.volumes[0] #=> Types::ImportInstanceVolumeDetailItem
    #   resp.data.conversion_task.import_instance.volumes[0].availability_zone #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].bytes_converted #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].description #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_instance.volumes[0].image.checksum #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.format #=> String, one of ["VMDK", "RAW", "VHD"]
    #   resp.data.conversion_task.import_instance.volumes[0].image.import_manifest_url #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].image.size #=> Integer
    #   resp.data.conversion_task.import_instance.volumes[0].status #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].status_message #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.import_instance.volumes[0].volume.id #=> String
    #   resp.data.conversion_task.import_instance.volumes[0].volume.size #=> Integer
    #   resp.data.conversion_task.import_volume #=> Types::ImportVolumeTaskDetails
    #   resp.data.conversion_task.import_volume.availability_zone #=> String
    #   resp.data.conversion_task.import_volume.bytes_converted #=> Integer
    #   resp.data.conversion_task.import_volume.description #=> String
    #   resp.data.conversion_task.import_volume.image #=> Types::DiskImageDescription
    #   resp.data.conversion_task.import_volume.volume #=> Types::DiskImageVolumeDescription
    #   resp.data.conversion_task.state #=> String, one of ["active", "cancelling", "cancelled", "completed"]
    #   resp.data.conversion_task.status_message #=> String
    #   resp.data.conversion_task.tags #=> Array<Tag>
    #   resp.data.conversion_task.tags[0] #=> Types::Tag
    #   resp.data.conversion_task.tags[0].key #=> String
    #   resp.data.conversion_task.tags[0].value #=> String
    def import_volume(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ImportVolumeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ImportVolume.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :import_volume,
        tracer: tracer
      )
      Telemetry::ImportVolume.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_volume] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#import_volume] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#import_volume] #{output.data}")
        output
      end
    end

    # <p>Lists one or more AMIs that are currently in the Recycle Bin. For more information,
    #       see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle
    #         Bin</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ListImagesInRecycleBinInput] params
    #   Request parameters for this operation.
    #   See {Types::ListImagesInRecycleBinInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.list_images_in_recycle_bin(
    #     image_ids: [
    #       'member'
    #     ],
    #     next_token: 'NextToken',
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ListImagesInRecycleBinOutput
    #   resp.data.images #=> Array<ImageRecycleBinInfo>
    #   resp.data.images[0] #=> Types::ImageRecycleBinInfo
    #   resp.data.images[0].image_id #=> String
    #   resp.data.images[0].name #=> String
    #   resp.data.images[0].description #=> String
    #   resp.data.images[0].recycle_bin_enter_time #=> Time
    #   resp.data.images[0].recycle_bin_exit_time #=> Time
    #   resp.data.next_token #=> String
    def list_images_in_recycle_bin(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ListImagesInRecycleBinInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ListImagesInRecycleBin.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :list_images_in_recycle_bin,
        tracer: tracer
      )
      Telemetry::ListImagesInRecycleBin.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#list_images_in_recycle_bin] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#list_images_in_recycle_bin] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#list_images_in_recycle_bin] #{output.data}")
        output
      end
    end

    # <p>Lists one or more snapshots that are currently in the Recycle Bin.</p>
    # @param [Hash | Types::ListSnapshotsInRecycleBinInput] params
    #   Request parameters for this operation.
    #   See {Types::ListSnapshotsInRecycleBinInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.list_snapshots_in_recycle_bin(
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     snapshot_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ListSnapshotsInRecycleBinOutput
    #   resp.data.snapshots #=> Array<SnapshotRecycleBinInfo>
    #   resp.data.snapshots[0] #=> Types::SnapshotRecycleBinInfo
    #   resp.data.snapshots[0].snapshot_id #=> String
    #   resp.data.snapshots[0].recycle_bin_enter_time #=> Time
    #   resp.data.snapshots[0].recycle_bin_exit_time #=> Time
    #   resp.data.snapshots[0].description #=> String
    #   resp.data.snapshots[0].volume_id #=> String
    #   resp.data.next_token #=> String
    def list_snapshots_in_recycle_bin(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ListSnapshotsInRecycleBinInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ListSnapshotsInRecycleBin.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :list_snapshots_in_recycle_bin,
        tracer: tracer
      )
      Telemetry::ListSnapshotsInRecycleBin.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#list_snapshots_in_recycle_bin] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#list_snapshots_in_recycle_bin] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#list_snapshots_in_recycle_bin] #{output.data}")
        output
      end
    end

    # <p>Locks an Amazon EBS snapshot in either <i>governance</i> or <i>compliance</i>
    #       mode to protect it against accidental or malicious deletions for a specific duration. A locked snapshot
    #       can't be deleted.</p>
    #          <p>You can also use this action to modify the lock settings for a snapshot that is already locked. The
    #       allowed modifications depend on the lock mode and lock state:</p>
    #          <ul>
    #             <li>
    #                <p>If the snapshot is locked in governance mode, you can modify the lock mode and the lock duration
    #             or lock expiration date.</p>
    #             </li>
    #             <li>
    #                <p>If the snapshot is locked in compliance mode and it is in the cooling-off period, you can modify
    #             the lock mode and the lock duration or lock expiration date.</p>
    #             </li>
    #             <li>
    #                <p>If the snapshot is locked in compliance mode and the cooling-off period has lapsed, you can
    #             only increase the lock duration or extend the lock expiration date.</p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::LockSnapshotInput] params
    #   Request parameters for this operation.
    #   See {Types::LockSnapshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.lock_snapshot(
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false,
    #     lock_mode: 'compliance', # required - accepts ["compliance", "governance"]
    #     cool_off_period: 1,
    #     lock_duration: 1,
    #     expiration_date: Time.now
    #   )
    # @example Response structure
    #   resp.data #=> Types::LockSnapshotOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.lock_state #=> String, one of ["compliance", "governance", "compliance-cooloff", "expired"]
    #   resp.data.lock_duration #=> Integer
    #   resp.data.cool_off_period #=> Integer
    #   resp.data.cool_off_period_expires_on #=> Time
    #   resp.data.lock_created_on #=> Time
    #   resp.data.lock_expires_on #=> Time
    #   resp.data.lock_duration_start_time #=> Time
    def lock_snapshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::LockSnapshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::LockSnapshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :lock_snapshot,
        tracer: tracer
      )
      Telemetry::LockSnapshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#lock_snapshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#lock_snapshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#lock_snapshot] #{output.data}")
        output
      end
    end

    # <p>Modifies an attribute of the specified Elastic IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
    # @param [Hash | Types::ModifyAddressAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyAddressAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_address_attribute(
    #     allocation_id: 'AllocationId', # required
    #     domain_name: 'DomainName',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyAddressAttributeOutput
    #   resp.data.address #=> Types::AddressAttribute
    #   resp.data.address.public_ip #=> String
    #   resp.data.address.allocation_id #=> String
    #   resp.data.address.ptr_record #=> String
    #   resp.data.address.ptr_record_update #=> Types::PtrUpdateStatus
    #   resp.data.address.ptr_record_update.value #=> String
    #   resp.data.address.ptr_record_update.status #=> String
    #   resp.data.address.ptr_record_update.reason #=> String
    def modify_address_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyAddressAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyAddressAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_address_attribute,
        tracer: tracer
      )
      Telemetry::ModifyAddressAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_address_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_address_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_address_attribute] #{output.data}")
        output
      end
    end

    # <p>Changes the opt-in status of the Local Zone and Wavelength Zone group for your
    #       account.</p>
    #          <p>Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">
    #   		DescribeAvailabilityZones</a> to view the value for <code>GroupName</code>.</p>
    # @param [Hash | Types::ModifyAvailabilityZoneGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyAvailabilityZoneGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_availability_zone_group(
    #     group_name: 'GroupName', # required
    #     opt_in_status: 'opted-in', # required - accepts ["opted-in", "not-opted-in"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyAvailabilityZoneGroupOutput
    #   resp.data.return #=> Boolean
    def modify_availability_zone_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyAvailabilityZoneGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyAvailabilityZoneGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_availability_zone_group,
        tracer: tracer
      )
      Telemetry::ModifyAvailabilityZoneGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_availability_zone_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_availability_zone_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_availability_zone_group] #{output.data}")
        output
      end
    end

    # <p>Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You
    # 			cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings,
    # 			platform, Availability Zone, or instance eligibility. If you need to modify any of these
    # 			attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with
    # 			the required attributes.</p>
    # @param [Hash | Types::ModifyCapacityReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyCapacityReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_capacity_reservation(
    #     capacity_reservation_id: 'CapacityReservationId', # required
    #     instance_count: 1,
    #     end_date: Time.now,
    #     end_date_type: 'unlimited', # accepts ["unlimited", "limited"]
    #     accept: false,
    #     dry_run: false,
    #     additional_info: 'AdditionalInfo'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyCapacityReservationOutput
    #   resp.data.return #=> Boolean
    def modify_capacity_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyCapacityReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyCapacityReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_capacity_reservation,
        tracer: tracer
      )
      Telemetry::ModifyCapacityReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_capacity_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_capacity_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_capacity_reservation] #{output.data}")
        output
      end
    end

    # <p>Modifies a Capacity Reservation Fleet.</p>
    #          <p>When you modify the total target capacity of a Capacity Reservation Fleet, the Fleet automatically
    # 			creates new Capacity Reservations, or modifies or cancels existing Capacity Reservations in the Fleet
    # 			to meet the new total target capacity. When you modify the end date for the Fleet, the end dates for
    # 			all of the individual Capacity Reservations in the Fleet are updated accordingly.</p>
    # @param [Hash | Types::ModifyCapacityReservationFleetInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyCapacityReservationFleetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_capacity_reservation_fleet(
    #     capacity_reservation_fleet_id: 'CapacityReservationFleetId', # required
    #     total_target_capacity: 1,
    #     end_date: Time.now,
    #     dry_run: false,
    #     remove_end_date: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyCapacityReservationFleetOutput
    #   resp.data.return #=> Boolean
    def modify_capacity_reservation_fleet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyCapacityReservationFleetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyCapacityReservationFleet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_capacity_reservation_fleet,
        tracer: tracer
      )
      Telemetry::ModifyCapacityReservationFleet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_capacity_reservation_fleet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_capacity_reservation_fleet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_capacity_reservation_fleet] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.</p>
    # @param [Hash | Types::ModifyClientVpnEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyClientVpnEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_client_vpn_endpoint(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     server_certificate_arn: 'ServerCertificateArn',
    #     connection_log_options: {
    #       enabled: false,
    #       cloudwatch_log_group: 'CloudwatchLogGroup',
    #       cloudwatch_log_stream: 'CloudwatchLogStream'
    #     },
    #     dns_servers: {
    #       custom_dns_servers: [
    #         'member'
    #       ],
    #       enabled: false
    #     },
    #     vpn_port: 1,
    #     description: 'Description',
    #     split_tunnel: false,
    #     dry_run: false,
    #     security_group_ids: [
    #       'member'
    #     ],
    #     vpc_id: 'VpcId',
    #     self_service_portal: 'enabled', # accepts ["enabled", "disabled"]
    #     client_connect_options: {
    #       enabled: false,
    #       lambda_function_arn: 'LambdaFunctionArn'
    #     },
    #     session_timeout_hours: 1,
    #     client_login_banner_options: {
    #       enabled: false,
    #       banner_text: 'BannerText'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyClientVpnEndpointOutput
    #   resp.data.return #=> Boolean
    def modify_client_vpn_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyClientVpnEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyClientVpnEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_client_vpn_endpoint,
        tracer: tracer
      )
      Telemetry::ModifyClientVpnEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_client_vpn_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_client_vpn_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_client_vpn_endpoint] #{output.data}")
        output
      end
    end

    # <p>Modifies the default credit option for CPU usage of burstable performance instances.
    #             The default credit option is set at the account level per Amazon Web Services Region, and
    #             is specified per instance family. All new burstable performance instances in the account
    #             launch using the default credit option.</p>
    #          <p>
    #             <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which
    #             works at an Amazon Web Services Region level and modifies the credit option for each
    #             Availability Zone. All zones in a Region are updated within five minutes. But if
    #             instances are launched during this operation, they might not get the new credit option
    #             until the zone is updated. To verify whether the update has occurred, you can call
    #                 <code>GetDefaultCreditSpecification</code> and check
    #                 <code>DefaultCreditSpecification</code> for updates.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                 performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyDefaultCreditSpecificationInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyDefaultCreditSpecificationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_default_credit_specification(
    #     dry_run: false,
    #     instance_family: 't2', # required - accepts ["t2", "t3", "t3a", "t4g"]
    #     cpu_credits: 'CpuCredits' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyDefaultCreditSpecificationOutput
    #   resp.data.instance_family_credit_specification #=> Types::InstanceFamilyCreditSpecification
    #   resp.data.instance_family_credit_specification.instance_family #=> String, one of ["t2", "t3", "t3a", "t4g"]
    #   resp.data.instance_family_credit_specification.cpu_credits #=> String
    def modify_default_credit_specification(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyDefaultCreditSpecificationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyDefaultCreditSpecification.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_default_credit_specification,
        tracer: tracer
      )
      Telemetry::ModifyDefaultCreditSpecification.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_default_credit_specification] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_default_credit_specification] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_default_credit_specification] #{output.data}")
        output
      end
    end

    # <p>Changes the default KMS key for EBS encryption by default for your account in this Region.</p>
    #          <p>Amazon Web Services creates a unique Amazon Web Services managed KMS key in each Region for use with encryption by default. If
    #       you change the default KMS key to a symmetric customer managed KMS key, it is used instead of the Amazon Web Services
    #       managed KMS key. To reset the default KMS key to the Amazon Web Services managed KMS key for EBS, use <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric KMS keys.</p>
    #          <p>If you delete or disable the customer managed KMS key that you specified for use with
    #       encryption by default, your instances will fail to launch.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::ModifyEbsDefaultKmsKeyIdInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyEbsDefaultKmsKeyIdInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_ebs_default_kms_key_id(
    #     kms_key_id: 'KmsKeyId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyEbsDefaultKmsKeyIdOutput
    #   resp.data.kms_key_id #=> String
    def modify_ebs_default_kms_key_id(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyEbsDefaultKmsKeyIdInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyEbsDefaultKmsKeyId.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_ebs_default_kms_key_id,
        tracer: tracer
      )
      Telemetry::ModifyEbsDefaultKmsKeyId.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ebs_default_kms_key_id] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_ebs_default_kms_key_id] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ebs_default_kms_key_id] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified EC2 Fleet.</p>
    #          <p>You can only modify an EC2 Fleet request of type <code>maintain</code>.</p>
    #          <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p>
    #          <p>To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional
    #          Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation
    #          strategy is <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot Instance
    #          pool with the lowest price. If the allocation strategy is <code>diversified</code>, the
    #          EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy
    #          is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal
    #          capacity for the number of instances that are launching.</p>
    #          <p>To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open
    #          requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot
    #          Instances until the size of the fleet no longer exceeds the new target capacity. If the
    #          allocation strategy is <code>lowest-price</code>, the EC2 Fleet terminates the instances with
    #          the highest price per unit. If the allocation strategy is <code>capacity-optimized</code>,
    #          the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available
    #          Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the EC2 Fleet terminates
    #          instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep
    #          the fleet at its current size, but not replace any Spot Instances that are interrupted or
    #          that you terminate manually.</p>
    #          <p>If you are finished with your EC2 Fleet for now, but will use it again later, you can set the
    #          target capacity to 0.</p>
    # @param [Hash | Types::ModifyFleetInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyFleetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_fleet(
    #     dry_run: false,
    #     excess_capacity_termination_policy: 'no-termination', # accepts ["no-termination", "termination"]
    #     launch_template_configs: [
    #       {
    #         launch_template_specification: {
    #           launch_template_id: 'LaunchTemplateId',
    #           launch_template_name: 'LaunchTemplateName',
    #           version: 'Version'
    #         },
    #         overrides: [
    #           {
    #             instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #             max_price: 'MaxPrice',
    #             subnet_id: 'SubnetId',
    #             availability_zone: 'AvailabilityZone',
    #             weighted_capacity: 1.0,
    #             priority: 1.0,
    #             placement: {
    #               availability_zone: 'AvailabilityZone',
    #               affinity: 'Affinity',
    #               group_name: 'GroupName',
    #               partition_number: 1,
    #               host_id: 'HostId',
    #               tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #               spread_domain: 'SpreadDomain',
    #               host_resource_group_arn: 'HostResourceGroupArn',
    #               group_id: 'GroupId'
    #             },
    #             instance_requirements: {
    #               v_cpu_count: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               memory_mi_b: {
    #                 min: 1, # required
    #                 max: 1
    #               }, # required
    #               cpu_manufacturers: [
    #                 'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #               ],
    #               memory_gi_b_per_v_cpu: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               excluded_instance_types: [
    #                 'member'
    #               ],
    #               instance_generations: [
    #                 'current' # accepts ["current", "previous"]
    #               ],
    #               spot_max_price_percentage_over_lowest_price: 1,
    #               on_demand_max_price_percentage_over_lowest_price: 1,
    #               bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #               burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #               require_hibernate_support: false,
    #               network_interface_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               local_storage: 'included', # accepts ["included", "required", "excluded"]
    #               local_storage_types: [
    #                 'hdd' # accepts ["hdd", "ssd"]
    #               ],
    #               total_local_storage_gb: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               baseline_ebs_bandwidth_mbps: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_types: [
    #                 'gpu' # accepts ["gpu", "fpga", "inference"]
    #               ],
    #               accelerator_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_manufacturers: [
    #                 'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #               ],
    #               accelerator_names: [
    #                 'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #               ],
    #               accelerator_total_memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               network_bandwidth_gbps: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               allowed_instance_types: [
    #                 'member'
    #               ],
    #               max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #             },
    #             image_id: 'ImageId'
    #           }
    #         ]
    #       }
    #     ],
    #     fleet_id: 'FleetId', # required
    #     target_capacity_specification: {
    #       total_target_capacity: 1, # required
    #       on_demand_target_capacity: 1,
    #       spot_target_capacity: 1,
    #       default_target_capacity_type: 'spot', # accepts ["spot", "on-demand", "capacity-block"]
    #       target_capacity_unit_type: 'vcpu' # accepts ["vcpu", "memory-mib", "units"]
    #     },
    #     context: 'Context'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyFleetOutput
    #   resp.data.return #=> Boolean
    def modify_fleet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyFleetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyFleet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_fleet,
        tracer: tracer
      )
      Telemetry::ModifyFleet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_fleet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_fleet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_fleet] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    # @param [Hash | Types::ModifyFpgaImageAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyFpgaImageAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_fpga_image_attribute(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId', # required
    #     attribute: 'description', # accepts ["description", "name", "loadPermission", "productCodes"]
    #     operation_type: 'add', # accepts ["add", "remove"]
    #     user_ids: [
    #       'member'
    #     ],
    #     user_groups: [
    #       'member'
    #     ],
    #     product_codes: [
    #       'member'
    #     ],
    #     load_permission: {
    #       add: [
    #         {
    #           group: 'all', # accepts ["all"]
    #           user_id: 'UserId'
    #         }
    #       ],
    #     },
    #     description: 'Description',
    #     name: 'Name'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyFpgaImageAttributeOutput
    #   resp.data.fpga_image_attribute #=> Types::FpgaImageAttribute
    #   resp.data.fpga_image_attribute.fpga_image_id #=> String
    #   resp.data.fpga_image_attribute.name #=> String
    #   resp.data.fpga_image_attribute.description #=> String
    #   resp.data.fpga_image_attribute.load_permissions #=> Array<LoadPermission>
    #   resp.data.fpga_image_attribute.load_permissions[0] #=> Types::LoadPermission
    #   resp.data.fpga_image_attribute.load_permissions[0].user_id #=> String
    #   resp.data.fpga_image_attribute.load_permissions[0].group #=> String, one of ["all"]
    #   resp.data.fpga_image_attribute.product_codes #=> Array<ProductCode>
    #   resp.data.fpga_image_attribute.product_codes[0] #=> Types::ProductCode
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_id #=> String
    #   resp.data.fpga_image_attribute.product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    def modify_fpga_image_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyFpgaImageAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyFpgaImageAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_fpga_image_attribute,
        tracer: tracer
      )
      Telemetry::ModifyFpgaImageAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_fpga_image_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_fpga_image_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_fpga_image_attribute] #{output.data}")
        output
      end
    end

    # <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled,
    #             any instances that you launch with a tenancy of <code>host</code> but without a specific
    #             host ID are placed onto any available Dedicated Host in your account that has
    #             auto-placement enabled. When auto-placement is disabled, you need to provide a host ID
    #             to have the instance launch onto a specific host. If no host ID is provided, the
    #             instance is launched onto a suitable host with auto-placement enabled.</p>
    #          <p>You can also use this API action to modify a Dedicated Host to support either multiple
    #             instance types in an instance family, or to support a specific instance type
    #             only.</p>
    # @param [Hash | Types::ModifyHostsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyHostsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_hosts(
    #     auto_placement: 'on', # accepts ["on", "off"]
    #     host_ids: [
    #       'member'
    #     ], # required
    #     host_recovery: 'on', # accepts ["on", "off"]
    #     instance_type: 'InstanceType',
    #     instance_family: 'InstanceFamily',
    #     host_maintenance: 'on' # accepts ["on", "off"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyHostsOutput
    #   resp.data.successful #=> Array<String>
    #   resp.data.successful[0] #=> String
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def modify_hosts(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyHostsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyHosts.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_hosts,
        tracer: tracer
      )
      Telemetry::ModifyHosts.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_hosts] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_hosts] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_hosts] #{output.data}")
        output
      end
    end

    # <p>Modifies the ID format for the specified resource on a per-Region basis. You can
    #             specify that resources should receive longer IDs (17-character IDs) when they are
    #             created.</p>
    #          <p>This request can only be used to modify longer ID settings for resource types that
    #             are within the opt-in period. Resources currently in their opt-in period include:
    #             <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #             <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #             <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #             <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
    #             | <code>network-acl-association</code> | <code>network-interface</code> |
    #             <code>network-interface-attachment</code> | <code>prefix-list</code> |
    #             <code>route-table</code> | <code>route-table-association</code> |
    #             <code>security-group</code> | <code>subnet</code> |
    #             <code>subnet-cidr-block-association</code> | <code>vpc</code> |
    #             <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    #          <p>This setting applies to the IAM user who makes the request; it does not apply to the
    #         entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user. If
    #         you're using this action as the root user, then these settings apply to the entire account,
    #         unless an IAM user explicitly overrides these settings for themselves. For more information,
    #         see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a>
    #         in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>Resources created with longer IDs are visible to all IAM roles and users, regardless
    #         of these settings and provided that they have permission to use the relevant
    #         <code>Describe</code> command for the resource type.</p>
    # @param [Hash | Types::ModifyIdFormatInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIdFormatInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_id_format(
    #     resource: 'Resource', # required
    #     use_long_ids: false # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIdFormatOutput
    def modify_id_format(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIdFormatInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIdFormat.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_id_format,
        tracer: tracer
      )
      Telemetry::ModifyIdFormat.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_id_format] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_id_format] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_id_format] #{output.data}")
        output
      end
    end

    # <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root
    #        user for an account; or all IAM users, IAM roles, and the root user for an account. You can
    #        specify that resources should receive longer IDs (17-character IDs) when they are created. </p>
    #          <p>This request can only be used to modify longer ID settings for resource types that are
    #        within the opt-in period. Resources currently in their opt-in period include:
    #                 <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
    #                 <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
    #                 <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
    #                 <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
    #             | <code>network-acl-association</code> | <code>network-interface</code> |
    #                 <code>network-interface-attachment</code> | <code>prefix-list</code> |
    #                 <code>route-table</code> | <code>route-table-association</code> |
    #                 <code>security-group</code> | <code>subnet</code> |
    #                 <code>subnet-cidr-block-association</code> | <code>vpc</code> |
    #         <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the
    #                 <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
    #          <p>This setting applies to the principal specified in the request; it does not apply to the
    #       principal that makes the request. </p>
    #          <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these
    #       settings and provided that they have permission to use the relevant <code>Describe</code>
    #       command for the resource type.</p>
    # @param [Hash | Types::ModifyIdentityIdFormatInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIdentityIdFormatInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_identity_id_format(
    #     principal_arn: 'PrincipalArn', # required
    #     resource: 'Resource', # required
    #     use_long_ids: false # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIdentityIdFormatOutput
    def modify_identity_id_format(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIdentityIdFormatInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIdentityIdFormat.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_identity_id_format,
        tracer: tracer
      )
      Telemetry::ModifyIdentityIdFormat.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_identity_id_format] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_identity_id_format] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_identity_id_format] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
    #          <p>To specify the attribute, you can use the <code>Attribute</code> parameter, or one of the following parameters:
    #        <code>Description</code>, <code>ImdsSupport</code>, or <code>LaunchPermission</code>.</p>
    #          <p>Images with an Amazon Web Services Marketplace product code cannot be made public.</p>
    #          <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance
    #        and create an AMI from the instance.</p>
    # @param [Hash | Types::ModifyImageAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyImageAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_image_attribute(
    #     attribute: 'Attribute',
    #     description: {
    #       value: 'Value'
    #     },
    #     image_id: 'ImageId', # required
    #     launch_permission: {
    #       add: [
    #         {
    #           group: 'all', # accepts ["all"]
    #           user_id: 'UserId',
    #           organization_arn: 'OrganizationArn',
    #           organizational_unit_arn: 'OrganizationalUnitArn'
    #         }
    #       ],
    #     },
    #     operation_type: 'add', # accepts ["add", "remove"]
    #     product_codes: [
    #       'member'
    #     ],
    #     user_groups: [
    #       'member'
    #     ],
    #     user_ids: [
    #       'member'
    #     ],
    #     value: 'Value',
    #     dry_run: false,
    #     organization_arns: [
    #       'member'
    #     ],
    #     organizational_unit_arns: [
    #       'member'
    #     ],
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyImageAttributeOutput
    # @example To make an AMI public
    #   # This example makes the specified AMI public.
    #   resp = client.modify_image_attribute({
    #     image_id: "ami-5731123e",
    #     launch_permission: {
    #       add: [
    #         {
    #           group: "all"
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To grant launch permissions
    #   # This example grants launch permissions for the specified AMI to the specified AWS account.
    #   resp = client.modify_image_attribute({
    #     image_id: "ami-5731123e",
    #     launch_permission: {
    #       add: [
    #         {
    #           user_id: "123456789012"
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def modify_image_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyImageAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyImageAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_image_attribute,
        tracer: tracer
      )
      Telemetry::ModifyImageAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_image_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_image_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_image_attribute] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified attribute of the specified instance. You can specify only one
    #             attribute at a time.</p>
    #          <p>
    #             <b>Note: </b>Using this action to change the security groups
    #             associated with an elastic network interface (ENI) attached to an instance can
    #             result in an error if the instance has more than one ENI. To change the security groups
    #             associated with an ENI attached to an instance that has multiple ENIs, we recommend that
    #             you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p>
    #          <p>To modify some attributes, the instance must be stopped. For more information, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modify a stopped instance</a> in the
    #             <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyInstanceAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_attribute(
    #     source_dest_check: {
    #       value: false
    #     },
    #     attribute: 'instanceType', # accepts ["instanceType", "kernel", "ramdisk", "userData", "disableApiTermination", "instanceInitiatedShutdownBehavior", "rootDeviceName", "blockDeviceMapping", "productCodes", "sourceDestCheck", "groupSet", "ebsOptimized", "sriovNetSupport", "enaSupport", "enclaveOptions", "disableApiStop"]
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         ebs: {
    #           delete_on_termination: false,
    #           volume_id: 'VolumeId'
    #         },
    #         no_device: 'NoDevice',
    #         virtual_name: 'VirtualName'
    #       }
    #     ],
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ],
    #     instance_id: 'InstanceId', # required
    #     instance_initiated_shutdown_behavior: {
    #       value: 'Value'
    #     },
    #     user_data: {
    #       value: 'Value'
    #     },
    #     value: 'Value',
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceAttributeOutput
    # @example To modify the instance type
    #   # This example modifies the instance type of the specified stopped instance.
    #   resp = client.modify_instance_attribute({
    #     instance_id: "i-1234567890abcdef0",
    #     instance_type: {
    #       value: "m5.large"
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To enable enhanced networking
    #   # This example enables enhanced networking for the specified stopped instance.
    #   resp = client.modify_instance_attribute({
    #     instance_id: "i-1234567890abcdef0",
    #     ena_support: {
    #       value: true
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def modify_instance_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_attribute,
        tracer: tracer
      )
      Telemetry::ModifyInstanceAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_attribute] #{output.data}")
        output
      end
    end

    # <p>Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an
    # 			instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching
    # 			attributes, or run On-Demand Instance capacity.</p>
    # @param [Hash | Types::ModifyInstanceCapacityReservationAttributesInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceCapacityReservationAttributesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_capacity_reservation_attributes(
    #     instance_id: 'InstanceId', # required
    #     capacity_reservation_specification: {
    #       capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #       capacity_reservation_target: {
    #         capacity_reservation_id: 'CapacityReservationId',
    #         capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #       }
    #     }, # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceCapacityReservationAttributesOutput
    #   resp.data.return #=> Boolean
    def modify_instance_capacity_reservation_attributes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceCapacityReservationAttributesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceCapacityReservationAttributes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_capacity_reservation_attributes,
        tracer: tracer
      )
      Telemetry::ModifyInstanceCapacityReservationAttributes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_capacity_reservation_attributes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_capacity_reservation_attributes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_capacity_reservation_attributes] #{output.data}")
        output
      end
    end

    # <p>Modifies the credit option for CPU usage on a running or stopped burstable performance
    #             instance. The credit options are <code>standard</code> and
    #             <code>unlimited</code>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
    #                 performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyInstanceCreditSpecificationInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceCreditSpecificationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_credit_specification(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     instance_credit_specifications: [
    #       {
    #         instance_id: 'InstanceId', # required
    #         cpu_credits: 'CpuCredits'
    #       }
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceCreditSpecificationOutput
    #   resp.data.successful_instance_credit_specifications #=> Array<SuccessfulInstanceCreditSpecificationItem>
    #   resp.data.successful_instance_credit_specifications[0] #=> Types::SuccessfulInstanceCreditSpecificationItem
    #   resp.data.successful_instance_credit_specifications[0].instance_id #=> String
    #   resp.data.unsuccessful_instance_credit_specifications #=> Array<UnsuccessfulInstanceCreditSpecificationItem>
    #   resp.data.unsuccessful_instance_credit_specifications[0] #=> Types::UnsuccessfulInstanceCreditSpecificationItem
    #   resp.data.unsuccessful_instance_credit_specifications[0].instance_id #=> String
    #   resp.data.unsuccessful_instance_credit_specifications[0].error #=> Types::UnsuccessfulInstanceCreditSpecificationItemError
    #   resp.data.unsuccessful_instance_credit_specifications[0].error.code #=> String, one of ["InvalidInstanceID.Malformed", "InvalidInstanceID.NotFound", "IncorrectInstanceState", "InstanceCreditSpecification.NotSupported"]
    #   resp.data.unsuccessful_instance_credit_specifications[0].error.message #=> String
    def modify_instance_credit_specification(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceCreditSpecificationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceCreditSpecification.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_credit_specification,
        tracer: tracer
      )
      Telemetry::ModifyInstanceCreditSpecification.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_credit_specification] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_credit_specification] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_credit_specification] #{output.data}")
        output
      end
    end

    # <p>Modifies the start time for a scheduled Amazon EC2 instance event.</p>
    # @param [Hash | Types::ModifyInstanceEventStartTimeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceEventStartTimeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_event_start_time(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     instance_event_id: 'InstanceEventId', # required
    #     not_before: Time.now # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceEventStartTimeOutput
    #   resp.data.event #=> Types::InstanceStatusEvent
    #   resp.data.event.instance_event_id #=> String
    #   resp.data.event.code #=> String, one of ["instance-reboot", "system-reboot", "system-maintenance", "instance-retirement", "instance-stop"]
    #   resp.data.event.description #=> String
    #   resp.data.event.not_after #=> Time
    #   resp.data.event.not_before #=> Time
    #   resp.data.event.not_before_deadline #=> Time
    def modify_instance_event_start_time(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceEventStartTimeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceEventStartTime.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_event_start_time,
        tracer: tracer
      )
      Telemetry::ModifyInstanceEventStartTime.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_event_start_time] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_event_start_time] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_event_start_time] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified event window.</p>
    #          <p>You can define either a set of time ranges or a cron expression when modifying the event
    #          window, but not both.</p>
    #          <p>To modify the targets associated with the event window, use the <a>AssociateInstanceEventWindow</a> and <a>DisassociateInstanceEventWindow</a> API.</p>
    #          <p>If Amazon Web Services has already scheduled an event, modifying an event window won't change the time
    #          of the scheduled event.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
    #             events</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyInstanceEventWindowInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceEventWindowInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_event_window(
    #     dry_run: false,
    #     name: 'Name',
    #     instance_event_window_id: 'InstanceEventWindowId', # required
    #     time_ranges: [
    #       {
    #         start_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         start_hour: 1,
    #         end_week_day: 'sunday', # accepts ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #         end_hour: 1
    #       }
    #     ],
    #     cron_expression: 'CronExpression'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceEventWindowOutput
    #   resp.data.instance_event_window #=> Types::InstanceEventWindow
    #   resp.data.instance_event_window.instance_event_window_id #=> String
    #   resp.data.instance_event_window.time_ranges #=> Array<InstanceEventWindowTimeRange>
    #   resp.data.instance_event_window.time_ranges[0] #=> Types::InstanceEventWindowTimeRange
    #   resp.data.instance_event_window.time_ranges[0].start_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].start_hour #=> Integer
    #   resp.data.instance_event_window.time_ranges[0].end_week_day #=> String, one of ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
    #   resp.data.instance_event_window.time_ranges[0].end_hour #=> Integer
    #   resp.data.instance_event_window.name #=> String
    #   resp.data.instance_event_window.cron_expression #=> String
    #   resp.data.instance_event_window.association_target #=> Types::InstanceEventWindowAssociationTarget
    #   resp.data.instance_event_window.association_target.instance_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.instance_ids[0] #=> String
    #   resp.data.instance_event_window.association_target.tags #=> Array<Tag>
    #   resp.data.instance_event_window.association_target.tags[0] #=> Types::Tag
    #   resp.data.instance_event_window.association_target.tags[0].key #=> String
    #   resp.data.instance_event_window.association_target.tags[0].value #=> String
    #   resp.data.instance_event_window.association_target.dedicated_host_ids #=> Array<String>
    #   resp.data.instance_event_window.association_target.dedicated_host_ids[0] #=> String
    #   resp.data.instance_event_window.state #=> String, one of ["creating", "deleting", "active", "deleted"]
    #   resp.data.instance_event_window.tags #=> Array<Tag>
    def modify_instance_event_window(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceEventWindowInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceEventWindow.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_event_window,
        tracer: tracer
      )
      Telemetry::ModifyInstanceEventWindow.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_event_window] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_event_window] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_event_window] #{output.data}")
        output
      end
    end

    # <p>Modifies the recovery behavior of your instance to disable simplified automatic
    #             recovery or set the recovery behavior to default. The default configuration will not
    #             enable simplified automatic recovery for an unsupported instance type. For more
    #             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery">Simplified automatic recovery</a>.</p>
    # @param [Hash | Types::ModifyInstanceMaintenanceOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceMaintenanceOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_maintenance_options(
    #     instance_id: 'InstanceId', # required
    #     auto_recovery: 'disabled', # accepts ["disabled", "default"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceMaintenanceOptionsOutput
    #   resp.data.instance_id #=> String
    #   resp.data.auto_recovery #=> String, one of ["disabled", "default"]
    def modify_instance_maintenance_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceMaintenanceOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceMaintenanceOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_maintenance_options,
        tracer: tracer
      )
      Telemetry::ModifyInstanceMaintenanceOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_maintenance_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_maintenance_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_maintenance_options] #{output.data}")
        output
      end
    end

    # <p>Modify the instance metadata parameters on a running or stopped instance. When you
    #             modify the parameters on a stopped instance, they are applied when the instance is
    #             started. When you modify the parameters on a running instance, the API responds with a
    #             state of “pending”. After the parameter modifications are successfully applied to the
    #             instance, the state of the modifications changes from “pending” to “applied” in
    #             subsequent describe-instances API calls. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyInstanceMetadataOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstanceMetadataOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_metadata_options(
    #     instance_id: 'InstanceId', # required
    #     http_tokens: 'optional', # accepts ["optional", "required"]
    #     http_put_response_hop_limit: 1,
    #     http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #     dry_run: false,
    #     http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #     instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstanceMetadataOptionsOutput
    #   resp.data.instance_id #=> String
    #   resp.data.instance_metadata_options #=> Types::InstanceMetadataOptionsResponse
    #   resp.data.instance_metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.instance_metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.instance_metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.instance_metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.instance_metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.instance_metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    def modify_instance_metadata_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstanceMetadataOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstanceMetadataOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_metadata_options,
        tracer: tracer
      )
      Telemetry::ModifyInstanceMetadataOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_metadata_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_metadata_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_metadata_options] #{output.data}")
        output
      end
    end

    # <p>Modifies the placement attributes for a specified instance. You can do the
    #             following:</p>
    #          <ul>
    #             <li>
    #                <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
    #                         Host</a>. When affinity is set to <code>host</code> and the instance is
    #                     not associated with a specific Dedicated Host, the next time the instance is
    #                     launched, it is automatically associated with the host on which it lands. If the
    #                     instance is restarted or rebooted, this relationship persists.</p>
    #             </li>
    #             <li>
    #                <p>Change the Dedicated Host with which an instance is associated.</p>
    #             </li>
    #             <li>
    #                <p>Change the instance tenancy of an instance.</p>
    #             </li>
    #             <li>
    #                <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement
    #                     group</a>.</p>
    #             </li>
    #          </ul>
    #          <p>At least one attribute for affinity, host ID, tenancy, or placement group name must be
    #             specified in the request. Affinity and tenancy can be modified in the same
    #             request.</p>
    #          <p>To modify the host ID, tenancy, placement group, or partition for an instance, the
    #             instance must be in the <code>stopped</code> state.</p>
    # @param [Hash | Types::ModifyInstancePlacementInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyInstancePlacementInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_instance_placement(
    #     affinity: 'default', # accepts ["default", "host"]
    #     group_name: 'GroupName',
    #     host_id: 'HostId',
    #     instance_id: 'InstanceId', # required
    #     tenancy: 'dedicated', # accepts ["dedicated", "host"]
    #     partition_number: 1,
    #     host_resource_group_arn: 'HostResourceGroupArn',
    #     group_id: 'GroupId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyInstancePlacementOutput
    #   resp.data.return #=> Boolean
    def modify_instance_placement(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyInstancePlacementInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyInstancePlacement.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_instance_placement,
        tracer: tracer
      )
      Telemetry::ModifyInstancePlacement.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_placement] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_instance_placement] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_instance_placement] #{output.data}")
        output
      end
    end

    # <p>Modify the configurations of an IPAM.
    #       </p>
    # @param [Hash | Types::ModifyIpamInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIpamInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_ipam(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     description: 'Description',
    #     add_operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     remove_operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     tier: 'free' # accepts ["free", "advanced"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIpamOutput
    #   resp.data.ipam #=> Types::Ipam
    #   resp.data.ipam.owner_id #=> String
    #   resp.data.ipam.ipam_id #=> String
    #   resp.data.ipam.ipam_arn #=> String
    #   resp.data.ipam.ipam_region #=> String
    #   resp.data.ipam.public_default_scope_id #=> String
    #   resp.data.ipam.private_default_scope_id #=> String
    #   resp.data.ipam.scope_count #=> Integer
    #   resp.data.ipam.description #=> String
    #   resp.data.ipam.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam.operating_regions[0].region_name #=> String
    #   resp.data.ipam.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam.tags #=> Array<Tag>
    #   resp.data.ipam.tags[0] #=> Types::Tag
    #   resp.data.ipam.tags[0].key #=> String
    #   resp.data.ipam.tags[0].value #=> String
    #   resp.data.ipam.default_resource_discovery_id #=> String
    #   resp.data.ipam.default_resource_discovery_association_id #=> String
    #   resp.data.ipam.resource_discovery_association_count #=> Integer
    #   resp.data.ipam.state_message #=> String
    #   resp.data.ipam.tier #=> String, one of ["free", "advanced"]
    def modify_ipam(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIpamInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIpam.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_ipam,
        tracer: tracer
      )
      Telemetry::ModifyIpam.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_ipam] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam] #{output.data}")
        output
      end
    end

    # <p>Modify the configurations of an IPAM pool.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/mod-pool-ipam.html">Modify a pool</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::ModifyIpamPoolInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIpamPoolInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_ipam_pool(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     description: 'Description',
    #     auto_import: false,
    #     allocation_min_netmask_length: 1,
    #     allocation_max_netmask_length: 1,
    #     allocation_default_netmask_length: 1,
    #     clear_allocation_default_netmask_length: false,
    #     add_allocation_resource_tags: [
    #       {
    #         key: 'Key',
    #         value: 'Value'
    #       }
    #     ],
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIpamPoolOutput
    #   resp.data.ipam_pool #=> Types::IpamPool
    #   resp.data.ipam_pool.owner_id #=> String
    #   resp.data.ipam_pool.ipam_pool_id #=> String
    #   resp.data.ipam_pool.source_ipam_pool_id #=> String
    #   resp.data.ipam_pool.ipam_pool_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_arn #=> String
    #   resp.data.ipam_pool.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_pool.ipam_arn #=> String
    #   resp.data.ipam_pool.ipam_region #=> String
    #   resp.data.ipam_pool.locale #=> String
    #   resp.data.ipam_pool.pool_depth #=> Integer
    #   resp.data.ipam_pool.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_pool.state_message #=> String
    #   resp.data.ipam_pool.description #=> String
    #   resp.data.ipam_pool.auto_import #=> Boolean
    #   resp.data.ipam_pool.publicly_advertisable #=> Boolean
    #   resp.data.ipam_pool.address_family #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.ipam_pool.allocation_min_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_max_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_default_netmask_length #=> Integer
    #   resp.data.ipam_pool.allocation_resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_pool.allocation_resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_pool.allocation_resource_tags[0].key #=> String
    #   resp.data.ipam_pool.allocation_resource_tags[0].value #=> String
    #   resp.data.ipam_pool.tags #=> Array<Tag>
    #   resp.data.ipam_pool.tags[0] #=> Types::Tag
    #   resp.data.ipam_pool.tags[0].key #=> String
    #   resp.data.ipam_pool.tags[0].value #=> String
    #   resp.data.ipam_pool.aws_service #=> String, one of ["ec2"]
    #   resp.data.ipam_pool.public_ip_source #=> String, one of ["amazon", "byoip"]
    #   resp.data.ipam_pool.source_resource #=> Types::IpamPoolSourceResource
    #   resp.data.ipam_pool.source_resource.resource_id #=> String
    #   resp.data.ipam_pool.source_resource.resource_type #=> String, one of ["vpc"]
    #   resp.data.ipam_pool.source_resource.resource_region #=> String
    #   resp.data.ipam_pool.source_resource.resource_owner #=> String
    def modify_ipam_pool(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIpamPoolInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIpamPool.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_ipam_pool,
        tracer: tracer
      )
      Telemetry::ModifyIpamPool.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_pool] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_ipam_pool] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_pool] #{output.data}")
        output
      end
    end

    # <p>Modify a resource CIDR. You can use this action to transfer resource CIDRs between scopes and ignore resource CIDRs that you do not want to manage. If set to false, the resource will not be tracked for overlap, it cannot be auto-imported into a pool, and it will be removed from any pool it has an allocation in.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/move-resource-ipam.html">Move resource CIDRs between scopes</a> and <a href="https://docs.aws.amazon.com/vpc/latest/ipam/change-monitoring-state-ipam.html">Change the monitoring state of resource CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    # @param [Hash | Types::ModifyIpamResourceCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIpamResourceCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_ipam_resource_cidr(
    #     dry_run: false,
    #     resource_id: 'ResourceId', # required
    #     resource_cidr: 'ResourceCidr', # required
    #     resource_region: 'ResourceRegion', # required
    #     current_ipam_scope_id: 'CurrentIpamScopeId', # required
    #     destination_ipam_scope_id: 'DestinationIpamScopeId',
    #     monitored: false # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIpamResourceCidrOutput
    #   resp.data.ipam_resource_cidr #=> Types::IpamResourceCidr
    #   resp.data.ipam_resource_cidr.ipam_id #=> String
    #   resp.data.ipam_resource_cidr.ipam_scope_id #=> String
    #   resp.data.ipam_resource_cidr.ipam_pool_id #=> String
    #   resp.data.ipam_resource_cidr.resource_region #=> String
    #   resp.data.ipam_resource_cidr.resource_owner_id #=> String
    #   resp.data.ipam_resource_cidr.resource_id #=> String
    #   resp.data.ipam_resource_cidr.resource_name #=> String
    #   resp.data.ipam_resource_cidr.resource_cidr #=> String
    #   resp.data.ipam_resource_cidr.resource_type #=> String, one of ["vpc", "subnet", "eip", "public-ipv4-pool", "ipv6-pool", "eni"]
    #   resp.data.ipam_resource_cidr.resource_tags #=> Array<IpamResourceTag>
    #   resp.data.ipam_resource_cidr.resource_tags[0] #=> Types::IpamResourceTag
    #   resp.data.ipam_resource_cidr.resource_tags[0].key #=> String
    #   resp.data.ipam_resource_cidr.resource_tags[0].value #=> String
    #   resp.data.ipam_resource_cidr.ip_usage #=> Float
    #   resp.data.ipam_resource_cidr.compliance_status #=> String, one of ["compliant", "noncompliant", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidr.management_state #=> String, one of ["managed", "unmanaged", "ignored"]
    #   resp.data.ipam_resource_cidr.overlap_status #=> String, one of ["overlapping", "nonoverlapping", "ignored"]
    #   resp.data.ipam_resource_cidr.vpc_id #=> String
    def modify_ipam_resource_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIpamResourceCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIpamResourceCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_ipam_resource_cidr,
        tracer: tracer
      )
      Telemetry::ModifyIpamResourceCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_resource_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_ipam_resource_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_resource_cidr] #{output.data}")
        output
      end
    end

    # <p>Modifies a resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
    # @param [Hash | Types::ModifyIpamResourceDiscoveryInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIpamResourceDiscoveryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_ipam_resource_discovery(
    #     dry_run: false,
    #     ipam_resource_discovery_id: 'IpamResourceDiscoveryId', # required
    #     description: 'Description',
    #     add_operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ],
    #     remove_operating_regions: [
    #       {
    #         region_name: 'RegionName'
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIpamResourceDiscoveryOutput
    #   resp.data.ipam_resource_discovery #=> Types::IpamResourceDiscovery
    #   resp.data.ipam_resource_discovery.owner_id #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_id #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_arn #=> String
    #   resp.data.ipam_resource_discovery.ipam_resource_discovery_region #=> String
    #   resp.data.ipam_resource_discovery.description #=> String
    #   resp.data.ipam_resource_discovery.operating_regions #=> Array<IpamOperatingRegion>
    #   resp.data.ipam_resource_discovery.operating_regions[0] #=> Types::IpamOperatingRegion
    #   resp.data.ipam_resource_discovery.operating_regions[0].region_name #=> String
    #   resp.data.ipam_resource_discovery.is_default #=> Boolean
    #   resp.data.ipam_resource_discovery.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_resource_discovery.tags #=> Array<Tag>
    #   resp.data.ipam_resource_discovery.tags[0] #=> Types::Tag
    #   resp.data.ipam_resource_discovery.tags[0].key #=> String
    #   resp.data.ipam_resource_discovery.tags[0].value #=> String
    def modify_ipam_resource_discovery(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIpamResourceDiscoveryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIpamResourceDiscovery.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_ipam_resource_discovery,
        tracer: tracer
      )
      Telemetry::ModifyIpamResourceDiscovery.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_resource_discovery] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_ipam_resource_discovery] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_resource_discovery] #{output.data}")
        output
      end
    end

    # <p>Modify an IPAM scope.</p>
    # @param [Hash | Types::ModifyIpamScopeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyIpamScopeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_ipam_scope(
    #     dry_run: false,
    #     ipam_scope_id: 'IpamScopeId', # required
    #     description: 'Description'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyIpamScopeOutput
    #   resp.data.ipam_scope #=> Types::IpamScope
    #   resp.data.ipam_scope.owner_id #=> String
    #   resp.data.ipam_scope.ipam_scope_id #=> String
    #   resp.data.ipam_scope.ipam_scope_arn #=> String
    #   resp.data.ipam_scope.ipam_arn #=> String
    #   resp.data.ipam_scope.ipam_region #=> String
    #   resp.data.ipam_scope.ipam_scope_type #=> String, one of ["public", "private"]
    #   resp.data.ipam_scope.is_default #=> Boolean
    #   resp.data.ipam_scope.description #=> String
    #   resp.data.ipam_scope.pool_count #=> Integer
    #   resp.data.ipam_scope.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "delete-in-progress", "delete-complete", "delete-failed", "isolate-in-progress", "isolate-complete", "restore-in-progress"]
    #   resp.data.ipam_scope.tags #=> Array<Tag>
    #   resp.data.ipam_scope.tags[0] #=> Types::Tag
    #   resp.data.ipam_scope.tags[0].key #=> String
    #   resp.data.ipam_scope.tags[0].value #=> String
    def modify_ipam_scope(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyIpamScopeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyIpamScope.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_ipam_scope,
        tracer: tracer
      )
      Telemetry::ModifyIpamScope.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_scope] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_ipam_scope] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_ipam_scope] #{output.data}")
        output
      end
    end

    # <p>Modifies a launch template. You can specify which version of the launch template to
    #             set as the default version. When launching an instance, the default version applies when
    #             a launch template version is not specified.</p>
    # @param [Hash | Types::ModifyLaunchTemplateInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyLaunchTemplateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_launch_template(
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     launch_template_id: 'LaunchTemplateId',
    #     launch_template_name: 'LaunchTemplateName',
    #     default_version: 'DefaultVersion'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyLaunchTemplateOutput
    #   resp.data.launch_template #=> Types::LaunchTemplate
    #   resp.data.launch_template.launch_template_id #=> String
    #   resp.data.launch_template.launch_template_name #=> String
    #   resp.data.launch_template.create_time #=> Time
    #   resp.data.launch_template.created_by #=> String
    #   resp.data.launch_template.default_version_number #=> Integer
    #   resp.data.launch_template.latest_version_number #=> Integer
    #   resp.data.launch_template.tags #=> Array<Tag>
    #   resp.data.launch_template.tags[0] #=> Types::Tag
    #   resp.data.launch_template.tags[0].key #=> String
    #   resp.data.launch_template.tags[0].value #=> String
    # @example To change the default version of a launch template
    #   # This example specifies version 2 as the default version of the specified launch template.
    #   resp = client.modify_launch_template({
    #     launch_template_id: "lt-0abcd290751193123",
    #     default_version: "2"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     launch_template: {
    #       latest_version_number: 2,
    #       launch_template_id: "lt-0abcd290751193123",
    #       launch_template_name: "WebServers",
    #       default_version_number: 2,
    #       created_by: "arn:aws:iam::123456789012:root",
    #       create_time: Time.parse('2017-12-01T13:35:46.000Z')
    #     }
    #   }
    def modify_launch_template(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyLaunchTemplateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyLaunchTemplate.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_launch_template,
        tracer: tracer
      )
      Telemetry::ModifyLaunchTemplate.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_launch_template] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_launch_template] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_launch_template] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified local gateway route.</p>
    # @param [Hash | Types::ModifyLocalGatewayRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyLocalGatewayRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_local_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     local_gateway_virtual_interface_group_id: 'LocalGatewayVirtualInterfaceGroupId',
    #     network_interface_id: 'NetworkInterfaceId',
    #     dry_run: false,
    #     destination_prefix_list_id: 'DestinationPrefixListId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyLocalGatewayRouteOutput
    #   resp.data.route #=> Types::LocalGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.local_gateway_virtual_interface_group_id #=> String
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.route.local_gateway_route_table_id #=> String
    #   resp.data.route.local_gateway_route_table_arn #=> String
    #   resp.data.route.owner_id #=> String
    #   resp.data.route.subnet_id #=> String
    #   resp.data.route.coip_pool_id #=> String
    #   resp.data.route.network_interface_id #=> String
    #   resp.data.route.destination_prefix_list_id #=> String
    def modify_local_gateway_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyLocalGatewayRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyLocalGatewayRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_local_gateway_route,
        tracer: tracer
      )
      Telemetry::ModifyLocalGatewayRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_local_gateway_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_local_gateway_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_local_gateway_route] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified managed prefix list.</p>
    #          <p>Adding or removing entries in a prefix list creates a new version of the prefix list.
    #             Changing the name of the prefix list does not affect the version.</p>
    #          <p>If you specify a current version number that does not match the true current version
    #             number, the request fails.</p>
    # @param [Hash | Types::ModifyManagedPrefixListInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyManagedPrefixListInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_managed_prefix_list(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     current_version: 1,
    #     prefix_list_name: 'PrefixListName',
    #     add_entries: [
    #       {
    #         cidr: 'Cidr', # required
    #         description: 'Description'
    #       }
    #     ],
    #     remove_entries: [
    #       {
    #         cidr: 'Cidr' # required
    #       }
    #     ],
    #     max_entries: 1
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyManagedPrefixListOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    def modify_managed_prefix_list(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyManagedPrefixListInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyManagedPrefixList.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_managed_prefix_list,
        tracer: tracer
      )
      Telemetry::ModifyManagedPrefixList.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_managed_prefix_list] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_managed_prefix_list] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_managed_prefix_list] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified network interface attribute. You can specify only one
    #             attribute at a time. You can use this action to attach and detach security groups from
    #             an existing EC2 instance.</p>
    # @param [Hash | Types::ModifyNetworkInterfaceAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyNetworkInterfaceAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_network_interface_attribute(
    #     attachment: {
    #       attachment_id: 'AttachmentId',
    #       delete_on_termination: false
    #     },
    #     description: {
    #       value: 'Value'
    #     },
    #     dry_run: false,
    #     groups: [
    #       'member'
    #     ],
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     source_dest_check: {
    #       value: false
    #     },
    #     ena_srd_specification: {
    #       ena_srd_enabled: false,
    #       ena_srd_udp_specification: {
    #         ena_srd_udp_enabled: false
    #       }
    #     },
    #     enable_primary_ipv6: false,
    #     connection_tracking_specification: {
    #       tcp_established_timeout: 1,
    #       udp_stream_timeout: 1,
    #       udp_timeout: 1
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyNetworkInterfaceAttributeOutput
    # @example To modify the attachment attribute of a network interface
    #   # This example modifies the attachment attribute of the specified network interface.
    #   resp = client.modify_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     attachment: {
    #       attachment_id: "eni-attach-43348162",
    #       delete_on_termination: false
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To modify the description attribute of a network interface
    #   # This example modifies the description attribute of the specified network interface.
    #   resp = client.modify_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     description: {
    #       value: "My description"
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To modify the groupSet attribute of a network interface
    #   # This example command modifies the groupSet attribute of the specified network interface.
    #   resp = client.modify_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     groups: [
    #       "sg-903004f8",
    #       "sg-1a2b3c4d"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To modify the sourceDestCheck attribute of a network interface
    #   # This example command modifies the sourceDestCheck attribute of the specified network interface.
    #   resp = client.modify_network_interface_attribute({
    #     network_interface_id: "eni-686ea200",
    #     source_dest_check: {
    #       value: false
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def modify_network_interface_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyNetworkInterfaceAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyNetworkInterfaceAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_network_interface_attribute,
        tracer: tracer
      )
      Telemetry::ModifyNetworkInterfaceAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_network_interface_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_network_interface_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_network_interface_attribute] #{output.data}")
        output
      end
    end

    # <p>Modifies the options for instance hostnames for the specified instance.</p>
    # @param [Hash | Types::ModifyPrivateDnsNameOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyPrivateDnsNameOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_private_dns_name_options(
    #     dry_run: false,
    #     instance_id: 'InstanceId', # required
    #     private_dns_hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #     enable_resource_name_dns_a_record: false,
    #     enable_resource_name_dns_aaaa_record: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyPrivateDnsNameOptionsOutput
    #   resp.data.return #=> Boolean
    def modify_private_dns_name_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyPrivateDnsNameOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyPrivateDnsNameOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_private_dns_name_options,
        tracer: tracer
      )
      Telemetry::ModifyPrivateDnsNameOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_private_dns_name_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_private_dns_name_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_private_dns_name_options] #{output.data}")
        output
      end
    end

    # <p>Modifies the configuration of your Reserved Instances, such as the Availability Zone,
    #        instance count, or instance type. The Reserved Instances to be modified must be identical,
    #        except for Availability Zone, network platform, and instance type.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved
    # 				Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyReservedInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyReservedInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_reserved_instances(
    #     reserved_instances_ids: [
    #       'member'
    #     ], # required
    #     client_token: 'ClientToken',
    #     target_configurations: [
    #       {
    #         availability_zone: 'AvailabilityZone',
    #         instance_count: 1,
    #         instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #         platform: 'Platform',
    #         scope: 'Availability Zone' # accepts ["Availability Zone", "Region"]
    #       }
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyReservedInstancesOutput
    #   resp.data.reserved_instances_modification_id #=> String
    def modify_reserved_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyReservedInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyReservedInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_reserved_instances,
        tracer: tracer
      )
      Telemetry::ModifyReservedInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_reserved_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_reserved_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_reserved_instances] #{output.data}")
        output
      end
    end

    # <p>Modifies the rules of a security group.</p>
    # @param [Hash | Types::ModifySecurityGroupRulesInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifySecurityGroupRulesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_security_group_rules(
    #     group_id: 'GroupId', # required
    #     security_group_rules: [
    #       {
    #         security_group_rule_id: 'SecurityGroupRuleId', # required
    #         security_group_rule: {
    #           ip_protocol: 'IpProtocol',
    #           from_port: 1,
    #           to_port: 1,
    #           cidr_ipv4: 'CidrIpv4',
    #           cidr_ipv6: 'CidrIpv6',
    #           prefix_list_id: 'PrefixListId',
    #           referenced_group_id: 'ReferencedGroupId',
    #           description: 'Description'
    #         }
    #       }
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifySecurityGroupRulesOutput
    #   resp.data.return #=> Boolean
    def modify_security_group_rules(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifySecurityGroupRulesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifySecurityGroupRules.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_security_group_rules,
        tracer: tracer
      )
      Telemetry::ModifySecurityGroupRules.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_security_group_rules] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_security_group_rules] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_security_group_rules] #{output.data}")
        output
      end
    end

    # <p>Adds or removes permission settings for the specified snapshot. You may add or remove
    #       specified Amazon Web Services account IDs from a snapshot's list of create volume permissions, but you cannot
    #       do both in a single operation. If you need to both add and remove account IDs for a snapshot,
    #       you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.</p>
    #          <p>Encrypted snapshots and snapshots with Amazon Web Services Marketplace product codes cannot be made
    #       public. Snapshots encrypted with your default KMS key cannot be shared with other accounts.</p>
    #          <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::ModifySnapshotAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifySnapshotAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_snapshot_attribute(
    #     attribute: 'productCodes', # accepts ["productCodes", "createVolumePermission"]
    #     create_volume_permission: {
    #       add: [
    #         {
    #           group: 'all', # accepts ["all"]
    #           user_id: 'UserId'
    #         }
    #       ],
    #     },
    #     group_names: [
    #       'member'
    #     ],
    #     operation_type: 'add', # accepts ["add", "remove"]
    #     snapshot_id: 'SnapshotId', # required
    #     user_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifySnapshotAttributeOutput
    # @example To modify a snapshot attribute
    #   # This example modifies snapshot ``snap-1234567890abcdef0`` to remove the create volume permission for a user with the account ID ``123456789012``. If the command succeeds, no output is returned.
    #   resp = client.modify_snapshot_attribute({
    #     snapshot_id: "snap-1234567890abcdef0",
    #     attribute: "createVolumePermission",
    #     operation_type: "remove",
    #     user_ids: [
    #       "123456789012"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    # @example To make a snapshot public
    #   # This example makes the snapshot ``snap-1234567890abcdef0`` public.
    #   resp = client.modify_snapshot_attribute({
    #     snapshot_id: "snap-1234567890abcdef0",
    #     attribute: "createVolumePermission",
    #     operation_type: "add",
    #     group_names: [
    #       "all"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def modify_snapshot_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifySnapshotAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifySnapshotAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_snapshot_attribute,
        tracer: tracer
      )
      Telemetry::ModifySnapshotAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_snapshot_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_snapshot_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_snapshot_attribute] #{output.data}")
        output
      end
    end

    # <p>Archives an Amazon EBS snapshot. When you archive a snapshot, it is converted to a full
    #       snapshot that includes all of the blocks of data that were written to the volume at the
    #       time the snapshot was created, and moved from the standard tier to the archive
    #       tier. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-archive.html">Archive Amazon EBS snapshots</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::ModifySnapshotTierInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifySnapshotTierInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_snapshot_tier(
    #     snapshot_id: 'SnapshotId', # required
    #     storage_tier: 'archive', # accepts ["archive"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifySnapshotTierOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.tiering_start_time #=> Time
    def modify_snapshot_tier(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifySnapshotTierInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifySnapshotTier.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_snapshot_tier,
        tracer: tracer
      )
      Telemetry::ModifySnapshotTier.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_snapshot_tier] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_snapshot_tier] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_snapshot_tier] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified Spot Fleet request.</p>
    #          <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p>
    #          <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code>
    #             state.</p>
    #          <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the
    #             additional Spot Instances according to the allocation strategy for the Spot Fleet
    #             request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches
    #             instances using the Spot Instance pool with the lowest price. If the allocation strategy
    #             is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot
    #             Instance pools. If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet
    #             launches instances from Spot Instance pools with optimal capacity for the number of instances
    #             that are launching.</p>
    #          <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet
    #             cancels any open requests that exceed the new target capacity. You can request that the
    #             Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the
    #             new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot
    #             Fleet terminates the instances with the highest price per unit. If the allocation
    #             strategy is <code>capacityOptimized</code>, the Spot Fleet terminates the instances in
    #             the Spot Instance pools that have the least available Spot Instance capacity. If the allocation
    #             strategy is <code>diversified</code>, the Spot Fleet terminates instances across the
    #             Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet
    #             at its current size, but not replace any Spot Instances that are interrupted or that you
    #             terminate manually.</p>
    #          <p>If you are finished with your Spot Fleet for now, but will use it again later, you can
    #             set the target capacity to 0.</p>
    # @param [Hash | Types::ModifySpotFleetRequestInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifySpotFleetRequestInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_spot_fleet_request(
    #     excess_capacity_termination_policy: 'noTermination', # accepts ["noTermination", "default"]
    #     launch_template_configs: [
    #       {
    #         launch_template_specification: {
    #           launch_template_id: 'LaunchTemplateId',
    #           launch_template_name: 'LaunchTemplateName',
    #           version: 'Version'
    #         },
    #         overrides: [
    #           {
    #             instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #             spot_price: 'SpotPrice',
    #             subnet_id: 'SubnetId',
    #             availability_zone: 'AvailabilityZone',
    #             weighted_capacity: 1.0,
    #             priority: 1.0,
    #             instance_requirements: {
    #               v_cpu_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               cpu_manufacturers: [
    #                 'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #               ],
    #               memory_gi_b_per_v_cpu: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               excluded_instance_types: [
    #                 'member'
    #               ],
    #               instance_generations: [
    #                 'current' # accepts ["current", "previous"]
    #               ],
    #               spot_max_price_percentage_over_lowest_price: 1,
    #               on_demand_max_price_percentage_over_lowest_price: 1,
    #               bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #               burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #               require_hibernate_support: false,
    #               network_interface_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               local_storage: 'included', # accepts ["included", "required", "excluded"]
    #               local_storage_types: [
    #                 'hdd' # accepts ["hdd", "ssd"]
    #               ],
    #               total_local_storage_gb: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               baseline_ebs_bandwidth_mbps: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_types: [
    #                 'gpu' # accepts ["gpu", "fpga", "inference"]
    #               ],
    #               accelerator_count: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               accelerator_manufacturers: [
    #                 'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #               ],
    #               accelerator_names: [
    #                 'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #               ],
    #               accelerator_total_memory_mi_b: {
    #                 min: 1,
    #                 max: 1
    #               },
    #               network_bandwidth_gbps: {
    #                 min: 1.0,
    #                 max: 1.0
    #               },
    #               allowed_instance_types: [
    #                 'member'
    #               ],
    #               max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #             }
    #           }
    #         ]
    #       }
    #     ],
    #     spot_fleet_request_id: 'SpotFleetRequestId', # required
    #     target_capacity: 1,
    #     on_demand_target_capacity: 1,
    #     context: 'Context'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifySpotFleetRequestOutput
    #   resp.data.return #=> Boolean
    # @example To increase the target capacity of a Spot fleet request
    #   # This example increases the target capacity of the specified Spot fleet request.
    #   resp = client.modify_spot_fleet_request({
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE",
    #     target_capacity: 20
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     return: true
    #   }
    def modify_spot_fleet_request(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifySpotFleetRequestInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifySpotFleetRequest.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_spot_fleet_request,
        tracer: tracer
      )
      Telemetry::ModifySpotFleetRequest.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_spot_fleet_request] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_spot_fleet_request] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_spot_fleet_request] #{output.data}")
        output
      end
    end

    # <p>Modifies a subnet attribute. You can only modify one attribute at a time.</p>
    #          <p>Use this action to modify subnets on Amazon Web Services Outposts.</p>
    #          <ul>
    #             <li>
    #                <p>To modify a subnet on an Outpost rack, set both
    #                         <code>MapCustomerOwnedIpOnLaunch</code> and
    #                         <code>CustomerOwnedIpv4Pool</code>. These two parameters act as a single
    #                     attribute.</p>
    #             </li>
    #             <li>
    #                <p>To modify a subnet on an Outpost server, set either
    #                         <code>EnableLniAtDeviceIndex</code> or
    #                     <code>DisableLniAtDeviceIndex</code>.</p>
    #             </li>
    #          </ul>
    #          <p>For more information about Amazon Web Services Outposts, see the following:</p>
    #          <ul>
    #             <li>
    #                <p>
    #                   <a href="https://docs.aws.amazon.com/outposts/latest/userguide/how-servers-work.html">Outpost servers</a>
    #                </p>
    #             </li>
    #             <li>
    #                <p>
    #                   <a href="https://docs.aws.amazon.com/outposts/latest/userguide/how-racks-work.html">Outpost racks</a>
    #                </p>
    #             </li>
    #          </ul>
    # @param [Hash | Types::ModifySubnetAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifySubnetAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_subnet_attribute(
    #     assign_ipv6_address_on_creation: {
    #       value: false
    #     },
    #     subnet_id: 'SubnetId', # required
    #     customer_owned_ipv4_pool: 'CustomerOwnedIpv4Pool',
    #     private_dns_hostname_type_on_launch: 'ip-name', # accepts ["ip-name", "resource-name"]
    #     enable_lni_at_device_index: 1,
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifySubnetAttributeOutput
    # @example To change a subnet's public IP addressing behavior
    #   # This example modifies the specified subnet so that all instances launched into this subnet are assigned a public IP address.
    #   resp = client.modify_subnet_attribute({
    #     subnet_id: "subnet-1a2b3c4d",
    #     map_public_ip_on_launch: {
    #       value: true
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def modify_subnet_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifySubnetAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifySubnetAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_subnet_attribute,
        tracer: tracer
      )
      Telemetry::ModifySubnetAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_subnet_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_subnet_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_subnet_attribute] #{output.data}")
        output
      end
    end

    # <p>Allows or restricts mirroring network services.</p>
    #          <p> By default, Amazon DNS network services are not eligible for Traffic Mirror. Use <code>AddNetworkServices</code> to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored.
    #          When you no longer want to mirror network services, use <code>RemoveNetworkServices</code> to remove the network services from the Traffic Mirror filter.
    #       </p>
    # @param [Hash | Types::ModifyTrafficMirrorFilterNetworkServicesInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyTrafficMirrorFilterNetworkServicesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_traffic_mirror_filter_network_services(
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId', # required
    #     add_network_services: [
    #       'amazon-dns' # accepts ["amazon-dns"]
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyTrafficMirrorFilterNetworkServicesOutput
    #   resp.data.traffic_mirror_filter #=> Types::TrafficMirrorFilter
    #   resp.data.traffic_mirror_filter.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0] #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_number #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].protocol #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter.ingress_filter_rules[0].description #=> String
    #   resp.data.traffic_mirror_filter.egress_filter_rules #=> Array<TrafficMirrorFilterRule>
    #   resp.data.traffic_mirror_filter.network_services #=> Array<String>
    #   resp.data.traffic_mirror_filter.network_services[0] #=> String, one of ["amazon-dns"]
    #   resp.data.traffic_mirror_filter.description #=> String
    #   resp.data.traffic_mirror_filter.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_filter.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_filter.tags[0].key #=> String
    #   resp.data.traffic_mirror_filter.tags[0].value #=> String
    def modify_traffic_mirror_filter_network_services(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyTrafficMirrorFilterNetworkServicesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyTrafficMirrorFilterNetworkServices.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_traffic_mirror_filter_network_services,
        tracer: tracer
      )
      Telemetry::ModifyTrafficMirrorFilterNetworkServices.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_filter_network_services] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_filter_network_services] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_filter_network_services] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified Traffic Mirror rule.</p>
    #          <p>
    #             <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must both be an IPv4
    #          range or an IPv6 range.</p>
    # @param [Hash | Types::ModifyTrafficMirrorFilterRuleInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyTrafficMirrorFilterRuleInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_traffic_mirror_filter_rule(
    #     traffic_mirror_filter_rule_id: 'TrafficMirrorFilterRuleId', # required
    #     traffic_direction: 'ingress', # accepts ["ingress", "egress"]
    #     rule_number: 1,
    #     rule_action: 'accept', # accepts ["accept", "reject"]
    #     destination_port_range: {
    #       from_port: 1,
    #       to_port: 1
    #     },
    #     protocol: 1,
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     source_cidr_block: 'SourceCidrBlock',
    #     description: 'Description',
    #     remove_fields: [
    #       'destination-port-range' # accepts ["destination-port-range", "source-port-range", "protocol", "description"]
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyTrafficMirrorFilterRuleOutput
    #   resp.data.traffic_mirror_filter_rule #=> Types::TrafficMirrorFilterRule
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_rule_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_filter_rule.traffic_direction #=> String, one of ["ingress", "egress"]
    #   resp.data.traffic_mirror_filter_rule.rule_number #=> Integer
    #   resp.data.traffic_mirror_filter_rule.rule_action #=> String, one of ["accept", "reject"]
    #   resp.data.traffic_mirror_filter_rule.protocol #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.from_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.destination_port_range.to_port #=> Integer
    #   resp.data.traffic_mirror_filter_rule.source_port_range #=> Types::TrafficMirrorPortRange
    #   resp.data.traffic_mirror_filter_rule.destination_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.source_cidr_block #=> String
    #   resp.data.traffic_mirror_filter_rule.description #=> String
    def modify_traffic_mirror_filter_rule(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyTrafficMirrorFilterRuleInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyTrafficMirrorFilterRule.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_traffic_mirror_filter_rule,
        tracer: tracer
      )
      Telemetry::ModifyTrafficMirrorFilterRule.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_filter_rule] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_filter_rule] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_filter_rule] #{output.data}")
        output
      end
    end

    # <p>Modifies a Traffic Mirror session.</p>
    # @param [Hash | Types::ModifyTrafficMirrorSessionInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyTrafficMirrorSessionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_traffic_mirror_session(
    #     traffic_mirror_session_id: 'TrafficMirrorSessionId', # required
    #     traffic_mirror_target_id: 'TrafficMirrorTargetId',
    #     traffic_mirror_filter_id: 'TrafficMirrorFilterId',
    #     packet_length: 1,
    #     session_number: 1,
    #     virtual_network_id: 1,
    #     description: 'Description',
    #     remove_fields: [
    #       'packet-length' # accepts ["packet-length", "description", "virtual-network-id"]
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyTrafficMirrorSessionOutput
    #   resp.data.traffic_mirror_session #=> Types::TrafficMirrorSession
    #   resp.data.traffic_mirror_session.traffic_mirror_session_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_target_id #=> String
    #   resp.data.traffic_mirror_session.traffic_mirror_filter_id #=> String
    #   resp.data.traffic_mirror_session.network_interface_id #=> String
    #   resp.data.traffic_mirror_session.owner_id #=> String
    #   resp.data.traffic_mirror_session.packet_length #=> Integer
    #   resp.data.traffic_mirror_session.session_number #=> Integer
    #   resp.data.traffic_mirror_session.virtual_network_id #=> Integer
    #   resp.data.traffic_mirror_session.description #=> String
    #   resp.data.traffic_mirror_session.tags #=> Array<Tag>
    #   resp.data.traffic_mirror_session.tags[0] #=> Types::Tag
    #   resp.data.traffic_mirror_session.tags[0].key #=> String
    #   resp.data.traffic_mirror_session.tags[0].value #=> String
    def modify_traffic_mirror_session(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyTrafficMirrorSessionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyTrafficMirrorSession.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_traffic_mirror_session,
        tracer: tracer
      )
      Telemetry::ModifyTrafficMirrorSession.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_session] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_session] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_traffic_mirror_session] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified transit gateway. When you modify a transit gateway, the modified options are applied to new transit gateway attachments only. Your existing transit gateway attachments are not modified.</p>
    # @param [Hash | Types::ModifyTransitGatewayInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyTransitGatewayInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_transit_gateway(
    #     transit_gateway_id: 'TransitGatewayId', # required
    #     description: 'Description',
    #     options: {
    #       add_transit_gateway_cidr_blocks: [
    #         'member'
    #       ],
    #       vpn_ecmp_support: 'enable', # accepts ["enable", "disable"]
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       security_group_referencing_support: 'enable', # accepts ["enable", "disable"]
    #       auto_accept_shared_attachments: 'enable', # accepts ["enable", "disable"]
    #       default_route_table_association: 'enable', # accepts ["enable", "disable"]
    #       association_default_route_table_id: 'AssociationDefaultRouteTableId',
    #       default_route_table_propagation: 'enable', # accepts ["enable", "disable"]
    #       propagation_default_route_table_id: 'PropagationDefaultRouteTableId',
    #       amazon_side_asn: 1
    #     },
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyTransitGatewayOutput
    #   resp.data.transit_gateway #=> Types::TransitGateway
    #   resp.data.transit_gateway.transit_gateway_id #=> String
    #   resp.data.transit_gateway.transit_gateway_arn #=> String
    #   resp.data.transit_gateway.state #=> String, one of ["pending", "available", "modifying", "deleting", "deleted"]
    #   resp.data.transit_gateway.owner_id #=> String
    #   resp.data.transit_gateway.description #=> String
    #   resp.data.transit_gateway.creation_time #=> Time
    #   resp.data.transit_gateway.options #=> Types::TransitGatewayOptions
    #   resp.data.transit_gateway.options.amazon_side_asn #=> Integer
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks #=> Array<String>
    #   resp.data.transit_gateway.options.transit_gateway_cidr_blocks[0] #=> String
    #   resp.data.transit_gateway.options.auto_accept_shared_attachments #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.default_route_table_association #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.association_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.default_route_table_propagation #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.propagation_default_route_table_id #=> String
    #   resp.data.transit_gateway.options.vpn_ecmp_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.options.multicast_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway.tags #=> Array<Tag>
    #   resp.data.transit_gateway.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway.tags[0].key #=> String
    #   resp.data.transit_gateway.tags[0].value #=> String
    def modify_transit_gateway(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyTransitGatewayInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyTransitGateway.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_transit_gateway,
        tracer: tracer
      )
      Telemetry::ModifyTransitGateway.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway] #{output.data}")
        output
      end
    end

    # <p>Modifies a reference (route) to a prefix list in a specified transit gateway route table.</p>
    # @param [Hash | Types::ModifyTransitGatewayPrefixListReferenceInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyTransitGatewayPrefixListReferenceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_transit_gateway_prefix_list_reference(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     prefix_list_id: 'PrefixListId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyTransitGatewayPrefixListReferenceOutput
    #   resp.data.transit_gateway_prefix_list_reference #=> Types::TransitGatewayPrefixListReference
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_route_table_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.prefix_list_owner_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.state #=> String, one of ["pending", "available", "modifying", "deleting"]
    #   resp.data.transit_gateway_prefix_list_reference.blackhole #=> Boolean
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment #=> Types::TransitGatewayPrefixListAttachment
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.transit_gateway_prefix_list_reference.transit_gateway_attachment.resource_id #=> String
    def modify_transit_gateway_prefix_list_reference(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyTransitGatewayPrefixListReferenceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyTransitGatewayPrefixListReference.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_transit_gateway_prefix_list_reference,
        tracer: tracer
      )
      Telemetry::ModifyTransitGatewayPrefixListReference.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway_prefix_list_reference] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway_prefix_list_reference] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway_prefix_list_reference] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified VPC attachment.</p>
    # @param [Hash | Types::ModifyTransitGatewayVpcAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyTransitGatewayVpcAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     add_subnet_ids: [
    #       'member'
    #     ],
    #     options: {
    #       dns_support: 'enable', # accepts ["enable", "disable"]
    #       security_group_referencing_support: 'enable', # accepts ["enable", "disable"]
    #       ipv6_support: 'enable', # accepts ["enable", "disable"]
    #       appliance_mode_support: 'enable' # accepts ["enable", "disable"]
    #     },
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    def modify_transit_gateway_vpc_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyTransitGatewayVpcAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyTransitGatewayVpcAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_transit_gateway_vpc_attachment,
        tracer: tracer
      )
      Telemetry::ModifyTransitGatewayVpcAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway_vpc_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway_vpc_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_transit_gateway_vpc_attachment] #{output.data}")
        output
      end
    end

    # <p>Modifies the configuration of the specified Amazon Web Services Verified Access endpoint.</p>
    # @param [Hash | Types::ModifyVerifiedAccessEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_endpoint(
    #     verified_access_endpoint_id: 'VerifiedAccessEndpointId', # required
    #     verified_access_group_id: 'VerifiedAccessGroupId',
    #     load_balancer_options: {
    #       subnet_ids: [
    #         'member'
    #       ],
    #       protocol: 'http', # accepts ["http", "https"]
    #       port: 1
    #     },
    #     network_interface_options: {
    #       protocol: 'http', # accepts ["http", "https"]
    #       port: 1
    #     },
    #     description: 'Description',
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessEndpointOutput
    #   resp.data.verified_access_endpoint #=> Types::VerifiedAccessEndpoint
    #   resp.data.verified_access_endpoint.verified_access_instance_id #=> String
    #   resp.data.verified_access_endpoint.verified_access_group_id #=> String
    #   resp.data.verified_access_endpoint.verified_access_endpoint_id #=> String
    #   resp.data.verified_access_endpoint.application_domain #=> String
    #   resp.data.verified_access_endpoint.endpoint_type #=> String, one of ["load-balancer", "network-interface"]
    #   resp.data.verified_access_endpoint.attachment_type #=> String, one of ["vpc"]
    #   resp.data.verified_access_endpoint.domain_certificate_arn #=> String
    #   resp.data.verified_access_endpoint.endpoint_domain #=> String
    #   resp.data.verified_access_endpoint.device_validation_domain #=> String
    #   resp.data.verified_access_endpoint.security_group_ids #=> Array<String>
    #   resp.data.verified_access_endpoint.security_group_ids[0] #=> String
    #   resp.data.verified_access_endpoint.load_balancer_options #=> Types::VerifiedAccessEndpointLoadBalancerOptions
    #   resp.data.verified_access_endpoint.load_balancer_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoint.load_balancer_options.port #=> Integer
    #   resp.data.verified_access_endpoint.load_balancer_options.load_balancer_arn #=> String
    #   resp.data.verified_access_endpoint.load_balancer_options.subnet_ids #=> Array<String>
    #   resp.data.verified_access_endpoint.load_balancer_options.subnet_ids[0] #=> String
    #   resp.data.verified_access_endpoint.network_interface_options #=> Types::VerifiedAccessEndpointEniOptions
    #   resp.data.verified_access_endpoint.network_interface_options.network_interface_id #=> String
    #   resp.data.verified_access_endpoint.network_interface_options.protocol #=> String, one of ["http", "https"]
    #   resp.data.verified_access_endpoint.network_interface_options.port #=> Integer
    #   resp.data.verified_access_endpoint.status #=> Types::VerifiedAccessEndpointStatus
    #   resp.data.verified_access_endpoint.status.code #=> String, one of ["pending", "active", "updating", "deleting", "deleted"]
    #   resp.data.verified_access_endpoint.status.message #=> String
    #   resp.data.verified_access_endpoint.description #=> String
    #   resp.data.verified_access_endpoint.creation_time #=> String
    #   resp.data.verified_access_endpoint.last_updated_time #=> String
    #   resp.data.verified_access_endpoint.deletion_time #=> String
    #   resp.data.verified_access_endpoint.tags #=> Array<Tag>
    #   resp.data.verified_access_endpoint.tags[0] #=> Types::Tag
    #   resp.data.verified_access_endpoint.tags[0].key #=> String
    #   resp.data.verified_access_endpoint.tags[0].value #=> String
    #   resp.data.verified_access_endpoint.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_endpoint.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_endpoint.sse_specification.kms_key_arn #=> String
    def modify_verified_access_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_endpoint,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_endpoint] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified Amazon Web Services Verified Access endpoint policy.</p>
    # @param [Hash | Types::ModifyVerifiedAccessEndpointPolicyInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessEndpointPolicyInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_endpoint_policy(
    #     verified_access_endpoint_id: 'VerifiedAccessEndpointId', # required
    #     policy_enabled: false,
    #     policy_document: 'PolicyDocument',
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     sse_specification: {
    #       customer_managed_key_enabled: false,
    #       kms_key_arn: 'KmsKeyArn'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessEndpointPolicyOutput
    #   resp.data.policy_enabled #=> Boolean
    #   resp.data.policy_document #=> String
    #   resp.data.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.sse_specification.kms_key_arn #=> String
    def modify_verified_access_endpoint_policy(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessEndpointPolicyInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessEndpointPolicy.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_endpoint_policy,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessEndpointPolicy.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_endpoint_policy] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_endpoint_policy] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_endpoint_policy] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified Amazon Web Services Verified Access group configuration.</p>
    # @param [Hash | Types::ModifyVerifiedAccessGroupInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessGroupInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_group(
    #     verified_access_group_id: 'VerifiedAccessGroupId', # required
    #     verified_access_instance_id: 'VerifiedAccessInstanceId',
    #     description: 'Description',
    #     client_token: 'ClientToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessGroupOutput
    #   resp.data.verified_access_group #=> Types::VerifiedAccessGroup
    #   resp.data.verified_access_group.verified_access_group_id #=> String
    #   resp.data.verified_access_group.verified_access_instance_id #=> String
    #   resp.data.verified_access_group.description #=> String
    #   resp.data.verified_access_group.owner #=> String
    #   resp.data.verified_access_group.verified_access_group_arn #=> String
    #   resp.data.verified_access_group.creation_time #=> String
    #   resp.data.verified_access_group.last_updated_time #=> String
    #   resp.data.verified_access_group.deletion_time #=> String
    #   resp.data.verified_access_group.tags #=> Array<Tag>
    #   resp.data.verified_access_group.tags[0] #=> Types::Tag
    #   resp.data.verified_access_group.tags[0].key #=> String
    #   resp.data.verified_access_group.tags[0].value #=> String
    #   resp.data.verified_access_group.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_group.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_group.sse_specification.kms_key_arn #=> String
    def modify_verified_access_group(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessGroupInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessGroup.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_group,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessGroup.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_group] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_group] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_group] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified Amazon Web Services Verified Access group policy.</p>
    # @param [Hash | Types::ModifyVerifiedAccessGroupPolicyInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessGroupPolicyInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_group_policy(
    #     verified_access_group_id: 'VerifiedAccessGroupId', # required
    #     policy_enabled: false,
    #     policy_document: 'PolicyDocument',
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     sse_specification: {
    #       customer_managed_key_enabled: false,
    #       kms_key_arn: 'KmsKeyArn'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessGroupPolicyOutput
    #   resp.data.policy_enabled #=> Boolean
    #   resp.data.policy_document #=> String
    #   resp.data.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.sse_specification.kms_key_arn #=> String
    def modify_verified_access_group_policy(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessGroupPolicyInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessGroupPolicy.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_group_policy,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessGroupPolicy.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_group_policy] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_group_policy] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_group_policy] #{output.data}")
        output
      end
    end

    # <p>Modifies the configuration of the specified Amazon Web Services Verified Access instance.</p>
    # @param [Hash | Types::ModifyVerifiedAccessInstanceInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessInstanceInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_instance(
    #     verified_access_instance_id: 'VerifiedAccessInstanceId', # required
    #     description: 'Description',
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessInstanceOutput
    #   resp.data.verified_access_instance #=> Types::VerifiedAccessInstance
    #   resp.data.verified_access_instance.verified_access_instance_id #=> String
    #   resp.data.verified_access_instance.description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers #=> Array<VerifiedAccessTrustProviderCondensed>
    #   resp.data.verified_access_instance.verified_access_trust_providers[0] #=> Types::VerifiedAccessTrustProviderCondensed
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].description #=> String
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_instance.verified_access_trust_providers[0].device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_instance.creation_time #=> String
    #   resp.data.verified_access_instance.last_updated_time #=> String
    #   resp.data.verified_access_instance.tags #=> Array<Tag>
    #   resp.data.verified_access_instance.tags[0] #=> Types::Tag
    #   resp.data.verified_access_instance.tags[0].key #=> String
    #   resp.data.verified_access_instance.tags[0].value #=> String
    #   resp.data.verified_access_instance.fips_enabled #=> Boolean
    def modify_verified_access_instance(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessInstanceInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessInstance.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_instance,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessInstance.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_instance] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_instance] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_instance] #{output.data}")
        output
      end
    end

    # <p>Modifies the logging configuration for the specified Amazon Web Services Verified Access instance.</p>
    # @param [Hash | Types::ModifyVerifiedAccessInstanceLoggingConfigurationInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessInstanceLoggingConfigurationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_instance_logging_configuration(
    #     verified_access_instance_id: 'VerifiedAccessInstanceId', # required
    #     access_logs: {
    #       s3: {
    #         enabled: false, # required
    #         bucket_name: 'BucketName',
    #         prefix: 'Prefix',
    #         bucket_owner: 'BucketOwner'
    #       },
    #       cloud_watch_logs: {
    #         enabled: false, # required
    #         log_group: 'LogGroup'
    #       },
    #       kinesis_data_firehose: {
    #         enabled: false, # required
    #         delivery_stream: 'DeliveryStream'
    #       },
    #       log_version: 'LogVersion',
    #       include_trust_context: false
    #     }, # required
    #     dry_run: false,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessInstanceLoggingConfigurationOutput
    #   resp.data.logging_configuration #=> Types::VerifiedAccessInstanceLoggingConfiguration
    #   resp.data.logging_configuration.verified_access_instance_id #=> String
    #   resp.data.logging_configuration.access_logs #=> Types::VerifiedAccessLogs
    #   resp.data.logging_configuration.access_logs.s3 #=> Types::VerifiedAccessLogS3Destination
    #   resp.data.logging_configuration.access_logs.s3.enabled #=> Boolean
    #   resp.data.logging_configuration.access_logs.s3.delivery_status #=> Types::VerifiedAccessLogDeliveryStatus
    #   resp.data.logging_configuration.access_logs.s3.delivery_status.code #=> String, one of ["success", "failed"]
    #   resp.data.logging_configuration.access_logs.s3.delivery_status.message #=> String
    #   resp.data.logging_configuration.access_logs.s3.bucket_name #=> String
    #   resp.data.logging_configuration.access_logs.s3.prefix #=> String
    #   resp.data.logging_configuration.access_logs.s3.bucket_owner #=> String
    #   resp.data.logging_configuration.access_logs.cloud_watch_logs #=> Types::VerifiedAccessLogCloudWatchLogsDestination
    #   resp.data.logging_configuration.access_logs.cloud_watch_logs.enabled #=> Boolean
    #   resp.data.logging_configuration.access_logs.cloud_watch_logs.delivery_status #=> Types::VerifiedAccessLogDeliveryStatus
    #   resp.data.logging_configuration.access_logs.cloud_watch_logs.log_group #=> String
    #   resp.data.logging_configuration.access_logs.kinesis_data_firehose #=> Types::VerifiedAccessLogKinesisDataFirehoseDestination
    #   resp.data.logging_configuration.access_logs.kinesis_data_firehose.enabled #=> Boolean
    #   resp.data.logging_configuration.access_logs.kinesis_data_firehose.delivery_status #=> Types::VerifiedAccessLogDeliveryStatus
    #   resp.data.logging_configuration.access_logs.kinesis_data_firehose.delivery_stream #=> String
    #   resp.data.logging_configuration.access_logs.log_version #=> String
    #   resp.data.logging_configuration.access_logs.include_trust_context #=> Boolean
    def modify_verified_access_instance_logging_configuration(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessInstanceLoggingConfigurationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessInstanceLoggingConfiguration.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_instance_logging_configuration,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessInstanceLoggingConfiguration.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_instance_logging_configuration] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_instance_logging_configuration] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_instance_logging_configuration] #{output.data}")
        output
      end
    end

    # <p>Modifies the configuration of the specified Amazon Web Services Verified Access trust provider.</p>
    # @param [Hash | Types::ModifyVerifiedAccessTrustProviderInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVerifiedAccessTrustProviderInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_verified_access_trust_provider(
    #     verified_access_trust_provider_id: 'VerifiedAccessTrustProviderId', # required
    #     oidc_options: {
    #       issuer: 'Issuer',
    #       authorization_endpoint: 'AuthorizationEndpoint',
    #       token_endpoint: 'TokenEndpoint',
    #       user_info_endpoint: 'UserInfoEndpoint',
    #       client_id: 'ClientId',
    #       client_secret: 'ClientSecret',
    #       scope: 'Scope'
    #     },
    #     device_options: {
    #       public_signing_key_url: 'PublicSigningKeyUrl'
    #     },
    #     description: 'Description',
    #     dry_run: false,
    #     client_token: 'ClientToken',
    #     sse_specification: {
    #       customer_managed_key_enabled: false,
    #       kms_key_arn: 'KmsKeyArn'
    #     }
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVerifiedAccessTrustProviderOutput
    #   resp.data.verified_access_trust_provider #=> Types::VerifiedAccessTrustProvider
    #   resp.data.verified_access_trust_provider.verified_access_trust_provider_id #=> String
    #   resp.data.verified_access_trust_provider.description #=> String
    #   resp.data.verified_access_trust_provider.trust_provider_type #=> String, one of ["user", "device"]
    #   resp.data.verified_access_trust_provider.user_trust_provider_type #=> String, one of ["iam-identity-center", "oidc"]
    #   resp.data.verified_access_trust_provider.device_trust_provider_type #=> String, one of ["jamf", "crowdstrike", "jumpcloud"]
    #   resp.data.verified_access_trust_provider.oidc_options #=> Types::OidcOptions
    #   resp.data.verified_access_trust_provider.oidc_options.issuer #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.authorization_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.token_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.user_info_endpoint #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_id #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.client_secret #=> String
    #   resp.data.verified_access_trust_provider.oidc_options.scope #=> String
    #   resp.data.verified_access_trust_provider.device_options #=> Types::DeviceOptions
    #   resp.data.verified_access_trust_provider.device_options.tenant_id #=> String
    #   resp.data.verified_access_trust_provider.device_options.public_signing_key_url #=> String
    #   resp.data.verified_access_trust_provider.policy_reference_name #=> String
    #   resp.data.verified_access_trust_provider.creation_time #=> String
    #   resp.data.verified_access_trust_provider.last_updated_time #=> String
    #   resp.data.verified_access_trust_provider.tags #=> Array<Tag>
    #   resp.data.verified_access_trust_provider.tags[0] #=> Types::Tag
    #   resp.data.verified_access_trust_provider.tags[0].key #=> String
    #   resp.data.verified_access_trust_provider.tags[0].value #=> String
    #   resp.data.verified_access_trust_provider.sse_specification #=> Types::VerifiedAccessSseSpecificationResponse
    #   resp.data.verified_access_trust_provider.sse_specification.customer_managed_key_enabled #=> Boolean
    #   resp.data.verified_access_trust_provider.sse_specification.kms_key_arn #=> String
    def modify_verified_access_trust_provider(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVerifiedAccessTrustProviderInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVerifiedAccessTrustProvider.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_verified_access_trust_provider,
        tracer: tracer
      )
      Telemetry::ModifyVerifiedAccessTrustProvider.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_trust_provider] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_verified_access_trust_provider] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_verified_access_trust_provider] #{output.data}")
        output
      end
    end

    # <p>You can modify several parameters of an existing EBS volume, including volume size, volume
    #       type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance
    #       type, you might be able to apply these changes without stopping the instance or detaching the
    #       volume from it. For more information about modifying EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> (Linux instances)
    #       or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> (Windows instances).</p>
    #          <p>When you complete a resize operation on your volume, you need to extend the volume's
    #       file-system size to take advantage of the new storage capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extend a Linux file system</a> or
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extend a Windows file system</a>.</p>
    #          <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For
    #       information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a
    #       modification using <a>DescribeVolumesModifications</a>. For information
    #       about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a>.</p>
    #          <p>With previous-generation instance types, resizing an EBS volume might require detaching and
    #       reattaching the volume or stopping and restarting the instance.</p>
    #          <p>After modifying a volume, you must wait at least six hours and ensure that the volume
    #       is in the <code>in-use</code> or <code>available</code> state before you can modify the same
    #       volume. This is sometimes referred to as a cooldown period.</p>
    # @param [Hash | Types::ModifyVolumeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVolumeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_volume(
    #     dry_run: false,
    #     volume_id: 'VolumeId', # required
    #     size: 1,
    #     volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #     iops: 1,
    #     throughput: 1,
    #     multi_attach_enabled: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVolumeOutput
    #   resp.data.volume_modification #=> Types::VolumeModification
    #   resp.data.volume_modification.volume_id #=> String
    #   resp.data.volume_modification.modification_state #=> String, one of ["modifying", "optimizing", "completed", "failed"]
    #   resp.data.volume_modification.status_message #=> String
    #   resp.data.volume_modification.target_size #=> Integer
    #   resp.data.volume_modification.target_iops #=> Integer
    #   resp.data.volume_modification.target_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volume_modification.target_throughput #=> Integer
    #   resp.data.volume_modification.target_multi_attach_enabled #=> Boolean
    #   resp.data.volume_modification.original_size #=> Integer
    #   resp.data.volume_modification.original_iops #=> Integer
    #   resp.data.volume_modification.original_volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.volume_modification.original_throughput #=> Integer
    #   resp.data.volume_modification.original_multi_attach_enabled #=> Boolean
    #   resp.data.volume_modification.progress #=> Integer
    #   resp.data.volume_modification.start_time #=> Time
    #   resp.data.volume_modification.end_time #=> Time
    def modify_volume(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVolumeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVolume.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_volume,
        tracer: tracer
      )
      Telemetry::ModifyVolume.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_volume] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_volume] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_volume] #{output.data}")
        output
      end
    end

    # <p>Modifies a volume attribute.</p>
    #          <p>By default, all I/O operations for the volume are suspended when the data on the volume is
    #       determined to be potentially inconsistent, to prevent undetectable, latent data corruption.
    #       The I/O access to the volume can be resumed by first enabling I/O access and then checking the
    #       data consistency on your volume.</p>
    #          <p>You can change the default behavior to resume I/O operations. We recommend that you change
    #       this only for boot volumes or for volumes that are stateless or disposable.</p>
    # @param [Hash | Types::ModifyVolumeAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVolumeAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_volume_attribute(
    #     auto_enable_io: {
    #       value: false
    #     },
    #     volume_id: 'VolumeId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVolumeAttributeOutput
    # @example To modify a volume attribute
    #   # This example sets the ``autoEnableIo`` attribute of the volume with the ID ``vol-1234567890abcdef0`` to ``true``. If the command succeeds, no output is returned.
    #   resp = client.modify_volume_attribute({
    #     dry_run: true,
    #     volume_id: "vol-1234567890abcdef0",
    #     auto_enable_io: {
    #       value: true
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def modify_volume_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVolumeAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVolumeAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_volume_attribute,
        tracer: tracer
      )
      Telemetry::ModifyVolumeAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_volume_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_volume_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_volume_attribute] #{output.data}")
        output
      end
    end

    # <p>Modifies the specified attribute of the specified VPC.</p>
    # @param [Hash | Types::ModifyVpcAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_attribute(
    #     enable_dns_hostnames: {
    #       value: false
    #     },
    #     vpc_id: 'VpcId', # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcAttributeOutput
    # @example To modify the enableDnsSupport attribute
    #   # This example modifies the enableDnsSupport attribute. This attribute indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for instances in the VPC to their corresponding IP addresses; otherwise, it does not.
    #   resp = client.modify_vpc_attribute({
    #     vpc_id: "vpc-a01106c2",
    #     enable_dns_support: {
    #       value: false
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To modify the enableDnsHostnames attribute
    #   # This example modifies the enableDnsHostnames attribute. This attribute indicates whether instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
    #   resp = client.modify_vpc_attribute({
    #     vpc_id: "vpc-a01106c2",
    #     enable_dns_hostnames: {
    #       value: false
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def modify_vpc_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_attribute,
        tracer: tracer
      )
      Telemetry::ModifyVpcAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_attribute] #{output.data}")
        output
      end
    end

    # <p>Modifies attributes of a specified VPC endpoint. The attributes that you can modify
    #             depend on the type of VPC endpoint (interface, gateway, or Gateway Load Balancer). For more information,
    #             see the <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web Services PrivateLink
    #                 Guide</a>.</p>
    # @param [Hash | Types::ModifyVpcEndpointInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcEndpointInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_endpoint(
    #     dry_run: false,
    #     vpc_endpoint_id: 'VpcEndpointId', # required
    #     reset_policy: false,
    #     policy_document: 'PolicyDocument',
    #     add_route_table_ids: [
    #       'member'
    #     ],
    #     add_subnet_ids: [
    #       'member'
    #     ],
    #     add_security_group_ids: [
    #       'member'
    #     ],
    #     ip_address_type: 'ipv4', # accepts ["ipv4", "dualstack", "ipv6"]
    #     dns_options: {
    #       dns_record_ip_type: 'ipv4', # accepts ["ipv4", "dualstack", "ipv6", "service-defined"]
    #       private_dns_only_for_inbound_resolver_endpoint: false
    #     },
    #     private_dns_enabled: false,
    #     subnet_configurations: [
    #       {
    #         subnet_id: 'SubnetId',
    #         ipv4: 'Ipv4',
    #         ipv6: 'Ipv6'
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcEndpointOutput
    #   resp.data.return #=> Boolean
    def modify_vpc_endpoint(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcEndpointInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcEndpoint.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_endpoint,
        tracer: tracer
      )
      Telemetry::ModifyVpcEndpoint.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint] #{output.data}")
        output
      end
    end

    # <p>Modifies a connection notification for VPC endpoint or VPC endpoint service. You
    #             can change the SNS topic for the notification, or the events for which to be notified. </p>
    # @param [Hash | Types::ModifyVpcEndpointConnectionNotificationInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcEndpointConnectionNotificationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_endpoint_connection_notification(
    #     dry_run: false,
    #     connection_notification_id: 'ConnectionNotificationId', # required
    #     connection_notification_arn: 'ConnectionNotificationArn',
    #     connection_events: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcEndpointConnectionNotificationOutput
    #   resp.data.return_value #=> Boolean
    def modify_vpc_endpoint_connection_notification(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcEndpointConnectionNotificationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcEndpointConnectionNotification.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_endpoint_connection_notification,
        tracer: tracer
      )
      Telemetry::ModifyVpcEndpointConnectionNotification.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_connection_notification] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_connection_notification] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_connection_notification] #{output.data}")
        output
      end
    end

    # <p>Modifies the attributes of your VPC endpoint service configuration. You can change the
    #             Network Load Balancers or Gateway Load Balancers for your service, and you can specify whether acceptance is
    #             required for requests to connect to your endpoint service through an interface VPC
    #             endpoint.</p>
    #          <p>If you set or modify the private DNS name, you must prove that you own the private DNS
    #             domain name.</p>
    # @param [Hash | Types::ModifyVpcEndpointServiceConfigurationInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcEndpointServiceConfigurationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_endpoint_service_configuration(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     private_dns_name: 'PrivateDnsName',
    #     remove_private_dns_name: false,
    #     acceptance_required: false,
    #     add_network_load_balancer_arns: [
    #       'member'
    #     ],
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcEndpointServiceConfigurationOutput
    #   resp.data.return #=> Boolean
    def modify_vpc_endpoint_service_configuration(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcEndpointServiceConfigurationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcEndpointServiceConfiguration.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_endpoint_service_configuration,
        tracer: tracer
      )
      Telemetry::ModifyVpcEndpointServiceConfiguration.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_configuration] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_configuration] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_configuration] #{output.data}")
        output
      end
    end

    # <p>Modifies the payer responsibility for your VPC endpoint service.</p>
    # @param [Hash | Types::ModifyVpcEndpointServicePayerResponsibilityInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcEndpointServicePayerResponsibilityInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_endpoint_service_payer_responsibility(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     payer_responsibility: 'ServiceOwner' # required - accepts ["ServiceOwner"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcEndpointServicePayerResponsibilityOutput
    #   resp.data.return_value #=> Boolean
    def modify_vpc_endpoint_service_payer_responsibility(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcEndpointServicePayerResponsibilityInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcEndpointServicePayerResponsibility.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_endpoint_service_payer_responsibility,
        tracer: tracer
      )
      Telemetry::ModifyVpcEndpointServicePayerResponsibility.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_payer_responsibility] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_payer_responsibility] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_payer_responsibility] #{output.data}")
        output
      end
    end

    # <p>Modifies the permissions for your VPC endpoint service. You can add or remove permissions
    #             for service consumers (Amazon Web Services accounts, users, and IAM roles) to connect to
    #             your endpoint service.</p>
    #          <p>If you grant permissions to all principals, the service is public. Any users who know the name of a
    # 	        public service can send a request to attach an endpoint. If the service does not require manual approval,
    # 	        attachments are automatically approved.</p>
    # @param [Hash | Types::ModifyVpcEndpointServicePermissionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcEndpointServicePermissionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_endpoint_service_permissions(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     add_allowed_principals: [
    #       'member'
    #     ],
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcEndpointServicePermissionsOutput
    #   resp.data.added_principals #=> Array<AddedPrincipal>
    #   resp.data.added_principals[0] #=> Types::AddedPrincipal
    #   resp.data.added_principals[0].principal_type #=> String, one of ["All", "Service", "OrganizationUnit", "Account", "User", "Role"]
    #   resp.data.added_principals[0].principal #=> String
    #   resp.data.added_principals[0].service_permission_id #=> String
    #   resp.data.added_principals[0].service_id #=> String
    #   resp.data.return_value #=> Boolean
    def modify_vpc_endpoint_service_permissions(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcEndpointServicePermissionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcEndpointServicePermissions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_endpoint_service_permissions,
        tracer: tracer
      )
      Telemetry::ModifyVpcEndpointServicePermissions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_permissions] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_permissions] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_endpoint_service_permissions] #{output.data}")
        output
      end
    end

    # <p>Modifies the VPC peering connection options on one side of a VPC peering connection.</p>
    #          <p>If the peered VPCs are in the same Amazon Web Services account, you can enable DNS
    #             resolution for queries from the local VPC. This ensures that queries from the local VPC
    #             resolve to private IP addresses in the peer VPC. This option is not available if the
    #             peered VPCs are in different Amazon Web Services accounts or different Regions. For
    #             peered VPCs in different Amazon Web Services accounts, each Amazon Web Services account
    #             owner must initiate a separate request to modify the peering connection options. For
    #             inter-region peering connections, you must use the Region for the requester VPC to
    #             modify the requester VPC peering options and the Region for the accepter VPC to modify
    #             the accepter VPC peering options. To verify which VPCs are the accepter and the
    #             requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
    # @param [Hash | Types::ModifyVpcPeeringConnectionOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcPeeringConnectionOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_peering_connection_options(
    #     accepter_peering_connection_options: {
    #       allow_dns_resolution_from_remote_vpc: false,
    #       allow_egress_from_local_classic_link_to_remote_vpc: false,
    #       allow_egress_from_local_vpc_to_remote_classic_link: false
    #     },
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcPeeringConnectionOptionsOutput
    #   resp.data.accepter_peering_connection_options #=> Types::PeeringConnectionOptions
    #   resp.data.accepter_peering_connection_options.allow_dns_resolution_from_remote_vpc #=> Boolean
    #   resp.data.accepter_peering_connection_options.allow_egress_from_local_classic_link_to_remote_vpc #=> Boolean
    #   resp.data.accepter_peering_connection_options.allow_egress_from_local_vpc_to_remote_classic_link #=> Boolean
    #   resp.data.requester_peering_connection_options #=> Types::PeeringConnectionOptions
    def modify_vpc_peering_connection_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcPeeringConnectionOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcPeeringConnectionOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_peering_connection_options,
        tracer: tracer
      )
      Telemetry::ModifyVpcPeeringConnectionOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_peering_connection_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_peering_connection_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_peering_connection_options] #{output.data}")
        output
      end
    end

    # <p>Modifies the instance tenancy attribute of the specified VPC. You can change the
    #             instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the
    #             instance tenancy attribute to <code>dedicated</code>.</p>
    #          <p>After you modify the tenancy of the VPC, any new instances that you launch into the
    #             VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch.
    #             The tenancy of any existing instances in the VPC is not affected.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the
    # 				<i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::ModifyVpcTenancyInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpcTenancyInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpc_tenancy(
    #     vpc_id: 'VpcId', # required
    #     instance_tenancy: 'default', # required - accepts ["default"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpcTenancyOutput
    #   resp.data.return_value #=> Boolean
    def modify_vpc_tenancy(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpcTenancyInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpcTenancy.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpc_tenancy,
        tracer: tracer
      )
      Telemetry::ModifyVpcTenancy.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_tenancy] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpc_tenancy] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpc_tenancy] #{output.data}")
        output
      end
    end

    # <p>Modifies the customer gateway or the target gateway of an Amazon Web Services Site-to-Site VPN connection. To
    #             modify the target gateway, the following migration options are available:</p>
    #          <ul>
    #             <li>
    #                <p>An existing virtual private gateway to a new virtual private gateway</p>
    #             </li>
    #             <li>
    #                <p>An existing virtual private gateway to a transit gateway</p>
    #             </li>
    #             <li>
    #                <p>An existing transit gateway to a new transit gateway</p>
    #             </li>
    #             <li>
    #                <p>An existing transit gateway to a virtual private gateway</p>
    #             </li>
    #          </ul>
    #          <p>Before you perform the migration to the new gateway, you must configure the new
    #             gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or
    #                 <a>CreateTransitGateway</a> to create a transit gateway.</p>
    #          <p>This step is required when you migrate from a virtual private gateway with static
    #             routes to a transit gateway. </p>
    #          <p>You must delete the static routes before you migrate to the new gateway.</p>
    #          <p>Keep a copy of the static route before you delete it. You will need to add back these
    #             routes to the transit gateway after the VPN connection migration is complete.</p>
    #          <p>After you migrate to the new gateway, you might need to modify your VPC route table.
    #             Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes
    #             described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">Update VPC route
    #                 tables</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    #          <p>When the new gateway is a transit gateway, modify the transit gateway route table to
    #             allow traffic between the VPC and the Amazon Web Services Site-to-Site VPN connection.
    #             Use <a>CreateTransitGatewayRoute</a> to add the routes.</p>
    #          <p> If you deleted VPN static routes, you must add the static routes to the transit
    #             gateway route table.</p>
    #          <p>After you perform this operation, the VPN endpoint's IP addresses on the Amazon Web Services side and the tunnel options remain intact. Your Amazon Web Services Site-to-Site VPN connection will
    #             be temporarily unavailable for a brief period while we provision the new
    #             endpoints.</p>
    # @param [Hash | Types::ModifyVpnConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpnConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpn_connection(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     transit_gateway_id: 'TransitGatewayId',
    #     customer_gateway_id: 'CustomerGatewayId',
    #     vpn_gateway_id: 'VpnGatewayId',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpnConnectionOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.outside_ip_address_type #=> String
    #   resp.data.vpn_connection.options.transport_transit_gateway_attachment_id #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options #=> Types::VpnTunnelLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options #=> Types::CloudWatchLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_enabled #=> Boolean
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_group_arn #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_output_format #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].enable_tunnel_lifecycle_control #=> Boolean
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    def modify_vpn_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpnConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpnConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpn_connection,
        tracer: tracer
      )
      Telemetry::ModifyVpnConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpn_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_connection] #{output.data}")
        output
      end
    end

    # <p>Modifies the connection options for your Site-to-Site VPN connection.</p>
    #          <p>When you modify the VPN connection options, the VPN endpoint IP addresses on the
    #                 Amazon Web Services side do not change, and the tunnel options do not change. Your
    #             VPN connection will be temporarily unavailable for a brief period while the VPN
    #             connection is updated.</p>
    # @param [Hash | Types::ModifyVpnConnectionOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpnConnectionOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpn_connection_options(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     local_ipv4_network_cidr: 'LocalIpv4NetworkCidr',
    #     remote_ipv4_network_cidr: 'RemoteIpv4NetworkCidr',
    #     local_ipv6_network_cidr: 'LocalIpv6NetworkCidr',
    #     remote_ipv6_network_cidr: 'RemoteIpv6NetworkCidr',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpnConnectionOptionsOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.outside_ip_address_type #=> String
    #   resp.data.vpn_connection.options.transport_transit_gateway_attachment_id #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options #=> Types::VpnTunnelLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options #=> Types::CloudWatchLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_enabled #=> Boolean
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_group_arn #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_output_format #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].enable_tunnel_lifecycle_control #=> Boolean
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    def modify_vpn_connection_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpnConnectionOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpnConnectionOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpn_connection_options,
        tracer: tracer
      )
      Telemetry::ModifyVpnConnectionOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_connection_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpn_connection_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_connection_options] #{output.data}")
        output
      end
    end

    # <p>Modifies the VPN tunnel endpoint certificate.</p>
    # @param [Hash | Types::ModifyVpnTunnelCertificateInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpnTunnelCertificateInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpn_tunnel_certificate(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_tunnel_outside_ip_address: 'VpnTunnelOutsideIpAddress', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpnTunnelCertificateOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.outside_ip_address_type #=> String
    #   resp.data.vpn_connection.options.transport_transit_gateway_attachment_id #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options #=> Types::VpnTunnelLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options #=> Types::CloudWatchLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_enabled #=> Boolean
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_group_arn #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_output_format #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].enable_tunnel_lifecycle_control #=> Boolean
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    def modify_vpn_tunnel_certificate(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpnTunnelCertificateInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpnTunnelCertificate.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpn_tunnel_certificate,
        tracer: tracer
      )
      Telemetry::ModifyVpnTunnelCertificate.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_tunnel_certificate] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpn_tunnel_certificate] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_tunnel_certificate] #{output.data}")
        output
      end
    end

    # <p>Modifies the options for a VPN tunnel in an Amazon Web Services Site-to-Site VPN connection. You can modify
    #             multiple options for a tunnel in a single request, but you can only modify one tunnel at
    #             a time. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site VPN tunnel options for your Site-to-Site VPN
    #                 connection</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
    # @param [Hash | Types::ModifyVpnTunnelOptionsInput] params
    #   Request parameters for this operation.
    #   See {Types::ModifyVpnTunnelOptionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.modify_vpn_tunnel_options(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_tunnel_outside_ip_address: 'VpnTunnelOutsideIpAddress', # required
    #     tunnel_options: {
    #       tunnel_inside_cidr: 'TunnelInsideCidr',
    #       tunnel_inside_ipv6_cidr: 'TunnelInsideIpv6Cidr',
    #       pre_shared_key: 'PreSharedKey',
    #       phase1_lifetime_seconds: 1,
    #       phase2_lifetime_seconds: 1,
    #       rekey_margin_time_seconds: 1,
    #       rekey_fuzz_percentage: 1,
    #       replay_window_size: 1,
    #       dpd_timeout_seconds: 1,
    #       dpd_timeout_action: 'DPDTimeoutAction',
    #       phase1_encryption_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase2_encryption_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase1_integrity_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase2_integrity_algorithms: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       phase1_dh_group_numbers: [
    #         {
    #           value: 1
    #         }
    #       ],
    #       phase2_dh_group_numbers: [
    #         {
    #           value: 1
    #         }
    #       ],
    #       ike_versions: [
    #         {
    #           value: 'Value'
    #         }
    #       ],
    #       startup_action: 'StartupAction',
    #       log_options: {
    #         cloud_watch_log_options: {
    #           log_enabled: false,
    #           log_group_arn: 'LogGroupArn',
    #           log_output_format: 'LogOutputFormat'
    #         }
    #       },
    #       enable_tunnel_lifecycle_control: false
    #     }, # required
    #     dry_run: false,
    #     skip_tunnel_replacement: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ModifyVpnTunnelOptionsOutput
    #   resp.data.vpn_connection #=> Types::VpnConnection
    #   resp.data.vpn_connection.customer_gateway_configuration #=> String
    #   resp.data.vpn_connection.customer_gateway_id #=> String
    #   resp.data.vpn_connection.category #=> String
    #   resp.data.vpn_connection.state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.type #=> String, one of ["ipsec.1"]
    #   resp.data.vpn_connection.vpn_connection_id #=> String
    #   resp.data.vpn_connection.vpn_gateway_id #=> String
    #   resp.data.vpn_connection.transit_gateway_id #=> String
    #   resp.data.vpn_connection.core_network_arn #=> String
    #   resp.data.vpn_connection.core_network_attachment_arn #=> String
    #   resp.data.vpn_connection.gateway_association_state #=> String, one of ["associated", "not-associated", "associating", "disassociating"]
    #   resp.data.vpn_connection.options #=> Types::VpnConnectionOptions
    #   resp.data.vpn_connection.options.enable_acceleration #=> Boolean
    #   resp.data.vpn_connection.options.static_routes_only #=> Boolean
    #   resp.data.vpn_connection.options.local_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv4_network_cidr #=> String
    #   resp.data.vpn_connection.options.local_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.remote_ipv6_network_cidr #=> String
    #   resp.data.vpn_connection.options.outside_ip_address_type #=> String
    #   resp.data.vpn_connection.options.transport_transit_gateway_attachment_id #=> String
    #   resp.data.vpn_connection.options.tunnel_inside_ip_version #=> String, one of ["ipv4", "ipv6"]
    #   resp.data.vpn_connection.options.tunnel_options #=> Array<TunnelOption>
    #   resp.data.vpn_connection.options.tunnel_options[0] #=> Types::TunnelOption
    #   resp.data.vpn_connection.options.tunnel_options[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].tunnel_inside_ipv6_cidr #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].pre_shared_key #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_lifetime_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_margin_time_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].rekey_fuzz_percentage #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].replay_window_size #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_seconds #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].dpd_timeout_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms #=> Array<Phase1EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0] #=> Types::Phase1EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms #=> Array<Phase2EncryptionAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0] #=> Types::Phase2EncryptionAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_encryption_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms #=> Array<Phase1IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0] #=> Types::Phase1IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms #=> Array<Phase2IntegrityAlgorithmsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0] #=> Types::Phase2IntegrityAlgorithmsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_integrity_algorithms[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers #=> Array<Phase1DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0] #=> Types::Phase1DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase1_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers #=> Array<Phase2DHGroupNumbersListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0] #=> Types::Phase2DHGroupNumbersListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].phase2_dh_group_numbers[0].value #=> Integer
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions #=> Array<IKEVersionsListValue>
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0] #=> Types::IKEVersionsListValue
    #   resp.data.vpn_connection.options.tunnel_options[0].ike_versions[0].value #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].startup_action #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options #=> Types::VpnTunnelLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options #=> Types::CloudWatchLogOptions
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_enabled #=> Boolean
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_group_arn #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].log_options.cloud_watch_log_options.log_output_format #=> String
    #   resp.data.vpn_connection.options.tunnel_options[0].enable_tunnel_lifecycle_control #=> Boolean
    #   resp.data.vpn_connection.routes #=> Array<VpnStaticRoute>
    #   resp.data.vpn_connection.routes[0] #=> Types::VpnStaticRoute
    #   resp.data.vpn_connection.routes[0].destination_cidr_block #=> String
    #   resp.data.vpn_connection.routes[0].source #=> String, one of ["Static"]
    #   resp.data.vpn_connection.routes[0].state #=> String, one of ["pending", "available", "deleting", "deleted"]
    #   resp.data.vpn_connection.tags #=> Array<Tag>
    #   resp.data.vpn_connection.tags[0] #=> Types::Tag
    #   resp.data.vpn_connection.tags[0].key #=> String
    #   resp.data.vpn_connection.tags[0].value #=> String
    #   resp.data.vpn_connection.vgw_telemetry #=> Array<VgwTelemetry>
    #   resp.data.vpn_connection.vgw_telemetry[0] #=> Types::VgwTelemetry
    #   resp.data.vpn_connection.vgw_telemetry[0].accepted_route_count #=> Integer
    #   resp.data.vpn_connection.vgw_telemetry[0].last_status_change #=> Time
    #   resp.data.vpn_connection.vgw_telemetry[0].outside_ip_address #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].status #=> String, one of ["UP", "DOWN"]
    #   resp.data.vpn_connection.vgw_telemetry[0].status_message #=> String
    #   resp.data.vpn_connection.vgw_telemetry[0].certificate_arn #=> String
    def modify_vpn_tunnel_options(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ModifyVpnTunnelOptionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ModifyVpnTunnelOptions.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :modify_vpn_tunnel_options,
        tracer: tracer
      )
      Telemetry::ModifyVpnTunnelOptions.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_tunnel_options] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#modify_vpn_tunnel_options] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#modify_vpn_tunnel_options] #{output.data}")
        output
      end
    end

    # <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is
    #             enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitor your instances using
    #                 CloudWatch</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>To disable detailed monitoring, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_UnmonitorInstances.html">UnmonitorInstances</a>.</p>
    # @param [Hash | Types::MonitorInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::MonitorInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.monitor_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::MonitorInstancesOutput
    #   resp.data.instance_monitorings #=> Array<InstanceMonitoring>
    #   resp.data.instance_monitorings[0] #=> Types::InstanceMonitoring
    #   resp.data.instance_monitorings[0].instance_id #=> String
    #   resp.data.instance_monitorings[0].monitoring #=> Types::Monitoring
    #   resp.data.instance_monitorings[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    def monitor_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::MonitorInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::MonitorInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :monitor_instances,
        tracer: tracer
      )
      Telemetry::MonitorInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#monitor_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#monitor_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#monitor_instances] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The
    #       Elastic IP address must be allocated to your account for more than 24 hours, and it must not
    #       be associated with an instance. After the Elastic IP address is moved, it is no longer
    #       available for use in the EC2-Classic platform, unless you move it back using the
    #         <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was
    #       originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.</p>
    # @param [Hash | Types::MoveAddressToVpcInput] params
    #   Request parameters for this operation.
    #   See {Types::MoveAddressToVpcInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.move_address_to_vpc(
    #     dry_run: false,
    #     public_ip: 'PublicIp' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::MoveAddressToVpcOutput
    #   resp.data.allocation_id #=> String
    #   resp.data.status #=> String, one of ["MoveInProgress", "InVpc", "InClassic"]
    # @example To move an address to EC2-VPC
    #   # This example moves the specified Elastic IP address to the EC2-VPC platform.
    #   resp = client.move_address_to_vpc({
    #     public_ip: "54.123.4.56"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     status: "MoveInProgress"
    #   }
    def move_address_to_vpc(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::MoveAddressToVpcInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::MoveAddressToVpc.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :move_address_to_vpc,
        tracer: tracer
      )
      Telemetry::MoveAddressToVpc.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#move_address_to_vpc] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#move_address_to_vpc] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#move_address_to_vpc] #{output.data}")
        output
      end
    end

    # <p>Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool.</p>
    #          <p>If you already have a BYOIPv4 CIDR with Amazon Web Services, you can move the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to IPAM. If you are bringing a new IP address to Amazon Web Services for the first time, complete the steps in <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoip-ipam.html">Tutorial: BYOIP address CIDRs to IPAM</a>.</p>
    # @param [Hash | Types::MoveByoipCidrToIpamInput] params
    #   Request parameters for this operation.
    #   See {Types::MoveByoipCidrToIpamInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.move_byoip_cidr_to_ipam(
    #     dry_run: false,
    #     cidr: 'Cidr', # required
    #     ipam_pool_id: 'IpamPoolId', # required
    #     ipam_pool_owner: 'IpamPoolOwner' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::MoveByoipCidrToIpamOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.asn_associations #=> Array<AsnAssociation>
    #   resp.data.byoip_cidr.asn_associations[0] #=> Types::AsnAssociation
    #   resp.data.byoip_cidr.asn_associations[0].asn #=> String
    #   resp.data.byoip_cidr.asn_associations[0].cidr #=> String
    #   resp.data.byoip_cidr.asn_associations[0].status_message #=> String
    #   resp.data.byoip_cidr.asn_associations[0].state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.byoip_cidr.network_border_group #=> String
    def move_byoip_cidr_to_ipam(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::MoveByoipCidrToIpamInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::MoveByoipCidrToIpam.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :move_byoip_cidr_to_ipam,
        tracer: tracer
      )
      Telemetry::MoveByoipCidrToIpam.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#move_byoip_cidr_to_ipam] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#move_byoip_cidr_to_ipam] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#move_byoip_cidr_to_ipam] #{output.data}")
        output
      end
    end

    # <p>Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services resources through bring your own IP
    #          addresses (BYOIP) and creates a corresponding address pool. After the address range is
    #          provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p>
    #          <p>Amazon Web Services verifies that you own the address range and are authorized to advertise it.
    #          You must ensure that the address range is registered to you and that you created an
    #          RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range.
    #          For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring your own IP addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>Provisioning an address range is an asynchronous operation, so the call returns immediately,
    #          but the address range is not ready to use until its status changes from <code>pending-provision</code>
    #          to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>.
    #          To allocate an Elastic IP address from your IPv4 address pool, use <a>AllocateAddress</a>
    #          with either the specific address from the address pool or the ID of the address pool.</p>
    # @param [Hash | Types::ProvisionByoipCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::ProvisionByoipCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.provision_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     cidr_authorization_context: {
    #       message: 'Message', # required
    #       signature: 'Signature' # required
    #     },
    #     publicly_advertisable: false,
    #     description: 'Description',
    #     dry_run: false,
    #     pool_tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     multi_region: false,
    #     network_border_group: 'NetworkBorderGroup'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ProvisionByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.asn_associations #=> Array<AsnAssociation>
    #   resp.data.byoip_cidr.asn_associations[0] #=> Types::AsnAssociation
    #   resp.data.byoip_cidr.asn_associations[0].asn #=> String
    #   resp.data.byoip_cidr.asn_associations[0].cidr #=> String
    #   resp.data.byoip_cidr.asn_associations[0].status_message #=> String
    #   resp.data.byoip_cidr.asn_associations[0].state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.byoip_cidr.network_border_group #=> String
    def provision_byoip_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ProvisionByoipCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ProvisionByoipCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :provision_byoip_cidr,
        tracer: tracer
      )
      Telemetry::ProvisionByoipCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_byoip_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#provision_byoip_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_byoip_cidr] #{output.data}")
        output
      end
    end

    # <p>Provisions your Autonomous System Number (ASN) for use in your Amazon Web Services account. This action requires authorization context for Amazon to bring the ASN to an Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
    # @param [Hash | Types::ProvisionIpamByoasnInput] params
    #   Request parameters for this operation.
    #   See {Types::ProvisionIpamByoasnInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.provision_ipam_byoasn(
    #     dry_run: false,
    #     ipam_id: 'IpamId', # required
    #     asn: 'Asn', # required
    #     asn_authorization_context: {
    #       message: 'Message', # required
    #       signature: 'Signature' # required
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ProvisionIpamByoasnOutput
    #   resp.data.byoasn #=> Types::Byoasn
    #   resp.data.byoasn.asn #=> String
    #   resp.data.byoasn.ipam_id #=> String
    #   resp.data.byoasn.status_message #=> String
    #   resp.data.byoasn.state #=> String, one of ["deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned"]
    def provision_ipam_byoasn(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ProvisionIpamByoasnInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ProvisionIpamByoasn.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :provision_ipam_byoasn,
        tracer: tracer
      )
      Telemetry::ProvisionIpamByoasn.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_ipam_byoasn] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#provision_ipam_byoasn] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_ipam_byoasn] #{output.data}")
        output
      end
    end

    # <p>Provision a CIDR to an IPAM pool. You can use this action to provision new CIDRs to a top-level pool or to transfer a CIDR from a top-level pool to a pool within it.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/prov-cidr-ipam.html">Provision CIDRs to pools</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    # @param [Hash | Types::ProvisionIpamPoolCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::ProvisionIpamPoolCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.provision_ipam_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr',
    #     cidr_authorization_context: {
    #       message: 'Message',
    #       signature: 'Signature'
    #     },
    #     netmask_length: 1,
    #     client_token: 'ClientToken'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ProvisionIpamPoolCidrOutput
    #   resp.data.ipam_pool_cidr #=> Types::IpamPoolCidr
    #   resp.data.ipam_pool_cidr.cidr #=> String
    #   resp.data.ipam_pool_cidr.state #=> String, one of ["pending-provision", "provisioned", "failed-provision", "pending-deprovision", "deprovisioned", "failed-deprovision", "pending-import", "failed-import"]
    #   resp.data.ipam_pool_cidr.failure_reason #=> Types::IpamPoolCidrFailureReason
    #   resp.data.ipam_pool_cidr.failure_reason.code #=> String, one of ["cidr-not-available", "limit-exceeded"]
    #   resp.data.ipam_pool_cidr.failure_reason.message #=> String
    #   resp.data.ipam_pool_cidr.ipam_pool_cidr_id #=> String
    #   resp.data.ipam_pool_cidr.netmask_length #=> Integer
    def provision_ipam_pool_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ProvisionIpamPoolCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ProvisionIpamPoolCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :provision_ipam_pool_cidr,
        tracer: tracer
      )
      Telemetry::ProvisionIpamPoolCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_ipam_pool_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#provision_ipam_pool_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_ipam_pool_cidr] #{output.data}")
        output
      end
    end

    # <p>Provision a CIDR to a public IPv4 pool.</p>
    #          <p>For more information about IPAM, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    # @param [Hash | Types::ProvisionPublicIpv4PoolCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::ProvisionPublicIpv4PoolCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.provision_public_ipv4_pool_cidr(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     pool_id: 'PoolId', # required
    #     netmask_length: 1 # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ProvisionPublicIpv4PoolCidrOutput
    #   resp.data.pool_id #=> String
    #   resp.data.pool_address_range #=> Types::PublicIpv4PoolRange
    #   resp.data.pool_address_range.first_address #=> String
    #   resp.data.pool_address_range.last_address #=> String
    #   resp.data.pool_address_range.address_count #=> Integer
    #   resp.data.pool_address_range.available_address_count #=> Integer
    def provision_public_ipv4_pool_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ProvisionPublicIpv4PoolCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ProvisionPublicIpv4PoolCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :provision_public_ipv4_pool_cidr,
        tracer: tracer
      )
      Telemetry::ProvisionPublicIpv4PoolCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_public_ipv4_pool_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#provision_public_ipv4_pool_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#provision_public_ipv4_pool_cidr] #{output.data}")
        output
      end
    end

    # <p>Purchase the Capacity Block for use with your account.
    # 		 With Capacity Blocks you ensure GPU capacity is available for machine learning (ML) workloads. You must specify the ID of the Capacity Block offering you are purchasing.</p>
    # @param [Hash | Types::PurchaseCapacityBlockInput] params
    #   Request parameters for this operation.
    #   See {Types::PurchaseCapacityBlockInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.purchase_capacity_block(
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     capacity_block_offering_id: 'CapacityBlockOfferingId', # required
    #     instance_platform: 'Linux/UNIX' # required - accepts ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::PurchaseCapacityBlockOutput
    #   resp.data.capacity_reservation #=> Types::CapacityReservation
    #   resp.data.capacity_reservation.capacity_reservation_id #=> String
    #   resp.data.capacity_reservation.owner_id #=> String
    #   resp.data.capacity_reservation.capacity_reservation_arn #=> String
    #   resp.data.capacity_reservation.availability_zone_id #=> String
    #   resp.data.capacity_reservation.instance_type #=> String
    #   resp.data.capacity_reservation.instance_platform #=> String, one of ["Linux/UNIX", "Red Hat Enterprise Linux", "SUSE Linux", "Windows", "Windows with SQL Server", "Windows with SQL Server Enterprise", "Windows with SQL Server Standard", "Windows with SQL Server Web", "Linux with SQL Server Standard", "Linux with SQL Server Web", "Linux with SQL Server Enterprise", "RHEL with SQL Server Standard", "RHEL with SQL Server Enterprise", "RHEL with SQL Server Web", "RHEL with HA", "RHEL with HA and SQL Server Standard", "RHEL with HA and SQL Server Enterprise", "Ubuntu Pro"]
    #   resp.data.capacity_reservation.availability_zone #=> String
    #   resp.data.capacity_reservation.tenancy #=> String, one of ["default", "dedicated"]
    #   resp.data.capacity_reservation.total_instance_count #=> Integer
    #   resp.data.capacity_reservation.available_instance_count #=> Integer
    #   resp.data.capacity_reservation.ebs_optimized #=> Boolean
    #   resp.data.capacity_reservation.ephemeral_storage #=> Boolean
    #   resp.data.capacity_reservation.state #=> String, one of ["active", "expired", "cancelled", "pending", "failed", "scheduled", "payment-pending", "payment-failed"]
    #   resp.data.capacity_reservation.start_date #=> Time
    #   resp.data.capacity_reservation.end_date #=> Time
    #   resp.data.capacity_reservation.end_date_type #=> String, one of ["unlimited", "limited"]
    #   resp.data.capacity_reservation.instance_match_criteria #=> String, one of ["open", "targeted"]
    #   resp.data.capacity_reservation.create_date #=> Time
    #   resp.data.capacity_reservation.tags #=> Array<Tag>
    #   resp.data.capacity_reservation.tags[0] #=> Types::Tag
    #   resp.data.capacity_reservation.tags[0].key #=> String
    #   resp.data.capacity_reservation.tags[0].value #=> String
    #   resp.data.capacity_reservation.outpost_arn #=> String
    #   resp.data.capacity_reservation.capacity_reservation_fleet_id #=> String
    #   resp.data.capacity_reservation.placement_group_arn #=> String
    #   resp.data.capacity_reservation.capacity_allocations #=> Array<CapacityAllocation>
    #   resp.data.capacity_reservation.capacity_allocations[0] #=> Types::CapacityAllocation
    #   resp.data.capacity_reservation.capacity_allocations[0].allocation_type #=> String, one of ["used"]
    #   resp.data.capacity_reservation.capacity_allocations[0].count #=> Integer
    #   resp.data.capacity_reservation.reservation_type #=> String, one of ["default", "capacity-block"]
    def purchase_capacity_block(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::PurchaseCapacityBlockInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::PurchaseCapacityBlock.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :purchase_capacity_block,
        tracer: tracer
      )
      Telemetry::PurchaseCapacityBlock.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_capacity_block] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#purchase_capacity_block] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_capacity_block] #{output.data}")
        output
      end
    end

    # <p>Purchase a reservation with configurations that match those of your Dedicated Host.
    #             You must have active Dedicated Hosts in your account before you purchase a reservation.
    #             This action results in the specified reservation being purchased and charged to your
    #             account.</p>
    # @param [Hash | Types::PurchaseHostReservationInput] params
    #   Request parameters for this operation.
    #   See {Types::PurchaseHostReservationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.purchase_host_reservation(
    #     client_token: 'ClientToken',
    #     currency_code: 'USD', # accepts ["USD"]
    #     host_id_set: [
    #       'member'
    #     ], # required
    #     limit_price: 'LimitPrice',
    #     offering_id: 'OfferingId', # required
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::PurchaseHostReservationOutput
    #   resp.data.client_token #=> String
    #   resp.data.currency_code #=> String, one of ["USD"]
    #   resp.data.purchase #=> Array<Purchase>
    #   resp.data.purchase[0] #=> Types::Purchase
    #   resp.data.purchase[0].currency_code #=> String, one of ["USD"]
    #   resp.data.purchase[0].duration #=> Integer
    #   resp.data.purchase[0].host_id_set #=> Array<String>
    #   resp.data.purchase[0].host_id_set[0] #=> String
    #   resp.data.purchase[0].host_reservation_id #=> String
    #   resp.data.purchase[0].hourly_price #=> String
    #   resp.data.purchase[0].instance_family #=> String
    #   resp.data.purchase[0].payment_option #=> String, one of ["AllUpfront", "PartialUpfront", "NoUpfront"]
    #   resp.data.purchase[0].upfront_price #=> String
    #   resp.data.total_hourly_price #=> String
    #   resp.data.total_upfront_price #=> String
    def purchase_host_reservation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::PurchaseHostReservationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::PurchaseHostReservation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :purchase_host_reservation,
        tracer: tracer
      )
      Telemetry::PurchaseHostReservation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_host_reservation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#purchase_host_reservation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_host_reservation] #{output.data}")
        output
      end
    end

    # <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower
    #        hourly rate compared to On-Demand instance pricing.</p>
    #          <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings
    # 			that match your specifications. After you've purchased a Reserved Instance, you can check for your
    # 			new Reserved Instance with <a>DescribeReservedInstances</a>.</p>
    #          <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a
    #       purchase time, the default is the current time.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and
    #    	   <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
    #    	   in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::PurchaseReservedInstancesOfferingInput] params
    #   Request parameters for this operation.
    #   See {Types::PurchaseReservedInstancesOfferingInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.purchase_reserved_instances_offering(
    #     instance_count: 1, # required
    #     reserved_instances_offering_id: 'ReservedInstancesOfferingId', # required
    #     dry_run: false,
    #     limit_price: {
    #       amount: 1.0,
    #       currency_code: 'USD' # accepts ["USD"]
    #     },
    #     purchase_time: Time.now
    #   )
    # @example Response structure
    #   resp.data #=> Types::PurchaseReservedInstancesOfferingOutput
    #   resp.data.reserved_instances_id #=> String
    def purchase_reserved_instances_offering(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::PurchaseReservedInstancesOfferingInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::PurchaseReservedInstancesOffering.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :purchase_reserved_instances_offering,
        tracer: tracer
      )
      Telemetry::PurchaseReservedInstancesOffering.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_reserved_instances_offering] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#purchase_reserved_instances_offering] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_reserved_instances_offering] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>You can no longer purchase Scheduled Instances.</p>
    #          </note>
    #          <p>Purchases the Scheduled Instances with the specified schedule.</p>
    #          <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term.
    #          Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a>
    #          to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance,
    #          you must call <a>RunScheduledInstances</a> during each scheduled time period.</p>
    #          <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
    # @param [Hash | Types::PurchaseScheduledInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::PurchaseScheduledInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.purchase_scheduled_instances(
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     purchase_requests: [
    #       {
    #         instance_count: 1, # required
    #         purchase_token: 'PurchaseToken' # required
    #       }
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::PurchaseScheduledInstancesOutput
    #   resp.data.scheduled_instance_set #=> Array<ScheduledInstance>
    #   resp.data.scheduled_instance_set[0] #=> Types::ScheduledInstance
    #   resp.data.scheduled_instance_set[0].availability_zone #=> String
    #   resp.data.scheduled_instance_set[0].create_date #=> Time
    #   resp.data.scheduled_instance_set[0].hourly_price #=> String
    #   resp.data.scheduled_instance_set[0].instance_count #=> Integer
    #   resp.data.scheduled_instance_set[0].instance_type #=> String
    #   resp.data.scheduled_instance_set[0].network_platform #=> String
    #   resp.data.scheduled_instance_set[0].next_slot_start_time #=> Time
    #   resp.data.scheduled_instance_set[0].platform #=> String
    #   resp.data.scheduled_instance_set[0].previous_slot_end_time #=> Time
    #   resp.data.scheduled_instance_set[0].recurrence #=> Types::ScheduledInstanceRecurrence
    #   resp.data.scheduled_instance_set[0].recurrence.frequency #=> String
    #   resp.data.scheduled_instance_set[0].recurrence.interval #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set #=> Array<Integer>
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_day_set[0] #=> Integer
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_relative_to_end #=> Boolean
    #   resp.data.scheduled_instance_set[0].recurrence.occurrence_unit #=> String
    #   resp.data.scheduled_instance_set[0].scheduled_instance_id #=> String
    #   resp.data.scheduled_instance_set[0].slot_duration_in_hours #=> Integer
    #   resp.data.scheduled_instance_set[0].term_end_date #=> Time
    #   resp.data.scheduled_instance_set[0].term_start_date #=> Time
    #   resp.data.scheduled_instance_set[0].total_scheduled_instance_hours #=> Integer
    def purchase_scheduled_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::PurchaseScheduledInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::PurchaseScheduledInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :purchase_scheduled_instances,
        tracer: tracer
      )
      Telemetry::PurchaseScheduledInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_scheduled_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#purchase_scheduled_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#purchase_scheduled_instances] #{output.data}")
        output
      end
    end

    # <p>Requests a reboot of the specified instances. This operation is asynchronous; it only
    #             queues a request to reboot the specified instances. The operation succeeds if the
    #             instances are valid and belong to you. Requests to reboot terminated instances are
    #             ignored.</p>
    #          <p>If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a
    #             hard reboot.</p>
    #          <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Troubleshoot an unreachable
    #                 instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::RebootInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::RebootInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reboot_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RebootInstancesOutput
    # @example To reboot an EC2 instance
    #   # This example reboots the specified EC2 instance.
    #   resp = client.reboot_instances({
    #     instance_ids: [
    #       "i-1234567890abcdef5"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def reboot_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RebootInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RebootInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reboot_instances,
        tracer: tracer
      )
      Telemetry::RebootInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reboot_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reboot_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reboot_instances] #{output.data}")
        output
      end
    end

    # <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete
    #       before you can launch an instance from the AMI. For more information about creating AMIs, see
    #         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Create your
    #         own AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <note>
    #             <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers the AMI
    #         in a single request, so you don't have to register the AMI yourself. We recommend that you
    #         always use <a>CreateImage</a> unless you have a specific reason to use
    #         RegisterImage.</p>
    #          </note>
    #          <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration.
    #        If you make changes to an image, deregister the previous image and register the new image.</p>
    #          <p>
    #             <b>Register a snapshot of a root device volume</b>
    #          </p>
    #          <p>You can use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from
    #        a snapshot of a root device volume. You specify the snapshot using a block device mapping.
    #        You can't set the encryption state of the volume using the block device mapping. If the
    #        snapshot is encrypted, or encryption by default is enabled, the root volume of an instance
    #        launched from the AMI is encrypted.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot">Create a Linux AMI from a snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Use encryption with Amazon EBS-backed AMIs</a>
    #        in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #          <p>
    #             <b>Amazon Web Services Marketplace product codes</b>
    #          </p>
    #          <p>If any snapshots have Amazon Web Services Marketplace product codes, they are copied to the new
    #       AMI.</p>
    #          <p>Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE
    #       Linux Enterprise Server (SLES), use the Amazon EC2 billing product code associated with an AMI to
    #       verify the subscription status for package updates. To create a new AMI for operating systems
    #       that require a billing product code, instead of registering the AMI, do the following to
    #       preserve the billing product code association:</p>
    #          <ol>
    #             <li>
    #                <p>Launch an instance from an existing AMI with that billing product code.</p>
    #             </li>
    #             <li>
    #                <p>Customize the instance.</p>
    #             </li>
    #             <li>
    #                <p>Create an AMI from the instance using <a>CreateImage</a>.</p>
    #             </li>
    #          </ol>
    #          <p>If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched
    #       from an AMI with a billing product code, make sure that the Reserved Instance has the matching
    #       billing product code. If you purchase a Reserved Instance without the matching billing product
    #       code, the Reserved Instance will not be applied to the On-Demand Instance. For information
    #       about how to obtain the platform details and billing information of an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understand AMI
    #         billing information</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::RegisterImageInput] params
    #   Request parameters for this operation.
    #   See {Types::RegisterImageInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.register_image(
    #     image_location: 'ImageLocation',
    #     architecture: 'i386', # accepts ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         virtual_name: 'VirtualName',
    #         ebs: {
    #           delete_on_termination: false,
    #           iops: 1,
    #           snapshot_id: 'SnapshotId',
    #           volume_size: 1,
    #           volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #           kms_key_id: 'KmsKeyId',
    #           throughput: 1,
    #           outpost_arn: 'OutpostArn',
    #           encrypted: false
    #         },
    #         no_device: 'NoDevice'
    #       }
    #     ],
    #     description: 'Description',
    #     dry_run: false,
    #     ena_support: false,
    #     kernel_id: 'KernelId',
    #     name: 'Name', # required
    #     billing_products: [
    #       'member'
    #     ],
    #     ramdisk_id: 'RamdiskId',
    #     root_device_name: 'RootDeviceName',
    #     sriov_net_support: 'SriovNetSupport',
    #     virtualization_type: 'VirtualizationType',
    #     boot_mode: 'legacy-bios', # accepts ["legacy-bios", "uefi", "uefi-preferred"]
    #     tpm_support: 'v2.0', # accepts ["v2.0"]
    #     uefi_data: 'UefiData',
    #     imds_support: 'v2.0' # accepts ["v2.0"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::RegisterImageOutput
    #   resp.data.image_id #=> String
    def register_image(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RegisterImageInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RegisterImage.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :register_image,
        tracer: tracer
      )
      Telemetry::RegisterImage.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_image] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#register_image] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_image] #{output.data}")
        output
      end
    end

    # <p>Registers a set of tag keys to include in scheduled event notifications for your resources.
    #    		</p>
    #          <p>To remove tags, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeregisterInstanceEventNotificationAttributes.html">DeregisterInstanceEventNotificationAttributes</a>.</p>
    # @param [Hash | Types::RegisterInstanceEventNotificationAttributesInput] params
    #   Request parameters for this operation.
    #   See {Types::RegisterInstanceEventNotificationAttributesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.register_instance_event_notification_attributes(
    #     dry_run: false,
    #     instance_tag_attribute: {
    #       include_all_tags_of_instance: false,
    #       instance_tag_keys: [
    #         'member'
    #       ]
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RegisterInstanceEventNotificationAttributesOutput
    #   resp.data.instance_tag_attribute #=> Types::InstanceTagNotificationAttribute
    #   resp.data.instance_tag_attribute.instance_tag_keys #=> Array<String>
    #   resp.data.instance_tag_attribute.instance_tag_keys[0] #=> String
    #   resp.data.instance_tag_attribute.include_all_tags_of_instance #=> Boolean
    def register_instance_event_notification_attributes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RegisterInstanceEventNotificationAttributesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RegisterInstanceEventNotificationAttributes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :register_instance_event_notification_attributes,
        tracer: tracer
      )
      Telemetry::RegisterInstanceEventNotificationAttributes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_instance_event_notification_attributes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#register_instance_event_notification_attributes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_instance_event_notification_attributes] #{output.data}")
        output
      end
    end

    # <p>Registers members (network interfaces) with the  transit gateway multicast group. A member is a network interface associated
    #             with a supported EC2 instance that receives multicast traffic. For information about
    #             supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
    #                 Consideration</a> in <i>Amazon VPC Transit Gateways</i>.</p>
    #          <p>After you add the members, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the members were added
    #             to the  transit gateway multicast group.</p>
    # @param [Hash | Types::RegisterTransitGatewayMulticastGroupMembersInput] params
    #   Request parameters for this operation.
    #   See {Types::RegisterTransitGatewayMulticastGroupMembersInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.register_transit_gateway_multicast_group_members(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RegisterTransitGatewayMulticastGroupMembersOutput
    #   resp.data.registered_multicast_group_members #=> Types::TransitGatewayMulticastRegisteredGroupMembers
    #   resp.data.registered_multicast_group_members.transit_gateway_multicast_domain_id #=> String
    #   resp.data.registered_multicast_group_members.registered_network_interface_ids #=> Array<String>
    #   resp.data.registered_multicast_group_members.registered_network_interface_ids[0] #=> String
    #   resp.data.registered_multicast_group_members.group_ip_address #=> String
    def register_transit_gateway_multicast_group_members(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RegisterTransitGatewayMulticastGroupMembersInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RegisterTransitGatewayMulticastGroupMembers.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :register_transit_gateway_multicast_group_members,
        tracer: tracer
      )
      Telemetry::RegisterTransitGatewayMulticastGroupMembers.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_transit_gateway_multicast_group_members] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#register_transit_gateway_multicast_group_members] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_transit_gateway_multicast_group_members] #{output.data}")
        output
      end
    end

    # <p>Registers sources (network interfaces) with the specified  transit gateway multicast group.</p>
    #          <p>A multicast source is a network interface attached to a supported instance that sends
    #             multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
    #                 Considerations</a> in <i>Amazon VPC Transit Gateways</i>.</p>
    #          <p>After you add the source, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the source was added to the multicast
    #             group.</p>
    # @param [Hash | Types::RegisterTransitGatewayMulticastGroupSourcesInput] params
    #   Request parameters for this operation.
    #   See {Types::RegisterTransitGatewayMulticastGroupSourcesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.register_transit_gateway_multicast_group_sources(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     group_ip_address: 'GroupIpAddress',
    #     network_interface_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RegisterTransitGatewayMulticastGroupSourcesOutput
    #   resp.data.registered_multicast_group_sources #=> Types::TransitGatewayMulticastRegisteredGroupSources
    #   resp.data.registered_multicast_group_sources.transit_gateway_multicast_domain_id #=> String
    #   resp.data.registered_multicast_group_sources.registered_network_interface_ids #=> Array<String>
    #   resp.data.registered_multicast_group_sources.registered_network_interface_ids[0] #=> String
    #   resp.data.registered_multicast_group_sources.group_ip_address #=> String
    def register_transit_gateway_multicast_group_sources(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RegisterTransitGatewayMulticastGroupSourcesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RegisterTransitGatewayMulticastGroupSources.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :register_transit_gateway_multicast_group_sources,
        tracer: tracer
      )
      Telemetry::RegisterTransitGatewayMulticastGroupSources.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_transit_gateway_multicast_group_sources] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#register_transit_gateway_multicast_group_sources] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#register_transit_gateway_multicast_group_sources] #{output.data}")
        output
      end
    end

    # <p>Rejects a request to associate cross-account subnets with a transit gateway multicast domain.</p>
    # @param [Hash | Types::RejectTransitGatewayMulticastDomainAssociationsInput] params
    #   Request parameters for this operation.
    #   See {Types::RejectTransitGatewayMulticastDomainAssociationsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reject_transit_gateway_multicast_domain_associations(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId',
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     subnet_ids: [
    #       'member'
    #     ],
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RejectTransitGatewayMulticastDomainAssociationsOutput
    #   resp.data.associations #=> Types::TransitGatewayMulticastDomainAssociations
    #   resp.data.associations.transit_gateway_multicast_domain_id #=> String
    #   resp.data.associations.transit_gateway_attachment_id #=> String
    #   resp.data.associations.resource_id #=> String
    #   resp.data.associations.resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.associations.resource_owner_id #=> String
    #   resp.data.associations.subnets #=> Array<SubnetAssociation>
    #   resp.data.associations.subnets[0] #=> Types::SubnetAssociation
    #   resp.data.associations.subnets[0].subnet_id #=> String
    #   resp.data.associations.subnets[0].state #=> String, one of ["pendingAcceptance", "associating", "associated", "disassociating", "disassociated", "rejected", "failed"]
    def reject_transit_gateway_multicast_domain_associations(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RejectTransitGatewayMulticastDomainAssociationsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RejectTransitGatewayMulticastDomainAssociations.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reject_transit_gateway_multicast_domain_associations,
        tracer: tracer
      )
      Telemetry::RejectTransitGatewayMulticastDomainAssociations.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_multicast_domain_associations] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_multicast_domain_associations] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_multicast_domain_associations] #{output.data}")
        output
      end
    end

    # <p>Rejects a transit gateway peering attachment request.</p>
    # @param [Hash | Types::RejectTransitGatewayPeeringAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::RejectTransitGatewayPeeringAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reject_transit_gateway_peering_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RejectTransitGatewayPeeringAttachmentOutput
    #   resp.data.transit_gateway_peering_attachment #=> Types::TransitGatewayPeeringAttachment
    #   resp.data.transit_gateway_peering_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.transit_gateway_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.core_network_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.owner_id #=> String
    #   resp.data.transit_gateway_peering_attachment.requester_tgw_info.region #=> String
    #   resp.data.transit_gateway_peering_attachment.accepter_tgw_info #=> Types::PeeringTgwInfo
    #   resp.data.transit_gateway_peering_attachment.options #=> Types::TransitGatewayPeeringAttachmentOptions
    #   resp.data.transit_gateway_peering_attachment.options.dynamic_routing #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_peering_attachment.status #=> Types::PeeringAttachmentStatus
    #   resp.data.transit_gateway_peering_attachment.status.code #=> String
    #   resp.data.transit_gateway_peering_attachment.status.message #=> String
    #   resp.data.transit_gateway_peering_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_peering_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_peering_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_peering_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_peering_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_peering_attachment.tags[0].value #=> String
    def reject_transit_gateway_peering_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RejectTransitGatewayPeeringAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RejectTransitGatewayPeeringAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reject_transit_gateway_peering_attachment,
        tracer: tracer
      )
      Telemetry::RejectTransitGatewayPeeringAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_peering_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_peering_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_peering_attachment] #{output.data}")
        output
      end
    end

    # <p>Rejects a request to attach a VPC to a transit gateway.</p>
    #          <p>The VPC attachment must be in the <code>pendingAcceptance</code> state.
    #          Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests.
    #          Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
    # @param [Hash | Types::RejectTransitGatewayVpcAttachmentInput] params
    #   Request parameters for this operation.
    #   See {Types::RejectTransitGatewayVpcAttachmentInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reject_transit_gateway_vpc_attachment(
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RejectTransitGatewayVpcAttachmentOutput
    #   resp.data.transit_gateway_vpc_attachment #=> Types::TransitGatewayVpcAttachment
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_attachment_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.transit_gateway_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.vpc_owner_id #=> String
    #   resp.data.transit_gateway_vpc_attachment.state #=> String, one of ["initiating", "initiatingRequest", "pendingAcceptance", "rollingBack", "pending", "available", "modifying", "deleting", "deleted", "failed", "rejected", "rejecting", "failing"]
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids #=> Array<String>
    #   resp.data.transit_gateway_vpc_attachment.subnet_ids[0] #=> String
    #   resp.data.transit_gateway_vpc_attachment.creation_time #=> Time
    #   resp.data.transit_gateway_vpc_attachment.options #=> Types::TransitGatewayVpcAttachmentOptions
    #   resp.data.transit_gateway_vpc_attachment.options.dns_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.security_group_referencing_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.ipv6_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.options.appliance_mode_support #=> String, one of ["enable", "disable"]
    #   resp.data.transit_gateway_vpc_attachment.tags #=> Array<Tag>
    #   resp.data.transit_gateway_vpc_attachment.tags[0] #=> Types::Tag
    #   resp.data.transit_gateway_vpc_attachment.tags[0].key #=> String
    #   resp.data.transit_gateway_vpc_attachment.tags[0].value #=> String
    def reject_transit_gateway_vpc_attachment(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RejectTransitGatewayVpcAttachmentInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RejectTransitGatewayVpcAttachment.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reject_transit_gateway_vpc_attachment,
        tracer: tracer
      )
      Telemetry::RejectTransitGatewayVpcAttachment.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_vpc_attachment] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_vpc_attachment] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_transit_gateway_vpc_attachment] #{output.data}")
        output
      end
    end

    # <p>Rejects VPC endpoint connection requests to your VPC endpoint service.</p>
    # @param [Hash | Types::RejectVpcEndpointConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::RejectVpcEndpointConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reject_vpc_endpoint_connections(
    #     dry_run: false,
    #     service_id: 'ServiceId', # required
    #     vpc_endpoint_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RejectVpcEndpointConnectionsOutput
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def reject_vpc_endpoint_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RejectVpcEndpointConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RejectVpcEndpointConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reject_vpc_endpoint_connections,
        tracer: tracer
      )
      Telemetry::RejectVpcEndpointConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_vpc_endpoint_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reject_vpc_endpoint_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_vpc_endpoint_connections] #{output.data}")
        output
      end
    end

    # <p>Rejects a VPC peering connection request. The VPC peering connection must be in the
    # 				<code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request
    # 			to view your outstanding VPC peering connection requests. To delete an active VPC peering
    # 			connection, or to delete a VPC peering connection request that you initiated, use	<a>DeleteVpcPeeringConnection</a>.</p>
    # @param [Hash | Types::RejectVpcPeeringConnectionInput] params
    #   Request parameters for this operation.
    #   See {Types::RejectVpcPeeringConnectionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reject_vpc_peering_connection(
    #     dry_run: false,
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RejectVpcPeeringConnectionOutput
    #   resp.data.return #=> Boolean
    def reject_vpc_peering_connection(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RejectVpcPeeringConnectionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RejectVpcPeeringConnection.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reject_vpc_peering_connection,
        tracer: tracer
      )
      Telemetry::RejectVpcPeeringConnection.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_vpc_peering_connection] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reject_vpc_peering_connection] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reject_vpc_peering_connection] #{output.data}")
        output
      end
    end

    # <p>Releases the specified Elastic IP address.</p>
    #          <p>[Default VPC] Releasing an Elastic IP address automatically disassociates it
    # 				from any instance that it's associated with. To disassociate an Elastic IP address without
    # 				releasing it, use <a>DisassociateAddress</a>.</p>
    #          <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address
    # 			  before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p>
    #          <p>After releasing an Elastic IP address, it is released to the IP address pool.
    #         Be sure to update your DNS records and any servers or devices that communicate with the address.
    #         If you attempt to release an Elastic IP address that you already released, you'll get an
    #        <code>AuthFailure</code> error if the address is already allocated to another Amazon Web Services account.</p>
    #          <p>After you release an Elastic IP address, you might be able to recover it.
    #         For more information, see <a>AllocateAddress</a>.</p>
    # @param [Hash | Types::ReleaseAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::ReleaseAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.release_address(
    #     allocation_id: 'AllocationId',
    #     public_ip: 'PublicIp',
    #     network_border_group: 'NetworkBorderGroup',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReleaseAddressOutput
    # @example To release an Elastic IP address
    #   # This example releases the specified Elastic IP address.
    #   resp = client.release_address({
    #     allocation_id: "eipalloc-64d5890a"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def release_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReleaseAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReleaseAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :release_address,
        tracer: tracer
      )
      Telemetry::ReleaseAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#release_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#release_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#release_address] #{output.data}")
        output
      end
    end

    # <p>When you no longer want to use an On-Demand Dedicated Host it can be released.
    #             On-Demand billing is stopped and the host goes into <code>released</code> state. The
    #             host ID of Dedicated Hosts that have been released can no longer be specified in another
    #             request, for example, to modify the host. You must stop or terminate all instances on a
    #             host before it can be released.</p>
    #          <p>When Dedicated Hosts are released, it may take some time for them to stop counting
    #             toward your limit and you may receive capacity errors when trying to allocate new
    #             Dedicated Hosts. Wait a few minutes and then try again.</p>
    #          <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
    # @param [Hash | Types::ReleaseHostsInput] params
    #   Request parameters for this operation.
    #   See {Types::ReleaseHostsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.release_hosts(
    #     host_ids: [
    #       'member'
    #     ] # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReleaseHostsOutput
    #   resp.data.successful #=> Array<String>
    #   resp.data.successful[0] #=> String
    #   resp.data.unsuccessful #=> Array<UnsuccessfulItem>
    #   resp.data.unsuccessful[0] #=> Types::UnsuccessfulItem
    #   resp.data.unsuccessful[0].error #=> Types::UnsuccessfulItemError
    #   resp.data.unsuccessful[0].error.code #=> String
    #   resp.data.unsuccessful[0].error.message #=> String
    #   resp.data.unsuccessful[0].resource_id #=> String
    def release_hosts(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReleaseHostsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReleaseHosts.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :release_hosts,
        tracer: tracer
      )
      Telemetry::ReleaseHosts.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#release_hosts] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#release_hosts] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#release_hosts] #{output.data}")
        output
      end
    end

    # <p>Release an allocation within an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations. You can only use this action to release manual allocations. To remove an allocation for a resource without deleting the resource, set its monitored state to false using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyIpamResourceCidr.html">ModifyIpamResourceCidr</a>. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/release-alloc-ipam.html">Release an allocation</a> in the <i>Amazon VPC IPAM User Guide</i>.
    #       </p>
    #          <note>
    #             <p>All EC2 API actions follow an <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/query-api-troubleshooting.html#eventual-consistency">eventual consistency</a> model.</p>
    #          </note>
    # @param [Hash | Types::ReleaseIpamPoolAllocationInput] params
    #   Request parameters for this operation.
    #   See {Types::ReleaseIpamPoolAllocationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.release_ipam_pool_allocation(
    #     dry_run: false,
    #     ipam_pool_id: 'IpamPoolId', # required
    #     cidr: 'Cidr', # required
    #     ipam_pool_allocation_id: 'IpamPoolAllocationId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReleaseIpamPoolAllocationOutput
    #   resp.data.success #=> Boolean
    def release_ipam_pool_allocation(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReleaseIpamPoolAllocationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReleaseIpamPoolAllocation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :release_ipam_pool_allocation,
        tracer: tracer
      )
      Telemetry::ReleaseIpamPoolAllocation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#release_ipam_pool_allocation] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#release_ipam_pool_allocation] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#release_ipam_pool_allocation] #{output.data}")
        output
      end
    end

    # <p>Replaces an IAM instance profile for the specified running instance. You can use
    #             this action to change the IAM instance profile that's associated with an instance
    #             without having to disassociate the existing IAM instance profile first.</p>
    #          <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
    #             ID.</p>
    # @param [Hash | Types::ReplaceIamInstanceProfileAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceIamInstanceProfileAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_iam_instance_profile_association(
    #     iam_instance_profile: {
    #       arn: 'Arn',
    #       name: 'Name'
    #     }, # required
    #     association_id: 'AssociationId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceIamInstanceProfileAssociationOutput
    #   resp.data.iam_instance_profile_association #=> Types::IamInstanceProfileAssociation
    #   resp.data.iam_instance_profile_association.association_id #=> String
    #   resp.data.iam_instance_profile_association.instance_id #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.iam_instance_profile_association.iam_instance_profile.arn #=> String
    #   resp.data.iam_instance_profile_association.iam_instance_profile.id #=> String
    #   resp.data.iam_instance_profile_association.state #=> String, one of ["associating", "associated", "disassociating", "disassociated"]
    #   resp.data.iam_instance_profile_association.timestamp #=> Time
    def replace_iam_instance_profile_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceIamInstanceProfileAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceIamInstanceProfileAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_iam_instance_profile_association,
        tracer: tracer
      )
      Telemetry::ReplaceIamInstanceProfileAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_iam_instance_profile_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_iam_instance_profile_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_iam_instance_profile_association] #{output.data}")
        output
      end
    end

    # <p>Changes which network ACL a subnet is associated with. By default when you create a
    # 			subnet, it's automatically associated with the default network ACL. For more
    # 			information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <p>This is an idempotent operation.</p>
    # @param [Hash | Types::ReplaceNetworkAclAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceNetworkAclAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_network_acl_association(
    #     association_id: 'AssociationId', # required
    #     dry_run: false,
    #     network_acl_id: 'NetworkAclId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceNetworkAclAssociationOutput
    #   resp.data.new_association_id #=> String
    # @example To replace the network ACL associated with a subnet
    #   # This example associates the specified network ACL with the subnet for the specified network ACL association.
    #   resp = client.replace_network_acl_association({
    #     association_id: "aclassoc-e5b95c8c",
    #     network_acl_id: "acl-5fb85d36"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     new_association_id: "aclassoc-3999875b"
    #   }
    def replace_network_acl_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceNetworkAclAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceNetworkAclAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_network_acl_association,
        tracer: tracer
      )
      Telemetry::ReplaceNetworkAclAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_network_acl_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_network_acl_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_network_acl_association] #{output.data}")
        output
      end
    end

    # <p>Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the
    # 				<i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::ReplaceNetworkAclEntryInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceNetworkAclEntryInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_network_acl_entry(
    #     cidr_block: 'CidrBlock',
    #     dry_run: false,
    #     egress: false, # required
    #     icmp_type_code: {
    #       code: 1,
    #       type: 1
    #     },
    #     ipv6_cidr_block: 'Ipv6CidrBlock',
    #     network_acl_id: 'NetworkAclId', # required
    #     port_range: {
    #       from: 1,
    #       to: 1
    #     },
    #     protocol: 'Protocol', # required
    #     rule_action: 'allow', # required - accepts ["allow", "deny"]
    #     rule_number: 1 # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceNetworkAclEntryOutput
    # @example To replace a network ACL entry
    #   # This example replaces an entry for the specified network ACL. The new rule 100 allows ingress traffic from 203.0.113.12/24 on UDP port 53 (DNS) into any associated subnet.
    #   resp = client.replace_network_acl_entry({
    #     network_acl_id: "acl-5fb85d36",
    #     rule_number: 100,
    #     protocol: "17",
    #     rule_action: "allow",
    #     egress: false,
    #     cidr_block: "203.0.113.12/24",
    #     port_range: {
    #       from: 53,
    #       to: 53
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def replace_network_acl_entry(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceNetworkAclEntryInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceNetworkAclEntry.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_network_acl_entry,
        tracer: tracer
      )
      Telemetry::ReplaceNetworkAclEntry.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_network_acl_entry] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_network_acl_entry] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_network_acl_entry] #{output.data}")
        output
      end
    end

    # <p>Replaces an existing route within a route table in a VPC.</p>
    #          <p>You must specify either a destination CIDR block or a prefix list ID. You must also specify
    #            exactly one of the resources from the parameter list, or reset the local route to its default
    #            target.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
    #                 <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::ReplaceRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_route(
    #     destination_cidr_block: 'DestinationCidrBlock',
    #     destination_ipv6_cidr_block: 'DestinationIpv6CidrBlock',
    #     destination_prefix_list_id: 'DestinationPrefixListId',
    #     dry_run: false,
    #     vpc_endpoint_id: 'VpcEndpointId',
    #     egress_only_internet_gateway_id: 'EgressOnlyInternetGatewayId',
    #     gateway_id: 'GatewayId',
    #     instance_id: 'InstanceId',
    #     local_target: false,
    #     nat_gateway_id: 'NatGatewayId',
    #     transit_gateway_id: 'TransitGatewayId',
    #     local_gateway_id: 'LocalGatewayId',
    #     carrier_gateway_id: 'CarrierGatewayId',
    #     network_interface_id: 'NetworkInterfaceId',
    #     route_table_id: 'RouteTableId', # required
    #     vpc_peering_connection_id: 'VpcPeeringConnectionId',
    #     core_network_arn: 'CoreNetworkArn'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceRouteOutput
    # @example To replace a route
    #   # This example replaces the specified route in the specified table table. The new route matches the specified CIDR and sends the traffic to the specified virtual private gateway.
    #   resp = client.replace_route({
    #     route_table_id: "rtb-22574640",
    #     destination_cidr_block: "10.0.0.0/16",
    #     gateway_id: "vgw-9a4cacf3"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def replace_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_route,
        tracer: tracer
      )
      Telemetry::ReplaceRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_route] #{output.data}")
        output
      end
    end

    # <p>Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation
    #         completes, the subnet or gateway uses the routes in the new route table. For more
    #         information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
    #         tables</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <p>You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.</p>
    # @param [Hash | Types::ReplaceRouteTableAssociationInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceRouteTableAssociationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_route_table_association(
    #     association_id: 'AssociationId', # required
    #     dry_run: false,
    #     route_table_id: 'RouteTableId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceRouteTableAssociationOutput
    #   resp.data.new_association_id #=> String
    #   resp.data.association_state #=> Types::RouteTableAssociationState
    #   resp.data.association_state.state #=> String, one of ["associating", "associated", "disassociating", "disassociated", "failed"]
    #   resp.data.association_state.status_message #=> String
    # @example To replace the route table associated with a subnet
    #   # This example associates the specified route table with the subnet for the specified route table association.
    #   resp = client.replace_route_table_association({
    #     association_id: "rtbassoc-781d0d1a",
    #     route_table_id: "rtb-22574640"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     new_association_id: "rtbassoc-3a1f0f58"
    #   }
    def replace_route_table_association(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceRouteTableAssociationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceRouteTableAssociation.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_route_table_association,
        tracer: tracer
      )
      Telemetry::ReplaceRouteTableAssociation.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_route_table_association] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_route_table_association] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_route_table_association] #{output.data}")
        output
      end
    end

    # <p>Replaces the specified route in the specified transit gateway route table.</p>
    # @param [Hash | Types::ReplaceTransitGatewayRouteInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceTransitGatewayRouteInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_transit_gateway_route(
    #     destination_cidr_block: 'DestinationCidrBlock', # required
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     transit_gateway_attachment_id: 'TransitGatewayAttachmentId',
    #     blackhole: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceTransitGatewayRouteOutput
    #   resp.data.route #=> Types::TransitGatewayRoute
    #   resp.data.route.destination_cidr_block #=> String
    #   resp.data.route.prefix_list_id #=> String
    #   resp.data.route.transit_gateway_route_table_announcement_id #=> String
    #   resp.data.route.transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.route.transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.route.transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.route.transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.route.type #=> String, one of ["static", "propagated"]
    #   resp.data.route.state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    def replace_transit_gateway_route(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceTransitGatewayRouteInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceTransitGatewayRoute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_transit_gateway_route,
        tracer: tracer
      )
      Telemetry::ReplaceTransitGatewayRoute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_transit_gateway_route] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_transit_gateway_route] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_transit_gateway_route] #{output.data}")
        output
      end
    end

    # <p>Trigger replacement of specified VPN tunnel.</p>
    # @param [Hash | Types::ReplaceVpnTunnelInput] params
    #   Request parameters for this operation.
    #   See {Types::ReplaceVpnTunnelInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.replace_vpn_tunnel(
    #     vpn_connection_id: 'VpnConnectionId', # required
    #     vpn_tunnel_outside_ip_address: 'VpnTunnelOutsideIpAddress', # required
    #     apply_pending_maintenance: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReplaceVpnTunnelOutput
    #   resp.data.return #=> Boolean
    def replace_vpn_tunnel(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReplaceVpnTunnelInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReplaceVpnTunnel.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :replace_vpn_tunnel,
        tracer: tracer
      )
      Telemetry::ReplaceVpnTunnel.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_vpn_tunnel] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#replace_vpn_tunnel] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#replace_vpn_tunnel] #{output.data}")
        output
      end
    end

    # <p>Submits feedback about the status of an instance. The instance must be in the
    #                 <code>running</code> state. If your experience with the instance differs from the
    #             instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon
    #             EC2 collects this information to improve the accuracy of status checks.</p>
    #          <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
    # @param [Hash | Types::ReportInstanceStatusInput] params
    #   Request parameters for this operation.
    #   See {Types::ReportInstanceStatusInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.report_instance_status(
    #     description: 'Description',
    #     dry_run: false,
    #     end_time: Time.now,
    #     instances: [
    #       'member'
    #     ], # required
    #     reason_codes: [
    #       'instance-stuck-in-state' # accepts ["instance-stuck-in-state", "unresponsive", "not-accepting-credentials", "password-not-available", "performance-network", "performance-instance-store", "performance-ebs-volume", "performance-other", "other"]
    #     ], # required
    #     start_time: Time.now,
    #     status: 'ok' # required - accepts ["ok", "impaired"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ReportInstanceStatusOutput
    def report_instance_status(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ReportInstanceStatusInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ReportInstanceStatus.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :report_instance_status,
        tracer: tracer
      )
      Telemetry::ReportInstanceStatus.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#report_instance_status] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#report_instance_status] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#report_instance_status] #{output.data}")
        output
      end
    end

    # <p>Creates a Spot Fleet request.</p>
    #          <p>The Spot Fleet request specifies the total target capacity and the On-Demand target
    #             capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand
    #             capacity, and launches the difference as Spot capacity.</p>
    #          <p>You can submit a single request that includes multiple launch specifications that vary
    #             by instance type, AMI, Availability Zone, or subnet.</p>
    #          <p>By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the
    #             price per unit is the lowest. Each launch specification can include its own instance
    #             weighting that reflects the value of the instance type to your application
    #             workload.</p>
    #          <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity
    #             across the Spot pools included in its launch specifications. By ensuring that the Spot
    #             Instances in your Spot Fleet are in different Spot pools, you can improve the
    #             availability of your fleet.</p>
    #          <p>You can specify tags for the Spot Fleet request and instances launched by the fleet.
    #             You cannot tag other resource types in a Spot Fleet request because only the
    #                 <code>spot-fleet-request</code> and <code>instance</code> resource types are
    #             supported.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet requests</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    #          <important>
    #             <p>We strongly discourage using the RequestSpotFleet API because it is a legacy
    #                 API with no planned investment. For options for requesting Spot Instances, see
    #                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use">Which
    #                     is the best Spot request method to use?</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #          </important>
    # @param [Hash | Types::RequestSpotFleetInput] params
    #   Request parameters for this operation.
    #   See {Types::RequestSpotFleetInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.request_spot_fleet(
    #     dry_run: false,
    #     spot_fleet_request_config: {
    #       allocation_strategy: 'lowestPrice', # accepts ["lowestPrice", "diversified", "capacityOptimized", "capacityOptimizedPrioritized", "priceCapacityOptimized"]
    #       on_demand_allocation_strategy: 'lowestPrice', # accepts ["lowestPrice", "prioritized"]
    #       spot_maintenance_strategies: {
    #         capacity_rebalance: {
    #           replacement_strategy: 'launch', # accepts ["launch", "launch-before-terminate"]
    #           termination_delay: 1
    #         }
    #       },
    #       client_token: 'ClientToken',
    #       excess_capacity_termination_policy: 'noTermination', # accepts ["noTermination", "default"]
    #       fulfilled_capacity: 1.0,
    #       on_demand_fulfilled_capacity: 1.0,
    #       iam_fleet_role: 'IamFleetRole', # required
    #       launch_specifications: [
    #         {
    #           security_groups: [
    #             {
    #               group_name: 'GroupName',
    #               group_id: 'GroupId'
    #             }
    #           ],
    #           addressing_type: 'AddressingType',
    #           block_device_mappings: [
    #             {
    #               device_name: 'DeviceName',
    #               virtual_name: 'VirtualName',
    #               ebs: {
    #                 delete_on_termination: false,
    #                 iops: 1,
    #                 snapshot_id: 'SnapshotId',
    #                 volume_size: 1,
    #                 volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #                 kms_key_id: 'KmsKeyId',
    #                 throughput: 1,
    #                 outpost_arn: 'OutpostArn',
    #                 encrypted: false
    #               },
    #               no_device: 'NoDevice'
    #             }
    #           ],
    #           ebs_optimized: false,
    #           iam_instance_profile: {
    #             arn: 'Arn',
    #             name: 'Name'
    #           },
    #           image_id: 'ImageId',
    #           instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #           kernel_id: 'KernelId',
    #           key_name: 'KeyName',
    #           monitoring: {
    #             enabled: false
    #           },
    #           network_interfaces: [
    #             {
    #               associate_public_ip_address: false,
    #               delete_on_termination: false,
    #               description: 'Description',
    #               device_index: 1,
    #               groups: [
    #                 'member'
    #               ],
    #               ipv6_address_count: 1,
    #               ipv6_addresses: [
    #                 {
    #                   ipv6_address: 'Ipv6Address',
    #                   is_primary_ipv6: false
    #                 }
    #               ],
    #               network_interface_id: 'NetworkInterfaceId',
    #               private_ip_address: 'PrivateIpAddress',
    #               private_ip_addresses: [
    #                 {
    #                   primary: false,
    #                   private_ip_address: 'PrivateIpAddress'
    #                 }
    #               ],
    #               secondary_private_ip_address_count: 1,
    #               subnet_id: 'SubnetId',
    #               associate_carrier_ip_address: false,
    #               interface_type: 'InterfaceType',
    #               network_card_index: 1,
    #               ipv4_prefixes: [
    #                 {
    #                   ipv4_prefix: 'Ipv4Prefix'
    #                 }
    #               ],
    #               ipv4_prefix_count: 1,
    #               ipv6_prefixes: [
    #                 {
    #                   ipv6_prefix: 'Ipv6Prefix'
    #                 }
    #               ],
    #               ipv6_prefix_count: 1,
    #               primary_ipv6: false,
    #               ena_srd_specification: {
    #                 ena_srd_enabled: false,
    #                 ena_srd_udp_specification: {
    #                   ena_srd_udp_enabled: false
    #                 }
    #               },
    #               connection_tracking_specification: {
    #                 tcp_established_timeout: 1,
    #                 udp_stream_timeout: 1,
    #                 udp_timeout: 1
    #               }
    #             }
    #           ],
    #           placement: {
    #             availability_zone: 'AvailabilityZone',
    #             group_name: 'GroupName',
    #             tenancy: 'default' # accepts ["default", "dedicated", "host"]
    #           },
    #           ramdisk_id: 'RamdiskId',
    #           spot_price: 'SpotPrice',
    #           subnet_id: 'SubnetId',
    #           user_data: 'UserData',
    #           weighted_capacity: 1.0,
    #           tag_specifications: [
    #             {
    #               resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #               tags: [
    #                 {
    #                   key: 'Key',
    #                   value: 'Value'
    #                 }
    #               ]
    #             }
    #           ],
    #           instance_requirements: {
    #             v_cpu_count: {
    #               min: 1,
    #               max: 1
    #             },
    #             memory_mi_b: {
    #               min: 1,
    #               max: 1
    #             },
    #             cpu_manufacturers: [
    #               'intel' # accepts ["intel", "amd", "amazon-web-services"]
    #             ],
    #             memory_gi_b_per_v_cpu: {
    #               min: 1.0,
    #               max: 1.0
    #             },
    #             excluded_instance_types: [
    #               'member'
    #             ],
    #             instance_generations: [
    #               'current' # accepts ["current", "previous"]
    #             ],
    #             spot_max_price_percentage_over_lowest_price: 1,
    #             on_demand_max_price_percentage_over_lowest_price: 1,
    #             bare_metal: 'included', # accepts ["included", "required", "excluded"]
    #             burstable_performance: 'included', # accepts ["included", "required", "excluded"]
    #             require_hibernate_support: false,
    #             network_interface_count: {
    #               min: 1,
    #               max: 1
    #             },
    #             local_storage: 'included', # accepts ["included", "required", "excluded"]
    #             local_storage_types: [
    #               'hdd' # accepts ["hdd", "ssd"]
    #             ],
    #             total_local_storage_gb: {
    #               min: 1.0,
    #               max: 1.0
    #             },
    #             baseline_ebs_bandwidth_mbps: {
    #               min: 1,
    #               max: 1
    #             },
    #             accelerator_types: [
    #               'gpu' # accepts ["gpu", "fpga", "inference"]
    #             ],
    #             accelerator_count: {
    #               min: 1,
    #               max: 1
    #             },
    #             accelerator_manufacturers: [
    #               'amazon-web-services' # accepts ["amazon-web-services", "amd", "nvidia", "xilinx", "habana"]
    #             ],
    #             accelerator_names: [
    #               'a100' # accepts ["a100", "inferentia", "k520", "k80", "m60", "radeon-pro-v520", "t4", "vu9p", "v100", "a10g", "h100", "t4g"]
    #             ],
    #             accelerator_total_memory_mi_b: {
    #               min: 1,
    #               max: 1
    #             },
    #             network_bandwidth_gbps: {
    #               min: 1.0,
    #               max: 1.0
    #             },
    #             allowed_instance_types: [
    #               'member'
    #             ],
    #             max_spot_price_as_percentage_of_optimal_on_demand_price: 1
    #           }
    #         }
    #       ],
    #       launch_template_configs: [
    #         {
    #           launch_template_specification: {
    #             launch_template_id: 'LaunchTemplateId',
    #             launch_template_name: 'LaunchTemplateName',
    #             version: 'Version'
    #           },
    #           overrides: [
    #             {
    #               instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #               spot_price: 'SpotPrice',
    #               subnet_id: 'SubnetId',
    #               availability_zone: 'AvailabilityZone',
    #               weighted_capacity: 1.0,
    #               priority: 1.0,
    #             }
    #           ]
    #         }
    #       ],
    #       spot_price: 'SpotPrice',
    #       target_capacity: 1, # required
    #       on_demand_target_capacity: 1,
    #       on_demand_max_total_price: 'OnDemandMaxTotalPrice',
    #       spot_max_total_price: 'SpotMaxTotalPrice',
    #       terminate_instances_with_expiration: false,
    #       type: 'request', # accepts ["request", "maintain", "instant"]
    #       valid_from: Time.now,
    #       valid_until: Time.now,
    #       replace_unhealthy_instances: false,
    #       instance_interruption_behavior: 'hibernate', # accepts ["hibernate", "stop", "terminate"]
    #       load_balancers_config: {
    #         classic_load_balancers_config: {
    #           classic_load_balancers: [
    #             {
    #               name: 'Name'
    #             }
    #           ]
    #         },
    #         target_groups_config: {
    #           target_groups: [
    #             {
    #               arn: 'Arn'
    #             }
    #           ]
    #         }
    #       },
    #       instance_pools_to_use_count: 1,
    #       context: 'Context',
    #       target_capacity_unit_type: 'vcpu', # accepts ["vcpu", "memory-mib", "units"]
    #       tag_specifications: [
    #         {
    #           resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         }
    #       ]
    #     } # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RequestSpotFleetOutput
    #   resp.data.spot_fleet_request_id #=> String
    # @example To request a Spot fleet in the subnet with the lowest price
    #   # This example creates a Spot fleet request with two launch specifications that differ only by subnet. The Spot fleet launches the instances in the specified subnet with the lowest price. If the instances are launched in a default VPC, they receive a public IP address by default. If the instances are launched in a nondefault VPC, they do not receive a public IP address by default. Note that you can't specify different subnets from the same Availability Zone in a Spot fleet request.
    #   resp = client.request_spot_fleet({
    #     spot_fleet_request_config: {
    #       spot_price: "0.04",
    #       target_capacity: 2,
    #       iam_fleet_role: "arn:aws:iam::123456789012:role/my-spot-fleet-role",
    #       launch_specifications: [
    #         {
    #           image_id: "ami-1a2b3c4d",
    #           key_name: "my-key-pair",
    #           security_groups: [
    #             {
    #               group_id: "sg-1a2b3c4d"
    #             }
    #           ],
    #           instance_type: "m3.medium",
    #           subnet_id: "subnet-1a2b3c4d, subnet-3c4d5e6f",
    #           iam_instance_profile: {
    #             arn: "arn:aws:iam::123456789012:instance-profile/my-iam-role"
    #           }
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #   }
    # @example To request a Spot fleet in the Availability Zone with the lowest price
    #   # This example creates a Spot fleet request with two launch specifications that differ only by Availability Zone. The Spot fleet launches the instances in the specified Availability Zone with the lowest price. If your account supports EC2-VPC only, Amazon EC2 launches the Spot instances in the default subnet of the Availability Zone.
    #   resp = client.request_spot_fleet({
    #     spot_fleet_request_config: {
    #       spot_price: "0.04",
    #       target_capacity: 2,
    #       iam_fleet_role: "arn:aws:iam::123456789012:role/my-spot-fleet-role",
    #       launch_specifications: [
    #         {
    #           image_id: "ami-1a2b3c4d",
    #           key_name: "my-key-pair",
    #           security_groups: [
    #             {
    #               group_id: "sg-1a2b3c4d"
    #             }
    #           ],
    #           instance_type: "m3.medium",
    #           placement: {
    #             availability_zone: "us-west-2a, us-west-2b"
    #           },
    #           iam_instance_profile: {
    #             arn: "arn:aws:iam::123456789012:instance-profile/my-iam-role"
    #           }
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #   }
    # @example To launch Spot instances in a subnet and assign them public IP addresses
    #   # This example assigns public addresses to instances launched in a nondefault VPC. Note that when you specify a network interface, you must include the subnet ID and security group ID using the network interface.
    #   resp = client.request_spot_fleet({
    #     spot_fleet_request_config: {
    #       spot_price: "0.04",
    #       target_capacity: 2,
    #       iam_fleet_role: "arn:aws:iam::123456789012:role/my-spot-fleet-role",
    #       launch_specifications: [
    #         {
    #           image_id: "ami-1a2b3c4d",
    #           key_name: "my-key-pair",
    #           instance_type: "m3.medium",
    #           network_interfaces: [
    #             {
    #               device_index: 0,
    #               subnet_id: "subnet-1a2b3c4d",
    #               groups: [
    #                 "sg-1a2b3c4d"
    #               ],
    #               associate_public_ip_address: true
    #             }
    #           ],
    #           iam_instance_profile: {
    #             arn: "arn:aws:iam::880185128111:instance-profile/my-iam-role"
    #           }
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #   }
    # @example To request a Spot fleet using the diversified allocation strategy
    #   # This example creates a Spot fleet request that launches 30 instances using the diversified allocation strategy. The launch specifications differ by instance type. The Spot fleet distributes the instances across the launch specifications such that there are 10 instances of each type.
    #   resp = client.request_spot_fleet({
    #     spot_fleet_request_config: {
    #       spot_price: "0.70",
    #       target_capacity: 30,
    #       allocation_strategy: "diversified",
    #       iam_fleet_role: "arn:aws:iam::123456789012:role/my-spot-fleet-role",
    #       launch_specifications: [
    #         {
    #           image_id: "ami-1a2b3c4d",
    #           instance_type: "c4.2xlarge",
    #           subnet_id: "subnet-1a2b3c4d"
    #         },
    #         {
    #           image_id: "ami-1a2b3c4d",
    #           instance_type: "m3.2xlarge",
    #           subnet_id: "subnet-1a2b3c4d"
    #         },
    #         {
    #           image_id: "ami-1a2b3c4d",
    #           instance_type: "r3.2xlarge",
    #           subnet_id: "subnet-1a2b3c4d"
    #         }
    #       ]
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     spot_fleet_request_id: "sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE"
    #   }
    def request_spot_fleet(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RequestSpotFleetInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RequestSpotFleet.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :request_spot_fleet,
        tracer: tracer
      )
      Telemetry::RequestSpotFleet.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#request_spot_fleet] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#request_spot_fleet] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#request_spot_fleet] #{output.data}")
        output
      end
    end

    # <p>Creates a Spot Instance request.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance requests</a> in
    #             the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #          <important>
    #             <p>We strongly discourage using the RequestSpotInstances API because it is a legacy
    #                 API with no planned investment. For options for requesting Spot Instances, see
    #                     <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use">Which
    #                     is the best Spot request method to use?</a> in the
    #                     <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #          </important>
    # @param [Hash | Types::RequestSpotInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::RequestSpotInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.request_spot_instances(
    #     availability_zone_group: 'AvailabilityZoneGroup',
    #     block_duration_minutes: 1,
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     instance_count: 1,
    #     launch_group: 'LaunchGroup',
    #     launch_specification: {
    #       security_group_ids: [
    #         'member'
    #       ],
    #       security_groups: [
    #         'member'
    #       ],
    #       addressing_type: 'AddressingType',
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           virtual_name: 'VirtualName',
    #           ebs: {
    #             delete_on_termination: false,
    #             iops: 1,
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #             kms_key_id: 'KmsKeyId',
    #             throughput: 1,
    #             outpost_arn: 'OutpostArn',
    #             encrypted: false
    #           },
    #           no_device: 'NoDevice'
    #         }
    #       ],
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       image_id: 'ImageId',
    #       instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #       kernel_id: 'KernelId',
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false # required
    #       },
    #       network_interfaces: [
    #         {
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address',
    #               is_primary_ipv6: false
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_addresses: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId',
    #           associate_carrier_ip_address: false,
    #           interface_type: 'InterfaceType',
    #           network_card_index: 1,
    #           ipv4_prefixes: [
    #             {
    #               ipv4_prefix: 'Ipv4Prefix'
    #             }
    #           ],
    #           ipv4_prefix_count: 1,
    #           ipv6_prefixes: [
    #             {
    #               ipv6_prefix: 'Ipv6Prefix'
    #             }
    #           ],
    #           ipv6_prefix_count: 1,
    #           primary_ipv6: false,
    #           ena_srd_specification: {
    #             ena_srd_enabled: false,
    #             ena_srd_udp_specification: {
    #               ena_srd_udp_enabled: false
    #             }
    #           },
    #           connection_tracking_specification: {
    #             tcp_established_timeout: 1,
    #             udp_stream_timeout: 1,
    #             udp_timeout: 1
    #           }
    #         }
    #       ],
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         group_name: 'GroupName',
    #         tenancy: 'default' # accepts ["default", "dedicated", "host"]
    #       },
    #       ramdisk_id: 'RamdiskId',
    #       subnet_id: 'SubnetId',
    #       user_data: 'UserData'
    #     },
    #     spot_price: 'SpotPrice',
    #     type: 'one-time', # accepts ["one-time", "persistent"]
    #     valid_from: Time.now,
    #     valid_until: Time.now,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::RequestSpotInstancesOutput
    #   resp.data.spot_instance_requests #=> Array<SpotInstanceRequest>
    #   resp.data.spot_instance_requests[0] #=> Types::SpotInstanceRequest
    #   resp.data.spot_instance_requests[0].actual_block_hourly_price #=> String
    #   resp.data.spot_instance_requests[0].availability_zone_group #=> String
    #   resp.data.spot_instance_requests[0].block_duration_minutes #=> Integer
    #   resp.data.spot_instance_requests[0].create_time #=> Time
    #   resp.data.spot_instance_requests[0].fault #=> Types::SpotInstanceStateFault
    #   resp.data.spot_instance_requests[0].fault.code #=> String
    #   resp.data.spot_instance_requests[0].fault.message #=> String
    #   resp.data.spot_instance_requests[0].instance_id #=> String
    #   resp.data.spot_instance_requests[0].launch_group #=> String
    #   resp.data.spot_instance_requests[0].launch_specification #=> Types::LaunchSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.user_data #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups #=> Array<GroupIdentifier>
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0] #=> Types::GroupIdentifier
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.security_groups[0].group_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.addressing_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings #=> Array<BlockDeviceMapping>
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0] #=> Types::BlockDeviceMapping
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].device_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].virtual_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs #=> Types::EbsBlockDevice
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.iops #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.snapshot_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_size #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.volume_type #=> String, one of ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.kms_key_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.throughput #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.outpost_arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].ebs.encrypted #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.block_device_mappings[0].no_device #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.ebs_optimized #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile #=> Types::IamInstanceProfileSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.arn #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.iam_instance_profile.name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.image_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.spot_instance_requests[0].launch_specification.kernel_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.key_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces #=> Array<InstanceNetworkInterfaceSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0] #=> Types::InstanceNetworkInterfaceSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_public_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].delete_on_termination #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].description #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].device_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups #=> Array<String>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].groups[0] #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_interface_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses #=> Array<PrivateIpAddressSpecification>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0] #=> Types::PrivateIpAddressSpecification
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].secondary_private_ip_address_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].associate_carrier_ip_address #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].interface_type #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].network_card_index #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes #=> Array<Ipv4PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0] #=> Types::Ipv4PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv4_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes #=> Array<Ipv6PrefixSpecificationRequest>
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0] #=> Types::Ipv6PrefixSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ipv6_prefix_count #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].primary_ipv6 #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification #=> Types::EnaSrdSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification #=> Types::EnaSrdUdpSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification #=> Types::ConnectionTrackingSpecificationRequest
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification.tcp_established_timeout #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification.udp_stream_timeout #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.network_interfaces[0].connection_tracking_specification.udp_timeout #=> Integer
    #   resp.data.spot_instance_requests[0].launch_specification.placement #=> Types::SpotPlacement
    #   resp.data.spot_instance_requests[0].launch_specification.placement.availability_zone #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.group_name #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.spot_instance_requests[0].launch_specification.ramdisk_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.subnet_id #=> String
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring #=> Types::RunInstancesMonitoringEnabled
    #   resp.data.spot_instance_requests[0].launch_specification.monitoring.enabled #=> Boolean
    #   resp.data.spot_instance_requests[0].launched_availability_zone #=> String
    #   resp.data.spot_instance_requests[0].product_description #=> String, one of ["Linux/UNIX", "Linux/UNIX (Amazon VPC)", "Windows", "Windows (Amazon VPC)"]
    #   resp.data.spot_instance_requests[0].spot_instance_request_id #=> String
    #   resp.data.spot_instance_requests[0].spot_price #=> String
    #   resp.data.spot_instance_requests[0].state #=> String, one of ["open", "active", "closed", "cancelled", "failed", "disabled"]
    #   resp.data.spot_instance_requests[0].status #=> Types::SpotInstanceStatus
    #   resp.data.spot_instance_requests[0].status.code #=> String
    #   resp.data.spot_instance_requests[0].status.message #=> String
    #   resp.data.spot_instance_requests[0].status.update_time #=> Time
    #   resp.data.spot_instance_requests[0].tags #=> Array<Tag>
    #   resp.data.spot_instance_requests[0].tags[0] #=> Types::Tag
    #   resp.data.spot_instance_requests[0].tags[0].key #=> String
    #   resp.data.spot_instance_requests[0].tags[0].value #=> String
    #   resp.data.spot_instance_requests[0].type #=> String, one of ["one-time", "persistent"]
    #   resp.data.spot_instance_requests[0].valid_from #=> Time
    #   resp.data.spot_instance_requests[0].valid_until #=> Time
    #   resp.data.spot_instance_requests[0].instance_interruption_behavior #=> String, one of ["hibernate", "stop", "terminate"]
    # @example To create a one-time Spot Instance request
    #   # This example creates a one-time Spot Instance request for five instances in the specified Availability Zone. If your account supports EC2-VPC only, Amazon EC2 launches the instances in the default subnet of the specified Availability Zone.
    #   resp = client.request_spot_instances({
    #     spot_price: "0.03",
    #     instance_count: 5,
    #     type: "one-time",
    #     launch_specification: {
    #       image_id: "ami-1a2b3c4d",
    #       key_name: "my-key-pair",
    #       security_group_ids: [
    #         "sg-1a2b3c4d"
    #       ],
    #       instance_type: "m3.medium",
    #       placement: {
    #         availability_zone: "us-west-2a"
    #       },
    #       iam_instance_profile: {
    #         arn: "arn:aws:iam::123456789012:instance-profile/my-iam-role"
    #       }
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    # @example To create a one-time Spot Instance request
    #   # This example command creates a one-time Spot Instance request for five instances in the specified subnet. Amazon EC2 launches the instances in the specified subnet. If the VPC is a nondefault VPC, the instances do not receive a public IP address by default.
    #   resp = client.request_spot_instances({
    #     spot_price: "0.050",
    #     instance_count: 5,
    #     type: "one-time",
    #     launch_specification: {
    #       image_id: "ami-1a2b3c4d",
    #       security_group_ids: [
    #         "sg-1a2b3c4d"
    #       ],
    #       instance_type: "m3.medium",
    #       subnet_id: "subnet-1a2b3c4d",
    #       iam_instance_profile: {
    #         arn: "arn:aws:iam::123456789012:instance-profile/my-iam-role"
    #       }
    #     }
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def request_spot_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RequestSpotInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RequestSpotInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :request_spot_instances,
        tracer: tracer
      )
      Telemetry::RequestSpotInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#request_spot_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#request_spot_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#request_spot_instances] #{output.data}")
        output
      end
    end

    # <p>Resets the attribute of the specified IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
    # @param [Hash | Types::ResetAddressAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetAddressAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_address_attribute(
    #     allocation_id: 'AllocationId', # required
    #     attribute: 'domain-name', # required - accepts ["domain-name"]
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetAddressAttributeOutput
    #   resp.data.address #=> Types::AddressAttribute
    #   resp.data.address.public_ip #=> String
    #   resp.data.address.allocation_id #=> String
    #   resp.data.address.ptr_record #=> String
    #   resp.data.address.ptr_record_update #=> Types::PtrUpdateStatus
    #   resp.data.address.ptr_record_update.value #=> String
    #   resp.data.address.ptr_record_update.status #=> String
    #   resp.data.address.ptr_record_update.reason #=> String
    def reset_address_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetAddressAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetAddressAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_address_attribute,
        tracer: tracer
      )
      Telemetry::ResetAddressAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_address_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_address_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_address_attribute] #{output.data}")
        output
      end
    end

    # <p>Resets the default KMS key for EBS encryption for your account in this Region
    #       to the Amazon Web Services managed KMS key for EBS.</p>
    #          <p>After resetting the default KMS key to the Amazon Web Services managed KMS key, you can continue to encrypt by a
    #       customer managed KMS key by specifying it when you create the volume. For more information, see
    #       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
    #       in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::ResetEbsDefaultKmsKeyIdInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetEbsDefaultKmsKeyIdInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_ebs_default_kms_key_id(
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetEbsDefaultKmsKeyIdOutput
    #   resp.data.kms_key_id #=> String
    def reset_ebs_default_kms_key_id(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetEbsDefaultKmsKeyIdInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetEbsDefaultKmsKeyId.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_ebs_default_kms_key_id,
        tracer: tracer
      )
      Telemetry::ResetEbsDefaultKmsKeyId.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_ebs_default_kms_key_id] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_ebs_default_kms_key_id] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_ebs_default_kms_key_id] #{output.data}")
        output
      end
    end

    # <p>Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value.
    # 		    You can only reset the load permission attribute.</p>
    # @param [Hash | Types::ResetFpgaImageAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetFpgaImageAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_fpga_image_attribute(
    #     dry_run: false,
    #     fpga_image_id: 'FpgaImageId', # required
    #     attribute: 'loadPermission' # accepts ["loadPermission"]
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetFpgaImageAttributeOutput
    #   resp.data.return #=> Boolean
    def reset_fpga_image_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetFpgaImageAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetFpgaImageAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_fpga_image_attribute,
        tracer: tracer
      )
      Telemetry::ResetFpgaImageAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_fpga_image_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_fpga_image_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_fpga_image_attribute] #{output.data}")
        output
      end
    end

    # <p>Resets an attribute of an AMI to its default value.</p>
    # @param [Hash | Types::ResetImageAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetImageAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_image_attribute(
    #     attribute: 'launchPermission', # required - accepts ["launchPermission"]
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetImageAttributeOutput
    # @example To reset the launchPermission attribute
    #   # This example resets the launchPermission attribute for the specified AMI. By default, AMIs are private.
    #   resp = client.reset_image_attribute({
    #     attribute: "launchPermission",
    #     image_id: "ami-5731123e"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def reset_image_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetImageAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetImageAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_image_attribute,
        tracer: tracer
      )
      Telemetry::ResetImageAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_image_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_image_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_image_attribute] #{output.data}")
        output
      end
    end

    # <p>Resets an attribute of an instance to its default value. To reset the
    #                 <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped
    #             state. To reset the <code>sourceDestCheck</code>, the instance can be either running or
    #             stopped.</p>
    #          <p>The <code>sourceDestCheck</code> attribute controls whether source/destination
    #             checking is enabled. The default value is <code>true</code>, which means checking is
    #             enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For
    #             more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the
    #                 <i>Amazon VPC User Guide</i>.</p>
    # @param [Hash | Types::ResetInstanceAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetInstanceAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_instance_attribute(
    #     attribute: 'instanceType', # required - accepts ["instanceType", "kernel", "ramdisk", "userData", "disableApiTermination", "instanceInitiatedShutdownBehavior", "rootDeviceName", "blockDeviceMapping", "productCodes", "sourceDestCheck", "groupSet", "ebsOptimized", "sriovNetSupport", "enaSupport", "enclaveOptions", "disableApiStop"]
    #     dry_run: false,
    #     instance_id: 'InstanceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetInstanceAttributeOutput
    # @example To reset the sourceDestCheck attribute
    #   # This example resets the sourceDestCheck attribute for the specified instance.
    #   resp = client.reset_instance_attribute({
    #     attribute: "sourceDestCheck",
    #     instance_id: "i-1234567890abcdef0"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def reset_instance_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetInstanceAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetInstanceAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_instance_attribute,
        tracer: tracer
      )
      Telemetry::ResetInstanceAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_instance_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_instance_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_instance_attribute] #{output.data}")
        output
      end
    end

    # <p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
    # @param [Hash | Types::ResetNetworkInterfaceAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetNetworkInterfaceAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_network_interface_attribute(
    #     dry_run: false,
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     source_dest_check: 'SourceDestCheck'
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetNetworkInterfaceAttributeOutput
    def reset_network_interface_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetNetworkInterfaceAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetNetworkInterfaceAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_network_interface_attribute,
        tracer: tracer
      )
      Telemetry::ResetNetworkInterfaceAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_network_interface_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_network_interface_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_network_interface_attribute] #{output.data}")
        output
      end
    end

    # <p>Resets permission settings for the specified snapshot.</p>
    #          <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the
    #         <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::ResetSnapshotAttributeInput] params
    #   Request parameters for this operation.
    #   See {Types::ResetSnapshotAttributeInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.reset_snapshot_attribute(
    #     attribute: 'productCodes', # required - accepts ["productCodes", "createVolumePermission"]
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::ResetSnapshotAttributeOutput
    # @example To reset a snapshot attribute
    #   # This example resets the create volume permissions for snapshot ``snap-1234567890abcdef0``. If the command succeeds, no output is returned.
    #   resp = client.reset_snapshot_attribute({
    #     snapshot_id: "snap-1234567890abcdef0",
    #     attribute: "createVolumePermission"
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def reset_snapshot_attribute(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::ResetSnapshotAttributeInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::ResetSnapshotAttribute.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :reset_snapshot_attribute,
        tracer: tracer
      )
      Telemetry::ResetSnapshotAttribute.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_snapshot_attribute] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#reset_snapshot_attribute] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#reset_snapshot_attribute] #{output.data}")
        output
      end
    end

    # <note>
    #             <p>This action is deprecated.</p>
    #          </note>
    #          <p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
    # @param [Hash | Types::RestoreAddressToClassicInput] params
    #   Request parameters for this operation.
    #   See {Types::RestoreAddressToClassicInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.restore_address_to_classic(
    #     dry_run: false,
    #     public_ip: 'PublicIp' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RestoreAddressToClassicOutput
    #   resp.data.public_ip #=> String
    #   resp.data.status #=> String, one of ["MoveInProgress", "InVpc", "InClassic"]
    def restore_address_to_classic(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RestoreAddressToClassicInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RestoreAddressToClassic.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :restore_address_to_classic,
        tracer: tracer
      )
      Telemetry::RestoreAddressToClassic.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_address_to_classic] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#restore_address_to_classic] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_address_to_classic] #{output.data}")
        output
      end
    end

    # <p>Restores an AMI from the Recycle Bin. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle Bin</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::RestoreImageFromRecycleBinInput] params
    #   Request parameters for this operation.
    #   See {Types::RestoreImageFromRecycleBinInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.restore_image_from_recycle_bin(
    #     image_id: 'ImageId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RestoreImageFromRecycleBinOutput
    #   resp.data.return #=> Boolean
    def restore_image_from_recycle_bin(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RestoreImageFromRecycleBinInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RestoreImageFromRecycleBin.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :restore_image_from_recycle_bin,
        tracer: tracer
      )
      Telemetry::RestoreImageFromRecycleBin.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_image_from_recycle_bin] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#restore_image_from_recycle_bin] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_image_from_recycle_bin] #{output.data}")
        output
      end
    end

    # <p>Restores the entries from a previous version of a managed prefix list to a new version of the prefix list.</p>
    # @param [Hash | Types::RestoreManagedPrefixListVersionInput] params
    #   Request parameters for this operation.
    #   See {Types::RestoreManagedPrefixListVersionInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.restore_managed_prefix_list_version(
    #     dry_run: false,
    #     prefix_list_id: 'PrefixListId', # required
    #     previous_version: 1, # required
    #     current_version: 1 # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RestoreManagedPrefixListVersionOutput
    #   resp.data.prefix_list #=> Types::ManagedPrefixList
    #   resp.data.prefix_list.prefix_list_id #=> String
    #   resp.data.prefix_list.address_family #=> String
    #   resp.data.prefix_list.state #=> String, one of ["create-in-progress", "create-complete", "create-failed", "modify-in-progress", "modify-complete", "modify-failed", "restore-in-progress", "restore-complete", "restore-failed", "delete-in-progress", "delete-complete", "delete-failed"]
    #   resp.data.prefix_list.state_message #=> String
    #   resp.data.prefix_list.prefix_list_arn #=> String
    #   resp.data.prefix_list.prefix_list_name #=> String
    #   resp.data.prefix_list.max_entries #=> Integer
    #   resp.data.prefix_list.version #=> Integer
    #   resp.data.prefix_list.tags #=> Array<Tag>
    #   resp.data.prefix_list.tags[0] #=> Types::Tag
    #   resp.data.prefix_list.tags[0].key #=> String
    #   resp.data.prefix_list.tags[0].value #=> String
    #   resp.data.prefix_list.owner_id #=> String
    def restore_managed_prefix_list_version(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RestoreManagedPrefixListVersionInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RestoreManagedPrefixListVersion.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :restore_managed_prefix_list_version,
        tracer: tracer
      )
      Telemetry::RestoreManagedPrefixListVersion.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_managed_prefix_list_version] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#restore_managed_prefix_list_version] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_managed_prefix_list_version] #{output.data}")
        output
      end
    end

    # <p>Restores a snapshot from the Recycle Bin. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin-working-with-snaps.html#recycle-bin-restore-snaps">Restore
    #       snapshots from the Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::RestoreSnapshotFromRecycleBinInput] params
    #   Request parameters for this operation.
    #   See {Types::RestoreSnapshotFromRecycleBinInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.restore_snapshot_from_recycle_bin(
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RestoreSnapshotFromRecycleBinOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.outpost_arn #=> String
    #   resp.data.description #=> String
    #   resp.data.encrypted #=> Boolean
    #   resp.data.owner_id #=> String
    #   resp.data.progress #=> String
    #   resp.data.start_time #=> Time
    #   resp.data.state #=> String, one of ["pending", "completed", "error", "recoverable", "recovering"]
    #   resp.data.volume_id #=> String
    #   resp.data.volume_size #=> Integer
    #   resp.data.sse_type #=> String, one of ["sse-ebs", "sse-kms", "none"]
    def restore_snapshot_from_recycle_bin(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RestoreSnapshotFromRecycleBinInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RestoreSnapshotFromRecycleBin.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :restore_snapshot_from_recycle_bin,
        tracer: tracer
      )
      Telemetry::RestoreSnapshotFromRecycleBin.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_snapshot_from_recycle_bin] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#restore_snapshot_from_recycle_bin] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_snapshot_from_recycle_bin] #{output.data}")
        output
      end
    end

    # <p>Restores an archived Amazon EBS snapshot for use temporarily or permanently, or modifies the restore
    #       period or restore type for a snapshot that was previously temporarily restored.</p>
    #          <p>For more information see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-snapshot-archiving.html#restore-archived-snapshot">
    #       Restore an archived snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-snapshot-archiving.html#modify-temp-restore-period">
    #         modify the restore period or restore type for a temporarily restored snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    # @param [Hash | Types::RestoreSnapshotTierInput] params
    #   Request parameters for this operation.
    #   See {Types::RestoreSnapshotTierInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.restore_snapshot_tier(
    #     snapshot_id: 'SnapshotId', # required
    #     temporary_restore_days: 1,
    #     permanent_restore: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RestoreSnapshotTierOutput
    #   resp.data.snapshot_id #=> String
    #   resp.data.restore_start_time #=> Time
    #   resp.data.restore_duration #=> Integer
    #   resp.data.is_permanent_restore #=> Boolean
    def restore_snapshot_tier(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RestoreSnapshotTierInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RestoreSnapshotTier.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :restore_snapshot_tier,
        tracer: tracer
      )
      Telemetry::RestoreSnapshotTier.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_snapshot_tier] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#restore_snapshot_tier] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#restore_snapshot_tier] #{output.data}")
        output
      end
    end

    # <p>Removes an ingress authorization rule from a Client VPN endpoint. </p>
    # @param [Hash | Types::RevokeClientVpnIngressInput] params
    #   Request parameters for this operation.
    #   See {Types::RevokeClientVpnIngressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.revoke_client_vpn_ingress(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     target_network_cidr: 'TargetNetworkCidr', # required
    #     access_group_id: 'AccessGroupId',
    #     revoke_all_groups: false,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RevokeClientVpnIngressOutput
    #   resp.data.status #=> Types::ClientVpnAuthorizationRuleStatus
    #   resp.data.status.code #=> String, one of ["authorizing", "active", "failed", "revoking"]
    #   resp.data.status.message #=> String
    def revoke_client_vpn_ingress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RevokeClientVpnIngressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RevokeClientVpnIngress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :revoke_client_vpn_ingress,
        tracer: tracer
      )
      Telemetry::RevokeClientVpnIngress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#revoke_client_vpn_ingress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#revoke_client_vpn_ingress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#revoke_client_vpn_ingress] #{output.data}")
        output
      end
    end

    # <p>Removes the specified outbound (egress) rules from the specified security group.</p>
    #          <p>You can specify rules using either rule IDs or security group rule properties. If you use
    #          rule properties, the values that you specify (for example, ports) must match the existing rule's
    #          values exactly. Each rule has a protocol, from and to ports, and destination (CIDR range,
    #          security group, or prefix list). For the TCP and UDP protocols, you must also specify the
    #          destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type
    #          and code. If the security group rule has a description, you do not need to specify the description
    #          to revoke the rule.</p>
    #          <p>For a default VPC, if the values you specify do not match the existing rule's values, no error is
    #          returned, and the output describes the security group rules that were not revoked.</p>
    #          <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p>
    #          <p>Rule changes are propagated to instances within the security group as quickly as possible. However,
    #          a small delay might occur.</p>
    # @param [Hash | Types::RevokeSecurityGroupEgressInput] params
    #   Request parameters for this operation.
    #   See {Types::RevokeSecurityGroupEgressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.revoke_security_group_egress(
    #     dry_run: false,
    #     group_id: 'GroupId', # required
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_rule_ids: [
    #       'member'
    #     ],
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     ip_protocol: 'IpProtocol',
    #     to_port: 1,
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId'
    #   )
    # @example Response structure
    #   resp.data #=> Types::RevokeSecurityGroupEgressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.unknown_ip_permissions #=> Array<IpPermission>
    #   resp.data.unknown_ip_permissions[0] #=> Types::IpPermission
    #   resp.data.unknown_ip_permissions[0].from_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].ip_protocol #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges #=> Array<IpRange>
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0] #=> Types::IpRange
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].cidr_ip #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges #=> Array<Ipv6Range>
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0] #=> Types::Ipv6Range
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].cidr_ipv6 #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids #=> Array<PrefixListId>
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0] #=> Types::PrefixListId
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].prefix_list_id #=> String
    #   resp.data.unknown_ip_permissions[0].to_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    def revoke_security_group_egress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RevokeSecurityGroupEgressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RevokeSecurityGroupEgress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :revoke_security_group_egress,
        tracer: tracer
      )
      Telemetry::RevokeSecurityGroupEgress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#revoke_security_group_egress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#revoke_security_group_egress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#revoke_security_group_egress] #{output.data}")
        output
      end
    end

    # <p>Removes the specified inbound (ingress) rules from a security group.</p>
    #          <p>You can specify rules using either rule IDs or security group rule properties. If you use
    #            rule properties, the values that you specify (for example, ports) must match the existing rule's
    #            values exactly. Each rule has a protocol, from and to ports, and source (CIDR range,
    #            security group, or prefix list). For the TCP and UDP protocols, you must also specify the
    #            destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type
    #            and code. If the security group rule has a description, you do not need to specify the description
    #            to revoke the rule.</p>
    #          <p>For a default VPC, if the values you specify do not match the existing rule's values,
    #             no error is returned, and the output describes the security group rules that were not
    #             revoked.</p>
    #          <p>For a non-default VPC, if the values you specify do not match the existing rule's
    #             values, an <code>InvalidPermission.NotFound</code> client error is returned, and no
    #             rules are revoked.</p>
    #          <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p>
    #          <p>Rule changes are propagated to instances within the security group as quickly as possible.
    #          However, a small delay might occur.</p>
    # @param [Hash | Types::RevokeSecurityGroupIngressInput] params
    #   Request parameters for this operation.
    #   See {Types::RevokeSecurityGroupIngressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.revoke_security_group_ingress(
    #     cidr_ip: 'CidrIp',
    #     from_port: 1,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     ip_protocol: 'IpProtocol',
    #     source_security_group_name: 'SourceSecurityGroupName',
    #     source_security_group_owner_id: 'SourceSecurityGroupOwnerId',
    #     to_port: 1,
    #     dry_run: false,
    #     security_group_rule_ids: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::RevokeSecurityGroupIngressOutput
    #   resp.data.return #=> Boolean
    #   resp.data.unknown_ip_permissions #=> Array<IpPermission>
    #   resp.data.unknown_ip_permissions[0] #=> Types::IpPermission
    #   resp.data.unknown_ip_permissions[0].from_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].ip_protocol #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges #=> Array<IpRange>
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0] #=> Types::IpRange
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].cidr_ip #=> String
    #   resp.data.unknown_ip_permissions[0].ip_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges #=> Array<Ipv6Range>
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0] #=> Types::Ipv6Range
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].cidr_ipv6 #=> String
    #   resp.data.unknown_ip_permissions[0].ipv6_ranges[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids #=> Array<PrefixListId>
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0] #=> Types::PrefixListId
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].prefix_list_ids[0].prefix_list_id #=> String
    #   resp.data.unknown_ip_permissions[0].to_port #=> Integer
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs #=> Array<UserIdGroupPair>
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0] #=> Types::UserIdGroupPair
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].description #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].group_name #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].peering_status #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].user_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_id #=> String
    #   resp.data.unknown_ip_permissions[0].user_id_group_pairs[0].vpc_peering_connection_id #=> String
    def revoke_security_group_ingress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RevokeSecurityGroupIngressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RevokeSecurityGroupIngress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :revoke_security_group_ingress,
        tracer: tracer
      )
      Telemetry::RevokeSecurityGroupIngress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#revoke_security_group_ingress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#revoke_security_group_ingress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#revoke_security_group_ingress] #{output.data}")
        output
      end
    end

    # <p>Launches the specified number of instances using an AMI for which you have
    #             permissions.</p>
    #          <p>You can specify a number of options, or leave the default options. The following rules
    #             apply:</p>
    #          <ul>
    #             <li>
    #                <p>If you don't specify a subnet ID, we choose a default subnet from
    #                     your default VPC for you. If you don't have a default VPC, you must specify a
    #                     subnet ID in the request.</p>
    #             </li>
    #             <li>
    #                <p>All instances have a network interface with a primary private IPv4
    #                     address. If you don't specify this address, we choose one from the IPv4 range of
    #                     your subnet.</p>
    #             </li>
    #             <li>
    #                <p>Not all instance types support IPv6 addresses. For more information, see
    #                         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
    #                     types</a>.</p>
    #             </li>
    #             <li>
    #                <p>If you don't specify a security group ID, we use the default security group.
    #                     For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security
    #                         groups</a>.</p>
    #             </li>
    #             <li>
    #                <p>If any of the AMIs have a product code attached for which the user has not
    #                     subscribed, the request fails.</p>
    #             </li>
    #          </ul>
    #          <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>,
    #             which is a resource that contains the parameters to launch an instance. When you launch
    #             an instance using <a>RunInstances</a>, you can specify the launch template
    #             instead of specifying the launch parameters.</p>
    #          <p>To ensure faster instance launches, break up large requests into smaller batches. For
    #             example, create five separate launch requests for 100 instances each instead of one
    #             launch request for 500 instances.</p>
    #          <p>An instance is ready for you to use when it's in the <code>running</code> state. You
    #             can check the state of your instance using <a>DescribeInstances</a>. You can
    #             tag instances and EBS volumes during launch, after launch, or both. For more
    #             information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2
    #                 resources</a>.</p>
    #          <p>Linux instances have access to the public key of the key pair at boot. You can use
    #             this key to provide secure access to the instance. Amazon EC2 public images use this
    #             feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
    #                 pairs</a>.</p>
    #          <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What to do if
    #                 an instance immediately terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting connecting to your instance</a>.</p>
    # @param [Hash | Types::RunInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::RunInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.run_instances(
    #     block_device_mappings: [
    #       {
    #         device_name: 'DeviceName',
    #         virtual_name: 'VirtualName',
    #         ebs: {
    #           delete_on_termination: false,
    #           iops: 1,
    #           snapshot_id: 'SnapshotId',
    #           volume_size: 1,
    #           volume_type: 'standard', # accepts ["standard", "io1", "io2", "gp2", "sc1", "st1", "gp3"]
    #           kms_key_id: 'KmsKeyId',
    #           throughput: 1,
    #           outpost_arn: 'OutpostArn',
    #           encrypted: false
    #         },
    #         no_device: 'NoDevice'
    #       }
    #     ],
    #     image_id: 'ImageId',
    #     instance_type: 'a1.medium', # accepts ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #     ipv6_address_count: 1,
    #     ipv6_addresses: [
    #       {
    #         ipv6_address: 'Ipv6Address',
    #         is_primary_ipv6: false
    #       }
    #     ],
    #     kernel_id: 'KernelId',
    #     key_name: 'KeyName',
    #     max_count: 1, # required
    #     min_count: 1, # required
    #     monitoring: {
    #       enabled: false # required
    #     },
    #     placement: {
    #       availability_zone: 'AvailabilityZone',
    #       affinity: 'Affinity',
    #       group_name: 'GroupName',
    #       partition_number: 1,
    #       host_id: 'HostId',
    #       tenancy: 'default', # accepts ["default", "dedicated", "host"]
    #       spread_domain: 'SpreadDomain',
    #       host_resource_group_arn: 'HostResourceGroupArn',
    #       group_id: 'GroupId'
    #     },
    #     ramdisk_id: 'RamdiskId',
    #     security_group_ids: [
    #       'member'
    #     ],
    #     security_groups: [
    #       'member'
    #     ],
    #     subnet_id: 'SubnetId',
    #     user_data: 'UserData',
    #     additional_info: 'AdditionalInfo',
    #     client_token: 'ClientToken',
    #     disable_api_termination: false,
    #     dry_run: false,
    #     ebs_optimized: false,
    #     iam_instance_profile: {
    #       arn: 'Arn',
    #       name: 'Name'
    #     },
    #     instance_initiated_shutdown_behavior: 'stop', # accepts ["stop", "terminate"]
    #     network_interfaces: [
    #       {
    #         associate_public_ip_address: false,
    #         delete_on_termination: false,
    #         description: 'Description',
    #         device_index: 1,
    #         ipv6_address_count: 1,
    #         network_interface_id: 'NetworkInterfaceId',
    #         private_ip_address: 'PrivateIpAddress',
    #         private_ip_addresses: [
    #           {
    #             primary: false,
    #             private_ip_address: 'PrivateIpAddress'
    #           }
    #         ],
    #         secondary_private_ip_address_count: 1,
    #         subnet_id: 'SubnetId',
    #         associate_carrier_ip_address: false,
    #         interface_type: 'InterfaceType',
    #         network_card_index: 1,
    #         ipv4_prefixes: [
    #           {
    #             ipv4_prefix: 'Ipv4Prefix'
    #           }
    #         ],
    #         ipv4_prefix_count: 1,
    #         ipv6_prefixes: [
    #           {
    #             ipv6_prefix: 'Ipv6Prefix'
    #           }
    #         ],
    #         ipv6_prefix_count: 1,
    #         primary_ipv6: false,
    #         ena_srd_specification: {
    #           ena_srd_enabled: false,
    #           ena_srd_udp_specification: {
    #             ena_srd_udp_enabled: false
    #           }
    #         },
    #         connection_tracking_specification: {
    #           tcp_established_timeout: 1,
    #           udp_stream_timeout: 1,
    #           udp_timeout: 1
    #         }
    #       }
    #     ],
    #     private_ip_address: 'PrivateIpAddress',
    #     elastic_gpu_specification: [
    #       {
    #         type: 'Type' # required
    #       }
    #     ],
    #     elastic_inference_accelerators: [
    #       {
    #         type: 'Type', # required
    #         count: 1
    #       }
    #     ],
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     launch_template: {
    #       launch_template_id: 'LaunchTemplateId',
    #       launch_template_name: 'LaunchTemplateName',
    #       version: 'Version'
    #     },
    #     instance_market_options: {
    #       market_type: 'spot', # accepts ["spot", "capacity-block"]
    #       spot_options: {
    #         max_price: 'MaxPrice',
    #         spot_instance_type: 'one-time', # accepts ["one-time", "persistent"]
    #         block_duration_minutes: 1,
    #         valid_until: Time.now,
    #         instance_interruption_behavior: 'hibernate' # accepts ["hibernate", "stop", "terminate"]
    #       }
    #     },
    #     credit_specification: {
    #       cpu_credits: 'CpuCredits' # required
    #     },
    #     cpu_options: {
    #       core_count: 1,
    #       threads_per_core: 1,
    #       amd_sev_snp: 'enabled' # accepts ["enabled", "disabled"]
    #     },
    #     capacity_reservation_specification: {
    #       capacity_reservation_preference: 'open', # accepts ["open", "none"]
    #       capacity_reservation_target: {
    #         capacity_reservation_id: 'CapacityReservationId',
    #         capacity_reservation_resource_group_arn: 'CapacityReservationResourceGroupArn'
    #       }
    #     },
    #     hibernation_options: {
    #       configured: false
    #     },
    #     license_specifications: [
    #       {
    #         license_configuration_arn: 'LicenseConfigurationArn'
    #       }
    #     ],
    #     metadata_options: {
    #       http_tokens: 'optional', # accepts ["optional", "required"]
    #       http_put_response_hop_limit: 1,
    #       http_endpoint: 'disabled', # accepts ["disabled", "enabled"]
    #       http_protocol_ipv6: 'disabled', # accepts ["disabled", "enabled"]
    #       instance_metadata_tags: 'disabled' # accepts ["disabled", "enabled"]
    #     },
    #     enclave_options: {
    #       enabled: false
    #     },
    #     private_dns_name_options: {
    #       hostname_type: 'ip-name', # accepts ["ip-name", "resource-name"]
    #       enable_resource_name_dns_a_record: false,
    #       enable_resource_name_dns_aaaa_record: false
    #     },
    #     maintenance_options: {
    #       auto_recovery: 'disabled' # accepts ["disabled", "default"]
    #     },
    #     disable_api_stop: false,
    #     enable_primary_ipv6: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::RunInstancesOutput
    #   resp.data.groups #=> Array<GroupIdentifier>
    #   resp.data.groups[0] #=> Types::GroupIdentifier
    #   resp.data.groups[0].group_name #=> String
    #   resp.data.groups[0].group_id #=> String
    #   resp.data.instances #=> Array<Instance>
    #   resp.data.instances[0] #=> Types::Instance
    #   resp.data.instances[0].ami_launch_index #=> Integer
    #   resp.data.instances[0].image_id #=> String
    #   resp.data.instances[0].instance_id #=> String
    #   resp.data.instances[0].instance_type #=> String, one of ["a1.medium", "a1.large", "a1.xlarge", "a1.2xlarge", "a1.4xlarge", "a1.metal", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.12xlarge", "c5.18xlarge", "c5.24xlarge", "c5.metal", "c5a.large", "c5a.xlarge", "c5a.2xlarge", "c5a.4xlarge", "c5a.8xlarge", "c5a.12xlarge", "c5a.16xlarge", "c5a.24xlarge", "c5ad.large", "c5ad.xlarge", "c5ad.2xlarge", "c5ad.4xlarge", "c5ad.8xlarge", "c5ad.12xlarge", "c5ad.16xlarge", "c5ad.24xlarge", "c5d.large", "c5d.xlarge", "c5d.2xlarge", "c5d.4xlarge", "c5d.9xlarge", "c5d.12xlarge", "c5d.18xlarge", "c5d.24xlarge", "c5d.metal", "c5n.large", "c5n.xlarge", "c5n.2xlarge", "c5n.4xlarge", "c5n.9xlarge", "c5n.18xlarge", "c5n.metal", "c6g.medium", "c6g.large", "c6g.xlarge", "c6g.2xlarge", "c6g.4xlarge", "c6g.8xlarge", "c6g.12xlarge", "c6g.16xlarge", "c6g.metal", "c6gd.medium", "c6gd.large", "c6gd.xlarge", "c6gd.2xlarge", "c6gd.4xlarge", "c6gd.8xlarge", "c6gd.12xlarge", "c6gd.16xlarge", "c6gd.metal", "c6gn.medium", "c6gn.large", "c6gn.xlarge", "c6gn.2xlarge", "c6gn.4xlarge", "c6gn.8xlarge", "c6gn.12xlarge", "c6gn.16xlarge", "c6i.large", "c6i.xlarge", "c6i.2xlarge", "c6i.4xlarge", "c6i.8xlarge", "c6i.12xlarge", "c6i.16xlarge", "c6i.24xlarge", "c6i.32xlarge", "c6i.metal", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge", "cr1.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "d3.xlarge", "d3.2xlarge", "d3.4xlarge", "d3.8xlarge", "d3en.xlarge", "d3en.2xlarge", "d3en.4xlarge", "d3en.6xlarge", "d3en.8xlarge", "d3en.12xlarge", "dl1.24xlarge", "f1.2xlarge", "f1.4xlarge", "f1.16xlarge", "g2.2xlarge", "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "g3s.xlarge", "g4ad.xlarge", "g4ad.2xlarge", "g4ad.4xlarge", "g4ad.8xlarge", "g4ad.16xlarge", "g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g4dn.metal", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.12xlarge", "g5.16xlarge", "g5.24xlarge", "g5.48xlarge", "g5g.xlarge", "g5g.2xlarge", "g5g.4xlarge", "g5g.8xlarge", "g5g.16xlarge", "g5g.metal", "hi1.4xlarge", "hpc6a.48xlarge", "hs1.8xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "i3.metal", "i3en.large", "i3en.xlarge", "i3en.2xlarge", "i3en.3xlarge", "i3en.6xlarge", "i3en.12xlarge", "i3en.24xlarge", "i3en.metal", "im4gn.large", "im4gn.xlarge", "im4gn.2xlarge", "im4gn.4xlarge", "im4gn.8xlarge", "im4gn.16xlarge", "inf1.xlarge", "inf1.2xlarge", "inf1.6xlarge", "inf1.24xlarge", "is4gen.medium", "is4gen.large", "is4gen.xlarge", "is4gen.2xlarge", "is4gen.4xlarge", "is4gen.8xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.8xlarge", "m5.12xlarge", "m5.16xlarge", "m5.24xlarge", "m5.metal", "m5a.large", "m5a.xlarge", "m5a.2xlarge", "m5a.4xlarge", "m5a.8xlarge", "m5a.12xlarge", "m5a.16xlarge", "m5a.24xlarge", "m5ad.large", "m5ad.xlarge", "m5ad.2xlarge", "m5ad.4xlarge", "m5ad.8xlarge", "m5ad.12xlarge", "m5ad.16xlarge", "m5ad.24xlarge", "m5d.large", "m5d.xlarge", "m5d.2xlarge", "m5d.4xlarge", "m5d.8xlarge", "m5d.12xlarge", "m5d.16xlarge", "m5d.24xlarge", "m5d.metal", "m5dn.large", "m5dn.xlarge", "m5dn.2xlarge", "m5dn.4xlarge", "m5dn.8xlarge", "m5dn.12xlarge", "m5dn.16xlarge", "m5dn.24xlarge", "m5dn.metal", "m5n.large", "m5n.xlarge", "m5n.2xlarge", "m5n.4xlarge", "m5n.8xlarge", "m5n.12xlarge", "m5n.16xlarge", "m5n.24xlarge", "m5n.metal", "m5zn.large", "m5zn.xlarge", "m5zn.2xlarge", "m5zn.3xlarge", "m5zn.6xlarge", "m5zn.12xlarge", "m5zn.metal", "m6a.large", "m6a.xlarge", "m6a.2xlarge", "m6a.4xlarge", "m6a.8xlarge", "m6a.12xlarge", "m6a.16xlarge", "m6a.24xlarge", "m6a.32xlarge", "m6a.48xlarge", "m6g.metal", "m6g.medium", "m6g.large", "m6g.xlarge", "m6g.2xlarge", "m6g.4xlarge", "m6g.8xlarge", "m6g.12xlarge", "m6g.16xlarge", "m6gd.metal", "m6gd.medium", "m6gd.large", "m6gd.xlarge", "m6gd.2xlarge", "m6gd.4xlarge", "m6gd.8xlarge", "m6gd.12xlarge", "m6gd.16xlarge", "m6i.large", "m6i.xlarge", "m6i.2xlarge", "m6i.4xlarge", "m6i.8xlarge", "m6i.12xlarge", "m6i.16xlarge", "m6i.24xlarge", "m6i.32xlarge", "m6i.metal", "mac1.metal", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "p3dn.24xlarge", "p4d.24xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.8xlarge", "r5.12xlarge", "r5.16xlarge", "r5.24xlarge", "r5.metal", "r5a.large", "r5a.xlarge", "r5a.2xlarge", "r5a.4xlarge", "r5a.8xlarge", "r5a.12xlarge", "r5a.16xlarge", "r5a.24xlarge", "r5ad.large", "r5ad.xlarge", "r5ad.2xlarge", "r5ad.4xlarge", "r5ad.8xlarge", "r5ad.12xlarge", "r5ad.16xlarge", "r5ad.24xlarge", "r5b.large", "r5b.xlarge", "r5b.2xlarge", "r5b.4xlarge", "r5b.8xlarge", "r5b.12xlarge", "r5b.16xlarge", "r5b.24xlarge", "r5b.metal", "r5d.large", "r5d.xlarge", "r5d.2xlarge", "r5d.4xlarge", "r5d.8xlarge", "r5d.12xlarge", "r5d.16xlarge", "r5d.24xlarge", "r5d.metal", "r5dn.large", "r5dn.xlarge", "r5dn.2xlarge", "r5dn.4xlarge", "r5dn.8xlarge", "r5dn.12xlarge", "r5dn.16xlarge", "r5dn.24xlarge", "r5dn.metal", "r5n.large", "r5n.xlarge", "r5n.2xlarge", "r5n.4xlarge", "r5n.8xlarge", "r5n.12xlarge", "r5n.16xlarge", "r5n.24xlarge", "r5n.metal", "r6g.medium", "r6g.large", "r6g.xlarge", "r6g.2xlarge", "r6g.4xlarge", "r6g.8xlarge", "r6g.12xlarge", "r6g.16xlarge", "r6g.metal", "r6gd.medium", "r6gd.large", "r6gd.xlarge", "r6gd.2xlarge", "r6gd.4xlarge", "r6gd.8xlarge", "r6gd.12xlarge", "r6gd.16xlarge", "r6gd.metal", "r6i.large", "r6i.xlarge", "r6i.2xlarge", "r6i.4xlarge", "r6i.8xlarge", "r6i.12xlarge", "r6i.16xlarge", "r6i.24xlarge", "r6i.32xlarge", "r6i.metal", "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "t3.xlarge", "t3.2xlarge", "t3a.nano", "t3a.micro", "t3a.small", "t3a.medium", "t3a.large", "t3a.xlarge", "t3a.2xlarge", "t4g.nano", "t4g.micro", "t4g.small", "t4g.medium", "t4g.large", "t4g.xlarge", "t4g.2xlarge", "u-6tb1.56xlarge", "u-6tb1.112xlarge", "u-9tb1.112xlarge", "u-12tb1.112xlarge", "u-6tb1.metal", "u-9tb1.metal", "u-12tb1.metal", "u-18tb1.metal", "u-24tb1.metal", "vt1.3xlarge", "vt1.6xlarge", "vt1.24xlarge", "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge", "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "x2iezn.2xlarge", "x2iezn.4xlarge", "x2iezn.6xlarge", "x2iezn.8xlarge", "x2iezn.12xlarge", "x2iezn.metal", "x2gd.medium", "x2gd.large", "x2gd.xlarge", "x2gd.2xlarge", "x2gd.4xlarge", "x2gd.8xlarge", "x2gd.12xlarge", "x2gd.16xlarge", "x2gd.metal", "z1d.large", "z1d.xlarge", "z1d.2xlarge", "z1d.3xlarge", "z1d.6xlarge", "z1d.12xlarge", "z1d.metal", "x2idn.16xlarge", "x2idn.24xlarge", "x2idn.32xlarge", "x2iedn.xlarge", "x2iedn.2xlarge", "x2iedn.4xlarge", "x2iedn.8xlarge", "x2iedn.16xlarge", "x2iedn.24xlarge", "x2iedn.32xlarge", "c6a.large", "c6a.xlarge", "c6a.2xlarge", "c6a.4xlarge", "c6a.8xlarge", "c6a.12xlarge", "c6a.16xlarge", "c6a.24xlarge", "c6a.32xlarge", "c6a.48xlarge", "c6a.metal", "m6a.metal", "i4i.large", "i4i.xlarge", "i4i.2xlarge", "i4i.4xlarge", "i4i.8xlarge", "i4i.16xlarge", "i4i.32xlarge", "i4i.metal", "x2idn.metal", "x2iedn.metal", "c7g.medium", "c7g.large", "c7g.xlarge", "c7g.2xlarge", "c7g.4xlarge", "c7g.8xlarge", "c7g.12xlarge", "c7g.16xlarge", "mac2.metal", "c6id.large", "c6id.xlarge", "c6id.2xlarge", "c6id.4xlarge", "c6id.8xlarge", "c6id.12xlarge", "c6id.16xlarge", "c6id.24xlarge", "c6id.32xlarge", "c6id.metal", "m6id.large", "m6id.xlarge", "m6id.2xlarge", "m6id.4xlarge", "m6id.8xlarge", "m6id.12xlarge", "m6id.16xlarge", "m6id.24xlarge", "m6id.32xlarge", "m6id.metal", "r6id.large", "r6id.xlarge", "r6id.2xlarge", "r6id.4xlarge", "r6id.8xlarge", "r6id.12xlarge", "r6id.16xlarge", "r6id.24xlarge", "r6id.32xlarge", "r6id.metal", "r6a.large", "r6a.xlarge", "r6a.2xlarge", "r6a.4xlarge", "r6a.8xlarge", "r6a.12xlarge", "r6a.16xlarge", "r6a.24xlarge", "r6a.32xlarge", "r6a.48xlarge", "r6a.metal", "p4de.24xlarge", "u-3tb1.56xlarge", "u-18tb1.112xlarge", "u-24tb1.112xlarge", "trn1.2xlarge", "trn1.32xlarge", "hpc6id.32xlarge", "c6in.large", "c6in.xlarge", "c6in.2xlarge", "c6in.4xlarge", "c6in.8xlarge", "c6in.12xlarge", "c6in.16xlarge", "c6in.24xlarge", "c6in.32xlarge", "m6in.large", "m6in.xlarge", "m6in.2xlarge", "m6in.4xlarge", "m6in.8xlarge", "m6in.12xlarge", "m6in.16xlarge", "m6in.24xlarge", "m6in.32xlarge", "m6idn.large", "m6idn.xlarge", "m6idn.2xlarge", "m6idn.4xlarge", "m6idn.8xlarge", "m6idn.12xlarge", "m6idn.16xlarge", "m6idn.24xlarge", "m6idn.32xlarge", "r6in.large", "r6in.xlarge", "r6in.2xlarge", "r6in.4xlarge", "r6in.8xlarge", "r6in.12xlarge", "r6in.16xlarge", "r6in.24xlarge", "r6in.32xlarge", "r6idn.large", "r6idn.xlarge", "r6idn.2xlarge", "r6idn.4xlarge", "r6idn.8xlarge", "r6idn.12xlarge", "r6idn.16xlarge", "r6idn.24xlarge", "r6idn.32xlarge", "c7g.metal", "m7g.medium", "m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge", "m7g.8xlarge", "m7g.12xlarge", "m7g.16xlarge", "m7g.metal", "r7g.medium", "r7g.large", "r7g.xlarge", "r7g.2xlarge", "r7g.4xlarge", "r7g.8xlarge", "r7g.12xlarge", "r7g.16xlarge", "r7g.metal", "c6in.metal", "m6in.metal", "m6idn.metal", "r6in.metal", "r6idn.metal", "inf2.xlarge", "inf2.8xlarge", "inf2.24xlarge", "inf2.48xlarge", "trn1n.32xlarge", "i4g.large", "i4g.xlarge", "i4g.2xlarge", "i4g.4xlarge", "i4g.8xlarge", "i4g.16xlarge", "hpc7g.4xlarge", "hpc7g.8xlarge", "hpc7g.16xlarge", "c7gn.medium", "c7gn.large", "c7gn.xlarge", "c7gn.2xlarge", "c7gn.4xlarge", "c7gn.8xlarge", "c7gn.12xlarge", "c7gn.16xlarge", "p5.48xlarge", "m7i.large", "m7i.xlarge", "m7i.2xlarge", "m7i.4xlarge", "m7i.8xlarge", "m7i.12xlarge", "m7i.16xlarge", "m7i.24xlarge", "m7i.48xlarge", "m7i-flex.large", "m7i-flex.xlarge", "m7i-flex.2xlarge", "m7i-flex.4xlarge", "m7i-flex.8xlarge", "m7a.medium", "m7a.large", "m7a.xlarge", "m7a.2xlarge", "m7a.4xlarge", "m7a.8xlarge", "m7a.12xlarge", "m7a.16xlarge", "m7a.24xlarge", "m7a.32xlarge", "m7a.48xlarge", "m7a.metal-48xl", "hpc7a.12xlarge", "hpc7a.24xlarge", "hpc7a.48xlarge", "hpc7a.96xlarge", "c7gd.medium", "c7gd.large", "c7gd.xlarge", "c7gd.2xlarge", "c7gd.4xlarge", "c7gd.8xlarge", "c7gd.12xlarge", "c7gd.16xlarge", "m7gd.medium", "m7gd.large", "m7gd.xlarge", "m7gd.2xlarge", "m7gd.4xlarge", "m7gd.8xlarge", "m7gd.12xlarge", "m7gd.16xlarge", "r7gd.medium", "r7gd.large", "r7gd.xlarge", "r7gd.2xlarge", "r7gd.4xlarge", "r7gd.8xlarge", "r7gd.12xlarge", "r7gd.16xlarge", "r7a.medium", "r7a.large", "r7a.xlarge", "r7a.2xlarge", "r7a.4xlarge", "r7a.8xlarge", "r7a.12xlarge", "r7a.16xlarge", "r7a.24xlarge", "r7a.32xlarge", "r7a.48xlarge", "c7i.large", "c7i.xlarge", "c7i.2xlarge", "c7i.4xlarge", "c7i.8xlarge", "c7i.12xlarge", "c7i.16xlarge", "c7i.24xlarge", "c7i.48xlarge", "mac2-m2pro.metal", "r7iz.large", "r7iz.xlarge", "r7iz.2xlarge", "r7iz.4xlarge", "r7iz.8xlarge", "r7iz.12xlarge", "r7iz.16xlarge", "r7iz.32xlarge", "c7a.medium", "c7a.large", "c7a.xlarge", "c7a.2xlarge", "c7a.4xlarge", "c7a.8xlarge", "c7a.12xlarge", "c7a.16xlarge", "c7a.24xlarge", "c7a.32xlarge", "c7a.48xlarge", "c7a.metal-48xl", "r7a.metal-48xl", "r7i.large", "r7i.xlarge", "r7i.2xlarge", "r7i.4xlarge", "r7i.8xlarge", "r7i.12xlarge", "r7i.16xlarge", "r7i.24xlarge", "r7i.48xlarge", "dl2q.24xlarge", "mac2-m2.metal", "i4i.12xlarge", "i4i.24xlarge", "c7i.metal-24xl", "c7i.metal-48xl", "m7i.metal-24xl", "m7i.metal-48xl", "r7i.metal-24xl", "r7i.metal-48xl", "r7iz.metal-16xl", "r7iz.metal-32xl"]
    #   resp.data.instances[0].kernel_id #=> String
    #   resp.data.instances[0].key_name #=> String
    #   resp.data.instances[0].launch_time #=> Time
    #   resp.data.instances[0].monitoring #=> Types::Monitoring
    #   resp.data.instances[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    #   resp.data.instances[0].placement #=> Types::Placement
    #   resp.data.instances[0].placement.availability_zone #=> String
    #   resp.data.instances[0].placement.affinity #=> String
    #   resp.data.instances[0].placement.group_name #=> String
    #   resp.data.instances[0].placement.partition_number #=> Integer
    #   resp.data.instances[0].placement.host_id #=> String
    #   resp.data.instances[0].placement.tenancy #=> String, one of ["default", "dedicated", "host"]
    #   resp.data.instances[0].placement.spread_domain #=> String
    #   resp.data.instances[0].placement.host_resource_group_arn #=> String
    #   resp.data.instances[0].placement.group_id #=> String
    #   resp.data.instances[0].platform #=> String, one of ["Windows"]
    #   resp.data.instances[0].private_dns_name #=> String
    #   resp.data.instances[0].private_ip_address #=> String
    #   resp.data.instances[0].product_codes #=> Array<ProductCode>
    #   resp.data.instances[0].product_codes[0] #=> Types::ProductCode
    #   resp.data.instances[0].product_codes[0].product_code_id #=> String
    #   resp.data.instances[0].product_codes[0].product_code_type #=> String, one of ["devpay", "marketplace"]
    #   resp.data.instances[0].public_dns_name #=> String
    #   resp.data.instances[0].public_ip_address #=> String
    #   resp.data.instances[0].ramdisk_id #=> String
    #   resp.data.instances[0].state #=> Types::InstanceState
    #   resp.data.instances[0].state.code #=> Integer
    #   resp.data.instances[0].state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.instances[0].state_transition_reason #=> String
    #   resp.data.instances[0].subnet_id #=> String
    #   resp.data.instances[0].vpc_id #=> String
    #   resp.data.instances[0].architecture #=> String, one of ["i386", "x86_64", "arm64", "x86_64_mac", "arm64_mac"]
    #   resp.data.instances[0].block_device_mappings #=> Array<InstanceBlockDeviceMapping>
    #   resp.data.instances[0].block_device_mappings[0] #=> Types::InstanceBlockDeviceMapping
    #   resp.data.instances[0].block_device_mappings[0].device_name #=> String
    #   resp.data.instances[0].block_device_mappings[0].ebs #=> Types::EbsInstanceBlockDevice
    #   resp.data.instances[0].block_device_mappings[0].ebs.attach_time #=> Time
    #   resp.data.instances[0].block_device_mappings[0].ebs.delete_on_termination #=> Boolean
    #   resp.data.instances[0].block_device_mappings[0].ebs.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.instances[0].block_device_mappings[0].ebs.volume_id #=> String
    #   resp.data.instances[0].block_device_mappings[0].ebs.associated_resource #=> String
    #   resp.data.instances[0].block_device_mappings[0].ebs.volume_owner_id #=> String
    #   resp.data.instances[0].client_token #=> String
    #   resp.data.instances[0].ebs_optimized #=> Boolean
    #   resp.data.instances[0].ena_support #=> Boolean
    #   resp.data.instances[0].hypervisor #=> String, one of ["ovm", "xen"]
    #   resp.data.instances[0].iam_instance_profile #=> Types::IamInstanceProfile
    #   resp.data.instances[0].iam_instance_profile.arn #=> String
    #   resp.data.instances[0].iam_instance_profile.id #=> String
    #   resp.data.instances[0].instance_lifecycle #=> String, one of ["spot", "scheduled", "capacity-block"]
    #   resp.data.instances[0].elastic_gpu_associations #=> Array<ElasticGpuAssociation>
    #   resp.data.instances[0].elastic_gpu_associations[0] #=> Types::ElasticGpuAssociation
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_id #=> String
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_association_id #=> String
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_association_state #=> String
    #   resp.data.instances[0].elastic_gpu_associations[0].elastic_gpu_association_time #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations #=> Array<ElasticInferenceAcceleratorAssociation>
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0] #=> Types::ElasticInferenceAcceleratorAssociation
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_arn #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_id #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_state #=> String
    #   resp.data.instances[0].elastic_inference_accelerator_associations[0].elastic_inference_accelerator_association_time #=> Time
    #   resp.data.instances[0].network_interfaces #=> Array<InstanceNetworkInterface>
    #   resp.data.instances[0].network_interfaces[0] #=> Types::InstanceNetworkInterface
    #   resp.data.instances[0].network_interfaces[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.instances[0].network_interfaces[0].association.carrier_ip #=> String
    #   resp.data.instances[0].network_interfaces[0].association.customer_owned_ip #=> String
    #   resp.data.instances[0].network_interfaces[0].association.ip_owner_id #=> String
    #   resp.data.instances[0].network_interfaces[0].association.public_dns_name #=> String
    #   resp.data.instances[0].network_interfaces[0].association.public_ip #=> String
    #   resp.data.instances[0].network_interfaces[0].attachment #=> Types::InstanceNetworkInterfaceAttachment
    #   resp.data.instances[0].network_interfaces[0].attachment.attach_time #=> Time
    #   resp.data.instances[0].network_interfaces[0].attachment.attachment_id #=> String
    #   resp.data.instances[0].network_interfaces[0].attachment.delete_on_termination #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].attachment.device_index #=> Integer
    #   resp.data.instances[0].network_interfaces[0].attachment.status #=> String, one of ["attaching", "attached", "detaching", "detached"]
    #   resp.data.instances[0].network_interfaces[0].attachment.network_card_index #=> Integer
    #   resp.data.instances[0].network_interfaces[0].attachment.ena_srd_specification #=> Types::InstanceAttachmentEnaSrdSpecification
    #   resp.data.instances[0].network_interfaces[0].attachment.ena_srd_specification.ena_srd_enabled #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].attachment.ena_srd_specification.ena_srd_udp_specification #=> Types::InstanceAttachmentEnaSrdUdpSpecification
    #   resp.data.instances[0].network_interfaces[0].attachment.ena_srd_specification.ena_srd_udp_specification.ena_srd_udp_enabled #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].description #=> String
    #   resp.data.instances[0].network_interfaces[0].groups #=> Array<GroupIdentifier>
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses #=> Array<InstanceIpv6Address>
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses[0] #=> Types::InstanceIpv6Address
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses[0].ipv6_address #=> String
    #   resp.data.instances[0].network_interfaces[0].ipv6_addresses[0].is_primary_ipv6 #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].mac_address #=> String
    #   resp.data.instances[0].network_interfaces[0].network_interface_id #=> String
    #   resp.data.instances[0].network_interfaces[0].owner_id #=> String
    #   resp.data.instances[0].network_interfaces[0].private_dns_name #=> String
    #   resp.data.instances[0].network_interfaces[0].private_ip_address #=> String
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses #=> Array<InstancePrivateIpAddress>
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0] #=> Types::InstancePrivateIpAddress
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].association #=> Types::InstanceNetworkInterfaceAssociation
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].primary #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].private_dns_name #=> String
    #   resp.data.instances[0].network_interfaces[0].private_ip_addresses[0].private_ip_address #=> String
    #   resp.data.instances[0].network_interfaces[0].source_dest_check #=> Boolean
    #   resp.data.instances[0].network_interfaces[0].status #=> String, one of ["available", "associated", "attaching", "in-use", "detaching"]
    #   resp.data.instances[0].network_interfaces[0].subnet_id #=> String
    #   resp.data.instances[0].network_interfaces[0].vpc_id #=> String
    #   resp.data.instances[0].network_interfaces[0].interface_type #=> String
    #   resp.data.instances[0].network_interfaces[0].ipv4_prefixes #=> Array<InstanceIpv4Prefix>
    #   resp.data.instances[0].network_interfaces[0].ipv4_prefixes[0] #=> Types::InstanceIpv4Prefix
    #   resp.data.instances[0].network_interfaces[0].ipv4_prefixes[0].ipv4_prefix #=> String
    #   resp.data.instances[0].network_interfaces[0].ipv6_prefixes #=> Array<InstanceIpv6Prefix>
    #   resp.data.instances[0].network_interfaces[0].ipv6_prefixes[0] #=> Types::InstanceIpv6Prefix
    #   resp.data.instances[0].network_interfaces[0].ipv6_prefixes[0].ipv6_prefix #=> String
    #   resp.data.instances[0].network_interfaces[0].connection_tracking_configuration #=> Types::ConnectionTrackingSpecificationResponse
    #   resp.data.instances[0].network_interfaces[0].connection_tracking_configuration.tcp_established_timeout #=> Integer
    #   resp.data.instances[0].network_interfaces[0].connection_tracking_configuration.udp_stream_timeout #=> Integer
    #   resp.data.instances[0].network_interfaces[0].connection_tracking_configuration.udp_timeout #=> Integer
    #   resp.data.instances[0].outpost_arn #=> String
    #   resp.data.instances[0].root_device_name #=> String
    #   resp.data.instances[0].root_device_type #=> String, one of ["ebs", "instance-store"]
    #   resp.data.instances[0].security_groups #=> Array<GroupIdentifier>
    #   resp.data.instances[0].source_dest_check #=> Boolean
    #   resp.data.instances[0].spot_instance_request_id #=> String
    #   resp.data.instances[0].sriov_net_support #=> String
    #   resp.data.instances[0].state_reason #=> Types::StateReason
    #   resp.data.instances[0].state_reason.code #=> String
    #   resp.data.instances[0].state_reason.message #=> String
    #   resp.data.instances[0].tags #=> Array<Tag>
    #   resp.data.instances[0].tags[0] #=> Types::Tag
    #   resp.data.instances[0].tags[0].key #=> String
    #   resp.data.instances[0].tags[0].value #=> String
    #   resp.data.instances[0].virtualization_type #=> String, one of ["hvm", "paravirtual"]
    #   resp.data.instances[0].cpu_options #=> Types::CpuOptions
    #   resp.data.instances[0].cpu_options.core_count #=> Integer
    #   resp.data.instances[0].cpu_options.threads_per_core #=> Integer
    #   resp.data.instances[0].cpu_options.amd_sev_snp #=> String, one of ["enabled", "disabled"]
    #   resp.data.instances[0].capacity_reservation_id #=> String
    #   resp.data.instances[0].capacity_reservation_specification #=> Types::CapacityReservationSpecificationResponse
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_preference #=> String, one of ["open", "none"]
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_target #=> Types::CapacityReservationTargetResponse
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_id #=> String
    #   resp.data.instances[0].capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arn #=> String
    #   resp.data.instances[0].hibernation_options #=> Types::HibernationOptions
    #   resp.data.instances[0].hibernation_options.configured #=> Boolean
    #   resp.data.instances[0].licenses #=> Array<LicenseConfiguration>
    #   resp.data.instances[0].licenses[0] #=> Types::LicenseConfiguration
    #   resp.data.instances[0].licenses[0].license_configuration_arn #=> String
    #   resp.data.instances[0].metadata_options #=> Types::InstanceMetadataOptionsResponse
    #   resp.data.instances[0].metadata_options.state #=> String, one of ["pending", "applied"]
    #   resp.data.instances[0].metadata_options.http_tokens #=> String, one of ["optional", "required"]
    #   resp.data.instances[0].metadata_options.http_put_response_hop_limit #=> Integer
    #   resp.data.instances[0].metadata_options.http_endpoint #=> String, one of ["disabled", "enabled"]
    #   resp.data.instances[0].metadata_options.http_protocol_ipv6 #=> String, one of ["disabled", "enabled"]
    #   resp.data.instances[0].metadata_options.instance_metadata_tags #=> String, one of ["disabled", "enabled"]
    #   resp.data.instances[0].enclave_options #=> Types::EnclaveOptions
    #   resp.data.instances[0].enclave_options.enabled #=> Boolean
    #   resp.data.instances[0].boot_mode #=> String, one of ["legacy-bios", "uefi", "uefi-preferred"]
    #   resp.data.instances[0].platform_details #=> String
    #   resp.data.instances[0].usage_operation #=> String
    #   resp.data.instances[0].usage_operation_update_time #=> Time
    #   resp.data.instances[0].private_dns_name_options #=> Types::PrivateDnsNameOptionsResponse
    #   resp.data.instances[0].private_dns_name_options.hostname_type #=> String, one of ["ip-name", "resource-name"]
    #   resp.data.instances[0].private_dns_name_options.enable_resource_name_dns_a_record #=> Boolean
    #   resp.data.instances[0].private_dns_name_options.enable_resource_name_dns_aaaa_record #=> Boolean
    #   resp.data.instances[0].ipv6_address #=> String
    #   resp.data.instances[0].tpm_support #=> String
    #   resp.data.instances[0].maintenance_options #=> Types::InstanceMaintenanceOptions
    #   resp.data.instances[0].maintenance_options.auto_recovery #=> String, one of ["disabled", "default"]
    #   resp.data.instances[0].current_instance_boot_mode #=> String, one of ["legacy-bios", "uefi"]
    #   resp.data.owner_id #=> String
    #   resp.data.requester_id #=> String
    #   resp.data.reservation_id #=> String
    # @example To launch an instance
    #   # This example launches an instance using the specified AMI, instance type, security group, subnet, block device mapping, and tags.
    #   resp = client.run_instances({
    #     block_device_mappings: [
    #       {
    #         device_name: "/dev/sdh",
    #         ebs: {
    #           volume_size: 100
    #         }
    #       }
    #     ],
    #     image_id: "ami-abc12345",
    #     instance_type: "t2.micro",
    #     key_name: "my-key-pair",
    #     max_count: 1,
    #     min_count: 1,
    #     security_group_ids: [
    #       "sg-1a2b3c4d"
    #     ],
    #     subnet_id: "subnet-6e7f829e",
    #     tag_specifications: [
    #       {
    #         resource_type: "instance",
    #         tags: [
    #           {
    #             key: "Purpose",
    #             value: "test"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def run_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RunInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RunInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :run_instances,
        tracer: tracer
      )
      Telemetry::RunInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#run_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#run_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#run_instances] #{output.data}")
        output
      end
    end

    # <p>Launches the specified Scheduled Instances.</p>
    #          <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p>
    #          <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance,
    #          but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends,
    #          you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a>
    #          in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::RunScheduledInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::RunScheduledInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.run_scheduled_instances(
    #     client_token: 'ClientToken',
    #     dry_run: false,
    #     instance_count: 1,
    #     launch_specification: {
    #       block_device_mappings: [
    #         {
    #           device_name: 'DeviceName',
    #           ebs: {
    #             delete_on_termination: false,
    #             encrypted: false,
    #             iops: 1,
    #             snapshot_id: 'SnapshotId',
    #             volume_size: 1,
    #             volume_type: 'VolumeType'
    #           },
    #           no_device: 'NoDevice',
    #           virtual_name: 'VirtualName'
    #         }
    #       ],
    #       ebs_optimized: false,
    #       iam_instance_profile: {
    #         arn: 'Arn',
    #         name: 'Name'
    #       },
    #       image_id: 'ImageId', # required
    #       instance_type: 'InstanceType',
    #       kernel_id: 'KernelId',
    #       key_name: 'KeyName',
    #       monitoring: {
    #         enabled: false
    #       },
    #       network_interfaces: [
    #         {
    #           associate_public_ip_address: false,
    #           delete_on_termination: false,
    #           description: 'Description',
    #           device_index: 1,
    #           groups: [
    #             'member'
    #           ],
    #           ipv6_address_count: 1,
    #           ipv6_addresses: [
    #             {
    #               ipv6_address: 'Ipv6Address'
    #             }
    #           ],
    #           network_interface_id: 'NetworkInterfaceId',
    #           private_ip_address: 'PrivateIpAddress',
    #           private_ip_address_configs: [
    #             {
    #               primary: false,
    #               private_ip_address: 'PrivateIpAddress'
    #             }
    #           ],
    #           secondary_private_ip_address_count: 1,
    #           subnet_id: 'SubnetId'
    #         }
    #       ],
    #       placement: {
    #         availability_zone: 'AvailabilityZone',
    #         group_name: 'GroupName'
    #       },
    #       ramdisk_id: 'RamdiskId',
    #       subnet_id: 'SubnetId',
    #       user_data: 'UserData'
    #     }, # required
    #     scheduled_instance_id: 'ScheduledInstanceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::RunScheduledInstancesOutput
    #   resp.data.instance_id_set #=> Array<String>
    #   resp.data.instance_id_set[0] #=> String
    def run_scheduled_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::RunScheduledInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::RunScheduledInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :run_scheduled_instances,
        tracer: tracer
      )
      Telemetry::RunScheduledInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#run_scheduled_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#run_scheduled_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#run_scheduled_instances] #{output.data}")
        output
      end
    end

    # <p>Searches for routes in the specified local gateway route table.</p>
    # @param [Hash | Types::SearchLocalGatewayRoutesInput] params
    #   Request parameters for this operation.
    #   See {Types::SearchLocalGatewayRoutesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.search_local_gateway_routes(
    #     local_gateway_route_table_id: 'LocalGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::SearchLocalGatewayRoutesOutput
    #   resp.data.routes #=> Array<LocalGatewayRoute>
    #   resp.data.routes[0] #=> Types::LocalGatewayRoute
    #   resp.data.routes[0].destination_cidr_block #=> String
    #   resp.data.routes[0].local_gateway_virtual_interface_group_id #=> String
    #   resp.data.routes[0].type #=> String, one of ["static", "propagated"]
    #   resp.data.routes[0].state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.routes[0].local_gateway_route_table_id #=> String
    #   resp.data.routes[0].local_gateway_route_table_arn #=> String
    #   resp.data.routes[0].owner_id #=> String
    #   resp.data.routes[0].subnet_id #=> String
    #   resp.data.routes[0].coip_pool_id #=> String
    #   resp.data.routes[0].network_interface_id #=> String
    #   resp.data.routes[0].destination_prefix_list_id #=> String
    #   resp.data.next_token #=> String
    def search_local_gateway_routes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::SearchLocalGatewayRoutesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::SearchLocalGatewayRoutes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :search_local_gateway_routes,
        tracer: tracer
      )
      Telemetry::SearchLocalGatewayRoutes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#search_local_gateway_routes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#search_local_gateway_routes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#search_local_gateway_routes] #{output.data}")
        output
      end
    end

    # <p>Searches one or more  transit gateway multicast groups and returns the group membership information.</p>
    # @param [Hash | Types::SearchTransitGatewayMulticastGroupsInput] params
    #   Request parameters for this operation.
    #   See {Types::SearchTransitGatewayMulticastGroupsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.search_transit_gateway_multicast_groups(
    #     transit_gateway_multicast_domain_id: 'TransitGatewayMulticastDomainId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ],
    #     max_results: 1,
    #     next_token: 'NextToken',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::SearchTransitGatewayMulticastGroupsOutput
    #   resp.data.multicast_groups #=> Array<TransitGatewayMulticastGroup>
    #   resp.data.multicast_groups[0] #=> Types::TransitGatewayMulticastGroup
    #   resp.data.multicast_groups[0].group_ip_address #=> String
    #   resp.data.multicast_groups[0].transit_gateway_attachment_id #=> String
    #   resp.data.multicast_groups[0].subnet_id #=> String
    #   resp.data.multicast_groups[0].resource_id #=> String
    #   resp.data.multicast_groups[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.multicast_groups[0].resource_owner_id #=> String
    #   resp.data.multicast_groups[0].network_interface_id #=> String
    #   resp.data.multicast_groups[0].group_member #=> Boolean
    #   resp.data.multicast_groups[0].group_source #=> Boolean
    #   resp.data.multicast_groups[0].member_type #=> String, one of ["static", "igmp"]
    #   resp.data.multicast_groups[0].source_type #=> String, one of ["static", "igmp"]
    #   resp.data.next_token #=> String
    def search_transit_gateway_multicast_groups(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::SearchTransitGatewayMulticastGroupsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::SearchTransitGatewayMulticastGroups.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :search_transit_gateway_multicast_groups,
        tracer: tracer
      )
      Telemetry::SearchTransitGatewayMulticastGroups.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#search_transit_gateway_multicast_groups] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#search_transit_gateway_multicast_groups] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#search_transit_gateway_multicast_groups] #{output.data}")
        output
      end
    end

    # <p>Searches for routes in the specified transit gateway route table.</p>
    # @param [Hash | Types::SearchTransitGatewayRoutesInput] params
    #   Request parameters for this operation.
    #   See {Types::SearchTransitGatewayRoutesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.search_transit_gateway_routes(
    #     transit_gateway_route_table_id: 'TransitGatewayRouteTableId', # required
    #     filters: [
    #       {
    #         name: 'Name',
    #         values: [
    #           'member'
    #         ]
    #       }
    #     ], # required
    #     max_results: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::SearchTransitGatewayRoutesOutput
    #   resp.data.routes #=> Array<TransitGatewayRoute>
    #   resp.data.routes[0] #=> Types::TransitGatewayRoute
    #   resp.data.routes[0].destination_cidr_block #=> String
    #   resp.data.routes[0].prefix_list_id #=> String
    #   resp.data.routes[0].transit_gateway_route_table_announcement_id #=> String
    #   resp.data.routes[0].transit_gateway_attachments #=> Array<TransitGatewayRouteAttachment>
    #   resp.data.routes[0].transit_gateway_attachments[0] #=> Types::TransitGatewayRouteAttachment
    #   resp.data.routes[0].transit_gateway_attachments[0].resource_id #=> String
    #   resp.data.routes[0].transit_gateway_attachments[0].transit_gateway_attachment_id #=> String
    #   resp.data.routes[0].transit_gateway_attachments[0].resource_type #=> String, one of ["vpc", "vpn", "direct-connect-gateway", "connect", "peering", "tgw-peering"]
    #   resp.data.routes[0].type #=> String, one of ["static", "propagated"]
    #   resp.data.routes[0].state #=> String, one of ["pending", "active", "blackhole", "deleting", "deleted"]
    #   resp.data.additional_routes_available #=> Boolean
    def search_transit_gateway_routes(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::SearchTransitGatewayRoutesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::SearchTransitGatewayRoutes.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :search_transit_gateway_routes,
        tracer: tracer
      )
      Telemetry::SearchTransitGatewayRoutes.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#search_transit_gateway_routes] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#search_transit_gateway_routes] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#search_transit_gateway_routes] #{output.data}")
        output
      end
    end

    # <p>Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a
    #                 <i>kernel panic</i> (on Linux instances), or a <i>blue
    #                 screen</i>/<i>stop error</i> (on Windows instances). For
    #             instances based on Intel and AMD processors, the interrupt is received as a
    #                 <i>non-maskable interrupt</i> (NMI).</p>
    #          <p>In general, the operating system crashes and reboots when a kernel panic or stop error
    #             is triggered. The operating system can also be configured to perform diagnostic tasks,
    #             such as generating a memory dump file, loading a secondary kernel, or obtaining a call
    #             trace.</p>
    #          <p>Before sending a diagnostic interrupt to your instance, ensure that its operating
    #             system is configured to perform the required diagnostic tasks.</p>
    #          <p>For more information about configuring your operating system to generate a crash dump
    #             when a kernel panic or stop error occurs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send a diagnostic interrupt
    #                 (for advanced users)</a> (Linux instances) or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send a diagnostic
    #                 interrupt (for advanced users)</a> (Windows instances).</p>
    # @param [Hash | Types::SendDiagnosticInterruptInput] params
    #   Request parameters for this operation.
    #   See {Types::SendDiagnosticInterruptInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.send_diagnostic_interrupt(
    #     instance_id: 'InstanceId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::SendDiagnosticInterruptOutput
    def send_diagnostic_interrupt(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::SendDiagnosticInterruptInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::SendDiagnosticInterrupt.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :send_diagnostic_interrupt,
        tracer: tracer
      )
      Telemetry::SendDiagnosticInterrupt.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#send_diagnostic_interrupt] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#send_diagnostic_interrupt] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#send_diagnostic_interrupt] #{output.data}")
        output
      end
    end

    # <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p>
    #          <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and
    #             started. When an instance is stopped, the compute resources are released and you are not
    #             billed for instance usage. However, your root partition Amazon EBS volume remains and
    #             continues to persist your data, and you are charged for Amazon EBS volume usage. You can
    #             restart your instance at any time. Every time you start your instance, Amazon EC2
    #             charges a one-minute minimum for instance usage, and thereafter charges per second for
    #             instance usage.</p>
    #          <p>Before stopping an instance, make sure it is in a state from which it can be
    #             restarted. Stopping an instance does not preserve data stored in RAM.</p>
    #          <p>Performing this operation on an instance that uses an instance store as its root
    #             device returns an error.</p>
    #          <p>If you attempt to start a T3 instance with <code>host</code> tenancy and the
    #                 <code>unlimited</code> CPU credit option, the request fails. The
    #                 <code>unlimited</code> CPU credit option is not supported on Dedicated Hosts. Before
    #             you start the instance, either change its CPU credit option to <code>standard</code>, or
    #             change its tenancy to <code>default</code> or <code>dedicated</code>.</p>
    #          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start your instance</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::StartInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::StartInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.start_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     additional_info: 'AdditionalInfo',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::StartInstancesOutput
    #   resp.data.starting_instances #=> Array<InstanceStateChange>
    #   resp.data.starting_instances[0] #=> Types::InstanceStateChange
    #   resp.data.starting_instances[0].current_state #=> Types::InstanceState
    #   resp.data.starting_instances[0].current_state.code #=> Integer
    #   resp.data.starting_instances[0].current_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.starting_instances[0].instance_id #=> String
    #   resp.data.starting_instances[0].previous_state #=> Types::InstanceState
    # @example To start a stopped EC2 instance
    #   # This example starts the specified EC2 instance.
    #   resp = client.start_instances({
    #     instance_ids: [
    #       "i-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     starting_instances: [
    #       {
    #         instance_id: "i-1234567890abcdef0",
    #         current_state: {
    #           code: 0,
    #           name: "pending"
    #         },
    #         previous_state: {
    #           code: 80,
    #           name: "stopped"
    #         }
    #       }
    #     ]
    #   }
    def start_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::StartInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::StartInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :start_instances,
        tracer: tracer
      )
      Telemetry::StartInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#start_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_instances] #{output.data}")
        output
      end
    end

    # <p>Starts analyzing the specified Network Access Scope.</p>
    # @param [Hash | Types::StartNetworkInsightsAccessScopeAnalysisInput] params
    #   Request parameters for this operation.
    #   See {Types::StartNetworkInsightsAccessScopeAnalysisInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.start_network_insights_access_scope_analysis(
    #     network_insights_access_scope_id: 'NetworkInsightsAccessScopeId', # required
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::StartNetworkInsightsAccessScopeAnalysisOutput
    #   resp.data.network_insights_access_scope_analysis #=> Types::NetworkInsightsAccessScopeAnalysis
    #   resp.data.network_insights_access_scope_analysis.network_insights_access_scope_analysis_id #=> String
    #   resp.data.network_insights_access_scope_analysis.network_insights_access_scope_analysis_arn #=> String
    #   resp.data.network_insights_access_scope_analysis.network_insights_access_scope_id #=> String
    #   resp.data.network_insights_access_scope_analysis.status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_access_scope_analysis.status_message #=> String
    #   resp.data.network_insights_access_scope_analysis.warning_message #=> String
    #   resp.data.network_insights_access_scope_analysis.start_date #=> Time
    #   resp.data.network_insights_access_scope_analysis.end_date #=> Time
    #   resp.data.network_insights_access_scope_analysis.findings_found #=> String, one of ["true", "false", "unknown"]
    #   resp.data.network_insights_access_scope_analysis.analyzed_eni_count #=> Integer
    #   resp.data.network_insights_access_scope_analysis.tags #=> Array<Tag>
    #   resp.data.network_insights_access_scope_analysis.tags[0] #=> Types::Tag
    #   resp.data.network_insights_access_scope_analysis.tags[0].key #=> String
    #   resp.data.network_insights_access_scope_analysis.tags[0].value #=> String
    def start_network_insights_access_scope_analysis(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::StartNetworkInsightsAccessScopeAnalysisInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::StartNetworkInsightsAccessScopeAnalysis.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :start_network_insights_access_scope_analysis,
        tracer: tracer
      )
      Telemetry::StartNetworkInsightsAccessScopeAnalysis.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_network_insights_access_scope_analysis] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#start_network_insights_access_scope_analysis] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_network_insights_access_scope_analysis] #{output.data}")
        output
      end
    end

    # <p>Starts analyzing the specified path. If the path is reachable, the
    #          operation returns the shortest feasible path.</p>
    # @param [Hash | Types::StartNetworkInsightsAnalysisInput] params
    #   Request parameters for this operation.
    #   See {Types::StartNetworkInsightsAnalysisInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.start_network_insights_analysis(
    #     network_insights_path_id: 'NetworkInsightsPathId', # required
    #     additional_accounts: [
    #       'member'
    #     ],
    #     filter_in_arns: [
    #       'member'
    #     ],
    #     dry_run: false,
    #     tag_specifications: [
    #       {
    #         resource_type: 'capacity-reservation', # accepts ["capacity-reservation", "client-vpn-endpoint", "customer-gateway", "carrier-gateway", "coip-pool", "dedicated-host", "dhcp-options", "egress-only-internet-gateway", "elastic-ip", "elastic-gpu", "export-image-task", "export-instance-task", "fleet", "fpga-image", "host-reservation", "image", "import-image-task", "import-snapshot-task", "instance", "instance-event-window", "internet-gateway", "ipam", "ipam-pool", "ipam-scope", "ipv4pool-ec2", "ipv6pool-ec2", "key-pair", "launch-template", "local-gateway", "local-gateway-route-table", "local-gateway-virtual-interface", "local-gateway-virtual-interface-group", "local-gateway-route-table-vpc-association", "local-gateway-route-table-virtual-interface-group-association", "natgateway", "network-acl", "network-interface", "network-insights-analysis", "network-insights-path", "network-insights-access-scope", "network-insights-access-scope-analysis", "placement-group", "prefix-list", "replace-root-volume-task", "reserved-instances", "route-table", "security-group", "security-group-rule", "snapshot", "spot-fleet-request", "spot-instances-request", "subnet", "subnet-cidr-reservation", "traffic-mirror-filter", "traffic-mirror-session", "traffic-mirror-target", "transit-gateway", "transit-gateway-attachment", "transit-gateway-connect-peer", "transit-gateway-multicast-domain", "transit-gateway-policy-table", "transit-gateway-route-table", "transit-gateway-route-table-announcement", "volume", "vpc", "vpc-endpoint", "vpc-endpoint-connection", "vpc-endpoint-service", "vpc-endpoint-service-permission", "vpc-peering-connection", "vpn-connection", "vpn-gateway", "vpc-flow-log", "capacity-reservation-fleet", "traffic-mirror-filter-rule", "vpc-endpoint-connection-device-type", "verified-access-instance", "verified-access-group", "verified-access-endpoint", "verified-access-policy", "verified-access-trust-provider", "vpn-connection-device-type", "vpc-block-public-access-exclusion", "ipam-resource-discovery", "ipam-resource-discovery-association", "instance-connect-endpoint"]
    #         tags: [
    #           {
    #             key: 'Key',
    #             value: 'Value'
    #           }
    #         ]
    #       }
    #     ],
    #     client_token: 'ClientToken' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::StartNetworkInsightsAnalysisOutput
    #   resp.data.network_insights_analysis #=> Types::NetworkInsightsAnalysis
    #   resp.data.network_insights_analysis.network_insights_analysis_id #=> String
    #   resp.data.network_insights_analysis.network_insights_analysis_arn #=> String
    #   resp.data.network_insights_analysis.network_insights_path_id #=> String
    #   resp.data.network_insights_analysis.additional_accounts #=> Array<String>
    #   resp.data.network_insights_analysis.additional_accounts[0] #=> String
    #   resp.data.network_insights_analysis.filter_in_arns #=> Array<String>
    #   resp.data.network_insights_analysis.filter_in_arns[0] #=> String
    #   resp.data.network_insights_analysis.start_date #=> Time
    #   resp.data.network_insights_analysis.status #=> String, one of ["running", "succeeded", "failed"]
    #   resp.data.network_insights_analysis.status_message #=> String
    #   resp.data.network_insights_analysis.warning_message #=> String
    #   resp.data.network_insights_analysis.network_path_found #=> Boolean
    #   resp.data.network_insights_analysis.forward_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analysis.forward_path_components[0] #=> Types::PathComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].sequence_number #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.egress #=> Boolean
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.port_range.from #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.port_range.to #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.rule_action #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].acl_rule.rule_number #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to.id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to.arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].attached_to.name #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.destination_addresses #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.destination_addresses[0] #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.destination_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.source_addresses #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].outbound_header.source_port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].inbound_header #=> Types::AnalysisPacketHeader
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.destination_cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.destination_prefix_list_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.egress_only_internet_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.instance_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.nat_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.network_interface_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.origin #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.transit_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.vpc_peering_connection_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.state #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.carrier_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.core_network_arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].route_table_route.local_gateway_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.direction #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.security_group_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.port_range #=> Types::PortRange
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.prefix_list_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].security_group_rule.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details #=> Array<AdditionalDetail>
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0] #=> Types::AdditionalDetail
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].additional_detail_type #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].vpc_endpoint_service #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_options #=> Array<RuleOption>
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_options[0] #=> Types::RuleOption
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_options[0].keyword #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_options[0].settings #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_options[0].settings[0] #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_type_pairs #=> Array<RuleGroupTypePair>
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_type_pairs[0] #=> Types::RuleGroupTypePair
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_type_pairs[0].rule_group_arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_type_pairs[0].rule_group_type #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_rule_options_pairs #=> Array<RuleGroupRuleOptionsPair>
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_rule_options_pairs[0] #=> Types::RuleGroupRuleOptionsPair
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_rule_options_pairs[0].rule_group_arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].rule_group_rule_options_pairs[0].rule_options #=> Array<RuleOption>
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].service_name #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].additional_details[0].load_balancers #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route #=> Types::TransitGatewayRouteTableRoute
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.destination_cidr #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.state #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.route_origin #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.prefix_list_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.attachment_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.resource_id #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].transit_gateway_route_table_route.resource_type #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations #=> Array<Explanation>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0] #=> Types::Explanation
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].acl #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].acl_rule #=> Types::AnalysisAclRule
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].address #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].addresses #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].attached_to #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].availability_zones #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].cidrs #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].component #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].customer_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].destination #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].destination_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].direction #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].explanation_code #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].ingress_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].internet_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].classic_load_balancer_listener #=> Types::AnalysisLoadBalancerListener
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].classic_load_balancer_listener.load_balancer_port #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].classic_load_balancer_listener.instance_port #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_listener_port #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target #=> Types::AnalysisLoadBalancerTarget
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target.address #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target.availability_zone #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target.instance #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target.port #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].load_balancer_target_port #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].missing_component #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].nat_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].network_interface #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].packet_field #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].vpc_peering_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].port #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].port_ranges #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].prefix_list #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].protocols #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].route_table_route #=> Types::AnalysisRouteTableRoute
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].security_group #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].security_group_rule #=> Types::AnalysisSecurityGroupRule
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].security_groups #=> Array<AnalysisComponent>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].source_vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].state #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].subnet #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].subnet_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].vpc #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].vpc_endpoint #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].vpn_connection #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].vpn_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].transit_gateway #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].transit_gateway_route_table #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].transit_gateway_route_table_route #=> Types::TransitGatewayRouteTableRoute
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].transit_gateway_attachment #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].component_account #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].component_region #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule #=> Types::FirewallStatelessRule
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.rule_group_arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.sources #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.destinations #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.source_ports #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.destination_ports #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.protocols #=> Array<Integer>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.protocols[0] #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.rule_action #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateless_rule.priority #=> Integer
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule #=> Types::FirewallStatefulRule
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.rule_group_arn #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.sources #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.destinations #=> Array<String>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.source_ports #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.destination_ports #=> Array<PortRange>
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.protocol #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.rule_action #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].explanations[0].firewall_stateful_rule.direction #=> String
    #   resp.data.network_insights_analysis.forward_path_components[0].elastic_load_balancer_listener #=> Types::AnalysisComponent
    #   resp.data.network_insights_analysis.forward_path_components[0].firewall_stateless_rule #=> Types::FirewallStatelessRule
    #   resp.data.network_insights_analysis.forward_path_components[0].firewall_stateful_rule #=> Types::FirewallStatefulRule
    #   resp.data.network_insights_analysis.forward_path_components[0].service_name #=> String
    #   resp.data.network_insights_analysis.return_path_components #=> Array<PathComponent>
    #   resp.data.network_insights_analysis.explanations #=> Array<Explanation>
    #   resp.data.network_insights_analysis.alternate_path_hints #=> Array<AlternatePathHint>
    #   resp.data.network_insights_analysis.alternate_path_hints[0] #=> Types::AlternatePathHint
    #   resp.data.network_insights_analysis.alternate_path_hints[0].component_id #=> String
    #   resp.data.network_insights_analysis.alternate_path_hints[0].component_arn #=> String
    #   resp.data.network_insights_analysis.suggested_accounts #=> Array<String>
    #   resp.data.network_insights_analysis.tags #=> Array<Tag>
    #   resp.data.network_insights_analysis.tags[0] #=> Types::Tag
    #   resp.data.network_insights_analysis.tags[0].key #=> String
    #   resp.data.network_insights_analysis.tags[0].value #=> String
    def start_network_insights_analysis(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::StartNetworkInsightsAnalysisInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::StartNetworkInsightsAnalysis.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :start_network_insights_analysis,
        tracer: tracer
      )
      Telemetry::StartNetworkInsightsAnalysis.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_network_insights_analysis] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#start_network_insights_analysis] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_network_insights_analysis] #{output.data}")
        output
      end
    end

    # <p>Initiates the verification process to prove that the service provider owns the private
    #             DNS name domain for the endpoint service.</p>
    #          <p>The service provider must successfully perform the verification before the consumer can use the name to access the service.</p>
    #          <p>Before the service provider runs this command, they must add a record to the DNS server.</p>
    # @param [Hash | Types::StartVpcEndpointServicePrivateDnsVerificationInput] params
    #   Request parameters for this operation.
    #   See {Types::StartVpcEndpointServicePrivateDnsVerificationInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.start_vpc_endpoint_service_private_dns_verification(
    #     dry_run: false,
    #     service_id: 'ServiceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::StartVpcEndpointServicePrivateDnsVerificationOutput
    #   resp.data.return_value #=> Boolean
    def start_vpc_endpoint_service_private_dns_verification(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::StartVpcEndpointServicePrivateDnsVerificationInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::StartVpcEndpointServicePrivateDnsVerification.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :start_vpc_endpoint_service_private_dns_verification,
        tracer: tracer
      )
      Telemetry::StartVpcEndpointServicePrivateDnsVerification.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_vpc_endpoint_service_private_dns_verification] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#start_vpc_endpoint_service_private_dns_verification] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#start_vpc_endpoint_service_private_dns_verification] #{output.data}")
        output
      end
    end

    # <p>Stops an Amazon EBS-backed instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start
    #                 your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enabling-hibernation.html">enabled for
    #                 hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation
    #                 prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #          <p>We don't charge usage for a stopped instance, or data transfer fees; however, your
    #             root partition Amazon EBS volume remains and continues to persist your data, and you are
    #             charged for Amazon EBS volume usage. Every time you start your instance, Amazon EC2
    #             charges a one-minute minimum for instance usage, and thereafter charges per second for
    #             instance usage.</p>
    #          <p>You can't stop or hibernate instance store-backed instances. You can't use the Stop
    #             action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate
    #             Spot Instances when they are interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating interrupted Spot Instances</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    #          <p>When you stop or hibernate an instance, we shut it down. You can restart your instance
    #             at any time. Before stopping or hibernating an instance, make sure it is in a state from
    #             which it can be restarted. Stopping an instance does not preserve data stored in RAM,
    #             but hibernating an instance does preserve data stored in RAM. If an instance cannot
    #             hibernate successfully, a normal shutdown occurs.</p>
    #          <p>Stopping and hibernating an instance is different to rebooting or terminating it. For
    #             example, when you stop or hibernate an instance, the root device and any other devices
    #             attached to the instance persist. When you terminate an instance, the root device and
    #             any other devices attached during the instance launch are automatically deleted. For
    #             more information about the differences between rebooting, stopping, hibernating, and
    #             terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If
    #             your instance appears stuck in the stopping state after a period of time, there may be
    #             an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshoot
    #                 stopping your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::StopInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::StopInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.stop_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     hibernate: false,
    #     dry_run: false,
    #     force: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::StopInstancesOutput
    #   resp.data.stopping_instances #=> Array<InstanceStateChange>
    #   resp.data.stopping_instances[0] #=> Types::InstanceStateChange
    #   resp.data.stopping_instances[0].current_state #=> Types::InstanceState
    #   resp.data.stopping_instances[0].current_state.code #=> Integer
    #   resp.data.stopping_instances[0].current_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.stopping_instances[0].instance_id #=> String
    #   resp.data.stopping_instances[0].previous_state #=> Types::InstanceState
    # @example To stop a running EC2 instance
    #   # This example stops the specified EC2 instance.
    #   resp = client.stop_instances({
    #     instance_ids: [
    #       "i-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     stopping_instances: [
    #       {
    #         instance_id: "i-1234567890abcdef0",
    #         current_state: {
    #           code: 64,
    #           name: "stopping"
    #         },
    #         previous_state: {
    #           code: 16,
    #           name: "running"
    #         }
    #       }
    #     ]
    #   }
    def stop_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::StopInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::StopInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :stop_instances,
        tracer: tracer
      )
      Telemetry::StopInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#stop_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#stop_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#stop_instances] #{output.data}")
        output
      end
    end

    # <p>Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.</p>
    # @param [Hash | Types::TerminateClientVpnConnectionsInput] params
    #   Request parameters for this operation.
    #   See {Types::TerminateClientVpnConnectionsInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.terminate_client_vpn_connections(
    #     client_vpn_endpoint_id: 'ClientVpnEndpointId', # required
    #     connection_id: 'ConnectionId',
    #     username: 'Username',
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::TerminateClientVpnConnectionsOutput
    #   resp.data.client_vpn_endpoint_id #=> String
    #   resp.data.username #=> String
    #   resp.data.connection_statuses #=> Array<TerminateConnectionStatus>
    #   resp.data.connection_statuses[0] #=> Types::TerminateConnectionStatus
    #   resp.data.connection_statuses[0].connection_id #=> String
    #   resp.data.connection_statuses[0].previous_status #=> Types::ClientVpnConnectionStatus
    #   resp.data.connection_statuses[0].previous_status.code #=> String, one of ["active", "failed-to-terminate", "terminating", "terminated"]
    #   resp.data.connection_statuses[0].previous_status.message #=> String
    #   resp.data.connection_statuses[0].current_status #=> Types::ClientVpnConnectionStatus
    def terminate_client_vpn_connections(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::TerminateClientVpnConnectionsInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::TerminateClientVpnConnections.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :terminate_client_vpn_connections,
        tracer: tracer
      )
      Telemetry::TerminateClientVpnConnections.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#terminate_client_vpn_connections] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#terminate_client_vpn_connections] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#terminate_client_vpn_connections] #{output.data}")
        output
      end
    end

    # <p>Shuts down the specified instances. This operation is idempotent; if you terminate an
    #             instance more than once, each call succeeds. </p>
    #          <p>If you specify multiple instances and the request fails (for example, because of a
    #             single incorrect instance ID), none of the instances are terminated.</p>
    #          <p>If you terminate multiple instances across multiple Availability Zones, and one or
    #             more of the specified instances are enabled for termination protection, the request
    #             fails with the following results:</p>
    #          <ul>
    #             <li>
    #                <p>The specified instances that are in the same Availability Zone as the
    #                     protected instance are not terminated.</p>
    #             </li>
    #             <li>
    #                <p>The specified instances that are in different Availability Zones, where no
    #                     other specified instances are protected, are successfully terminated.</p>
    #             </li>
    #          </ul>
    #          <p>For example, say you have the following instances:</p>
    #          <ul>
    #             <li>
    #                <p>Instance A: <code>us-east-1a</code>; Not protected</p>
    #             </li>
    #             <li>
    #                <p>Instance B: <code>us-east-1a</code>; Not protected</p>
    #             </li>
    #             <li>
    #                <p>Instance C: <code>us-east-1b</code>; Protected</p>
    #             </li>
    #             <li>
    #                <p>Instance D: <code>us-east-1b</code>; not protected</p>
    #             </li>
    #          </ul>
    #          <p>If you attempt to terminate all of these instances in the same request, the request
    #             reports failure with the following results:</p>
    #          <ul>
    #             <li>
    #                <p>Instance A and Instance B are successfully terminated because none of the
    #                     specified instances in <code>us-east-1a</code> are enabled for termination
    #                     protection.</p>
    #             </li>
    #             <li>
    #                <p>Instance C and Instance D fail to terminate because at least one of the
    #                     specified instances in <code>us-east-1b</code> (Instance C) is enabled for
    #                     termination protection.</p>
    #             </li>
    #          </ul>
    #          <p>Terminated instances remain visible after termination (for approximately one
    #             hour).</p>
    #          <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance
    #             launched. Volumes attached after instance launch continue running.</p>
    #          <p>You can stop, start, and terminate EBS-backed instances. You can only terminate
    #             instance store-backed instances. What happens to an instance differs if you stop it or
    #             terminate it. For example, when you stop an instance, the root device and any other
    #             devices attached to the instance persist. When you terminate an instance, any attached
    #             EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set
    #             to <code>true</code> are automatically deleted. For more information about the
    #             differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a>
    #             in the <i>Amazon EC2 User Guide</i>.</p>
    #          <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting terminating your instance</a> in the
    #                 <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::TerminateInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::TerminateInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.terminate_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::TerminateInstancesOutput
    #   resp.data.terminating_instances #=> Array<InstanceStateChange>
    #   resp.data.terminating_instances[0] #=> Types::InstanceStateChange
    #   resp.data.terminating_instances[0].current_state #=> Types::InstanceState
    #   resp.data.terminating_instances[0].current_state.code #=> Integer
    #   resp.data.terminating_instances[0].current_state.name #=> String, one of ["pending", "running", "shutting-down", "terminated", "stopping", "stopped"]
    #   resp.data.terminating_instances[0].instance_id #=> String
    #   resp.data.terminating_instances[0].previous_state #=> Types::InstanceState
    # @example To terminate an EC2 instance
    #   # This example terminates the specified EC2 instance.
    #   resp = client.terminate_instances({
    #     instance_ids: [
    #       "i-1234567890abcdef0"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {
    #     terminating_instances: [
    #       {
    #         instance_id: "i-1234567890abcdef0",
    #         current_state: {
    #           code: 32,
    #           name: "shutting-down"
    #         },
    #         previous_state: {
    #           code: 16,
    #           name: "running"
    #         }
    #       }
    #     ]
    #   }
    def terminate_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::TerminateInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::TerminateInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :terminate_instances,
        tracer: tracer
      )
      Telemetry::TerminateInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#terminate_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#terminate_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#terminate_instances] #{output.data}")
        output
      end
    end

    # <p>Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from a network interface.</p>
    # @param [Hash | Types::UnassignIpv6AddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::UnassignIpv6AddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.unassign_ipv6_addresses(
    #     ipv6_addresses: [
    #       'member'
    #     ],
    #     ipv6_prefixes: [
    #       'member'
    #     ],
    #     network_interface_id: 'NetworkInterfaceId' # required
    #   )
    # @example Response structure
    #   resp.data #=> Types::UnassignIpv6AddressesOutput
    #   resp.data.network_interface_id #=> String
    #   resp.data.unassigned_ipv6_addresses #=> Array<String>
    #   resp.data.unassigned_ipv6_addresses[0] #=> String
    #   resp.data.unassigned_ipv6_prefixes #=> Array<String>
    #   resp.data.unassigned_ipv6_prefixes[0] #=> String
    def unassign_ipv6_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UnassignIpv6AddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UnassignIpv6Addresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :unassign_ipv6_addresses,
        tracer: tracer
      )
      Telemetry::UnassignIpv6Addresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unassign_ipv6_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#unassign_ipv6_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unassign_ipv6_addresses] #{output.data}")
        output
      end
    end

    # <p>Unassigns one or more secondary private IP addresses, or IPv4 Prefix Delegation prefixes from a
    #         	network interface.</p>
    # @param [Hash | Types::UnassignPrivateIpAddressesInput] params
    #   Request parameters for this operation.
    #   See {Types::UnassignPrivateIpAddressesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.unassign_private_ip_addresses(
    #     network_interface_id: 'NetworkInterfaceId', # required
    #     private_ip_addresses: [
    #       'member'
    #     ],
    #     ipv4_prefixes: [
    #       'member'
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::UnassignPrivateIpAddressesOutput
    # @example To unassign a secondary private IP address from a network interface
    #   # This example unassigns the specified private IP address from the specified network interface.
    #   resp = client.unassign_private_ip_addresses({
    #     network_interface_id: "eni-e5aa89a3",
    #     private_ip_addresses: [
    #       "10.0.0.82"
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   nil
    def unassign_private_ip_addresses(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UnassignPrivateIpAddressesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UnassignPrivateIpAddresses.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :unassign_private_ip_addresses,
        tracer: tracer
      )
      Telemetry::UnassignPrivateIpAddresses.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unassign_private_ip_addresses] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#unassign_private_ip_addresses] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unassign_private_ip_addresses] #{output.data}")
        output
      end
    end

    # <p>Unassigns secondary private IPv4 addresses from a private NAT gateway. You cannot unassign your primary private IP. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-edit-secondary">Edit secondary IP address associations</a> in the <i>Amazon VPC User Guide</i>.</p>
    #          <p>While unassigning is in progress, you cannot assign/unassign additional IP addresses while the connections are being drained. You are, however, allowed to delete the NAT gateway.</p>
    #          <p>A private IP address will only be released at the end of MaxDrainDurationSeconds. The
    #             private IP addresses stay associated and support the existing connections, but do not
    #             support any new connections (new connections are distributed across the remaining
    #             assigned private IP address). After the existing connections drain out, the private IP
    #             addresses are released.</p>
    #          <p></p>
    #          <p></p>
    # @param [Hash | Types::UnassignPrivateNatGatewayAddressInput] params
    #   Request parameters for this operation.
    #   See {Types::UnassignPrivateNatGatewayAddressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.unassign_private_nat_gateway_address(
    #     nat_gateway_id: 'NatGatewayId', # required
    #     private_ip_addresses: [
    #       'member'
    #     ], # required
    #     max_drain_duration_seconds: 1,
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::UnassignPrivateNatGatewayAddressOutput
    #   resp.data.nat_gateway_id #=> String
    #   resp.data.nat_gateway_addresses #=> Array<NatGatewayAddress>
    #   resp.data.nat_gateway_addresses[0] #=> Types::NatGatewayAddress
    #   resp.data.nat_gateway_addresses[0].allocation_id #=> String
    #   resp.data.nat_gateway_addresses[0].network_interface_id #=> String
    #   resp.data.nat_gateway_addresses[0].private_ip #=> String
    #   resp.data.nat_gateway_addresses[0].public_ip #=> String
    #   resp.data.nat_gateway_addresses[0].association_id #=> String
    #   resp.data.nat_gateway_addresses[0].is_primary #=> Boolean
    #   resp.data.nat_gateway_addresses[0].failure_message #=> String
    #   resp.data.nat_gateway_addresses[0].status #=> String, one of ["assigning", "unassigning", "associating", "disassociating", "succeeded", "failed"]
    def unassign_private_nat_gateway_address(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UnassignPrivateNatGatewayAddressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UnassignPrivateNatGatewayAddress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :unassign_private_nat_gateway_address,
        tracer: tracer
      )
      Telemetry::UnassignPrivateNatGatewayAddress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unassign_private_nat_gateway_address] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#unassign_private_nat_gateway_address] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unassign_private_nat_gateway_address] #{output.data}")
        output
      end
    end

    # <p>Unlocks a snapshot that is locked in governance mode or that is locked in compliance mode
    #       but still in the cooling-off period. You can't unlock a snapshot that is locked in compliance
    #       mode after the cooling-off period has expired.</p>
    # @param [Hash | Types::UnlockSnapshotInput] params
    #   Request parameters for this operation.
    #   See {Types::UnlockSnapshotInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.unlock_snapshot(
    #     snapshot_id: 'SnapshotId', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::UnlockSnapshotOutput
    #   resp.data.snapshot_id #=> String
    def unlock_snapshot(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UnlockSnapshotInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UnlockSnapshot.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :unlock_snapshot,
        tracer: tracer
      )
      Telemetry::UnlockSnapshot.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unlock_snapshot] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#unlock_snapshot] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unlock_snapshot] #{output.data}")
        output
      end
    end

    # <p>Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring
    #                 your instances and volumes</a> in the
    #             <i>Amazon EC2 User Guide</i>.</p>
    # @param [Hash | Types::UnmonitorInstancesInput] params
    #   Request parameters for this operation.
    #   See {Types::UnmonitorInstancesInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.unmonitor_instances(
    #     instance_ids: [
    #       'member'
    #     ], # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::UnmonitorInstancesOutput
    #   resp.data.instance_monitorings #=> Array<InstanceMonitoring>
    #   resp.data.instance_monitorings[0] #=> Types::InstanceMonitoring
    #   resp.data.instance_monitorings[0].instance_id #=> String
    #   resp.data.instance_monitorings[0].monitoring #=> Types::Monitoring
    #   resp.data.instance_monitorings[0].monitoring.state #=> String, one of ["disabled", "disabling", "enabled", "pending"]
    def unmonitor_instances(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UnmonitorInstancesInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UnmonitorInstances.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :unmonitor_instances,
        tracer: tracer
      )
      Telemetry::UnmonitorInstances.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unmonitor_instances] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#unmonitor_instances] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#unmonitor_instances] #{output.data}")
        output
      end
    end

    # <p>Updates the description of an egress (outbound) security group rule. You
    # 			can replace an existing description, or add a description to a rule that did not have one
    # 			previously. You can remove a description for a security group rule by omitting the
    # 			description parameter in the request.</p>
    # @param [Hash | Types::UpdateSecurityGroupRuleDescriptionsEgressInput] params
    #   Request parameters for this operation.
    #   See {Types::UpdateSecurityGroupRuleDescriptionsEgressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.update_security_group_rule_descriptions_egress(
    #     dry_run: false,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_rule_descriptions: [
    #       {
    #         security_group_rule_id: 'SecurityGroupRuleId',
    #         description: 'Description'
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::UpdateSecurityGroupRuleDescriptionsEgressOutput
    #   resp.data.return #=> Boolean
    # @example To update an outbound security group rule description
    #   # This example updates the description for the specified security group rule.
    #   resp = client.update_security_group_rule_descriptions_egress({
    #     group_id: "sg-123abc12",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 80,
    #         to_port: 80,
    #         ip_ranges: [
    #           {
    #             cidr_ip: "203.0.113.0/24",
    #             description: "Outbound HTTP access to server 2"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def update_security_group_rule_descriptions_egress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UpdateSecurityGroupRuleDescriptionsEgressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UpdateSecurityGroupRuleDescriptionsEgress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :update_security_group_rule_descriptions_egress,
        tracer: tracer
      )
      Telemetry::UpdateSecurityGroupRuleDescriptionsEgress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#update_security_group_rule_descriptions_egress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#update_security_group_rule_descriptions_egress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#update_security_group_rule_descriptions_egress] #{output.data}")
        output
      end
    end

    # <p>Updates the description of an ingress (inbound) security group rule. You can replace an
    # 			existing description, or add a description to a rule that did not have one previously.
    # 		    You can remove a description for a security group rule by omitting the description
    # 		    parameter in the request.</p>
    # @param [Hash | Types::UpdateSecurityGroupRuleDescriptionsIngressInput] params
    #   Request parameters for this operation.
    #   See {Types::UpdateSecurityGroupRuleDescriptionsIngressInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.update_security_group_rule_descriptions_ingress(
    #     dry_run: false,
    #     group_id: 'GroupId',
    #     group_name: 'GroupName',
    #     ip_permissions: [
    #       {
    #         from_port: 1,
    #         ip_protocol: 'IpProtocol',
    #         ip_ranges: [
    #           {
    #             cidr_ip: 'CidrIp',
    #             description: 'Description'
    #           }
    #         ],
    #         ipv6_ranges: [
    #           {
    #             cidr_ipv6: 'CidrIpv6',
    #             description: 'Description'
    #           }
    #         ],
    #         prefix_list_ids: [
    #           {
    #             description: 'Description',
    #             prefix_list_id: 'PrefixListId'
    #           }
    #         ],
    #         to_port: 1,
    #         user_id_group_pairs: [
    #           {
    #             description: 'Description',
    #             group_id: 'GroupId',
    #             group_name: 'GroupName',
    #             peering_status: 'PeeringStatus',
    #             user_id: 'UserId',
    #             vpc_id: 'VpcId',
    #             vpc_peering_connection_id: 'VpcPeeringConnectionId'
    #           }
    #         ]
    #       }
    #     ],
    #     security_group_rule_descriptions: [
    #       {
    #         security_group_rule_id: 'SecurityGroupRuleId',
    #         description: 'Description'
    #       }
    #     ]
    #   )
    # @example Response structure
    #   resp.data #=> Types::UpdateSecurityGroupRuleDescriptionsIngressOutput
    #   resp.data.return #=> Boolean
    # @example To update an inbound security group rule description
    #   # This example updates the description for the specified security group rule.
    #   resp = client.update_security_group_rule_descriptions_ingress({
    #     group_id: "sg-123abc12",
    #     ip_permissions: [
    #       {
    #         ip_protocol: "tcp",
    #         from_port: 22,
    #         to_port: 22,
    #         ip_ranges: [
    #           {
    #             cidr_ip: "203.0.113.0/16",
    #             description: "SSH access from the LA office"
    #           }
    #         ]
    #       }
    #     ]
    #   })
    #
    #   # resp.to_h outputs the following:
    #   {}
    def update_security_group_rule_descriptions_ingress(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::UpdateSecurityGroupRuleDescriptionsIngressInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::UpdateSecurityGroupRuleDescriptionsIngress.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :update_security_group_rule_descriptions_ingress,
        tracer: tracer
      )
      Telemetry::UpdateSecurityGroupRuleDescriptionsIngress.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#update_security_group_rule_descriptions_ingress] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#update_security_group_rule_descriptions_ingress] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#update_security_group_rule_descriptions_ingress] #{output.data}")
        output
      end
    end

    # <p>Stops advertising an address range that is provisioned as an address pool.</p>
    #          <p>You can perform this operation at most once every 10 seconds, even if you specify different
    #          address ranges each time.</p>
    #          <p>It can take a few minutes before traffic to the specified addresses stops routing to Amazon Web Services
    #           because of BGP propagation delays.</p>
    # @param [Hash | Types::WithdrawByoipCidrInput] params
    #   Request parameters for this operation.
    #   See {Types::WithdrawByoipCidrInput#initialize} for available parameters.
    # @param [Hash] options
    #   Request option override of configuration. See {Config#initialize} for available options.
    #   Some configurations cannot be overridden.
    # @return [Hearth::Output]
    # @example Request syntax with placeholder values
    #   resp = client.withdraw_byoip_cidr(
    #     cidr: 'Cidr', # required
    #     dry_run: false
    #   )
    # @example Response structure
    #   resp.data #=> Types::WithdrawByoipCidrOutput
    #   resp.data.byoip_cidr #=> Types::ByoipCidr
    #   resp.data.byoip_cidr.cidr #=> String
    #   resp.data.byoip_cidr.description #=> String
    #   resp.data.byoip_cidr.asn_associations #=> Array<AsnAssociation>
    #   resp.data.byoip_cidr.asn_associations[0] #=> Types::AsnAssociation
    #   resp.data.byoip_cidr.asn_associations[0].asn #=> String
    #   resp.data.byoip_cidr.asn_associations[0].cidr #=> String
    #   resp.data.byoip_cidr.asn_associations[0].status_message #=> String
    #   resp.data.byoip_cidr.asn_associations[0].state #=> String, one of ["disassociated", "failed-disassociation", "failed-association", "pending-disassociation", "pending-association", "associated"]
    #   resp.data.byoip_cidr.status_message #=> String
    #   resp.data.byoip_cidr.state #=> String, one of ["advertised", "deprovisioned", "failed-deprovision", "failed-provision", "pending-deprovision", "pending-provision", "provisioned", "provisioned-not-publicly-advertisable"]
    #   resp.data.byoip_cidr.network_border_group #=> String
    def withdraw_byoip_cidr(params = {}, options = {})
      response_body = ::StringIO.new
      config = operation_config(options)
      tracer = config.telemetry_provider.tracer_provider.tracer('aws.sdk.ec2.client')
      input = Params::WithdrawByoipCidrInput.build(params, context: 'params')
      stack = AWS::SDK::EC2::Middleware::WithdrawByoipCidr.build(config)
      context = Hearth::Context.new(
        request: Hearth::HTTP::Request.new(uri: URI('')),
        response: Hearth::HTTP::Response.new(body: response_body),
        config: config,
        operation_name: :withdraw_byoip_cidr,
        tracer: tracer
      )
      Telemetry::WithdrawByoipCidr.span(context) do
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#withdraw_byoip_cidr] params: #{params}, options: #{options}")
        output = stack.run(input, context)
        if output.error
          context.config.logger.error("[#{context.invocation_id}] [#{self.class}#withdraw_byoip_cidr] #{output.error} (#{output.error.class})")
          raise output.error
        end
        context.config.logger.info("[#{context.invocation_id}] [#{self.class}#withdraw_byoip_cidr] #{output.data}")
        output
      end
    end
  end
end
